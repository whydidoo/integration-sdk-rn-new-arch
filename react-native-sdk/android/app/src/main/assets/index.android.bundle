/******/ var self = self || this || new Function("return this")() || ({}); // repackGlobal'
/******/
(function() { // webpackBootstrap
var __webpack_modules__ = ({
79909: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
var _interop_require_default = __webpack_require__(66705);
var _reactnative = __webpack_require__(22705);
var _App = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49402));
var _appjson = __webpack_require__(93359);
_reactnative.AppRegistry.registerComponent(_appjson.name, ()=>_App.default);


}),
3135: (function () {
// Empty module as a target for NormalModuleReplacementPlugin.
//# sourceMappingURL=EmptyModule.js.map


}),
90503: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var RepackCorePlugin = ()=>({
        name: 'repack-core-plugin',
        loadEntry: /*#__PURE__*/ function() {
            var _ref = _async_to_generator._(function*(ref) {
                var remoteInfo = ref.remoteInfo;
                var client = __webpack_require__(13775);
                var ScriptManager = client.ScriptManager, getWebpackContext = client.getWebpackContext;
                var entry = remoteInfo.entry, entryGlobalName = remoteInfo.entryGlobalName;
                try {
                    yield ScriptManager.shared.loadScript(entryGlobalName, undefined, getWebpackContext(), entry);
                    // @ts-ignore
                    if (!globalThis[entryGlobalName]) {
                        throw new Error();
                    }
                    // @ts-ignore
                    return globalThis[entryGlobalName];
                } catch  {
                    console.error(`Failed to load remote entry: ${entryGlobalName}`);
                }
            });
            return function(_) {
                return _ref.apply(this, arguments);
            };
        }(),
        generatePreloadAssets: /*#__PURE__*/ _async_to_generator._(function*() {
            // noop for compatibility
            return Promise.resolve({
                cssAssets: [],
                jsAssetsWithoutEntry: [],
                entryAssets: []
            });
        })
    });
var _default = RepackCorePlugin;


}),
11433: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _to_consumable_array = __webpack_require__(92716);
function getAssetName(asset) {
    // remove the extension from the asset name
    return asset.split('.')[0];
}
function getAssetUrl(asset) {
    // create placeholder reference url for the asset
    return 'prefetch:///' + asset;
}
function prefetchAsset(asset) {
    var client = __webpack_require__(13775);
    var ScriptManager = client.ScriptManager, getWebpackContext = client.getWebpackContext;
    // caller should be undefined when fetching/loading the remote entry container
    var caller = asset.name === asset.remoteName ? undefined : asset.remoteName;
    return ScriptManager.shared.prefetchScript(asset.name, caller, getWebpackContext(), asset.url);
}
var RepackPrefetchPlugin = ()=>({
        name: 'repack-prefetch-plugin',
        generatePreloadAssets: /*#__PURE__*/ function() {
            var _ref = _async_to_generator._(function*(args) {
                var preloadConfig = args.preloadOptions.preloadConfig;
                var remoteName = preloadConfig.nameOrAlias;
                var remoteSnapshot = args.remoteSnapshot;
                if (preloadConfig.depsRemote !== false) {
                    console.warn('[RepackPrefetchPlugin] ' + 'The depsRemote configuration option is not implemented yet. ' + 'This setting will be ignored and will have no effect. ' + 'You can hide this warning by setting depsRemote explicitly to false.');
                }
                function handleAssets(assets) {
                    return assets.map((asset)=>({
                            name: getAssetName(asset),
                            remoteName,
                            url: getAssetUrl(asset)
                        }));
                }
                var assets = [];
                if ('modules' in remoteSnapshot) {
                    for (var exposedModule of remoteSnapshot.modules){
                        if (preloadConfig.exposes) {
                            if (!preloadConfig.exposes.includes(exposedModule.moduleName)) {
                                continue;
                            }
                        }
                        if (preloadConfig.resourceCategory === 'all') {
                            var _assets, _assets1;
                            (_assets = assets).push.apply(_assets, _to_consumable_array._(handleAssets(exposedModule.assets.js.async)));
                            (_assets1 = assets).push.apply(_assets1, _to_consumable_array._(handleAssets(exposedModule.assets.js.sync)));
                        } else if (preloadConfig.resourceCategory === 'sync') {
                            var _assets2;
                            (_assets2 = assets).push.apply(_assets2, _to_consumable_array._(handleAssets(exposedModule.assets.js.sync)));
                        }
                    }
                    if (preloadConfig.filter) {
                        assets = assets.filter((asset)=>preloadConfig.filter(asset.name));
                    }
                    assets.unshift({
                        name: remoteSnapshot.globalName,
                        remoteName: remoteSnapshot.globalName,
                        url: getAssetUrl(remoteSnapshot.remoteEntry)
                    });
                }
                yield Promise.all(assets.map(prefetchAsset));
                // noop for compatibility
                return Promise.resolve({
                    cssAssets: [],
                    jsAssetsWithoutEntry: [],
                    entryAssets: []
                });
            });
            return function(args) {
                return _ref.apply(this, arguments);
            };
        }()
    });
var _default = RepackPrefetchPlugin;


}),
15847: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _object_spread = __webpack_require__(36192);
var createScriptLocator = /*#__PURE__*/ function() {
    var _ref = _async_to_generator._(function*(entryUrl, config) {
        if (typeof config === 'function') {
            var locator = yield config(entryUrl);
            return locator;
        }
        if (typeof config === 'object') {
            return _object_spread._({
                url: entryUrl
            }, config);
        }
        return {
            url: entryUrl
        };
    });
    return function createScriptLocator(entryUrl, config) {
        return _ref.apply(this, arguments);
    };
}();
var getPublicPath = (url)=>{
    return url.split('/').slice(0, -1).join('/');
};
var getAssetPath = (url)=>{
    var assetPath = url.split(getPublicPath(url))[1];
    // normalize by removing leading slash
    return assetPath.startsWith('/') ? assetPath.slice(1) : assetPath;
};
var rebaseRemoteUrl = (from, to)=>{
    var assetPath = getAssetPath(from);
    var publicPath = getPublicPath(to);
    return [
        publicPath,
        assetPath
    ].join('/');
};
var registerResolver = /*#__PURE__*/ function() {
    var _ref = _async_to_generator._(function*(remoteInfo, config) {
        // when ScriptManager.shared.resolveScript is called, registerResolver
        // should evaluate before it and and the resolver will be registered
        // before any remote script is resolved
        var ScriptManager = (yield Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 13775, 23))).ScriptManager;
        // when manifest is used, the valid entry URL comes from the version field
        // otherwise, the entry URL comes from the entry field which has the correct publicPath for the remote set
        var entryUrl;
        if ('version' in remoteInfo && remoteInfo.version) {
            entryUrl = remoteInfo.version;
        } else if ('entry' in remoteInfo) {
            entryUrl = remoteInfo.entry;
        }
        if (!entryUrl) {
            throw new Error('[RepackResolverPlugin] Cannot determine entry URL for remote: ' + remoteInfo.name);
        }
        ScriptManager.shared.addResolver(/*#__PURE__*/ function() {
            var _ref = _async_to_generator._(function*(scriptId, caller, referenceUrl) {
                if (scriptId === remoteInfo.name || caller === remoteInfo.name) {
                    // referenceUrl should always be present and this should never happen
                    if (!referenceUrl) {
                        throw new Error('[RepackResolverPlugin] Reference URL is missing');
                    }
                    var url = rebaseRemoteUrl(referenceUrl, entryUrl);
                    var locator = yield createScriptLocator(url, config);
                    return locator;
                }
            });
            return function(scriptId, caller, referenceUrl) {
                return _ref.apply(this, arguments);
            };
        }(), {
            key: remoteInfo.name
        });
    });
    return function registerResolver(remoteInfo, config) {
        return _ref.apply(this, arguments);
    };
}();
var RepackResolverPlugin = (config)=>({
        name: 'repack-resolver-plugin',
        registerRemote: (args)=>{
            // asynchronously add a resolver for the remote
            registerResolver(args.remote, config);
            return args;
        }
    });
var _default = RepackResolverPlugin;


}),
8522: (function () {
/*
 * This module is added as an entry module to prevent stripping of these React Native deep imports from the bundle.
 * We use require.resolve from Rspack/Webpack to ensure these modules are included even if not directly used.
 * This allows us to include the modules into the bundle without evaluating them.
 * These modules are required by assetsLoader and should be shared as deep imports when using ModuleFederation.
 */ /*require.resolve*/(94639);
/*require.resolve*/(59990); //# sourceMappingURL=IncludeModules.js.map


}),
89614: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
var _ScriptManager = __webpack_require__(26255);
_ScriptManager.ScriptManager.init(); //# sourceMappingURL=InitializeScriptManager.js.map


}),
83572: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Script", ({
    enumerable: true,
    get: function() {
        return Script;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _shallowequal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1120));
var _NativeScriptManager = __webpack_require__(66656);
var Script = /*#__PURE__*/ function() {
    "use strict";
    function Script(scriptId, caller, locator, ref) {
        var cache = ref === void 0 ? true : ref;
        _class_call_check._(this, Script);
        this.scriptId = scriptId;
        this.caller = caller;
        this.locator = locator;
        this.cache = cache;
    }
    _create_class._(Script, [
        {
            /**
   * Check if the script was already cached and cache should be updated with new data.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "shouldUpdateCache",
            value: function shouldUpdateCache(cachedData) {
                if (!this.cache || !cachedData) {
                    return false;
                }
                return this.checkIfCacheDataOutdated(cachedData);
            }
        },
        {
            /**
   * Check if the script should be fetched again or reused,
   * based on previous cached data.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "shouldRefetch",
            value: function shouldRefetch(cachedData) {
                if (!this.cache) {
                    return true;
                }
                return this.checkIfCacheDataOutdated(cachedData);
            }
        },
        {
            /**
   * Check if previous cached data is the same as the new one.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "checkIfCacheDataOutdated",
            value: function checkIfCacheDataOutdated(cachedData) {
                return cachedData.method !== this.locator.method || cachedData.url !== this.locator.url || cachedData.query !== this.locator.query || !(0, _shallowequal.default)(cachedData.headers, this.locator.headers) || cachedData.body !== this.locator.body;
            }
        },
        {
            /**
   * Get object to store in cache.
   *
   * @internal
   */ key: "getCacheData",
            value: function getCacheData() {
                return {
                    method: this.locator.method,
                    url: this.locator.url,
                    query: this.locator.query,
                    headers: this.locator.headers,
                    body: this.locator.body
                };
            }
        },
        {
            key: "toObject",
            value: function toObject() {
                return {
                    scriptId: this.scriptId,
                    caller: this.caller,
                    locator: this.locator,
                    cache: this.cache
                };
            }
        }
    ], [
        {
            key: "getDevServerURL",
            value: /**
   * Get URL of a script hosted on development server.
   *
   * @param scriptId Id of the script.
   */ function getDevServerURL(scriptId) {
                return (webpackContext)=>`${webpackContext.p}${webpackContext.u(scriptId)}`;
            }
        },
        {
            key: "getFileSystemURL",
            value: /**
   * Get URL of a script stored on filesystem on the target mobile device.
   *
   * @param scriptId Id of the script.
   */ function getFileSystemURL(scriptId) {
                return (webpackContext)=>webpackContext.u(`file:///${scriptId}`);
            }
        },
        {
            key: "getRemoteURL",
            value: /**
   * Get URL of a script hosted on a remote server.
   *
   * By default `.chunk.bundle` extension will be added to the URL.
   * If your script has different extension, you should pass `{ excludeExtension: true }` as 2nd argument.
   *
   * @param url A URL to remote location where the script is stored.
   * @param options Additional options.
   */ function getRemoteURL(url, ref) {
                var options = ref === void 0 ? {} : ref;
                if (options.excludeExtension) {
                    return url;
                }
                return (webpackContext)=>webpackContext.u(url);
            }
        },
        {
            key: "getScriptUniqueId",
            value: /**
   * Get unique identifier for the script.
   *
   * Used to create unique identifier for the script, which serves as its key in the cache.
   *
   * @param scriptId Id of the script.
   * @param caller Optional caller name to prefix the script id.
   */ function getScriptUniqueId(scriptId, caller) {
                var prefix = caller ? caller + '_' : '';
                return prefix + scriptId;
            }
        },
        {
            key: "from",
            value: /**
   * Create new instance of `Script` from non-normalized script locator data.
   *
   * @param locator Non-normalized locator data.
   * @param fetch Initial flag for whether script should be fetched or not.
   *
   * @internal
   */ function from(key, locator, fetch) {
                var headers = {};
                new Headers(locator.headers).forEach((value, key)=>{
                    headers[key.toLowerCase()] = value;
                });
                var uniqueId = Script.getScriptUniqueId(key.scriptId, key.caller);
                var body;
                if (locator.body instanceof FormData) {
                    var bodyObject = {};
                    locator.body.forEach((value, key)=>{
                        if (typeof value === 'string') {
                            bodyObject[key] = value;
                        } else {
                            console.warn('Script does not support File as FormData key in body');
                        }
                    });
                    body = JSON.stringify(bodyObject);
                } else if (locator.body instanceof URLSearchParams) {
                    var bodyObject1 = {};
                    locator.body.forEach((value, key)=>{
                        bodyObject1[key] = value;
                    });
                    body = JSON.stringify(bodyObject1);
                } else {
                    body = locator.body ?? undefined;
                }
                if (typeof locator.url === 'function') {
                    throw new Error('Property url as a function is not support');
                }
                return new Script(key.scriptId, key.caller, {
                    uniqueId,
                    method: locator.method ?? _NativeScriptManager.NormalizedScriptLocatorHTTPMethod.GET,
                    url: locator.url,
                    absolute: locator.absolute ?? false,
                    timeout: locator.timeout ?? Script.DEFAULT_TIMEOUT,
                    retry: locator.retry,
                    retryDelay: locator.retryDelay,
                    query: new URLSearchParams(locator.query).toString() || undefined,
                    body,
                    headers: Object.keys(headers).length ? headers : undefined,
                    fetch: locator.cache === false ? true : fetch,
                    verifyScriptSignature: locator.verifyScriptSignature ?? _NativeScriptManager.NormalizedScriptLocatorSignatureVerificationMode.OFF
                }, locator.cache);
            }
        }
    ]);
    return Script;
} //# sourceMappingURL=Script.js.map
();
Script.DEFAULT_TIMEOUT = 30000 // 30s
;


}),
26255: (function (__unused_webpack_module, exports, __webpack_require__) {
// biome-ignore lint/style/useNodejsImportProtocol: use 'events' module instead of node builtin
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ScriptManager", ({
    enumerable: true,
    get: function() {
        return ScriptManager;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _events = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96014));
var _tapable = __webpack_require__(26898);
var _NativeScriptManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66656));
var _Script = __webpack_require__(83572);
var _getWebpackContext = __webpack_require__(65495);
var DEFAULT_RESOLVER_PRIORITY = 2;
var DEFAULT_RESOLVER_KEY = '__default__';
var CACHE_NAME = 'Repack.ScriptManager.Cache';
var CACHE_VERSION = 'v4';
var CACHE_ENV =  false ? 0 : 'release';
var CACHE_KEY = [
    CACHE_NAME,
    CACHE_VERSION,
    CACHE_ENV
].join('.');
var LOADING_ERROR_CODES = [
    // android
    'NetworkFailure',
    'RequestFailure',
    // ios
    'ScriptDownloadFailure'
];
function promisify(fn) {
    return /*#__PURE__*/ _async_to_generator._(function*(...args) {
        return fn.apply(void 0, _to_consumable_array._(args));
    });
}
var ScriptManager = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(ScriptManager, EventEmitter);
    function ScriptManager(ref) {
        var nativeScriptManager = ref === void 0 ? _NativeScriptManager.default : ref;
        _class_call_check._(this, ScriptManager);
        var _this;
        _this = _call_super._(this, ScriptManager), _this.cache = {}, _this.scriptsPromises = {}, _this.cacheInitialized = false, _this.resolvers = [], _this.hookMap = {
            beforeResolve: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            resolve: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            afterResolve: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            errorResolve: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            beforeLoad: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            load: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            afterLoad: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            errorLoad: new _tapable.AsyncSeriesBailHook([
                'args'
            ])
        }, _this.hooks = {
            beforeResolve: (fn)=>_this.hookMap.beforeResolve.tapPromise('beforeResolve', promisify(fn)),
            resolve: (fn)=>_this.hookMap.resolve.tapPromise('resolve', promisify(fn)),
            afterResolve: (fn)=>_this.hookMap.afterResolve.tapPromise('afterResolve', promisify(fn)),
            errorResolve: (fn)=>_this.hookMap.errorResolve.tapPromise('errorResolve', promisify(fn)),
            beforeLoad: (fn)=>_this.hookMap.beforeLoad.tapPromise('beforeLoad', promisify(fn)),
            load: (fn)=>_this.hookMap.load.tapPromise('load', promisify(fn)),
            afterLoad: (fn)=>_this.hookMap.afterLoad.tapPromise('afterLoad', promisify(fn)),
            errorLoad: (fn)=>_this.hookMap.errorLoad.tapPromise('errorLoad', promisify(fn))
        };
        _this.nativeScriptManager = nativeScriptManager;
        if (!nativeScriptManager) {
            throw new Error('repack react-native module was not found.' + ( false ? 0 : ''));
        }
        if (__webpack_require__.repack.shared.scriptManager) {
            throw new Error('ScriptManager was already instantiated. Use ScriptManager.shared instead.');
        }
        __webpack_require__.repack.shared.scriptManager = _this;
        return _this;
    }
    _create_class._(ScriptManager, [
        {
            /**
   * Sets a storage backend to cache resolved scripts locator data.
   *
   * The stored data is used to detect if scripts locator data of previously downloaded
   * script hasn't changed to avoid over-fetching the script.
   *
   * @param storage Implementation of storage functions.
   */ key: "setStorage",
            value: function setStorage(storage) {
                this.storage = storage;
            }
        },
        {
            /**
   * Adds new script locator resolver.
   *
   * Resolver is an async function to resolve script locator data - in other words, it's a function to
   * tell the {@link ScriptManager} how to fetch the script.
   *
   * There's no limitation on what logic you can run inside this function - it can include:
   * - fetching/loading remote config
   * - fetching/loading feature flags
   * - fetching/loading A/B testing data
   * - calling native modules
   * - running arbitrary logic
   *
   * @param resolver Resolver function to add.
   * @param options Resolver options.
   */ key: "addResolver",
            value: function addResolver(resolver, ref) {
                var options = ref === void 0 ? {} : ref;
                var priority = options.priority ?? DEFAULT_RESOLVER_PRIORITY;
                var uniqueKey = options.key;
                this.resolvers = this.resolvers.filter((ref)=>{
                    var _ref = _sliced_to_array._(ref, 1), key = _ref[0];
                    return key !== uniqueKey;
                }).concat([
                    [
                        uniqueKey ?? DEFAULT_RESOLVER_KEY,
                        priority,
                        resolver
                    ]
                ]).sort((ref, ref1)=>{
                    var _ref = _sliced_to_array._(ref, 2), a = _ref[1], _ref1 = _sliced_to_array._(ref1, 2), b = _ref1[1];
                    return Number(b) - Number(a);
                });
            }
        },
        {
            /**
   * Removes previously added resolver.
   *
   * @param resolver Resolver function or resolver's `uniqueKey` to remove.
   * @returns `true` if resolver was found and removed, `false` otherwise.
   */ key: "removeResolver",
            value: function removeResolver(resolver) {
                var index;
                if (typeof resolver === 'string') {
                    index = this.resolvers.findIndex((ref)=>{
                        var _ref = _sliced_to_array._(ref, 1), key = _ref[0];
                        return key === resolver;
                    });
                } else {
                    index = this.resolvers.findIndex((ref)=>{
                        var _ref = _sliced_to_array._(ref, 3), item = _ref[2];
                        return item === resolver;
                    });
                }
                if (index > -1) {
                    this.resolvers.splice(index, 1);
                    return true;
                }
                return false;
            }
        },
        {
            /**
   * Removes all previously added resolvers.
   */ key: "removeAllResolvers",
            value: function removeAllResolvers() {
                this.resolvers = [];
            }
        },
        {
            key: "initCache",
            value: function initCache() {
                var _this = this;
                return _async_to_generator._(function*() {
                    if (!_this.cacheInitialized) {
                        var _this_storage;
                        var cacheEntry = yield (_this_storage = _this.storage) === null || _this_storage === void 0 ? void 0 : _this_storage.getItem(CACHE_KEY);
                        _this.cache = cacheEntry ? JSON.parse(cacheEntry) : {};
                        _this.cacheInitialized = true;
                    }
                })();
            }
        },
        {
            key: "saveCache",
            value: function saveCache() {
                var _this = this;
                return _async_to_generator._(function*() {
                    var _this_storage;
                    yield (_this_storage = _this.storage) === null || _this_storage === void 0 ? void 0 : _this_storage.setItem(CACHE_KEY, JSON.stringify(_this.cache));
                })();
            }
        },
        {
            key: "handleError",
            value: function handleError(error, message, ...args) {
                var _console;
                (_console = console).error.apply(_console, [
                    message
                ].concat(_to_consumable_array._(args), [
                    {
                        originalError: error
                    }
                ]));
                this.emit('error', {
                    message,
                    args,
                    originalError: error
                });
                throw error;
            }
        },
        {
            key: "resolveScript",
            value: /**
   * Resolves a {@link Script} instance with normalized locator data.
   *
   * Resolution will use previously added (via `ScriptManager.shared.addResolver(...)`) resolvers
   * in series, util one returns a locator data or will throw if no resolver handled the request.
   *
   * Use `ScriptManager.shared.on('resolving', ({ scriptId, caller }) => { })` to listen for when
   * the script resolution begins.
   *
   * Use `ScriptManager.shared.on('resolved', (script) => { })` to listen for when
   * the script's locator data is resolved.
   *
   * @param scriptId Id of the script to resolve.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ // NOTE: Keep declaration and implementation separate
            // to allow for better naming in JSDocs while preventing
            // using the arguments directly in the implementation
            function resolveScript(__scriptId, __caller, ref, __referenceUrl) {
                var __webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                var _this = this;
                return _async_to_generator._(function*() {
                    var options = {
                        scriptId: __scriptId,
                        caller: __caller,
                        referenceUrl: __referenceUrl,
                        webpackContext: __webpackContext
                    };
                    var locator;
                    try {
                        yield _this.initCache();
                        if (!_this.resolvers.length) {
                            throw new Error('No script resolvers were added. Did you forget to call `ScriptManager.shared.addResolver(...)`?');
                        }
                        if (_this.hookMap.beforeResolve.isUsed()) {
                            options = (yield _this.hookMap.beforeResolve.promise({
                                options
                            })).options;
                        }
                        _this.emit('resolving', {
                            scriptId: options.scriptId,
                            caller: options.caller
                        });
                        if (_this.hookMap.resolve.isUsed()) {
                            // obtain the result from custom implementation through the resolve hook
                            locator = yield _this.hookMap.resolve.promise({
                                options,
                                resolvers: _this.resolvers
                            });
                        } else {
                            // obtain the result from default implementation
                            for (var _$ref of _this.resolvers){
                                var _ref = _sliced_to_array._(_$ref, 3), resolve = _ref[2];
                                var resolvedLocator = yield resolve(options.scriptId, options.caller, options.referenceUrl);
                                if (resolvedLocator) {
                                    locator = resolvedLocator;
                                    break;
                                }
                            }
                        }
                        if (!locator) {
                            throw new Error(`No resolver was able to resolve script ${options.scriptId}`);
                        }
                        if (_this.hookMap.afterResolve.isUsed()) {
                            var _$ref1;
                            _$ref1 = yield _this.hookMap.afterResolve.promise({
                                options,
                                locator
                            }), options = _$ref1.options, locator = _$ref1.locator, _$ref1;
                        }
                        if (typeof locator.url === 'function') {
                            locator.url = locator.url(options.webpackContext);
                        }
                    } catch (error) {
                        locator = yield _this.hookMap.errorResolve.promise({
                            options,
                            error: error
                        });
                        if (!locator) {
                            _this.handleError(error, '[ScriptManager] Failed while resolving script locator:', {
                                scriptId: options.scriptId,
                                caller: options.caller
                            });
                        }
                    }
                    try {
                        var script = yield _this.createScript(options.scriptId, options.caller, locator);
                        _this.emit('resolved', script.toObject());
                        return script;
                    } catch (error) {
                        _this.handleError(error, '[ScriptManager] Failed while creating script:', {
                            scriptId: options.scriptId,
                            caller: options.caller
                        });
                    }
                })();
            }
        },
        {
            key: "createScript",
            value: function createScript(scriptId, caller, locator) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var script = _Script.Script.from({
                        scriptId,
                        caller
                    }, locator, false);
                    var cacheKey = script.locator.uniqueId;
                    // Check if user provided a custom shouldUpdateScript function
                    if (locator.shouldUpdateScript) {
                        // If so, we need to wait for it to resolve
                        var fetch = yield locator.shouldUpdateScript(scriptId, caller, script.shouldUpdateCache(_this.cache[cacheKey]));
                        // If it returns true, we need to fetch the script
                        if (fetch) {
                            script.locator.fetch = true;
                        }
                    } else {
                        // If no custom shouldUpdateScript function was provided, we use the default behaviour
                        if (!_this.cache[cacheKey]) {
                            script.locator.fetch = true;
                        } else if (script.shouldRefetch(_this.cache[cacheKey])) {
                            script.locator.fetch = true;
                        }
                    }
                    return script;
                })();
            }
        },
        {
            key: "updateCache",
            value: function updateCache(script) {
                var _this = this;
                return _async_to_generator._(function*() {
                    if (script.locator.fetch) {
                        var cacheKey = script.locator.uniqueId;
                        _this.cache[cacheKey] = script.getCacheData();
                        yield _this.saveCache();
                    }
                })();
            }
        },
        {
            key: "loadScript",
            value: /**
   * Resolves given script's location, downloads and executes it.
   * The execution of the code is handled internally by threading in React Native.
   *
   * Use `ScriptManager.shared.on('loading', (script) => { })` to listen for when
   * the script is about to be loaded.
   *
   * Use `ScriptManager.shared.on('loaded', (script) => { })` to listen for when
   * the script is loaded.
   *
   * @param scriptId Id of the script to load.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ // NOTE: Keep declaration and implementation separate
            // to allow for better naming in JSDocs while preventing
            // using the arguments directly in the implementation
            function loadScript(__scriptId, __caller, ref, __referenceUrl) {
                var __webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                var _this = this;
                return _async_to_generator._(function*() {
                    var options = {
                        scriptId: __scriptId,
                        caller: __caller,
                        referenceUrl: __referenceUrl,
                        webpackContext: __webpackContext
                    };
                    var loaded = false;
                    var uniqueId = _Script.Script.getScriptUniqueId(options.scriptId, options.caller);
                    if (_this.scriptsPromises[uniqueId]) {
                        var isPrefetch = _this.scriptsPromises[uniqueId].isPrefetch;
                        // prefetch is not execute the script so we need to run loadScript if promise is for prefetch
                        if (isPrefetch) {
                            yield _this.scriptsPromises[uniqueId];
                        } else {
                            return _this.scriptsPromises[uniqueId];
                        }
                    }
                    var loadProcess = /*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*() {
                            var script = yield _this.resolveScript(options.scriptId, options.caller, options.webpackContext, options.referenceUrl);
                            try {
                                if (_this.hookMap.beforeLoad.isUsed()) {
                                    var _$ref;
                                    _$ref = yield _this.hookMap.beforeLoad.promise({
                                        options,
                                        script
                                    }), options = _$ref.options, script = _$ref.script, _$ref;
                                }
                                _this.emit('loading', script.toObject());
                                if (_this.hookMap.load.isUsed()) {
                                    loaded = yield _this.hookMap.load.promise({
                                        options,
                                        script,
                                        loadScript: /*#__PURE__*/ _async_to_generator._(function*(ref, ref1) {
                                            var scriptId = ref === void 0 ? options.scriptId : ref, locator = ref1 === void 0 ? script.locator : ref1;
                                            yield _this.loadScriptWithRetry(scriptId, locator);
                                        })
                                    });
                                } else {
                                    yield _this.loadScriptWithRetry(options.scriptId, script.locator);
                                    loaded = true;
                                }
                                if (_this.hookMap.afterLoad.isUsed()) {
                                    var _$ref1;
                                    _$ref1 = yield _this.hookMap.afterLoad.promise({
                                        options,
                                        script
                                    }), options = _$ref1.options, script = _$ref1.script, _$ref1;
                                }
                                _this.emit('loaded', script.toObject());
                                yield _this.updateCache(script);
                            } catch (error) {
                                var code = error.code;
                                loaded = yield _this.hookMap.errorLoad.promise({
                                    options,
                                    error: error
                                });
                                if (!loaded) {
                                    _this.handleError(error, '[ScriptManager] Failed to load script:', code ? `[${code}]` : '', script.toObject());
                                }
                            } finally{
                                // should delete script promise even script failed
                                delete _this.scriptsPromises[uniqueId];
                            }
                        });
                        return function loadProcess() {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    _this.scriptsPromises[uniqueId] = loadProcess();
                    return _this.scriptsPromises[uniqueId];
                })();
            }
        },
        {
            key: "loadScriptWithRetry",
            value: /**
   * Loads a script with retry logic.
   *
   * This function attempts to load a script using the nativeScriptManager.
   * If the initial attempt fails, it retries the specified number of times
   * with an optional delay between retries.
   *
   * @param {string} scriptId - The ID of the script to load.
   * @param {NormalizedScriptLocator} locator - An NormalizedScriptLocator containing retry configuration.
   * @param {number} [locator.retry=0] - The number of retry attempts.
   * @param {number} [locator.retryDelay=0] - The delay in milliseconds between retries.
   * @throws {Error} Throws an error if all retry attempts fail.
   */ function loadScriptWithRetry(scriptId, locator) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var _locator_retry = locator.retry, retry = _locator_retry === void 0 ? 0 : _locator_retry, _locator_retryDelay = locator.retryDelay, retryDelay = _locator_retryDelay === void 0 ? 0 : _locator_retryDelay;
                    var attempts = retry + 1; // Include the initial attempt
                    while(attempts > 0){
                        try {
                            yield _this.nativeScriptManager.loadScript(scriptId, locator);
                            return; // Successfully loaded the script, exit the loop
                        } catch (error) {
                            attempts--;
                            var code = error.code;
                            if (attempts > 0 && LOADING_ERROR_CODES.includes(code)) {
                                if (retryDelay > 0) {
                                    yield new Promise((resolve)=>setTimeout(resolve, retryDelay));
                                }
                            } else {
                                throw error; // No more retries, throw the error
                            }
                        }
                    }
                })();
            }
        },
        {
            key: "prefetchScript",
            value: /**
   * Resolves given script's location and downloads it without executing.
   * This function can be awaited to detect if the script was downloaded and for error handling.
   *
   * Use `ScriptManager.shared.on('prefetching', (script) => { })` to listen for when
   * the script's prefetch beings.
   *
   * @param scriptId Id of the script to prefetch.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ function prefetchScript(scriptId, caller, ref, referenceUrl) {
                var webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                var _this = this;
                return _async_to_generator._(function*() {
                    var uniqueId = _Script.Script.getScriptUniqueId(scriptId, caller);
                    if (_this.scriptsPromises[uniqueId]) {
                        return _this.scriptsPromises[uniqueId];
                    }
                    var loadProcess = /*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*() {
                            var script = yield _this.resolveScript(scriptId, caller, webpackContext, referenceUrl);
                            try {
                                _this.emit('prefetching', script.toObject());
                                yield _this.nativeScriptManager.prefetchScript(scriptId, script.locator);
                                yield _this.updateCache(script);
                            } catch (error) {
                                var code = error.code;
                                _this.handleError(error, '[ScriptManager] Failed to prefetch script:', code ? `[${code}]` : '', script.toObject());
                            } finally{
                                // should delete script promise even script failed
                                delete _this.scriptsPromises[uniqueId];
                            }
                        });
                        return function loadProcess() {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    _this.scriptsPromises[uniqueId] = loadProcess();
                    _this.scriptsPromises[uniqueId].isPrefetch = true;
                    return _this.scriptsPromises[uniqueId];
                })();
            }
        },
        {
            key: "invalidateScripts",
            value: /**
   * Clears the cache (if configured in {@link ScriptManager.setStorage}) and removes downloaded
   * files for given scripts from the filesystem. This function can be awaited to detect if the
   * scripts were invalidated and for error handling.
   *
   * Use `ScriptManager.shared.on('invalidated', (scriptIds) => { })` to listen for when
   * the invalidation completes.
   *
   * @param scriptIds Array of script ids to clear from cache and remove from filesystem.
   * @returns Array of script ids that were invalidated.
   */ function invalidateScripts(ref) {
                var scriptIds = ref === void 0 ? [] : ref;
                var _this = this;
                return _async_to_generator._(function*() {
                    try {
                        yield _this.initCache();
                        var ids = scriptIds.length ? scriptIds : Object.keys(_this.cache);
                        ids.forEach((scriptId)=>{
                            delete _this.cache[scriptId];
                            delete _this.scriptsPromises[scriptId];
                        });
                        yield _this.saveCache();
                        yield _this.nativeScriptManager.invalidateScripts(scriptIds);
                        _this.emit('invalidated', ids);
                        return ids;
                    } catch (error) {
                        var code = error.code;
                        _this.handleError(error, '[ScriptManager] Failed to invalidate scripts:', code ? `[${code}]` : '');
                    }
                })();
            }
        },
        {
            /**
   * Evaluates a script synchronously.
   *
   * This function sends the script source and its URL to the native script manager for evaluation.
   * It is functionally identical to `globalEvalWithSourceUrl`.
   *
   * @param scriptSource The source code of the script to evaluate.
   * @param scriptSourceUrl The URL of the script source, used for debugging purposes.
   */ key: "unstable_evaluateScript",
            value: function unstable_evaluateScript(scriptSource, scriptSourceUrl) {
                this.nativeScriptManager.unstable_evaluateScript(scriptSource, scriptSourceUrl);
            }
        }
    ], [
        {
            key: "init",
            value: function init() {
                if (!__webpack_require__.repack.shared.scriptManager) {
                    __webpack_require__.repack.shared.scriptManager = new ScriptManager();
                }
            }
        },
        {
            key: "shared",
            get: function() {
                return __webpack_require__.repack.shared.scriptManager;
            }
        }
    ]);
    return ScriptManager;
} //# sourceMappingURL=ScriptManager.js.map
(_events.default);


}),
41855: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Federated", ({
    enumerable: true,
    get: function() {
        return Federated;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _ScriptManager = __webpack_require__(26255);
var Federated;
(function(_Federated) {
    /**
   * @deprecated
   *
   * Resolves URL to a container or a chunk when using Module Federation,
   * based on given `scriptId` and `caller`.
   */ /**
   * @deprecated
   *
   * Configuration options for {@link createURLResolver} for Module Federation.
   * Allows to configure how created {@link URLResolver} will behave.
   */ /**
   * @deprecated
   *
   * Creates URL resolver for Module Federation from provided config.
   *
   * @example
   * ```ts
   * import { ScriptManager, Script, Federated } from '@callstack/repack/client';
   *
   * const resolveURL = Federated.createURLResolver({
   *   containers: {
   *     app1: 'http://localhost:9001/[name][ext]',
   *     app2: 'http://localhost:9002/[name].container.js',
   *   },
   *   chunks: {
   *     app2: 'http://localhost:9002/chunks/[name][ext]',
   *   },
   * });
   *
   * ScriptManager.shared.addResolver(async (scriptId, caller) => {
   *   let url;
   *   if (caller === 'main') {
   *     url = __DEV__
   *       ? Script.getDevServerURL(scriptId)
   *       : Script.getRemoteURL(`http://localhost:9000/${scriptId}`);
   *   } else {
   *     url = resolveURL(scriptId, caller);
   *   }
   *
   *   if (!url) {
   *     return undefined;
   *   }
   *
   *   return {
   *     url,
   *     query: {
   *       platform: Platform.OS,
   *     },
   *   };
   * });
   * ```
   *
   * `createURLResolver` is a abstraction over {@link Script.getRemoteURL},
   * for example:
   * ```ts
   * import { ScriptManager, Federated } from '@callstack/repack/client';
   *
   * ScriptManager.shared.addResolver((scriptId, caller) => {
   *   const resolveURL = Federated.createURLResolver({
   *     containers: {
   *       app1: 'http://localhost:9000/[name][ext]',
   *     },
   *   });
   *
   *   return {
   *     url: resolveURL(scriptId, caller);
   *   };
   * });
   * ```
   * is equivalent to:
   * ```ts
   * import { ScriptManager, Script } from '@callstack/repack/client';
   *
   * ScriptManager.shared.addResolver(async (scriptId, caller) => {
   *   if (scriptId === 'app1') {
   *     return {
   *       url: 'http://localhost:9000/app1.container.bundle',
   *     };
   *   }
   *
   *   if (caller === 'app1') {
   *     return {
   *       url: Script.getRemoteURL(`http://localhost:9000/${scriptId}`),
   *     };
   *   }
   * });
   * ```
   *
   * @param config Configuration for the resolver.
   * @param containerExt Extension of container bundles. Defaults to `.container.bundle`.
   * @returns A resolver function which will try to resolve URL based on given `scriptId` and `caller`.
   */ function createURLResolver(config, ref) {
        var _loop = function(key) {
            resolvers[key] = (scriptId, caller)=>{
                if (scriptId === key) {
                    var url = config.containers[key].replace(/\[name\]/g, scriptId).replace(/\[ext\]/g, containerExt);
                    return url;
                }
                if (caller === key) {
                    var _config_chunks;
                    var url1 = (((_config_chunks = config.chunks) === null || _config_chunks === void 0 ? void 0 : _config_chunks[key]) ?? config.containers[key]).replace(/\[name\]/g, scriptId);
                    if (url1.includes('[ext]')) {
                        return (webpackContext)=>webpackContext.u(url1.replace(/\[ext\]/g, ''));
                    }
                    return url1;
                }
                return undefined;
            };
        };
        var containerExt = ref === void 0 ? '.container.bundle' : ref;
        var resolvers = {};
        for(var key in config.containers)_loop(key);
        return (scriptId, caller)=>{
            var resolver = (caller ? resolvers[caller] : undefined) ?? resolvers[scriptId];
            return resolver(scriptId, caller);
        };
    }
    _Federated.createURLResolver = createURLResolver;
    function importModule(containerName, module) {
        return _importModule.apply(this, arguments);
    }
    function _importModule() {
        _importModule = /**
   * @deprecated
   *
   * Dynamically imports module from a Module Federation container. Similar to `import('file')`, but
   * specific to Module Federation. Calling `importModule` will create an async boundary.
   *
   * Container will be evaluated only once. If you use `importModule` for the same container twice,
   * the container will be loaded and evaluated only on the first import.
   *
   * Under the hood, `importModule` will call `ScriptManager.shared.loadScript(containerName)`.
   * This means, a resolver must be added with `ScriptManager.shared.addResolver(...)` beforehand and provided proper
   * resolution logic to resolve URL based on the `containerName`.
   *
   * @param containerName Name of the container - should be the same name provided to
   * `webpack.container.ModuleFederationPlugin` in `library.name`.
   * @param module Full name with extension of the module to import from the container - only modules
   * exposed in `exposes` in `webpack.container.ModuleFederationPlugin` can be used.
   * @param scope Optional, scope for sharing modules between containers. Defaults to `'default'`.
   * @returns Exports of given `module` from given container.
   *
   * @example
   * ```ts
   * import * as React from 'react';
   * import { Federated } from '@callstack/repack/client';
   *
   * const Button = React.lazy(() => Federated.importModule('my-components', './Button.js'));
   *
   * const myUtil = await Federated.importModule('my-lib', './myUtil.js');
   * ```
   */ _async_to_generator._(function*(containerName, module, ref) {
            var scope = ref === void 0 ? 'default' : ref;
            var __webpack_share_scopes___scope;
            if (!((__webpack_share_scopes___scope = __webpack_require__.S[scope]) === null || __webpack_share_scopes___scope === void 0 ? void 0 : __webpack_share_scopes___scope.__isInitialized)) {
                // Initializes the share scope.
                // This fills it with known provided modules from this build and all remotes.
                yield __webpack_require__.I(scope);
                __webpack_require__.S[scope].__isInitialized = true;
            }
            // Do not use `const container = self[containerName];` here. Once container is loaded
            // `container` reference is not updated, so `container.__isInitialized`
            // will crash the application, because of reading property from `undefined`.
            if (!self[containerName]) {
                // Download and execute container
                yield _ScriptManager.ScriptManager.shared.loadScript(containerName);
            }
            var container = self[containerName];
            if (!container.__isInitialized) {
                container.__isInitialized = true;
                // Initialize the container, it may provide shared modules
                yield container.init(__webpack_require__.S[scope]);
            }
            var factory = yield container.get(module);
            var exports1 = factory();
            return exports1;
        });
        return _importModule.apply(this, arguments);
    }
    _Federated.importModule = importModule;
})(Federated || (Federated = {})); //# sourceMappingURL=federated.js.map


}),
65495: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Get Webpack runtime context form current JavaScript scope.
 *
 * __You likely don't need to use it.__
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getWebpackContext", ({
    enumerable: true,
    get: function() {
        return getWebpackContext;
    }
}));
function getWebpackContext() {
    return __webpack_require__;
} //# sourceMappingURL=getWebpackContext.js.map


}),
13775: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Federated", ({
    enumerable: true,
    get: function() {
        return _federated.Federated;
    }
}));
var _export_star = __webpack_require__(4084);
_export_star._(__webpack_require__(26255), exports);
_export_star._(__webpack_require__(83572), exports);
_export_star._(__webpack_require__(39868), exports);
_export_star._(__webpack_require__(65495), exports);
var _federated = __webpack_require__(41855);
 //# sourceMappingURL=index.js.map


}),
39868: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
 //# sourceMappingURL=types.js.map


}),
9065: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _CorePlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _CorePlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90503));


}),
93076: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _PrefetchPlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _PrefetchPlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11433));


}),
92998: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _ResolverPlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _ResolverPlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15847));


}),
68427: (function (__unused_webpack_module, exports) {
"use strict";

var RUNTIME_001 = 'RUNTIME-001';
var RUNTIME_002 = 'RUNTIME-002';
var RUNTIME_003 = 'RUNTIME-003';
var RUNTIME_004 = 'RUNTIME-004';
var RUNTIME_005 = 'RUNTIME-005';
var RUNTIME_006 = 'RUNTIME-006';
var RUNTIME_007 = 'RUNTIME-007';
var RUNTIME_008 = 'RUNTIME-008';
var TYPE_001 = 'TYPE-001';
var BUILD_001 = 'BUILD-001';
var getDocsUrl = (errorCode)=>{
    var type = errorCode.split('-')[0].toLowerCase();
    return `View the docs to see how to solve: https://module-federation.io/guide/troubleshooting/${type}/${errorCode}`;
};
var getShortErrorMsg = (errorCode, errorDescMap, args, originalErrorMsg)=>{
    var msg = [
        `${[
            errorDescMap[errorCode]
        ]} #${errorCode}`
    ];
    args && msg.push(`args: ${JSON.stringify(args)}`);
    msg.push(getDocsUrl(errorCode));
    originalErrorMsg && msg.push(`Original Error Message:\n ${originalErrorMsg}`);
    return msg.join('\n');
};
function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var runtimeDescMap = {
    [RUNTIME_001]: 'Failed to get remoteEntry exports.',
    [RUNTIME_002]: 'The remote entry interface does not contain "init"',
    [RUNTIME_003]: 'Failed to get manifest.',
    [RUNTIME_004]: 'Failed to locate remote.',
    [RUNTIME_005]: 'Invalid loadShareSync function call from bundler runtime',
    [RUNTIME_006]: 'Invalid loadShareSync function call from runtime',
    [RUNTIME_007]: 'Failed to get remote snapshot.',
    [RUNTIME_008]: 'Failed to load script resources.'
};
var typeDescMap = {
    [TYPE_001]: 'Failed to generate type declaration. Execute the below cmd to reproduce and fix the error.'
};
var buildDescMap = {
    [BUILD_001]: 'Failed to find expose module.'
};
var errorDescMap = _extends({}, runtimeDescMap, typeDescMap, buildDescMap);
exports.BUILD_001 = BUILD_001;
exports.RUNTIME_001 = RUNTIME_001;
exports.RUNTIME_002 = RUNTIME_002;
exports.RUNTIME_003 = RUNTIME_003;
exports.RUNTIME_004 = RUNTIME_004;
exports.RUNTIME_005 = RUNTIME_005;
exports.RUNTIME_006 = RUNTIME_006;
exports.RUNTIME_007 = RUNTIME_007;
exports.RUNTIME_008 = RUNTIME_008;
exports.TYPE_001 = TYPE_001;
exports.buildDescMap = buildDescMap;
exports.errorDescMap = errorDescMap;
exports.getShortErrorMsg = getShortErrorMsg;
exports.runtimeDescMap = runtimeDescMap;
exports.typeDescMap = typeDescMap;


}),
89802: (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(11809);
var _object_spread = __webpack_require__(36192);
var _to_consumable_array = __webpack_require__(92716);
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value)=>__defProp(target, "name", {
        value,
        configurable: true
    });
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        var _loop = function(key) {
            if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                get: ()=>from[key],
                enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
        };
        for (var key of __getOwnPropNames(from))_loop(key);
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// packages/retry-plugin/src/index.ts
var src_exports = {};
__export(src_exports, {
    RetryPlugin: ()=>RetryPlugin
});
module.exports = __toCommonJS(src_exports);
// packages/retry-plugin/src/constant.ts
var defaultRetries = 3;
var defaultRetryDelay = 1e3;
var PLUGIN_IDENTIFIER = "[ Module Federation RetryPlugin ]";
// packages/retry-plugin/src/logger.ts
var import_sdk = __webpack_require__(10144);
var logger = (0, import_sdk.createLogger)(PLUGIN_IDENTIFIER);
var logger_default = logger;
function fetchWithRetry(_) {
    return _fetchWithRetry.apply(this, arguments);
}
function _fetchWithRetry() {
    _fetchWithRetry = // packages/retry-plugin/src/fetch-retry.ts
    _async_to_generator._(function*(ref) {
        var url = ref.url, _ref_options = ref.options, options = _ref_options === void 0 ? {} : _ref_options, _ref_retryTimes = ref.retryTimes, retryTimes = _ref_retryTimes === void 0 ? defaultRetries : _ref_retryTimes, _ref_retryDelay = ref.retryDelay, retryDelay = _ref_retryDelay === void 0 ? defaultRetryDelay : _ref_retryDelay, fallback = ref.fallback;
        try {
            var response = yield fetch(url, options);
            var responseClone = response.clone();
            if (!response.ok) {
                throw new Error(`Server error\uFF1A${response.status}`);
            }
            yield responseClone.json().catch((error)=>{
                throw new Error(`Json parse error: ${error}, url is: ${url}`);
            });
            return response;
        } catch (error) {
            if (retryTimes <= 0) {
                logger_default.log(`${PLUGIN_IDENTIFIER}: retry failed after ${retryTimes} times for url: ${url}, now will try fallbackUrl url`);
                if (fallback && typeof fallback === "function") {
                    return fetchWithRetry({
                        url: fallback(url),
                        options,
                        retryTimes: 0,
                        retryDelay: 0
                    });
                }
                if (error instanceof Error && error.message.includes("Json parse error")) {
                    throw error;
                }
                throw new Error(`${PLUGIN_IDENTIFIER}: The request failed three times and has now been abandoned`);
            } else {
                retryDelay > 0 && (yield new Promise((resolve)=>setTimeout(resolve, retryDelay)));
                logger_default.log(`Trying again. Number of retries available\uFF1A${retryTimes - 1}`);
                return yield fetchWithRetry({
                    url,
                    options,
                    retryTimes: retryTimes - 1,
                    retryDelay,
                    fallback
                });
            }
        }
    });
    return _fetchWithRetry.apply(this, arguments);
}
__name(fetchWithRetry, "fetchWithRetry");
// packages/retry-plugin/src/util.ts
function scriptCommonRetry(ref) {
    var scriptOption = ref.scriptOption, moduleInfo = ref.moduleInfo, retryFn = ref.retryFn, _ref_beforeExecuteRetry = ref.beforeExecuteRetry, beforeExecuteRetry = _ref_beforeExecuteRetry === void 0 ? /* @__PURE__ */ __name(()=>{}, "beforeExecuteRetry") : _ref_beforeExecuteRetry;
    return /*#__PURE__*/ _async_to_generator._(function*(...args) {
        var retryResponse;
        var _ref = scriptOption || {}, _ref_retryTimes = _ref.retryTimes, retryTimes = _ref_retryTimes === void 0 ? defaultRetries : _ref_retryTimes, _ref_retryDelay = _ref.retryDelay, retryDelay = _ref_retryDelay === void 0 ? defaultRetryDelay : _ref_retryDelay;
        if ((scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.moduleName) && (scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.moduleName.some((m)=>moduleInfo.name === m || (moduleInfo === null || moduleInfo === void 0 ? void 0 : moduleInfo.alias) === m)) || (scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.moduleName) === void 0) {
            var attempts = 0;
            while(attempts - 1 < retryTimes){
                try {
                    beforeExecuteRetry();
                    retryResponse = yield retryFn.apply(void 0, _to_consumable_array._(args));
                    break;
                } catch (error) {
                    attempts++;
                    if (attempts - 1 >= retryTimes) {
                        (scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.cb) && (yield new Promise((resolve)=>(scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.cb) && (scriptOption === null || scriptOption === void 0 ? void 0 : scriptOption.cb(resolve, error))));
                        throw error;
                    }
                    logger_default.log(`${PLUGIN_IDENTIFIER}: script resource retrying ${attempts} times`);
                    yield new Promise((resolve)=>setTimeout(resolve, retryDelay));
                }
            }
        }
        return retryResponse;
    });
}
__name(scriptCommonRetry, "scriptCommonRetry");
// packages/retry-plugin/src/index.ts
var RetryPlugin = /* @__PURE__ */ __name((ref)=>{
    var fetchOption = ref.fetch, scriptOption = ref.script;
    return {
        name: "retry-plugin",
        fetch (url, options) {
            return _async_to_generator._(function*() {
                var _options = _object_spread._({}, options, fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.options);
                if (fetchOption) {
                    if (fetchOption.url) {
                        if (url === (fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.url)) {
                            return fetchWithRetry({
                                url: fetchOption.url,
                                options: _options,
                                retryTimes: fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.retryTimes,
                                fallback: fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.fallback
                            });
                        }
                    } else {
                        return fetchWithRetry({
                            url,
                            options: _options,
                            retryTimes: fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.retryTimes,
                            fallback: fetchOption === null || fetchOption === void 0 ? void 0 : fetchOption.fallback
                        });
                    }
                }
                return fetch(url, options);
            })();
        },
        loadEntryError (ref) {
            var getRemoteEntry = ref.getRemoteEntry, origin = ref.origin, remoteInfo = ref.remoteInfo, remoteEntryExports = ref.remoteEntryExports, globalLoading = ref.globalLoading, uniqueKey = ref.uniqueKey;
            return _async_to_generator._(function*() {
                if (!scriptOption) return;
                var retryFn = getRemoteEntry;
                var beforeExecuteRetry = /* @__PURE__ */ __name(()=>delete globalLoading[uniqueKey], "beforeExecuteRetry");
                var getRemoteEntryRetry = scriptCommonRetry({
                    scriptOption,
                    moduleInfo: remoteInfo,
                    retryFn,
                    beforeExecuteRetry
                });
                return getRemoteEntryRetry({
                    origin,
                    remoteInfo,
                    remoteEntryExports
                });
            })();
        },
        getModuleFactory (ref) {
            var remoteEntryExports = ref.remoteEntryExports, expose = ref.expose, moduleInfo = ref.moduleInfo;
            return _async_to_generator._(function*() {
                if (!scriptOption) return;
                var retryFn = remoteEntryExports.get;
                var getRemoteEntryRetry = scriptCommonRetry({
                    scriptOption,
                    moduleInfo,
                    retryFn
                });
                return getRemoteEntryRetry(expose);
            })();
        }
    };
}, "RetryPlugin");
// Annotate the CommonJS export names for ESM import in node:
0 && 0;


}),
94875: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _type_of = __webpack_require__(94210);
var polyfills = __webpack_require__(31824);
var sdk = __webpack_require__(10144);
var errorCodes = __webpack_require__(68427);
var LOG_CATEGORY = '[ Federation Runtime ]';
// FIXME: pre-bundle ?
var logger = sdk.createLogger(LOG_CATEGORY);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function assert(condition, msg) {
    if (!condition) {
        error(msg);
    }
}
function error(msg) {
    if (msg instanceof Error) {
        msg.message = `${LOG_CATEGORY}: ${msg.message}`;
        throw msg;
    }
    throw new Error(`${LOG_CATEGORY}: ${msg}`);
}
function warn(msg) {
    if (msg instanceof Error) {
        msg.message = `${LOG_CATEGORY}: ${msg.message}`;
        logger.warn(msg);
    } else {
        logger.warn(msg);
    }
}
function addUniqueItem(arr, item) {
    if (arr.findIndex((name1)=>name1 === item) === -1) {
        arr.push(item);
    }
    return arr;
}
function getFMId(remoteInfo) {
    if ('version' in remoteInfo && remoteInfo.version) {
        return `${remoteInfo.name}:${remoteInfo.version}`;
    } else if ('entry' in remoteInfo && remoteInfo.entry) {
        return `${remoteInfo.name}:${remoteInfo.entry}`;
    } else {
        return `${remoteInfo.name}`;
    }
}
function isRemoteInfoWithEntry(remote) {
    return typeof remote.entry !== 'undefined';
}
function isPureRemoteEntry(remote) {
    return !remote.entry.includes('.json') && remote.entry.includes('.js');
}
function safeWrapper(callback, disableWarn) {
    return _safeWrapper.apply(this, arguments);
}
function _safeWrapper() {
    _safeWrapper = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _async_to_generator._(function*(callback, disableWarn) {
        try {
            var res = yield callback();
            return res;
        } catch (e) {
            !disableWarn && warn(e);
            return;
        }
    });
    return _safeWrapper.apply(this, arguments);
}
function isObject(val) {
    return val && typeof val === 'object';
}
var objectToString = Object.prototype.toString;
// eslint-disable-next-line @typescript-eslint/ban-types
function isPlainObject(val) {
    return objectToString.call(val) === '[object Object]';
}
function isStaticResourcesEqual(url1, url2) {
    var REG_EXP = /^(https?:)?\/\//i;
    // Transform url1 and url2 into relative paths
    var relativeUrl1 = url1.replace(REG_EXP, '').replace(/\/$/, '');
    var relativeUrl2 = url2.replace(REG_EXP, '').replace(/\/$/, '');
    // Check if the relative paths are identical
    return relativeUrl1 === relativeUrl2;
}
function arrayOptions(options) {
    return Array.isArray(options) ? options : [
        options
    ];
}
function getRemoteEntryInfoFromSnapshot(snapshot) {
    var defaultRemoteEntryInfo = {
        url: '',
        type: 'global',
        globalName: ''
    };
    if (sdk.isBrowserEnv() || sdk.isReactNativeEnv()) {
        return 'remoteEntry' in snapshot ? {
            url: snapshot.remoteEntry,
            type: snapshot.remoteEntryType,
            globalName: snapshot.globalName
        } : defaultRemoteEntryInfo;
    }
    if ('ssrRemoteEntry' in snapshot) {
        return {
            url: snapshot.ssrRemoteEntry || defaultRemoteEntryInfo.url,
            type: snapshot.ssrRemoteEntryType || defaultRemoteEntryInfo.type,
            globalName: snapshot.globalName
        };
    }
    return defaultRemoteEntryInfo;
}
var processModuleAlias = (name1, subPath)=>{
    // @host/ ./button -> @host/button
    var moduleName;
    if (name1.endsWith('/')) {
        moduleName = name1.slice(0, -1);
    } else {
        moduleName = name1;
    }
    if (subPath.startsWith('.')) {
        subPath = subPath.slice(1);
    }
    moduleName = moduleName + subPath;
    return moduleName;
};
var CurrentGlobal = typeof globalThis === 'object' ? globalThis : window;
var nativeGlobal = (()=>{
    try {
        // get real window (incase of sandbox)
        return document.defaultView;
    } catch (e) {
        // node env
        return CurrentGlobal;
    }
})();
var Global = nativeGlobal;
function definePropertyGlobalVal(target, key, val) {
    Object.defineProperty(target, key, {
        value: val,
        configurable: false,
        writable: true
    });
}
function includeOwnProperty(target, key) {
    return Object.hasOwnProperty.call(target, key);
}
// This section is to prevent encapsulation by certain microfrontend frameworks. Due to reuse policies, sandbox escapes.
// The sandbox in the microfrontend does not replicate the value of 'configurable'.
// If there is no loading content on the global object, this section defines the loading object.
if (!includeOwnProperty(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__')) {
    definePropertyGlobalVal(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__', {});
}
var globalLoading = CurrentGlobal.__GLOBAL_LOADING_REMOTE_ENTRY__;
function setGlobalDefaultVal(target) {
    var _target___FEDERATION__, _target___FEDERATION__1, _target___FEDERATION__2, _target___FEDERATION__3, _target___FEDERATION__4, _target___FEDERATION__5;
    if (includeOwnProperty(target, '__VMOK__') && !includeOwnProperty(target, '__FEDERATION__')) {
        definePropertyGlobalVal(target, '__FEDERATION__', target.__VMOK__);
    }
    if (!includeOwnProperty(target, '__FEDERATION__')) {
        definePropertyGlobalVal(target, '__FEDERATION__', {
            __GLOBAL_PLUGIN__: [],
            __INSTANCES__: [],
            moduleInfo: {},
            __SHARE__: {},
            __MANIFEST_LOADING__: {},
            __PRELOADED_MAP__: new Map()
        });
        definePropertyGlobalVal(target, '__VMOK__', target.__FEDERATION__);
    }
    var ___GLOBAL_PLUGIN__;
    (___GLOBAL_PLUGIN__ = (_target___FEDERATION__ = target.__FEDERATION__).__GLOBAL_PLUGIN__) != null ? ___GLOBAL_PLUGIN__ : _target___FEDERATION__.__GLOBAL_PLUGIN__ = [];
    var ___INSTANCES__;
    (___INSTANCES__ = (_target___FEDERATION__1 = target.__FEDERATION__).__INSTANCES__) != null ? ___INSTANCES__ : _target___FEDERATION__1.__INSTANCES__ = [];
    var _moduleInfo;
    (_moduleInfo = (_target___FEDERATION__2 = target.__FEDERATION__).moduleInfo) != null ? _moduleInfo : _target___FEDERATION__2.moduleInfo = {};
    var ___SHARE__;
    (___SHARE__ = (_target___FEDERATION__3 = target.__FEDERATION__).__SHARE__) != null ? ___SHARE__ : _target___FEDERATION__3.__SHARE__ = {};
    var ___MANIFEST_LOADING__;
    (___MANIFEST_LOADING__ = (_target___FEDERATION__4 = target.__FEDERATION__).__MANIFEST_LOADING__) != null ? ___MANIFEST_LOADING__ : _target___FEDERATION__4.__MANIFEST_LOADING__ = {};
    var ___PRELOADED_MAP__;
    (___PRELOADED_MAP__ = (_target___FEDERATION__5 = target.__FEDERATION__).__PRELOADED_MAP__) != null ? ___PRELOADED_MAP__ : _target___FEDERATION__5.__PRELOADED_MAP__ = new Map();
}
setGlobalDefaultVal(CurrentGlobal);
setGlobalDefaultVal(nativeGlobal);
function resetFederationGlobalInfo() {
    CurrentGlobal.__FEDERATION__.__GLOBAL_PLUGIN__ = [];
    CurrentGlobal.__FEDERATION__.__INSTANCES__ = [];
    CurrentGlobal.__FEDERATION__.moduleInfo = {};
    CurrentGlobal.__FEDERATION__.__SHARE__ = {};
    CurrentGlobal.__FEDERATION__.__MANIFEST_LOADING__ = {};
    Object.keys(globalLoading).forEach((key)=>{
        delete globalLoading[key];
    });
}
function setGlobalFederationInstance(FederationInstance) {
    CurrentGlobal.__FEDERATION__.__INSTANCES__.push(FederationInstance);
}
function getGlobalFederationConstructor() {
    return CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__;
}
function setGlobalFederationConstructor(FederationConstructor, ref) {
    var isDebug = ref === void 0 ? sdk.isDebugMode() : ref;
    if (isDebug) {
        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__ = FederationConstructor;
        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__ = "0.13.1";
    }
}
// eslint-disable-next-line @typescript-eslint/ban-types
function getInfoWithoutType(target, key) {
    if (typeof key === 'string') {
        var keyRes = target[key];
        if (keyRes) {
            return {
                value: target[key],
                key: key
            };
        } else {
            var targetKeys = Object.keys(target);
            for (var targetKey of targetKeys){
                var _targetKey_split = _sliced_to_array._(targetKey.split(':'), 2), targetTypeOrName = _targetKey_split[0], _ = _targetKey_split[1];
                var nKey = `${targetTypeOrName}:${key}`;
                var typeWithKeyRes = target[nKey];
                if (typeWithKeyRes) {
                    return {
                        value: typeWithKeyRes,
                        key: nKey
                    };
                }
            }
            return {
                value: undefined,
                key: key
            };
        }
    } else {
        throw new Error('key must be string');
    }
}
var getGlobalSnapshot = ()=>nativeGlobal.__FEDERATION__.moduleInfo;
var getTargetSnapshotInfoByModuleInfo = (moduleInfo, snapshot)=>{
    // Check if the remote is included in the hostSnapshot
    var moduleKey = getFMId(moduleInfo);
    var getModuleInfo = getInfoWithoutType(snapshot, moduleKey).value;
    // The remoteSnapshot might not include a version
    if (getModuleInfo && !getModuleInfo.version && 'version' in moduleInfo && moduleInfo['version']) {
        getModuleInfo.version = moduleInfo['version'];
    }
    if (getModuleInfo) {
        return getModuleInfo;
    }
    // If the remote is not included in the hostSnapshot, deploy a micro app snapshot
    if ('version' in moduleInfo && moduleInfo['version']) {
        var version = moduleInfo.version, resModuleInfo = polyfills._object_without_properties_loose(moduleInfo, [
            "version"
        ]);
        var moduleKeyWithoutVersion = getFMId(resModuleInfo);
        var getModuleInfoWithoutVersion = getInfoWithoutType(nativeGlobal.__FEDERATION__.moduleInfo, moduleKeyWithoutVersion).value;
        if ((getModuleInfoWithoutVersion == null ? void 0 : getModuleInfoWithoutVersion.version) === version) {
            return getModuleInfoWithoutVersion;
        }
    }
    return;
};
var getGlobalSnapshotInfoByModuleInfo = (moduleInfo)=>getTargetSnapshotInfoByModuleInfo(moduleInfo, nativeGlobal.__FEDERATION__.moduleInfo);
var setGlobalSnapshotInfoByModuleInfo = (remoteInfo, moduleDetailInfo)=>{
    var moduleKey = getFMId(remoteInfo);
    nativeGlobal.__FEDERATION__.moduleInfo[moduleKey] = moduleDetailInfo;
    return nativeGlobal.__FEDERATION__.moduleInfo;
};
var addGlobalSnapshot = (moduleInfos)=>{
    nativeGlobal.__FEDERATION__.moduleInfo = polyfills._extends({}, nativeGlobal.__FEDERATION__.moduleInfo, moduleInfos);
    return ()=>{
        var keys = Object.keys(moduleInfos);
        for (var key of keys){
            delete nativeGlobal.__FEDERATION__.moduleInfo[key];
        }
    };
};
var getRemoteEntryExports = (name1, globalName)=>{
    var remoteEntryKey = globalName || `__FEDERATION_${name1}:custom__`;
    var entryExports = CurrentGlobal[remoteEntryKey];
    return {
        remoteEntryKey,
        entryExports
    };
};
// This function is used to register global plugins.
// It iterates over the provided plugins and checks if they are already registered.
// If a plugin is not registered, it is added to the global plugins.
// If a plugin is already registered, a warning message is logged.
var registerGlobalPlugins = (plugins)=>{
    var __GLOBAL_PLUGIN__ = nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;
    plugins.forEach((plugin)=>{
        if (__GLOBAL_PLUGIN__.findIndex((p)=>p.name === plugin.name) === -1) {
            __GLOBAL_PLUGIN__.push(plugin);
        } else {
            warn(`The plugin ${plugin.name} has been registered.`);
        }
    });
};
var getGlobalHostPlugins = ()=>nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;
var getPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.get(id);
var setPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.set(id, true);
var DEFAULT_SCOPE = 'default';
var DEFAULT_REMOTE_TYPE = 'global';
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// those constants are based on https://www.rubydoc.info/gems/semantic_range/3.0.0/SemanticRange#BUILDIDENTIFIER-constant
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
var buildIdentifier = '[0-9A-Za-z-]+';
var build = `(?:\\+(${buildIdentifier}(?:\\.${buildIdentifier})*))`;
var numericIdentifier = '0|[1-9]\\d*';
var numericIdentifierLoose = '[0-9]+';
var nonNumericIdentifier = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
var preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;
var preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\.${preReleaseIdentifierLoose})*))`;
var preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;
var preRelease = `(?:-(${preReleaseIdentifier}(?:\\.${preReleaseIdentifier})*))`;
var xRangeIdentifier = `${numericIdentifier}|x|X|\\*`;
var xRangePlain = `[v=\\s]*(${xRangeIdentifier})(?:\\.(${xRangeIdentifier})(?:\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;
var hyphenRange = `^\\s*(${xRangePlain})\\s+-\\s+(${xRangePlain})\\s*$`;
var mainVersionLoose = `(${numericIdentifierLoose})\\.(${numericIdentifierLoose})\\.(${numericIdentifierLoose})`;
var loosePlain = `[v=\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;
var gtlt = '((?:<|>)?=?)';
var comparatorTrim = `(\\s*)${gtlt}\\s*(${loosePlain}|${xRangePlain})`;
var loneTilde = '(?:~>?)';
var tildeTrim = `(\\s*)${loneTilde}\\s+`;
var loneCaret = '(?:\\^)';
var caretTrim = `(\\s*)${loneCaret}\\s+`;
var star = '(<|>)?=?\\s*\\*';
var caret = `^${loneCaret}${xRangePlain}$`;
var mainVersion = `(${numericIdentifier})\\.(${numericIdentifier})\\.(${numericIdentifier})`;
var fullPlain = `v?${mainVersion}${preRelease}?${build}?`;
var tilde = `^${loneTilde}${xRangePlain}$`;
var xRange = `^${gtlt}\\s*${xRangePlain}$`;
var comparator = `^${gtlt}\\s*(${fullPlain})$|^$`;
// copy from semver package
var gte0 = '^\\s*>=\\s*0.0.0\\s*$';
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseRegex(source) {
    return new RegExp(source);
}
function isXVersion(version) {
    return !version || version.toLowerCase() === 'x' || version === '*';
}
function pipe(...fns) {
    return (x)=>fns.reduce((v, f)=>f(v), x);
}
function extractComparator(comparatorString) {
    return comparatorString.match(parseRegex(comparator));
}
function combineVersion(major, minor, patch, preRelease) {
    var mainVersion = `${major}.${minor}.${patch}`;
    if (preRelease) {
        return `${mainVersion}-${preRelease}`;
    }
    return mainVersion;
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseHyphen(range) {
    return range.replace(parseRegex(hyphenRange), (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease)=>{
        if (isXVersion(fromMajor)) {
            from = '';
        } else if (isXVersion(fromMinor)) {
            from = `>=${fromMajor}.0.0`;
        } else if (isXVersion(fromPatch)) {
            from = `>=${fromMajor}.${fromMinor}.0`;
        } else {
            from = `>=${from}`;
        }
        if (isXVersion(toMajor)) {
            to = '';
        } else if (isXVersion(toMinor)) {
            to = `<${Number(toMajor) + 1}.0.0-0`;
        } else if (isXVersion(toPatch)) {
            to = `<${toMajor}.${Number(toMinor) + 1}.0-0`;
        } else if (toPreRelease) {
            to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;
        } else {
            to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
    });
}
function parseComparatorTrim(range) {
    return range.replace(parseRegex(comparatorTrim), '$1$2$3');
}
function parseTildeTrim(range) {
    return range.replace(parseRegex(tildeTrim), '$1~');
}
function parseCaretTrim(range) {
    return range.replace(parseRegex(caretTrim), '$1^');
}
function parseCarets(range) {
    return range.trim().split(/\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(caret), (_, major, minor, patch, preRelease)=>{
            if (isXVersion(major)) {
                return '';
            } else if (isXVersion(minor)) {
                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;
            } else if (isXVersion(patch)) {
                if (major === '0') {
                    return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;
                } else {
                    return `>=${major}.${minor}.0 <${Number(major) + 1}.0.0-0`;
                }
            } else if (preRelease) {
                if (major === '0') {
                    if (minor === '0') {
                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${minor}.${Number(patch) + 1}-0`;
                    } else {
                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;
                    }
                } else {
                    return `>=${major}.${minor}.${patch}-${preRelease} <${Number(major) + 1}.0.0-0`;
                }
            } else {
                if (major === '0') {
                    if (minor === '0') {
                        return `>=${major}.${minor}.${patch} <${major}.${minor}.${Number(patch) + 1}-0`;
                    } else {
                        return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;
                    }
                }
                return `>=${major}.${minor}.${patch} <${Number(major) + 1}.0.0-0`;
            }
        })).join(' ');
}
function parseTildes(range) {
    return range.trim().split(/\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(tilde), (_, major, minor, patch, preRelease)=>{
            if (isXVersion(major)) {
                return '';
            } else if (isXVersion(minor)) {
                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;
            } else if (isXVersion(patch)) {
                return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;
            } else if (preRelease) {
                return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;
            }
            return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;
        })).join(' ');
}
function parseXRanges(range) {
    return range.split(/\s+/).map((rangeVersion)=>rangeVersion.trim().replace(parseRegex(xRange), (ret, gtlt, major, minor, patch, preRelease)=>{
            var isXMajor = isXVersion(major);
            var isXMinor = isXMajor || isXVersion(minor);
            var isXPatch = isXMinor || isXVersion(patch);
            if (gtlt === '=' && isXPatch) {
                gtlt = '';
            }
            preRelease = '';
            if (isXMajor) {
                if (gtlt === '>' || gtlt === '<') {
                    // nothing is allowed
                    return '<0.0.0-0';
                } else {
                    // nothing is forbidden
                    return '*';
                }
            } else if (gtlt && isXPatch) {
                // replace X with 0
                if (isXMinor) {
                    minor = 0;
                }
                patch = 0;
                if (gtlt === '>') {
                    // >1 => >=2.0.0
                    // >1.2 => >=1.3.0
                    gtlt = '>=';
                    if (isXMinor) {
                        major = Number(major) + 1;
                        minor = 0;
                        patch = 0;
                    } else {
                        minor = Number(minor) + 1;
                        patch = 0;
                    }
                } else if (gtlt === '<=') {
                    // <=0.7.x is actually <0.8.0, since any 0.7.x should pass
                    // Similarly, <=7.x is actually <8.0.0, etc.
                    gtlt = '<';
                    if (isXMinor) {
                        major = Number(major) + 1;
                    } else {
                        minor = Number(minor) + 1;
                    }
                }
                if (gtlt === '<') {
                    preRelease = '-0';
                }
                return `${gtlt + major}.${minor}.${patch}${preRelease}`;
            } else if (isXMinor) {
                return `>=${major}.0.0${preRelease} <${Number(major) + 1}.0.0-0`;
            } else if (isXPatch) {
                return `>=${major}.${minor}.0${preRelease} <${major}.${Number(minor) + 1}.0-0`;
            }
            return ret;
        })).join(' ');
}
function parseStar(range) {
    return range.trim().replace(parseRegex(star), '');
}
function parseGTE0(comparatorString) {
    return comparatorString.trim().replace(parseRegex(gte0), '');
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function compareAtom(rangeAtom, versionAtom) {
    rangeAtom = Number(rangeAtom) || rangeAtom;
    versionAtom = Number(versionAtom) || versionAtom;
    if (rangeAtom > versionAtom) {
        return 1;
    }
    if (rangeAtom === versionAtom) {
        return 0;
    }
    return -1;
}
function comparePreRelease(rangeAtom, versionAtom) {
    var rangePreRelease = rangeAtom.preRelease;
    var versionPreRelease = versionAtom.preRelease;
    if (rangePreRelease === undefined && Boolean(versionPreRelease)) {
        return 1;
    }
    if (Boolean(rangePreRelease) && versionPreRelease === undefined) {
        return -1;
    }
    if (rangePreRelease === undefined && versionPreRelease === undefined) {
        return 0;
    }
    for(var i = 0, n = rangePreRelease.length; i <= n; i++){
        var rangeElement = rangePreRelease[i];
        var versionElement = versionPreRelease[i];
        if (rangeElement === versionElement) {
            continue;
        }
        if (rangeElement === undefined && versionElement === undefined) {
            return 0;
        }
        if (!rangeElement) {
            return 1;
        }
        if (!versionElement) {
            return -1;
        }
        return compareAtom(rangeElement, versionElement);
    }
    return 0;
}
function compareVersion(rangeAtom, versionAtom) {
    return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);
}
function eq(rangeAtom, versionAtom) {
    return rangeAtom.version === versionAtom.version;
}
function compare(rangeAtom, versionAtom) {
    switch(rangeAtom.operator){
        case '':
        case '=':
            return eq(rangeAtom, versionAtom);
        case '>':
            return compareVersion(rangeAtom, versionAtom) < 0;
        case '>=':
            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;
        case '<':
            return compareVersion(rangeAtom, versionAtom) > 0;
        case '<=':
            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;
        case undefined:
            {
                // mean * or x -> all versions
                return true;
            }
        default:
            return false;
    }
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseComparatorString(range) {
    return pipe(// ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
    // ^1.2.3 --> >=1.2.3 <2.0.0-0
    // ^1.2.0 --> >=1.2.0 <2.0.0-0
    parseCarets, // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
    parseTildes, parseXRanges, parseStar)(range);
}
function parseRange(range) {
    return pipe(// `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    parseHyphen, // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    parseComparatorTrim, // `~ 1.2.3` => `~1.2.3`
    parseTildeTrim, // `^ 1.2.3` => `^1.2.3`
    parseCaretTrim)(range.trim()).split(/\s+/).join(' ');
}
function satisfy(version, range) {
    if (!version) {
        return false;
    }
    var parsedRange = parseRange(range);
    var parsedComparator = parsedRange.split(' ').map((rangeVersion)=>parseComparatorString(rangeVersion)).join(' ');
    var comparators = parsedComparator.split(/\s+/).map((comparator)=>parseGTE0(comparator));
    var extractedVersion = extractComparator(version);
    if (!extractedVersion) {
        return false;
    }
    var _extractedVersion = _sliced_to_array._(extractedVersion, 7), versionOperator = _extractedVersion[1], versionMajor = _extractedVersion[3], versionMinor = _extractedVersion[4], versionPatch = _extractedVersion[5], versionPreRelease = _extractedVersion[6];
    var versionAtom = {
        operator: versionOperator,
        version: combineVersion(versionMajor, versionMinor, versionPatch, versionPreRelease),
        major: versionMajor,
        minor: versionMinor,
        patch: versionPatch,
        preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split('.')
    };
    for (var comparator of comparators){
        var extractedComparator = extractComparator(comparator);
        if (!extractedComparator) {
            return false;
        }
        var _extractedComparator = _sliced_to_array._(extractedComparator, 7), rangeOperator = _extractedComparator[1], rangeMajor = _extractedComparator[3], rangeMinor = _extractedComparator[4], rangePatch = _extractedComparator[5], rangePreRelease = _extractedComparator[6];
        var rangeAtom = {
            operator: rangeOperator,
            version: combineVersion(rangeMajor, rangeMinor, rangePatch, rangePreRelease),
            major: rangeMajor,
            minor: rangeMinor,
            patch: rangePatch,
            preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split('.')
        };
        if (!compare(rangeAtom, versionAtom)) {
            return false; // early return
        }
    }
    return true;
}
function formatShare(shareArgs, from, name1, shareStrategy) {
    var get;
    if ('get' in shareArgs) {
        // eslint-disable-next-line prefer-destructuring
        get = shareArgs.get;
    } else if ('lib' in shareArgs) {
        get = ()=>Promise.resolve(shareArgs.lib);
    } else {
        get = ()=>Promise.resolve(()=>{
                throw new Error(`Can not get shared '${name1}'!`);
            });
    }
    var _shareArgs_version, _shareArgs_scope, _shareArgs_strategy;
    return polyfills._extends({
        deps: [],
        useIn: [],
        from,
        loading: null
    }, shareArgs, {
        shareConfig: polyfills._extends({
            requiredVersion: `^${shareArgs.version}`,
            singleton: false,
            eager: false,
            strictVersion: false
        }, shareArgs.shareConfig),
        get,
        loaded: (shareArgs == null ? void 0 : shareArgs.loaded) || 'lib' in shareArgs ? true : undefined,
        version: (_shareArgs_version = shareArgs.version) != null ? _shareArgs_version : '0',
        scope: Array.isArray(shareArgs.scope) ? shareArgs.scope : [
            (_shareArgs_scope = shareArgs.scope) != null ? _shareArgs_scope : 'default'
        ],
        strategy: ((_shareArgs_strategy = shareArgs.strategy) != null ? _shareArgs_strategy : shareStrategy) || 'version-first'
    });
}
function formatShareConfigs(globalOptions, userOptions) {
    var shareArgs = userOptions.shared || {};
    var from = userOptions.name;
    var shareInfos = Object.keys(shareArgs).reduce((res, pkgName)=>{
        var arrayShareArgs = arrayOptions(shareArgs[pkgName]);
        res[pkgName] = res[pkgName] || [];
        arrayShareArgs.forEach((shareConfig)=>{
            res[pkgName].push(formatShare(shareConfig, from, pkgName, userOptions.shareStrategy));
        });
        return res;
    }, {});
    var shared = polyfills._extends({}, globalOptions.shared);
    Object.keys(shareInfos).forEach((shareKey)=>{
        if (!shared[shareKey]) {
            shared[shareKey] = shareInfos[shareKey];
        } else {
            shareInfos[shareKey].forEach((newUserSharedOptions)=>{
                var isSameVersion = shared[shareKey].find((sharedVal)=>sharedVal.version === newUserSharedOptions.version);
                if (!isSameVersion) {
                    shared[shareKey].push(newUserSharedOptions);
                }
            });
        }
    });
    return {
        shared,
        shareInfos
    };
}
function versionLt(a, b) {
    var transformInvalidVersion = (version)=>{
        var isNumberVersion = !Number.isNaN(Number(version));
        if (isNumberVersion) {
            var splitArr = version.split('.');
            var validVersion = version;
            for(var i = 0; i < 3 - splitArr.length; i++){
                validVersion += '.0';
            }
            return validVersion;
        }
        return version;
    };
    if (satisfy(transformInvalidVersion(a), `<=${transformInvalidVersion(b)}`)) {
        return true;
    } else {
        return false;
    }
}
var findVersion = (shareVersionMap, cb)=>{
    var callback = cb || function(prev, cur) {
        return versionLt(prev, cur);
    };
    return Object.keys(shareVersionMap).reduce((prev, cur)=>{
        if (!prev) {
            return cur;
        }
        if (callback(prev, cur)) {
            return cur;
        }
        // default version is '0' https://github.com/webpack/webpack/blob/main/lib/sharing/ProvideSharedModule.js#L136
        if (prev === '0') {
            return cur;
        }
        return prev;
    }, 0);
};
var isLoaded = (shared)=>{
    return Boolean(shared.loaded) || typeof shared.lib === 'function';
};
var isLoading = (shared)=>{
    return Boolean(shared.loading);
};
function findSingletonVersionOrderByVersion(shareScopeMap, scope, pkgName) {
    var versions = shareScopeMap[scope][pkgName];
    var callback = function(prev, cur) {
        return !isLoaded(versions[prev]) && versionLt(prev, cur);
    };
    return findVersion(shareScopeMap[scope][pkgName], callback);
}
function findSingletonVersionOrderByLoaded(shareScopeMap, scope, pkgName) {
    var versions = shareScopeMap[scope][pkgName];
    var callback = function(prev, cur) {
        var isLoadingOrLoaded = (shared)=>{
            return isLoaded(shared) || isLoading(shared);
        };
        if (isLoadingOrLoaded(versions[cur])) {
            if (isLoadingOrLoaded(versions[prev])) {
                return Boolean(versionLt(prev, cur));
            } else {
                return true;
            }
        }
        if (isLoadingOrLoaded(versions[prev])) {
            return false;
        }
        return versionLt(prev, cur);
    };
    return findVersion(shareScopeMap[scope][pkgName], callback);
}
function getFindShareFunction(strategy) {
    if (strategy === 'loaded-first') {
        return findSingletonVersionOrderByLoaded;
    }
    return findSingletonVersionOrderByVersion;
}
function getRegisteredShare(localShareScopeMap, pkgName, shareInfo, resolveShare) {
    var _loop = function(sc) {
        if (shareConfig && localShareScopeMap[sc] && localShareScopeMap[sc][pkgName]) {
            var requiredVersion = shareConfig.requiredVersion;
            var findShareFunction = getFindShareFunction(strategy);
            var maxOrSingletonVersion = findShareFunction(localShareScopeMap, sc, pkgName);
            //@ts-ignore
            var defaultResolver = ()=>{
                if (shareConfig.singleton) {
                    if (typeof requiredVersion === 'string' && !satisfy(maxOrSingletonVersion, requiredVersion)) {
                        var msg = `Version ${maxOrSingletonVersion} from ${maxOrSingletonVersion && localShareScopeMap[sc][pkgName][maxOrSingletonVersion].from} of shared singleton module ${pkgName} does not satisfy the requirement of ${shareInfo.from} which needs ${requiredVersion})`;
                        if (shareConfig.strictVersion) {
                            error(msg);
                        } else {
                            warn(msg);
                        }
                    }
                    return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                } else {
                    if (requiredVersion === false || requiredVersion === '*') {
                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                    }
                    if (satisfy(maxOrSingletonVersion, requiredVersion)) {
                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                    }
                    for (var ref of Object.entries(localShareScopeMap[sc][pkgName])){
                        var _ref = _sliced_to_array._(ref, 2), versionKey = _ref[0], versionValue = _ref[1];
                        if (satisfy(versionKey, requiredVersion)) {
                            return versionValue;
                        }
                    }
                }
            };
            var params = {
                shareScopeMap: localShareScopeMap,
                scope: sc,
                pkgName,
                version: maxOrSingletonVersion,
                GlobalFederation: Global.__FEDERATION__,
                resolver: defaultResolver
            };
            var resolveShared = resolveShare.emit(params) || params;
            return {
                v: resolveShared.resolver()
            };
        }
    };
    if (!localShareScopeMap) {
        return;
    }
    var shareConfig = shareInfo.shareConfig, _shareInfo_scope = shareInfo.scope, scope = _shareInfo_scope === void 0 ? DEFAULT_SCOPE : _shareInfo_scope, strategy = shareInfo.strategy;
    var scopes = Array.isArray(scope) ? scope : [
        scope
    ];
    for (var sc of scopes){
        var _ret = _loop(sc);
        if (_type_of._(_ret) === "object") return _ret.v;
    }
}
function getGlobalShareScope() {
    return Global.__FEDERATION__.__SHARE__;
}
function getTargetSharedOptions(options) {
    var pkgName = options.pkgName, extraOptions = options.extraOptions, shareInfos = options.shareInfos;
    var defaultResolver = (sharedOptions)=>{
        if (!sharedOptions) {
            return undefined;
        }
        var shareVersionMap = {};
        sharedOptions.forEach((shared)=>{
            shareVersionMap[shared.version] = shared;
        });
        var callback = function(prev, cur) {
            return !isLoaded(shareVersionMap[prev]) && versionLt(prev, cur);
        };
        var maxVersion = findVersion(shareVersionMap, callback);
        return shareVersionMap[maxVersion];
    };
    var _extraOptions_resolver;
    var resolver = (_extraOptions_resolver = extraOptions == null ? void 0 : extraOptions.resolver) != null ? _extraOptions_resolver : defaultResolver;
    return Object.assign({}, resolver(shareInfos[pkgName]), extraOptions == null ? void 0 : extraOptions.customShareInfo);
}
var ShareUtils = {
    getRegisteredShare,
    getGlobalShareScope
};
var GlobalUtils = {
    Global,
    nativeGlobal,
    resetFederationGlobalInfo,
    setGlobalFederationInstance,
    getGlobalFederationConstructor,
    setGlobalFederationConstructor,
    getInfoWithoutType,
    getGlobalSnapshot,
    getTargetSnapshotInfoByModuleInfo,
    getGlobalSnapshotInfoByModuleInfo,
    setGlobalSnapshotInfoByModuleInfo,
    addGlobalSnapshot,
    getRemoteEntryExports,
    registerGlobalPlugins,
    getGlobalHostPlugins,
    getPreloaded,
    setPreloaded
};
var helpers = {
    global: GlobalUtils,
    share: ShareUtils
};
function getBuilderId() {
    //@ts-ignore
    return  true ? "HostApp:0.0.1" : 0;
}
// Function to match a remote with its name and expose
// id: pkgName(@federation/app1) + expose(button) = @federation/app1/button
// id: alias(app1) + expose(button) = app1/button
// id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort
function matchRemoteWithNameAndExpose(remotes, id) {
    for (var remote of remotes){
        // match pkgName
        var isNameMatched = id.startsWith(remote.name);
        var expose = id.replace(remote.name, '');
        if (isNameMatched) {
            if (expose.startsWith('/')) {
                var pkgNameOrAlias = remote.name;
                expose = `.${expose}`;
                return {
                    pkgNameOrAlias,
                    expose,
                    remote
                };
            } else if (expose === '') {
                return {
                    pkgNameOrAlias: remote.name,
                    expose: '.',
                    remote
                };
            }
        }
        // match alias
        var isAliasMatched = remote.alias && id.startsWith(remote.alias);
        var exposeWithAlias = remote.alias && id.replace(remote.alias, '');
        if (remote.alias && isAliasMatched) {
            if (exposeWithAlias && exposeWithAlias.startsWith('/')) {
                var pkgNameOrAlias1 = remote.alias;
                exposeWithAlias = `.${exposeWithAlias}`;
                return {
                    pkgNameOrAlias: pkgNameOrAlias1,
                    expose: exposeWithAlias,
                    remote
                };
            } else if (exposeWithAlias === '') {
                return {
                    pkgNameOrAlias: remote.alias,
                    expose: '.',
                    remote
                };
            }
        }
    }
    return;
}
// Function to match a remote with its name or alias
function matchRemote(remotes, nameOrAlias) {
    for (var remote of remotes){
        var isNameMatched = nameOrAlias === remote.name;
        if (isNameMatched) {
            return remote;
        }
        var isAliasMatched = remote.alias && nameOrAlias === remote.alias;
        if (isAliasMatched) {
            return remote;
        }
    }
    return;
}
function registerPlugins(plugins, hookInstances) {
    var globalPlugins = getGlobalHostPlugins();
    // Incorporate global plugins
    if (globalPlugins.length > 0) {
        globalPlugins.forEach((plugin)=>{
            if (plugins == null ? void 0 : plugins.find((item)=>item.name !== plugin.name)) {
                plugins.push(plugin);
            }
        });
    }
    if (plugins && plugins.length > 0) {
        plugins.forEach((plugin)=>{
            hookInstances.forEach((hookInstance)=>{
                hookInstance.applyPlugin(plugin);
            });
        });
    }
    return plugins;
}
function loadEsmEntry(_) {
    return _loadEsmEntry.apply(this, arguments);
}
function _loadEsmEntry() {
    _loadEsmEntry = _async_to_generator._(function*(ref) {
        var entry = ref.entry, remoteEntryExports = ref.remoteEntryExports;
        return new Promise((resolve, reject)=>{
            try {
                if (!remoteEntryExports) {
                    if (true) {
                        new Function('callbacks', `import("${entry}").then(callbacks[0]).catch(callbacks[1])`)([
                            resolve,
                            reject
                        ]);
                    } else {}
                } else {
                    resolve(remoteEntryExports);
                }
            } catch (e) {
                reject(e);
            }
        });
    });
    return _loadEsmEntry.apply(this, arguments);
}
function loadSystemJsEntry(_) {
    return _loadSystemJsEntry.apply(this, arguments);
}
function _loadSystemJsEntry() {
    _loadSystemJsEntry = _async_to_generator._(function*(ref) {
        var entry = ref.entry, remoteEntryExports = ref.remoteEntryExports;
        return new Promise((resolve, reject)=>{
            try {
                if (!remoteEntryExports) {
                    //@ts-ignore
                    if (false) {} else {
                        new Function('callbacks', `System.import("${entry}").then(callbacks[0]).catch(callbacks[1])`)([
                            resolve,
                            reject
                        ]);
                    }
                } else {
                    resolve(remoteEntryExports);
                }
            } catch (e) {
                reject(e);
            }
        });
    });
    return _loadSystemJsEntry.apply(this, arguments);
}
function loadEntryScript(_) {
    return _loadEntryScript.apply(this, arguments);
}
function _loadEntryScript() {
    _loadEntryScript = _async_to_generator._(function*(ref) {
        var name1 = ref.name, globalName = ref.globalName, entry = ref.entry, loaderHook = ref.loaderHook;
        var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryExports = _getRemoteEntryExports.entryExports;
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        return sdk.loadScript(entry, {
            attrs: {},
            createScriptHook: (url, attrs)=>{
                var res = loaderHook.lifecycle.createScript.emit({
                    url,
                    attrs
                });
                if (!res) return;
                if (res instanceof HTMLScriptElement) {
                    return res;
                }
                if ('script' in res || 'timeout' in res) {
                    return res;
                }
                return;
            }
        }).then(()=>{
            var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryKey = _getRemoteEntryExports.remoteEntryKey, entryExports = _getRemoteEntryExports.entryExports;
            assert(entryExports, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_001, errorCodes.runtimeDescMap, {
                remoteName: name1,
                remoteEntryUrl: entry,
                remoteEntryKey
            }));
            return entryExports;
        }).catch((e)=>{
            assert(undefined, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_008, errorCodes.runtimeDescMap, {
                remoteName: name1,
                resourceUrl: entry
            }));
            throw e;
        });
    });
    return _loadEntryScript.apply(this, arguments);
}
function loadEntryDom(_) {
    return _loadEntryDom.apply(this, arguments);
}
function _loadEntryDom() {
    _loadEntryDom = _async_to_generator._(function*(ref) {
        var remoteInfo = ref.remoteInfo, remoteEntryExports = ref.remoteEntryExports, loaderHook = ref.loaderHook;
        var entry = remoteInfo.entry, globalName = remoteInfo.entryGlobalName, name1 = remoteInfo.name, type = remoteInfo.type;
        switch(type){
            case 'esm':
            case 'module':
                return loadEsmEntry({
                    entry,
                    remoteEntryExports
                });
            case 'system':
                return loadSystemJsEntry({
                    entry,
                    remoteEntryExports
                });
            default:
                return loadEntryScript({
                    entry,
                    globalName,
                    name: name1,
                    loaderHook
                });
        }
    });
    return _loadEntryDom.apply(this, arguments);
}
function loadEntryNode(_) {
    return _loadEntryNode.apply(this, arguments);
}
function _loadEntryNode() {
    _loadEntryNode = _async_to_generator._(function*(ref) {
        var remoteInfo = ref.remoteInfo, loaderHook = ref.loaderHook;
        var entry = remoteInfo.entry, globalName = remoteInfo.entryGlobalName, name1 = remoteInfo.name, type = remoteInfo.type;
        var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryExports = _getRemoteEntryExports.entryExports;
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        return sdk.loadScriptNode(entry, {
            attrs: {
                name: name1,
                globalName,
                type
            },
            loaderHook: {
                createScriptHook: (url, ref)=>{
                    var attrs = ref === void 0 ? {} : ref;
                    var res = loaderHook.lifecycle.createScript.emit({
                        url,
                        attrs
                    });
                    if (!res) return;
                    if ('url' in res) {
                        return res;
                    }
                    return;
                }
            }
        }).then(()=>{
            var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryKey = _getRemoteEntryExports.remoteEntryKey, entryExports = _getRemoteEntryExports.entryExports;
            assert(entryExports, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_001, errorCodes.runtimeDescMap, {
                remoteName: name1,
                remoteEntryUrl: entry,
                remoteEntryKey
            }));
            return entryExports;
        }).catch((e)=>{
            throw e;
        });
    });
    return _loadEntryNode.apply(this, arguments);
}
function getRemoteEntryUniqueKey(remoteInfo) {
    var entry = remoteInfo.entry, name1 = remoteInfo.name;
    return sdk.composeKeyWithSeparator(name1, entry);
}
function getRemoteEntry(_) {
    return _getRemoteEntry.apply(this, arguments);
}
function _getRemoteEntry() {
    _getRemoteEntry = _async_to_generator._(function*(ref) {
        var origin = ref.origin, remoteEntryExports = ref.remoteEntryExports, remoteInfo = ref.remoteInfo;
        var uniqueKey = getRemoteEntryUniqueKey(remoteInfo);
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        if (!globalLoading[uniqueKey]) {
            var loadEntryHook = origin.remoteHandler.hooks.lifecycle.loadEntry;
            var loaderHook = origin.loaderHook;
            globalLoading[uniqueKey] = loadEntryHook.emit({
                loaderHook,
                remoteInfo,
                remoteEntryExports
            }).then((res)=>{
                if (res) {
                    return res;
                }
                return sdk.isBrowserEnv() ? loadEntryDom({
                    remoteInfo,
                    remoteEntryExports,
                    loaderHook
                }) : loadEntryNode({
                    remoteInfo,
                    loaderHook
                });
            });
        }
        return globalLoading[uniqueKey];
    });
    return _getRemoteEntry.apply(this, arguments);
}
function getRemoteInfo(remote) {
    return polyfills._extends({}, remote, {
        entry: 'entry' in remote ? remote.entry : '',
        type: remote.type || DEFAULT_REMOTE_TYPE,
        entryGlobalName: remote.entryGlobalName || remote.name,
        shareScope: remote.shareScope || DEFAULT_SCOPE
    });
}
var Module = /*#__PURE__*/ function() {
    function Module(ref) {
        var remoteInfo = ref.remoteInfo, host = ref.host;
        _class_call_check._(this, Module);
        this.inited = false;
        this.lib = undefined;
        this.remoteInfo = remoteInfo;
        this.host = host;
    }
    _create_class._(Module, [
        {
            key: "getEntry",
            value: function getEntry() {
                var _this = this;
                return _async_to_generator._(function*() {
                    if (_this.remoteEntryExports) {
                        return _this.remoteEntryExports;
                    }
                    var remoteEntryExports;
                    try {
                        remoteEntryExports = yield getRemoteEntry({
                            origin: _this.host,
                            remoteInfo: _this.remoteInfo,
                            remoteEntryExports: _this.remoteEntryExports
                        });
                    } catch (err) {
                        var uniqueKey = getRemoteEntryUniqueKey(_this.remoteInfo);
                        remoteEntryExports = yield _this.host.loaderHook.lifecycle.loadEntryError.emit({
                            getRemoteEntry,
                            origin: _this.host,
                            remoteInfo: _this.remoteInfo,
                            remoteEntryExports: _this.remoteEntryExports,
                            globalLoading,
                            uniqueKey
                        });
                    }
                    assert(remoteEntryExports, `remoteEntryExports is undefined \n ${sdk.safeToString(_this.remoteInfo)}`);
                    _this.remoteEntryExports = remoteEntryExports;
                    return _this.remoteEntryExports;
                })();
            }
        },
        {
            key: "get",
            value: // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
            function get(id, expose, options, remoteSnapshot) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var _ref = options || {
                        loadFactory: true
                    }, _ref_loadFactory = _ref.loadFactory, loadFactory = _ref_loadFactory === void 0 ? true : _ref_loadFactory;
                    // Get remoteEntry.js
                    var remoteEntryExports = yield _this.getEntry();
                    if (!_this.inited) {
                        var localShareScopeMap = _this.host.shareScopeMap;
                        var shareScopeKeys = Array.isArray(_this.remoteInfo.shareScope) ? _this.remoteInfo.shareScope : [
                            _this.remoteInfo.shareScope
                        ];
                        if (!shareScopeKeys.length) {
                            shareScopeKeys.push('default');
                        }
                        shareScopeKeys.forEach((shareScopeKey)=>{
                            if (!localShareScopeMap[shareScopeKey]) {
                                localShareScopeMap[shareScopeKey] = {};
                            }
                        });
                        // TODO: compate legacy init params, should use shareScopeMap if exist
                        var shareScope = localShareScopeMap[shareScopeKeys[0]];
                        var initScope = [];
                        var remoteEntryInitOptions = {
                            version: _this.remoteInfo.version || '',
                            shareScopeKeys: Array.isArray(_this.remoteInfo.shareScope) ? shareScopeKeys : _this.remoteInfo.shareScope || 'default'
                        };
                        // Help to find host instance
                        Object.defineProperty(remoteEntryInitOptions, 'shareScopeMap', {
                            value: localShareScopeMap,
                            // remoteEntryInitOptions will be traversed and assigned during container init, ,so this attribute is not allowed to be traversed
                            enumerable: false
                        });
                        var initContainerOptions = yield _this.host.hooks.lifecycle.beforeInitContainer.emit({
                            shareScope,
                            // @ts-ignore shareScopeMap will be set by Object.defineProperty
                            remoteEntryInitOptions,
                            initScope,
                            remoteInfo: _this.remoteInfo,
                            origin: _this.host
                        });
                        if (typeof (remoteEntryExports == null ? void 0 : remoteEntryExports.init) === 'undefined') {
                            error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_002, errorCodes.runtimeDescMap, {
                                remoteName: name,
                                remoteEntryUrl: _this.remoteInfo.entry,
                                remoteEntryKey: _this.remoteInfo.entryGlobalName
                            }));
                        }
                        yield remoteEntryExports.init(initContainerOptions.shareScope, initContainerOptions.initScope, initContainerOptions.remoteEntryInitOptions);
                        yield _this.host.hooks.lifecycle.initContainer.emit(polyfills._extends({}, initContainerOptions, {
                            id,
                            remoteSnapshot,
                            remoteEntryExports
                        }));
                    }
                    _this.lib = remoteEntryExports;
                    _this.inited = true;
                    var moduleFactory;
                    moduleFactory = yield _this.host.loaderHook.lifecycle.getModuleFactory.emit({
                        remoteEntryExports,
                        expose,
                        moduleInfo: _this.remoteInfo
                    });
                    // get exposeGetter
                    if (!moduleFactory) {
                        moduleFactory = yield remoteEntryExports.get(expose);
                    }
                    assert(moduleFactory, `${getFMId(_this.remoteInfo)} remote don't export ${expose}.`);
                    // keep symbol for module name always one format
                    var symbolName = processModuleAlias(_this.remoteInfo.name, expose);
                    var wrapModuleFactory = _this.wraperFactory(moduleFactory, symbolName);
                    if (!loadFactory) {
                        return wrapModuleFactory;
                    }
                    var exposeContent = yield wrapModuleFactory();
                    return exposeContent;
                })();
            }
        },
        {
            key: "wraperFactory",
            value: function wraperFactory(moduleFactory, id) {
                function defineModuleId(res, id) {
                    if (res && typeof res === 'object' && Object.isExtensible(res) && !Object.getOwnPropertyDescriptor(res, Symbol.for('mf_module_id'))) {
                        Object.defineProperty(res, Symbol.for('mf_module_id'), {
                            value: id,
                            enumerable: false
                        });
                    }
                }
                if (moduleFactory instanceof Promise) {
                    return /*#__PURE__*/ _async_to_generator._(function*() {
                        var res = yield moduleFactory();
                        // This parameter is used for bridge debugging
                        defineModuleId(res, id);
                        return res;
                    });
                } else {
                    return ()=>{
                        var res = moduleFactory();
                        // This parameter is used for bridge debugging
                        defineModuleId(res, id);
                        return res;
                    };
                }
            }
        }
    ]);
    return Module;
}();
var SyncHook = /*#__PURE__*/ function() {
    function SyncHook(type) {
        _class_call_check._(this, SyncHook);
        this.type = '';
        this.listeners = new Set();
        if (type) {
            this.type = type;
        }
    }
    _create_class._(SyncHook, [
        {
            key: "on",
            value: function on(fn) {
                if (typeof fn === 'function') {
                    this.listeners.add(fn);
                }
            }
        },
        {
            key: "once",
            value: function once(fn) {
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                var self = this;
                this.on(function wrapper(...args) {
                    self.remove(wrapper);
                    // eslint-disable-next-line prefer-spread
                    return fn.apply(null, args);
                });
            }
        },
        {
            key: "emit",
            value: function emit(...data) {
                var result;
                if (this.listeners.size > 0) {
                    // eslint-disable-next-line prefer-spread
                    this.listeners.forEach((fn)=>{
                        result = fn.apply(void 0, _to_consumable_array._(data));
                    });
                }
                return result;
            }
        },
        {
            key: "remove",
            value: function remove(fn) {
                this.listeners.delete(fn);
            }
        },
        {
            key: "removeAll",
            value: function removeAll() {
                this.listeners.clear();
            }
        }
    ]);
    return SyncHook;
}();
var AsyncHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(AsyncHook, SyncHook);
    function AsyncHook() {
        _class_call_check._(this, AsyncHook);
        return _call_super._(this, AsyncHook, arguments);
    }
    _create_class._(AsyncHook, [
        {
            key: "emit",
            value: function emit(...data) {
                var result;
                var ls = Array.from(this.listeners);
                if (ls.length > 0) {
                    var i = 0;
                    var call = (prev)=>{
                        if (prev === false) {
                            return false; // Abort process
                        } else if (i < ls.length) {
                            return Promise.resolve(ls[i++].apply(null, data)).then(call);
                        } else {
                            return prev;
                        }
                    };
                    result = call();
                }
                return Promise.resolve(result);
            }
        }
    ]);
    return AsyncHook;
}(SyncHook);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function checkReturnData(originalData, returnedData) {
    if (!isObject(returnedData)) {
        return false;
    }
    if (originalData !== returnedData) {
        // eslint-disable-next-line no-restricted-syntax
        for(var key in originalData){
            if (!(key in returnedData)) {
                return false;
            }
        }
    }
    return true;
}
var SyncWaterfallHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(SyncWaterfallHook, SyncHook);
    function SyncWaterfallHook(type) {
        _class_call_check._(this, SyncWaterfallHook);
        var _this;
        _this = _call_super._(this, SyncWaterfallHook), _this.onerror = error;
        _this.type = type;
        return _this;
    }
    _create_class._(SyncWaterfallHook, [
        {
            key: "emit",
            value: function emit(data) {
                if (!isObject(data)) {
                    error(`The data for the "${this.type}" hook should be an object.`);
                }
                for (var fn of this.listeners){
                    try {
                        var tempData = fn(data);
                        if (checkReturnData(data, tempData)) {
                            data = tempData;
                        } else {
                            this.onerror(`A plugin returned an unacceptable value for the "${this.type}" type.`);
                            break;
                        }
                    } catch (e) {
                        warn(e);
                        this.onerror(e);
                    }
                }
                return data;
            }
        }
    ]);
    return SyncWaterfallHook;
}(SyncHook);
var AsyncWaterfallHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(AsyncWaterfallHook, SyncHook);
    function AsyncWaterfallHook(type) {
        _class_call_check._(this, AsyncWaterfallHook);
        var _this;
        _this = _call_super._(this, AsyncWaterfallHook), _this.onerror = error;
        _this.type = type;
        return _this;
    }
    _create_class._(AsyncWaterfallHook, [
        {
            key: "emit",
            value: function emit(data) {
                if (!isObject(data)) {
                    error(`The response data for the "${this.type}" hook must be an object.`);
                }
                var ls = Array.from(this.listeners);
                if (ls.length > 0) {
                    var i = 0;
                    var processError = (e)=>{
                        warn(e);
                        this.onerror(e);
                        return data;
                    };
                    var call = (prevData)=>{
                        if (checkReturnData(data, prevData)) {
                            data = prevData;
                            if (i < ls.length) {
                                try {
                                    return Promise.resolve(ls[i++](data)).then(call, processError);
                                } catch (e) {
                                    return processError(e);
                                }
                            }
                        } else {
                            this.onerror(`A plugin returned an incorrect value for the "${this.type}" type.`);
                        }
                        return data;
                    };
                    return Promise.resolve(call(data));
                }
                return Promise.resolve(data);
            }
        }
    ]);
    return AsyncWaterfallHook;
}(SyncHook);
var PluginSystem = /*#__PURE__*/ function() {
    function PluginSystem(lifecycle) {
        _class_call_check._(this, PluginSystem);
        this.registerPlugins = {};
        this.lifecycle = lifecycle;
        this.lifecycleKeys = Object.keys(lifecycle);
    }
    _create_class._(PluginSystem, [
        {
            key: "applyPlugin",
            value: function applyPlugin(plugin) {
                assert(isPlainObject(plugin), 'Plugin configuration is invalid.');
                // The plugin's name is mandatory and must be unique
                var pluginName = plugin.name;
                assert(pluginName, 'A name must be provided by the plugin.');
                if (!this.registerPlugins[pluginName]) {
                    this.registerPlugins[pluginName] = plugin;
                    Object.keys(this.lifecycle).forEach((key)=>{
                        var pluginLife = plugin[key];
                        if (pluginLife) {
                            this.lifecycle[key].on(pluginLife);
                        }
                    });
                }
            }
        },
        {
            key: "removePlugin",
            value: function removePlugin(pluginName) {
                assert(pluginName, 'A name is required.');
                var plugin = this.registerPlugins[pluginName];
                assert(plugin, `The plugin "${pluginName}" is not registered.`);
                Object.keys(plugin).forEach((key)=>{
                    if (key !== 'name') {
                        this.lifecycle[key].remove(plugin[key]);
                    }
                });
            }
        },
        {
            // eslint-disable-next-line @typescript-eslint/no-shadow
            key: "inherit",
            value: function inherit(ref) {
                var lifecycle = ref.lifecycle, registerPlugins = ref.registerPlugins;
                Object.keys(lifecycle).forEach((hookName)=>{
                    assert(!this.lifecycle[hookName], `The hook "${hookName}" has a conflict and cannot be inherited.`);
                    this.lifecycle[hookName] = lifecycle[hookName];
                });
                Object.keys(registerPlugins).forEach((pluginName)=>{
                    assert(!this.registerPlugins[pluginName], `The plugin "${pluginName}" has a conflict and cannot be inherited.`);
                    this.applyPlugin(registerPlugins[pluginName]);
                });
            }
        }
    ]);
    return PluginSystem;
}();
function defaultPreloadArgs(preloadConfig) {
    return polyfills._extends({
        resourceCategory: 'sync',
        share: true,
        depsRemote: true,
        prefetchInterface: false
    }, preloadConfig);
}
function formatPreloadArgs(remotes, preloadArgs) {
    return preloadArgs.map((args)=>{
        var remoteInfo = matchRemote(remotes, args.nameOrAlias);
        assert(remoteInfo, `Unable to preload ${args.nameOrAlias} as it is not included in ${!remoteInfo && sdk.safeToString({
            remoteInfo,
            remotes
        })}`);
        return {
            remote: remoteInfo,
            preloadConfig: defaultPreloadArgs(args)
        };
    });
}
function normalizePreloadExposes(exposes) {
    if (!exposes) {
        return [];
    }
    return exposes.map((expose)=>{
        if (expose === '.') {
            return expose;
        }
        if (expose.startsWith('./')) {
            return expose.replace('./', '');
        }
        return expose;
    });
}
function preloadAssets(remoteInfo, host, assets, ref) {
    var useLinkPreload = ref === void 0 ? true : ref;
    var cssAssets = assets.cssAssets, jsAssetsWithoutEntry = assets.jsAssetsWithoutEntry, entryAssets = assets.entryAssets;
    if (host.options.inBrowser) {
        entryAssets.forEach((asset)=>{
            var moduleInfo = asset.moduleInfo;
            var module = host.moduleCache.get(remoteInfo.name);
            if (module) {
                getRemoteEntry({
                    origin: host,
                    remoteInfo: moduleInfo,
                    remoteEntryExports: module.remoteEntryExports
                });
            } else {
                getRemoteEntry({
                    origin: host,
                    remoteInfo: moduleInfo,
                    remoteEntryExports: undefined
                });
            }
        });
        if (useLinkPreload) {
            var defaultAttrs = {
                rel: 'preload',
                as: 'style'
            };
            cssAssets.forEach((cssUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: cssUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    }
                }), cssEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(cssEl);
            });
        } else {
            var defaultAttrs1 = {
                rel: 'stylesheet',
                type: 'text/css'
            };
            cssAssets.forEach((cssUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: cssUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs1,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    },
                    needDeleteLink: false
                }), cssEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(cssEl);
            });
        }
        if (useLinkPreload) {
            var defaultAttrs2 = {
                rel: 'preload',
                as: 'script'
            };
            jsAssetsWithoutEntry.forEach((jsUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: jsUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs2,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    }
                }), linkEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(linkEl);
            });
        } else {
            var defaultAttrs3 = {
                fetchpriority: 'high',
                type: (remoteInfo == null ? void 0 : remoteInfo.type) === 'module' ? 'module' : 'text/javascript'
            };
            jsAssetsWithoutEntry.forEach((jsUrl)=>{
                var _sdk_createScript = sdk.createScript({
                    url: jsUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs3,
                    createScriptHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createScript.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLScriptElement) {
                            return res;
                        }
                        return;
                    },
                    needDeleteScript: true
                }), scriptEl = _sdk_createScript.script, needAttach = _sdk_createScript.needAttach;
                needAttach && document.head.appendChild(scriptEl);
            });
        }
    }
}
function assignRemoteInfo(remoteInfo, remoteSnapshot) {
    var remoteEntryInfo = getRemoteEntryInfoFromSnapshot(remoteSnapshot);
    if (!remoteEntryInfo.url) {
        error(`The attribute remoteEntry of ${remoteInfo.name} must not be undefined.`);
    }
    var entryUrl = sdk.getResourceUrl(remoteSnapshot, remoteEntryInfo.url);
    if (!sdk.isBrowserEnv() && !entryUrl.startsWith('http')) {
        entryUrl = `https:${entryUrl}`;
    }
    remoteInfo.type = remoteEntryInfo.type;
    remoteInfo.entryGlobalName = remoteEntryInfo.globalName;
    remoteInfo.entry = entryUrl;
    remoteInfo.version = remoteSnapshot.version;
    remoteInfo.buildVersion = remoteSnapshot.buildVersion;
}
function snapshotPlugin() {
    return {
        name: 'snapshot-plugin',
        afterResolve (args) {
            return _async_to_generator._(function*() {
                var remote = args.remote, pkgNameOrAlias = args.pkgNameOrAlias, expose = args.expose, origin = args.origin, remoteInfo = args.remoteInfo;
                if (!isRemoteInfoWithEntry(remote) || !isPureRemoteEntry(remote)) {
                    var _ref = yield origin.snapshotHandler.loadRemoteSnapshotInfo(remote), remoteSnapshot = _ref.remoteSnapshot, globalSnapshot = _ref.globalSnapshot;
                    assignRemoteInfo(remoteInfo, remoteSnapshot);
                    // preloading assets
                    var preloadOptions = {
                        remote,
                        preloadConfig: {
                            nameOrAlias: pkgNameOrAlias,
                            exposes: [
                                expose
                            ],
                            resourceCategory: 'sync',
                            share: false,
                            depsRemote: false
                        }
                    };
                    var assets = yield origin.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({
                        origin,
                        preloadOptions,
                        remoteInfo,
                        remote,
                        remoteSnapshot,
                        globalSnapshot
                    });
                    if (assets) {
                        preloadAssets(remoteInfo, origin, assets, false);
                    }
                    return polyfills._extends({}, args, {
                        remoteSnapshot
                    });
                }
                return args;
            })();
        }
    };
}
// name
// name:version
function splitId(id) {
    var splitInfo = id.split(':');
    if (splitInfo.length === 1) {
        return {
            name: splitInfo[0],
            version: undefined
        };
    } else if (splitInfo.length === 2) {
        return {
            name: splitInfo[0],
            version: splitInfo[1]
        };
    } else {
        return {
            name: splitInfo[1],
            version: splitInfo[2]
        };
    }
}
// Traverse all nodes in moduleInfo and traverse the entire snapshot
function traverseModuleInfo(globalSnapshot, remoteInfo, traverse, isRoot, ref, remoteSnapshot) {
    var memo = ref === void 0 ? {} : ref;
    var id = getFMId(remoteInfo);
    var _getInfoWithoutType = getInfoWithoutType(globalSnapshot, id), snapshotValue = _getInfoWithoutType.value;
    var effectiveRemoteSnapshot = remoteSnapshot || snapshotValue;
    if (effectiveRemoteSnapshot && !sdk.isManifestProvider(effectiveRemoteSnapshot)) {
        traverse(effectiveRemoteSnapshot, remoteInfo, isRoot);
        if (effectiveRemoteSnapshot.remotesInfo) {
            var remoteKeys = Object.keys(effectiveRemoteSnapshot.remotesInfo);
            for (var key of remoteKeys){
                if (memo[key]) {
                    continue;
                }
                memo[key] = true;
                var subRemoteInfo = splitId(key);
                var remoteValue = effectiveRemoteSnapshot.remotesInfo[key];
                traverseModuleInfo(globalSnapshot, {
                    name: subRemoteInfo.name,
                    version: remoteValue.matchedVersion
                }, traverse, false, memo, undefined);
            }
        }
    }
}
var isExisted = (type, url)=>{
    return document.querySelector(`${type}[${type === 'link' ? 'href' : 'src'}="${url}"]`);
};
// eslint-disable-next-line max-lines-per-function
function generatePreloadAssets(origin, preloadOptions, remote, globalSnapshot, remoteSnapshot) {
    var cssAssets = [];
    var jsAssets = [];
    var entryAssets = [];
    var loadedSharedJsAssets = new Set();
    var loadedSharedCssAssets = new Set();
    var options = origin.options;
    var rootPreloadConfig = preloadOptions.preloadConfig;
    var depsRemote = rootPreloadConfig.depsRemote;
    var memo = {};
    traverseModuleInfo(globalSnapshot, remote, (moduleInfoSnapshot, remoteInfo, isRoot)=>{
        var preloadConfig;
        if (isRoot) {
            preloadConfig = rootPreloadConfig;
        } else {
            if (Array.isArray(depsRemote)) {
                // eslint-disable-next-line array-callback-return
                var findPreloadConfig = depsRemote.find((remoteConfig)=>{
                    if (remoteConfig.nameOrAlias === remoteInfo.name || remoteConfig.nameOrAlias === remoteInfo.alias) {
                        return true;
                    }
                    return false;
                });
                if (!findPreloadConfig) {
                    return;
                }
                preloadConfig = defaultPreloadArgs(findPreloadConfig);
            } else if (depsRemote === true) {
                preloadConfig = rootPreloadConfig;
            } else {
                return;
            }
        }
        var remoteEntryUrl = sdk.getResourceUrl(moduleInfoSnapshot, getRemoteEntryInfoFromSnapshot(moduleInfoSnapshot).url);
        if (remoteEntryUrl) {
            entryAssets.push({
                name: remoteInfo.name,
                moduleInfo: {
                    name: remoteInfo.name,
                    entry: remoteEntryUrl,
                    type: 'remoteEntryType' in moduleInfoSnapshot ? moduleInfoSnapshot.remoteEntryType : 'global',
                    entryGlobalName: 'globalName' in moduleInfoSnapshot ? moduleInfoSnapshot.globalName : remoteInfo.name,
                    shareScope: '',
                    version: 'version' in moduleInfoSnapshot ? moduleInfoSnapshot.version : undefined
                },
                url: remoteEntryUrl
            });
        }
        var moduleAssetsInfo = 'modules' in moduleInfoSnapshot ? moduleInfoSnapshot.modules : [];
        var normalizedPreloadExposes = normalizePreloadExposes(preloadConfig.exposes);
        if (normalizedPreloadExposes.length && 'modules' in moduleInfoSnapshot) {
            var _moduleInfoSnapshot_modules;
            moduleAssetsInfo = moduleInfoSnapshot == null ? void 0 : (_moduleInfoSnapshot_modules = moduleInfoSnapshot.modules) == null ? void 0 : _moduleInfoSnapshot_modules.reduce((assets, moduleAssetInfo)=>{
                if ((normalizedPreloadExposes == null ? void 0 : normalizedPreloadExposes.indexOf(moduleAssetInfo.moduleName)) !== -1) {
                    assets.push(moduleAssetInfo);
                }
                return assets;
            }, []);
        }
        function handleAssets(assets) {
            var assetsRes = assets.map((asset)=>sdk.getResourceUrl(moduleInfoSnapshot, asset));
            if (preloadConfig.filter) {
                return assetsRes.filter(preloadConfig.filter);
            }
            return assetsRes;
        }
        if (moduleAssetsInfo) {
            var assetsLength = moduleAssetsInfo.length;
            for(var index = 0; index < assetsLength; index++){
                var assetsInfo = moduleAssetsInfo[index];
                var exposeFullPath = `${remoteInfo.name}/${assetsInfo.moduleName}`;
                origin.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({
                    id: assetsInfo.moduleName === '.' ? remoteInfo.name : exposeFullPath,
                    name: remoteInfo.name,
                    remoteSnapshot: moduleInfoSnapshot,
                    preloadConfig,
                    remote: remoteInfo,
                    origin
                });
                var preloaded = getPreloaded(exposeFullPath);
                if (preloaded) {
                    continue;
                }
                if (preloadConfig.resourceCategory === 'all') {
                    var _cssAssets, _cssAssets1, _jsAssets, _jsAssets1;
                    (_cssAssets = cssAssets).push.apply(_cssAssets, _to_consumable_array._(handleAssets(assetsInfo.assets.css.async)));
                    (_cssAssets1 = cssAssets).push.apply(_cssAssets1, _to_consumable_array._(handleAssets(assetsInfo.assets.css.sync)));
                    (_jsAssets = jsAssets).push.apply(_jsAssets, _to_consumable_array._(handleAssets(assetsInfo.assets.js.async)));
                    (_jsAssets1 = jsAssets).push.apply(_jsAssets1, _to_consumable_array._(handleAssets(assetsInfo.assets.js.sync)));
                // eslint-disable-next-line no-constant-condition
                } else if (preloadConfig.resourceCategory = 'sync') {
                    var _cssAssets2, _jsAssets2;
                    (_cssAssets2 = cssAssets).push.apply(_cssAssets2, _to_consumable_array._(handleAssets(assetsInfo.assets.css.sync)));
                    (_jsAssets2 = jsAssets).push.apply(_jsAssets2, _to_consumable_array._(handleAssets(assetsInfo.assets.js.sync)));
                }
                setPreloaded(exposeFullPath);
            }
        }
    }, true, memo, remoteSnapshot);
    if (remoteSnapshot.shared) {
        var collectSharedAssets = (shareInfo, snapshotShared)=>{
            var registeredShared = getRegisteredShare(origin.shareScopeMap, snapshotShared.sharedName, shareInfo, origin.sharedHandler.hooks.lifecycle.resolveShare);
            // If the global share does not exist, or the lib function does not exist, it means that the shared has not been loaded yet and can be preloaded.
            if (registeredShared && typeof registeredShared.lib === 'function') {
                snapshotShared.assets.js.sync.forEach((asset)=>{
                    loadedSharedJsAssets.add(asset);
                });
                snapshotShared.assets.css.sync.forEach((asset)=>{
                    loadedSharedCssAssets.add(asset);
                });
            }
        };
        remoteSnapshot.shared.forEach((shared)=>{
            var _options_shared;
            var shareInfos = (_options_shared = options.shared) == null ? void 0 : _options_shared[shared.sharedName];
            if (!shareInfos) {
                return;
            }
            // if no version, preload all shared
            var sharedOptions = shared.version ? shareInfos.find((s)=>s.version === shared.version) : shareInfos;
            if (!sharedOptions) {
                return;
            }
            var arrayShareInfo = arrayOptions(sharedOptions);
            arrayShareInfo.forEach((s)=>{
                collectSharedAssets(s, shared);
            });
        });
    }
    var needPreloadJsAssets = jsAssets.filter((asset)=>!loadedSharedJsAssets.has(asset) && !isExisted('script', asset));
    var needPreloadCssAssets = cssAssets.filter((asset)=>!loadedSharedCssAssets.has(asset) && !isExisted('link', asset));
    return {
        cssAssets: needPreloadCssAssets,
        jsAssetsWithoutEntry: needPreloadJsAssets,
        entryAssets: entryAssets.filter((entry)=>!isExisted('script', entry.url))
    };
}
var generatePreloadAssetsPlugin = function() {
    return {
        name: 'generate-preload-assets-plugin',
        generatePreloadAssets (args) {
            return _async_to_generator._(function*() {
                var origin = args.origin, preloadOptions = args.preloadOptions, remoteInfo = args.remoteInfo, remote = args.remote, globalSnapshot = args.globalSnapshot, remoteSnapshot = args.remoteSnapshot;
                if (!sdk.isBrowserEnv()) {
                    return {
                        cssAssets: [],
                        jsAssetsWithoutEntry: [],
                        entryAssets: []
                    };
                }
                if (isRemoteInfoWithEntry(remote) && isPureRemoteEntry(remote)) {
                    return {
                        cssAssets: [],
                        jsAssetsWithoutEntry: [],
                        entryAssets: [
                            {
                                name: remote.name,
                                url: remote.entry,
                                moduleInfo: {
                                    name: remoteInfo.name,
                                    entry: remote.entry,
                                    type: remoteInfo.type || 'global',
                                    entryGlobalName: '',
                                    shareScope: ''
                                }
                            }
                        ]
                    };
                }
                assignRemoteInfo(remoteInfo, remoteSnapshot);
                var assets = generatePreloadAssets(origin, preloadOptions, remoteInfo, globalSnapshot, remoteSnapshot);
                return assets;
            })();
        }
    };
};
function getGlobalRemoteInfo(moduleInfo, origin) {
    var hostGlobalSnapshot = getGlobalSnapshotInfoByModuleInfo({
        name: origin.options.name,
        version: origin.options.version
    });
    // get remote detail info from global
    var globalRemoteInfo = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, moduleInfo.name).value;
    if (globalRemoteInfo && globalRemoteInfo.matchedVersion) {
        return {
            hostGlobalSnapshot,
            globalSnapshot: getGlobalSnapshot(),
            remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({
                name: moduleInfo.name,
                version: globalRemoteInfo.matchedVersion
            })
        };
    }
    return {
        hostGlobalSnapshot: undefined,
        globalSnapshot: getGlobalSnapshot(),
        remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({
            name: moduleInfo.name,
            version: 'version' in moduleInfo ? moduleInfo.version : undefined
        })
    };
}
var SnapshotHandler = /*#__PURE__*/ function() {
    function SnapshotHandler(HostInstance) {
        _class_call_check._(this, SnapshotHandler);
        this.loadingHostSnapshot = null;
        this.manifestCache = new Map();
        this.hooks = new PluginSystem({
            beforeLoadRemoteSnapshot: new AsyncHook('beforeLoadRemoteSnapshot'),
            loadSnapshot: new AsyncWaterfallHook('loadGlobalSnapshot'),
            loadRemoteSnapshot: new AsyncWaterfallHook('loadRemoteSnapshot'),
            afterLoadSnapshot: new AsyncWaterfallHook('afterLoadSnapshot')
        });
        this.manifestLoading = Global.__FEDERATION__.__MANIFEST_LOADING__;
        this.HostInstance = HostInstance;
        this.loaderHook = HostInstance.loaderHook;
    }
    _create_class._(SnapshotHandler, [
        {
            key: "loadSnapshot",
            value: function loadSnapshot(moduleInfo) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var options = _this.HostInstance.options;
                    var _this_getGlobalRemoteInfo = _this.getGlobalRemoteInfo(moduleInfo), hostGlobalSnapshot = _this_getGlobalRemoteInfo.hostGlobalSnapshot, remoteSnapshot = _this_getGlobalRemoteInfo.remoteSnapshot, globalSnapshot = _this_getGlobalRemoteInfo.globalSnapshot;
                    var _ref = yield _this.hooks.lifecycle.loadSnapshot.emit({
                        options,
                        moduleInfo,
                        hostGlobalSnapshot,
                        remoteSnapshot,
                        globalSnapshot
                    }), globalRemoteSnapshot = _ref.remoteSnapshot, globalSnapshotRes = _ref.globalSnapshot;
                    return {
                        remoteSnapshot: globalRemoteSnapshot,
                        globalSnapshot: globalSnapshotRes
                    };
                })();
            }
        },
        {
            key: "loadRemoteSnapshotInfo",
            value: // eslint-disable-next-line max-lines-per-function
            function loadRemoteSnapshotInfo(moduleInfo) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var options = _this.HostInstance.options;
                    yield _this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({
                        options,
                        moduleInfo
                    });
                    var hostSnapshot = getGlobalSnapshotInfoByModuleInfo({
                        name: _this.HostInstance.options.name,
                        version: _this.HostInstance.options.version
                    });
                    if (!hostSnapshot) {
                        hostSnapshot = {
                            version: _this.HostInstance.options.version || '',
                            remoteEntry: '',
                            remotesInfo: {}
                        };
                        addGlobalSnapshot({
                            [_this.HostInstance.options.name]: hostSnapshot
                        });
                    }
                    // In dynamic loadRemote scenarios, incomplete remotesInfo delivery may occur. In such cases, the remotesInfo in the host needs to be completed in the snapshot at runtime.
                    // This ensures the snapshot's integrity and helps the chrome plugin correctly identify all producer modules, ensuring that proxyable producer modules will not be missing.
                    if (hostSnapshot && 'remotesInfo' in hostSnapshot && !getInfoWithoutType(hostSnapshot.remotesInfo, moduleInfo.name).value) {
                        if ('version' in moduleInfo || 'entry' in moduleInfo) {
                            hostSnapshot.remotesInfo = polyfills._extends({}, hostSnapshot == null ? void 0 : hostSnapshot.remotesInfo, {
                                [moduleInfo.name]: {
                                    matchedVersion: 'version' in moduleInfo ? moduleInfo.version : moduleInfo.entry
                                }
                            });
                        }
                    }
                    var _this_getGlobalRemoteInfo = _this.getGlobalRemoteInfo(moduleInfo), hostGlobalSnapshot = _this_getGlobalRemoteInfo.hostGlobalSnapshot, remoteSnapshot = _this_getGlobalRemoteInfo.remoteSnapshot, globalSnapshot = _this_getGlobalRemoteInfo.globalSnapshot;
                    var _ref = yield _this.hooks.lifecycle.loadSnapshot.emit({
                        options,
                        moduleInfo,
                        hostGlobalSnapshot,
                        remoteSnapshot,
                        globalSnapshot
                    }), globalRemoteSnapshot = _ref.remoteSnapshot, globalSnapshotRes = _ref.globalSnapshot;
                    var mSnapshot;
                    var gSnapshot;
                    // global snapshot includes manifest or module info includes manifest
                    if (globalRemoteSnapshot) {
                        if (sdk.isManifestProvider(globalRemoteSnapshot)) {
                            var remoteEntry = sdk.isBrowserEnv() ? globalRemoteSnapshot.remoteEntry : globalRemoteSnapshot.ssrRemoteEntry || globalRemoteSnapshot.remoteEntry || '';
                            var moduleSnapshot = yield _this.getManifestJson(remoteEntry, moduleInfo, {});
                            // eslint-disable-next-line @typescript-eslint/no-shadow
                            var globalSnapshotRes1 = setGlobalSnapshotInfoByModuleInfo(polyfills._extends({}, moduleInfo, {
                                // The global remote may be overridden
                                // Therefore, set the snapshot key to the global address of the actual request
                                entry: remoteEntry
                            }), moduleSnapshot);
                            mSnapshot = moduleSnapshot;
                            gSnapshot = globalSnapshotRes1;
                        } else {
                            var _ref1 = yield _this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: _this.HostInstance.options,
                                moduleInfo,
                                remoteSnapshot: globalRemoteSnapshot,
                                from: 'global'
                            }), remoteSnapshotRes = _ref1.remoteSnapshot;
                            mSnapshot = remoteSnapshotRes;
                            gSnapshot = globalSnapshotRes;
                        }
                    } else {
                        if (isRemoteInfoWithEntry(moduleInfo)) {
                            // get from manifest.json and merge remote info from remote server
                            var moduleSnapshot1 = yield _this.getManifestJson(moduleInfo.entry, moduleInfo, {});
                            // eslint-disable-next-line @typescript-eslint/no-shadow
                            var globalSnapshotRes2 = setGlobalSnapshotInfoByModuleInfo(moduleInfo, moduleSnapshot1);
                            var _ref2 = yield _this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: _this.HostInstance.options,
                                moduleInfo,
                                remoteSnapshot: moduleSnapshot1,
                                from: 'global'
                            }), remoteSnapshotRes1 = _ref2.remoteSnapshot;
                            mSnapshot = remoteSnapshotRes1;
                            gSnapshot = globalSnapshotRes2;
                        } else {
                            error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_007, errorCodes.runtimeDescMap, {
                                hostName: moduleInfo.name,
                                hostVersion: moduleInfo.version,
                                globalSnapshot: JSON.stringify(globalSnapshotRes)
                            }));
                        }
                    }
                    yield _this.hooks.lifecycle.afterLoadSnapshot.emit({
                        options,
                        moduleInfo,
                        remoteSnapshot: mSnapshot
                    });
                    return {
                        remoteSnapshot: mSnapshot,
                        globalSnapshot: gSnapshot
                    };
                })();
            }
        },
        {
            key: "getGlobalRemoteInfo",
            value: function getGlobalRemoteInfo1(moduleInfo) {
                return getGlobalRemoteInfo(moduleInfo, this.HostInstance);
            }
        },
        {
            key: "getManifestJson",
            value: function getManifestJson(manifestUrl, moduleInfo, extraOptions) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var getManifest = /*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*() {
                            var manifestJson = _this.manifestCache.get(manifestUrl);
                            if (manifestJson) {
                                return manifestJson;
                            }
                            try {
                                var res = yield _this.loaderHook.lifecycle.fetch.emit(manifestUrl, {});
                                if (!res || !(res instanceof Response)) {
                                    res = yield fetch(manifestUrl, {});
                                }
                                manifestJson = yield res.json();
                            } catch (err) {
                                manifestJson = yield _this.HostInstance.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({
                                    id: manifestUrl,
                                    error: err,
                                    from: 'runtime',
                                    lifecycle: 'afterResolve',
                                    origin: _this.HostInstance
                                });
                                if (!manifestJson) {
                                    delete _this.manifestLoading[manifestUrl];
                                    error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_003, errorCodes.runtimeDescMap, {
                                        manifestUrl,
                                        moduleName: moduleInfo.name,
                                        hostName: _this.HostInstance.options.name
                                    }, `${err}`));
                                }
                            }
                            assert(manifestJson.metaData && manifestJson.exposes && manifestJson.shared, `${manifestUrl} is not a federation manifest`);
                            _this.manifestCache.set(manifestUrl, manifestJson);
                            return manifestJson;
                        });
                        return function getManifest() {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    var asyncLoadProcess = /*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*() {
                            var manifestJson = yield getManifest();
                            var remoteSnapshot = sdk.generateSnapshotFromManifest(manifestJson, {
                                version: manifestUrl
                            });
                            var _ref = yield _this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: _this.HostInstance.options,
                                moduleInfo,
                                manifestJson,
                                remoteSnapshot,
                                manifestUrl,
                                from: 'manifest'
                            }), remoteSnapshotRes = _ref.remoteSnapshot;
                            return remoteSnapshotRes;
                        });
                        return function asyncLoadProcess() {
                            return _ref.apply(this, arguments);
                        };
                    }();
                    if (!_this.manifestLoading[manifestUrl]) {
                        _this.manifestLoading[manifestUrl] = asyncLoadProcess().then((res)=>res);
                    }
                    return _this.manifestLoading[manifestUrl];
                })();
            }
        }
    ]);
    return SnapshotHandler;
}();
var SharedHandler = /*#__PURE__*/ function() {
    function SharedHandler(host) {
        _class_call_check._(this, SharedHandler);
        this.hooks = new PluginSystem({
            afterResolve: new AsyncWaterfallHook('afterResolve'),
            beforeLoadShare: new AsyncWaterfallHook('beforeLoadShare'),
            // not used yet
            loadShare: new AsyncHook(),
            resolveShare: new SyncWaterfallHook('resolveShare'),
            // maybe will change, temporarily for internal use only
            initContainerShareScopeMap: new SyncWaterfallHook('initContainerShareScopeMap')
        });
        this.host = host;
        this.shareScopeMap = {};
        this.initTokens = {};
        this._setGlobalShareScopeMap(host.options);
    }
    _create_class._(SharedHandler, [
        {
            // register shared in shareScopeMap
            key: "registerShared",
            value: function registerShared(globalOptions, userOptions) {
                var _formatShareConfigs = formatShareConfigs(globalOptions, userOptions), shareInfos = _formatShareConfigs.shareInfos, shared = _formatShareConfigs.shared;
                var sharedKeys = Object.keys(shareInfos);
                sharedKeys.forEach((sharedKey)=>{
                    var sharedVals = shareInfos[sharedKey];
                    sharedVals.forEach((sharedVal)=>{
                        var registeredShared = getRegisteredShare(this.shareScopeMap, sharedKey, sharedVal, this.hooks.lifecycle.resolveShare);
                        if (!registeredShared && sharedVal && sharedVal.lib) {
                            this.setShared({
                                pkgName: sharedKey,
                                lib: sharedVal.lib,
                                get: sharedVal.get,
                                loaded: true,
                                shared: sharedVal,
                                from: userOptions.name
                            });
                        }
                    });
                });
                return {
                    shareInfos,
                    shared
                };
            }
        },
        {
            key: "loadShare",
            value: function loadShare(pkgName, extraOptions) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var host = _this.host;
                    // This function performs the following steps:
                    // 1. Checks if the currently loaded share already exists, if not, it throws an error
                    // 2. Searches globally for a matching share, if found, it uses it directly
                    // 3. If not found, it retrieves it from the current share and stores the obtained share globally.
                    var shareInfo = getTargetSharedOptions({
                        pkgName,
                        extraOptions,
                        shareInfos: host.options.shared
                    });
                    if (shareInfo == null ? void 0 : shareInfo.scope) {
                        yield Promise.all(shareInfo.scope.map(/*#__PURE__*/ function() {
                            var _ref = _async_to_generator._(function*(shareScope) {
                                yield Promise.all(_this.initializeSharing(shareScope, {
                                    strategy: shareInfo.strategy
                                }));
                                return;
                            });
                            return function(shareScope) {
                                return _ref.apply(this, arguments);
                            };
                        }()));
                    }
                    var loadShareRes = yield _this.hooks.lifecycle.beforeLoadShare.emit({
                        pkgName,
                        shareInfo,
                        shared: host.options.shared,
                        origin: host
                    });
                    var shareInfoRes = loadShareRes.shareInfo;
                    // Assert that shareInfoRes exists, if not, throw an error
                    assert(shareInfoRes, `Cannot find ${pkgName} Share in the ${host.options.name}. Please ensure that the ${pkgName} Share parameters have been injected`);
                    // Retrieve from cache
                    var registeredShared = getRegisteredShare(_this.shareScopeMap, pkgName, shareInfoRes, _this.hooks.lifecycle.resolveShare);
                    var addUseIn = (shared)=>{
                        if (!shared.useIn) {
                            shared.useIn = [];
                        }
                        addUniqueItem(shared.useIn, host.options.name);
                    };
                    if (registeredShared && registeredShared.lib) {
                        addUseIn(registeredShared);
                        return registeredShared.lib;
                    } else if (registeredShared && registeredShared.loading && !registeredShared.loaded) {
                        var factory = yield registeredShared.loading;
                        registeredShared.loaded = true;
                        if (!registeredShared.lib) {
                            registeredShared.lib = factory;
                        }
                        addUseIn(registeredShared);
                        return factory;
                    } else if (registeredShared) {
                        var asyncLoadProcess = /*#__PURE__*/ function() {
                            var _ref = _async_to_generator._(function*() {
                                var factory = yield registeredShared.get();
                                shareInfoRes.lib = factory;
                                shareInfoRes.loaded = true;
                                addUseIn(shareInfoRes);
                                var gShared = getRegisteredShare(_this.shareScopeMap, pkgName, shareInfoRes, _this.hooks.lifecycle.resolveShare);
                                if (gShared) {
                                    gShared.lib = factory;
                                    gShared.loaded = true;
                                }
                                return factory;
                            });
                            return function asyncLoadProcess() {
                                return _ref.apply(this, arguments);
                            };
                        }();
                        var loading = asyncLoadProcess();
                        _this.setShared({
                            pkgName,
                            loaded: false,
                            shared: registeredShared,
                            from: host.options.name,
                            lib: null,
                            loading
                        });
                        return loading;
                    } else {
                        if (extraOptions == null ? void 0 : extraOptions.customShareInfo) {
                            return false;
                        }
                        var asyncLoadProcess1 = /*#__PURE__*/ function() {
                            var _ref = _async_to_generator._(function*() {
                                var factory = yield shareInfoRes.get();
                                shareInfoRes.lib = factory;
                                shareInfoRes.loaded = true;
                                addUseIn(shareInfoRes);
                                var gShared = getRegisteredShare(_this.shareScopeMap, pkgName, shareInfoRes, _this.hooks.lifecycle.resolveShare);
                                if (gShared) {
                                    gShared.lib = factory;
                                    gShared.loaded = true;
                                }
                                return factory;
                            });
                            return function asyncLoadProcess1() {
                                return _ref.apply(this, arguments);
                            };
                        }();
                        var loading1 = asyncLoadProcess1();
                        _this.setShared({
                            pkgName,
                            loaded: false,
                            shared: shareInfoRes,
                            from: host.options.name,
                            lib: null,
                            loading: loading1
                        });
                        return loading1;
                    }
                })();
            }
        },
        {
            /**
   * This function initializes the sharing sequence (executed only once per share scope).
   * It accepts one argument, the name of the share scope.
   * If the share scope does not exist, it creates one.
   */ // eslint-disable-next-line @typescript-eslint/member-ordering
            key: "initializeSharing",
            value: function initializeSharing(ref, extraOptions) {
                var shareScopeName = ref === void 0 ? DEFAULT_SCOPE : ref;
                var host = this.host;
                var from = extraOptions == null ? void 0 : extraOptions.from;
                var strategy = extraOptions == null ? void 0 : extraOptions.strategy;
                var initScope = extraOptions == null ? void 0 : extraOptions.initScope;
                var promises = [];
                if (from !== 'build') {
                    var initTokens = this.initTokens;
                    if (!initScope) initScope = [];
                    var initToken = initTokens[shareScopeName];
                    if (!initToken) initToken = initTokens[shareScopeName] = {
                        from: this.host.name
                    };
                    if (initScope.indexOf(initToken) >= 0) return promises;
                    initScope.push(initToken);
                }
                var shareScope = this.shareScopeMap;
                var hostName = host.options.name;
                // Creates a new share scope if necessary
                if (!shareScope[shareScopeName]) {
                    shareScope[shareScopeName] = {};
                }
                // Executes all initialization snippets from all accessible modules
                var scope = shareScope[shareScopeName];
                var register = (name1, shared)=>{
                    var _activeVersion_shareConfig;
                    var version = shared.version, eager = shared.eager;
                    scope[name1] = scope[name1] || {};
                    var versions = scope[name1];
                    var activeVersion = versions[version];
                    var activeVersionEager = Boolean(activeVersion && (activeVersion.eager || ((_activeVersion_shareConfig = activeVersion.shareConfig) == null ? void 0 : _activeVersion_shareConfig.eager)));
                    if (!activeVersion || activeVersion.strategy !== 'loaded-first' && !activeVersion.loaded && (Boolean(!eager) !== !activeVersionEager ? eager : hostName > activeVersion.from)) {
                        versions[version] = shared;
                    }
                };
                var initFn = (mod)=>mod && mod.init && mod.init(shareScope[shareScopeName], initScope);
                var initRemoteModule = /*#__PURE__*/ function() {
                    var _ref = _async_to_generator._(function*(key) {
                        var module = (yield host.remoteHandler.getRemoteModuleAndOptions({
                            id: key
                        })).module;
                        if (module.getEntry) {
                            var remoteEntryExports;
                            try {
                                remoteEntryExports = yield module.getEntry();
                            } catch (error) {
                                remoteEntryExports = yield host.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({
                                    id: key,
                                    error,
                                    from: 'runtime',
                                    lifecycle: 'beforeLoadShare',
                                    origin: host
                                });
                            }
                            if (!module.inited) {
                                yield initFn(remoteEntryExports);
                                module.inited = true;
                            }
                        }
                    });
                    return function initRemoteModule(key) {
                        return _ref.apply(this, arguments);
                    };
                }();
                Object.keys(host.options.shared).forEach((shareName)=>{
                    var sharedArr = host.options.shared[shareName];
                    sharedArr.forEach((shared)=>{
                        if (shared.scope.includes(shareScopeName)) {
                            register(shareName, shared);
                        }
                    });
                });
                // TODO: strategy==='version-first' need to be removed in the future
                if (host.options.shareStrategy === 'version-first' || strategy === 'version-first') {
                    host.options.remotes.forEach((remote)=>{
                        if (remote.shareScope === shareScopeName) {
                            promises.push(initRemoteModule(remote.name));
                        }
                    });
                }
                return promises;
            }
        },
        {
            // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.
            // 1. If the loaded shared already exists globally, then it will be reused
            // 2. If lib exists in local shared, it will be used directly
            // 3. If the local get returns something other than Promise, then it will be used directly
            key: "loadShareSync",
            value: function loadShareSync(pkgName, extraOptions) {
                var host = this.host;
                var shareInfo = getTargetSharedOptions({
                    pkgName,
                    extraOptions,
                    shareInfos: host.options.shared
                });
                if (shareInfo == null ? void 0 : shareInfo.scope) {
                    shareInfo.scope.forEach((shareScope)=>{
                        this.initializeSharing(shareScope, {
                            strategy: shareInfo.strategy
                        });
                    });
                }
                var registeredShared = getRegisteredShare(this.shareScopeMap, pkgName, shareInfo, this.hooks.lifecycle.resolveShare);
                var addUseIn = (shared)=>{
                    if (!shared.useIn) {
                        shared.useIn = [];
                    }
                    addUniqueItem(shared.useIn, host.options.name);
                };
                if (registeredShared) {
                    if (typeof registeredShared.lib === 'function') {
                        addUseIn(registeredShared);
                        if (!registeredShared.loaded) {
                            registeredShared.loaded = true;
                            if (registeredShared.from === host.options.name) {
                                shareInfo.loaded = true;
                            }
                        }
                        return registeredShared.lib;
                    }
                    if (typeof registeredShared.get === 'function') {
                        var module = registeredShared.get();
                        if (!(module instanceof Promise)) {
                            addUseIn(registeredShared);
                            this.setShared({
                                pkgName,
                                loaded: true,
                                from: host.options.name,
                                lib: module,
                                shared: registeredShared
                            });
                            return module;
                        }
                    }
                }
                if (shareInfo.lib) {
                    if (!shareInfo.loaded) {
                        shareInfo.loaded = true;
                    }
                    return shareInfo.lib;
                }
                if (shareInfo.get) {
                    var module1 = shareInfo.get();
                    if (module1 instanceof Promise) {
                        var errorCode = (extraOptions == null ? void 0 : extraOptions.from) === 'build' ? errorCodes.RUNTIME_005 : errorCodes.RUNTIME_006;
                        throw new Error(errorCodes.getShortErrorMsg(errorCode, errorCodes.runtimeDescMap, {
                            hostName: host.options.name,
                            sharedPkgName: pkgName
                        }));
                    }
                    shareInfo.lib = module1;
                    this.setShared({
                        pkgName,
                        loaded: true,
                        from: host.options.name,
                        lib: shareInfo.lib,
                        shared: shareInfo
                    });
                    return shareInfo.lib;
                }
                throw new Error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_006, errorCodes.runtimeDescMap, {
                    hostName: host.options.name,
                    sharedPkgName: pkgName
                }));
            }
        },
        {
            key: "initShareScopeMap",
            value: function initShareScopeMap(scopeName, shareScope, ref) {
                var extraOptions = ref === void 0 ? {} : ref;
                var host = this.host;
                this.shareScopeMap[scopeName] = shareScope;
                this.hooks.lifecycle.initContainerShareScopeMap.emit({
                    shareScope,
                    options: host.options,
                    origin: host,
                    scopeName,
                    hostShareScopeMap: extraOptions.hostShareScopeMap
                });
            }
        },
        {
            key: "setShared",
            value: function setShared(ref) {
                var pkgName = ref.pkgName, shared = ref.shared, from = ref.from, lib = ref.lib, loading = ref.loading, loaded = ref.loaded, get = ref.get;
                var version = shared.version, _shared_scope = shared.scope, scope = _shared_scope === void 0 ? 'default' : _shared_scope, shareInfo = polyfills._object_without_properties_loose(shared, [
                    "version",
                    "scope"
                ]);
                var scopes = Array.isArray(scope) ? scope : [
                    scope
                ];
                scopes.forEach((sc)=>{
                    if (!this.shareScopeMap[sc]) {
                        this.shareScopeMap[sc] = {};
                    }
                    if (!this.shareScopeMap[sc][pkgName]) {
                        this.shareScopeMap[sc][pkgName] = {};
                    }
                    if (!this.shareScopeMap[sc][pkgName][version]) {
                        this.shareScopeMap[sc][pkgName][version] = polyfills._extends({
                            version,
                            scope: [
                                'default'
                            ]
                        }, shareInfo, {
                            lib,
                            loaded,
                            loading
                        });
                        if (get) {
                            this.shareScopeMap[sc][pkgName][version].get = get;
                        }
                        return;
                    }
                    var registeredShared = this.shareScopeMap[sc][pkgName][version];
                    if (loading && !registeredShared.loading) {
                        registeredShared.loading = loading;
                    }
                });
            }
        },
        {
            key: "_setGlobalShareScopeMap",
            value: function _setGlobalShareScopeMap(hostOptions) {
                var globalShareScopeMap = getGlobalShareScope();
                var identifier = hostOptions.id || hostOptions.name;
                if (identifier && !globalShareScopeMap[identifier]) {
                    globalShareScopeMap[identifier] = this.shareScopeMap;
                }
            }
        }
    ]);
    return SharedHandler;
}();
var RemoteHandler = /*#__PURE__*/ function() {
    function RemoteHandler(host) {
        _class_call_check._(this, RemoteHandler);
        this.hooks = new PluginSystem({
            beforeRegisterRemote: new SyncWaterfallHook('beforeRegisterRemote'),
            registerRemote: new SyncWaterfallHook('registerRemote'),
            beforeRequest: new AsyncWaterfallHook('beforeRequest'),
            onLoad: new AsyncHook('onLoad'),
            handlePreloadModule: new SyncHook('handlePreloadModule'),
            errorLoadRemote: new AsyncHook('errorLoadRemote'),
            beforePreloadRemote: new AsyncHook('beforePreloadRemote'),
            generatePreloadAssets: new AsyncHook('generatePreloadAssets'),
            // not used yet
            afterPreloadRemote: new AsyncHook(),
            loadEntry: new AsyncHook()
        });
        this.host = host;
        this.idToRemoteMap = {};
    }
    _create_class._(RemoteHandler, [
        {
            key: "formatAndRegisterRemote",
            value: function formatAndRegisterRemote(globalOptions, userOptions) {
                var userRemotes = userOptions.remotes || [];
                return userRemotes.reduce((res, remote)=>{
                    this.registerRemote(remote, res, {
                        force: false
                    });
                    return res;
                }, globalOptions.remotes);
            }
        },
        {
            key: "setIdToRemoteMap",
            value: function setIdToRemoteMap(id, remoteMatchInfo) {
                var remote = remoteMatchInfo.remote, expose = remoteMatchInfo.expose;
                var name1 = remote.name, alias = remote.alias;
                this.idToRemoteMap[id] = {
                    name: remote.name,
                    expose
                };
                if (alias && id.startsWith(name1)) {
                    var idWithAlias = id.replace(name1, alias);
                    this.idToRemoteMap[idWithAlias] = {
                        name: remote.name,
                        expose
                    };
                    return;
                }
                if (alias && id.startsWith(alias)) {
                    var idWithName = id.replace(alias, name1);
                    this.idToRemoteMap[idWithName] = {
                        name: remote.name,
                        expose
                    };
                }
            }
        },
        {
            key: "loadRemote",
            value: // eslint-disable-next-line max-lines-per-function
            // eslint-disable-next-line @typescript-eslint/member-ordering
            function loadRemote(id, options) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var host = _this.host;
                    try {
                        var _ref = options || {
                            loadFactory: true
                        }, _ref_loadFactory = _ref.loadFactory, loadFactory = _ref_loadFactory === void 0 ? true : _ref_loadFactory;
                        // 1. Validate the parameters of the retrieved module. There are two module request methods: pkgName + expose and alias + expose.
                        // 2. Request the snapshot information of the current host and globally store the obtained snapshot information. The retrieved module information is partially offline and partially online. The online module information will retrieve the modules used online.
                        // 3. Retrieve the detailed information of the current module from global (remoteEntry address, expose resource address)
                        // 4. After retrieving remoteEntry, call the init of the module, and then retrieve the exported content of the module through get
                        // id: pkgName(@federation/app1) + expose(button) = @federation/app1/button
                        // id: alias(app1) + expose(button) = app1/button
                        // id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort
                        var _ref1 = yield _this.getRemoteModuleAndOptions({
                            id
                        }), module = _ref1.module, moduleOptions = _ref1.moduleOptions, remoteMatchInfo = _ref1.remoteMatchInfo;
                        var pkgNameOrAlias = remoteMatchInfo.pkgNameOrAlias, remote = remoteMatchInfo.remote, expose = remoteMatchInfo.expose, idRes = remoteMatchInfo.id, remoteSnapshot = remoteMatchInfo.remoteSnapshot;
                        var moduleOrFactory = yield module.get(idRes, expose, options, remoteSnapshot);
                        var moduleWrapper = yield _this.hooks.lifecycle.onLoad.emit({
                            id: idRes,
                            pkgNameOrAlias,
                            expose,
                            exposeModule: loadFactory ? moduleOrFactory : undefined,
                            exposeModuleFactory: loadFactory ? undefined : moduleOrFactory,
                            remote,
                            options: moduleOptions,
                            moduleInstance: module,
                            origin: host
                        });
                        _this.setIdToRemoteMap(id, remoteMatchInfo);
                        if (typeof moduleWrapper === 'function') {
                            return moduleWrapper;
                        }
                        return moduleOrFactory;
                    } catch (error) {
                        var _ref2 = options || {
                            from: 'runtime'
                        }, _ref_from = _ref2.from, from = _ref_from === void 0 ? 'runtime' : _ref_from;
                        var failOver = yield _this.hooks.lifecycle.errorLoadRemote.emit({
                            id,
                            error,
                            from,
                            lifecycle: 'onLoad',
                            origin: host
                        });
                        if (!failOver) {
                            throw error;
                        }
                        return failOver;
                    }
                })();
            }
        },
        {
            key: "preloadRemote",
            value: // eslint-disable-next-line @typescript-eslint/member-ordering
            function preloadRemote(preloadOptions) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var host = _this.host;
                    yield _this.hooks.lifecycle.beforePreloadRemote.emit({
                        preloadOps: preloadOptions,
                        options: host.options,
                        origin: host
                    });
                    var preloadOps = formatPreloadArgs(host.options.remotes, preloadOptions);
                    yield Promise.all(preloadOps.map(/*#__PURE__*/ function() {
                        var _ref = _async_to_generator._(function*(ops) {
                            var remote = ops.remote;
                            var remoteInfo = getRemoteInfo(remote);
                            var _ref = yield host.snapshotHandler.loadRemoteSnapshotInfo(remote), globalSnapshot = _ref.globalSnapshot, remoteSnapshot = _ref.remoteSnapshot;
                            var assets = yield _this.hooks.lifecycle.generatePreloadAssets.emit({
                                origin: host,
                                preloadOptions: ops,
                                remote,
                                remoteInfo,
                                globalSnapshot,
                                remoteSnapshot
                            });
                            if (!assets) {
                                return;
                            }
                            preloadAssets(remoteInfo, host, assets);
                        });
                        return function(ops) {
                            return _ref.apply(this, arguments);
                        };
                    }()));
                })();
            }
        },
        {
            key: "registerRemotes",
            value: function registerRemotes(remotes, options) {
                var host = this.host;
                remotes.forEach((remote)=>{
                    this.registerRemote(remote, host.options.remotes, {
                        force: options == null ? void 0 : options.force
                    });
                });
            }
        },
        {
            key: "getRemoteModuleAndOptions",
            value: function getRemoteModuleAndOptions(options) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var host = _this.host;
                    var id = options.id;
                    var loadRemoteArgs;
                    try {
                        loadRemoteArgs = yield _this.hooks.lifecycle.beforeRequest.emit({
                            id,
                            options: host.options,
                            origin: host
                        });
                    } catch (error) {
                        loadRemoteArgs = yield _this.hooks.lifecycle.errorLoadRemote.emit({
                            id,
                            options: host.options,
                            origin: host,
                            from: 'runtime',
                            error,
                            lifecycle: 'beforeRequest'
                        });
                        if (!loadRemoteArgs) {
                            throw error;
                        }
                    }
                    var idRes = loadRemoteArgs.id;
                    var remoteSplitInfo = matchRemoteWithNameAndExpose(host.options.remotes, idRes);
                    assert(remoteSplitInfo, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_004, errorCodes.runtimeDescMap, {
                        hostName: host.options.name,
                        requestId: idRes
                    }));
                    var rawRemote = remoteSplitInfo.remote;
                    var remoteInfo = getRemoteInfo(rawRemote);
                    var matchInfo = yield host.sharedHandler.hooks.lifecycle.afterResolve.emit(polyfills._extends({
                        id: idRes
                    }, remoteSplitInfo, {
                        options: host.options,
                        origin: host,
                        remoteInfo
                    }));
                    var remote = matchInfo.remote, expose = matchInfo.expose;
                    assert(remote && expose, `The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${idRes}.`);
                    var module = host.moduleCache.get(remote.name);
                    var moduleOptions = {
                        host: host,
                        remoteInfo
                    };
                    if (!module) {
                        module = new Module(moduleOptions);
                        host.moduleCache.set(remote.name, module);
                    }
                    return {
                        module,
                        moduleOptions,
                        remoteMatchInfo: matchInfo
                    };
                })();
            }
        },
        {
            key: "registerRemote",
            value: function registerRemote(remote, targetRemotes, options) {
                var host = this.host;
                var normalizeRemote = ()=>{
                    if (remote.alias) {
                        // Validate if alias equals the prefix of remote.name and remote.alias, if so, throw an error
                        // As multi-level path references cannot guarantee unique names, alias being a prefix of remote.name is not supported
                        var findEqual = targetRemotes.find((item)=>{
                            var _item_alias;
                            return remote.alias && (item.name.startsWith(remote.alias) || ((_item_alias = item.alias) == null ? void 0 : _item_alias.startsWith(remote.alias)));
                        });
                        assert(!findEqual, `The alias ${remote.alias} of remote ${remote.name} is not allowed to be the prefix of ${findEqual && findEqual.name} name or alias`);
                    }
                    // Set the remote entry to a complete path
                    if ('entry' in remote) {
                        if (sdk.isBrowserEnv() && !remote.entry.startsWith('http')) {
                            remote.entry = new URL(remote.entry, window.location.origin).href;
                        }
                    }
                    if (!remote.shareScope) {
                        remote.shareScope = DEFAULT_SCOPE;
                    }
                    if (!remote.type) {
                        remote.type = DEFAULT_REMOTE_TYPE;
                    }
                };
                this.hooks.lifecycle.beforeRegisterRemote.emit({
                    remote,
                    origin: host
                });
                var registeredRemote = targetRemotes.find((item)=>item.name === remote.name);
                if (!registeredRemote) {
                    normalizeRemote();
                    targetRemotes.push(remote);
                    this.hooks.lifecycle.registerRemote.emit({
                        remote,
                        origin: host
                    });
                } else {
                    var messages = [
                        `The remote "${remote.name}" is already registered.`,
                        'Please note that overriding it may cause unexpected errors.'
                    ];
                    if (options == null ? void 0 : options.force) {
                        // remove registered remote
                        this.removeRemote(registeredRemote);
                        normalizeRemote();
                        targetRemotes.push(remote);
                        this.hooks.lifecycle.registerRemote.emit({
                            remote,
                            origin: host
                        });
                        sdk.warn(messages.join(' '));
                    }
                }
            }
        },
        {
            key: "removeRemote",
            value: function removeRemote(remote) {
                try {
                    var host = this.host;
                    var name1 = remote.name;
                    var remoteIndex = host.options.remotes.findIndex((item)=>item.name === name1);
                    if (remoteIndex !== -1) {
                        host.options.remotes.splice(remoteIndex, 1);
                    }
                    var loadedModule = host.moduleCache.get(remote.name);
                    if (loadedModule) {
                        var remoteInfo = loadedModule.remoteInfo;
                        var key = remoteInfo.entryGlobalName;
                        if (CurrentGlobal[key]) {
                            var _Object_getOwnPropertyDescriptor;
                            if ((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(CurrentGlobal, key)) == null ? void 0 : _Object_getOwnPropertyDescriptor.configurable) {
                                delete CurrentGlobal[key];
                            } else {
                                // @ts-ignore
                                CurrentGlobal[key] = undefined;
                            }
                        }
                        var remoteEntryUniqueKey = getRemoteEntryUniqueKey(loadedModule.remoteInfo);
                        if (globalLoading[remoteEntryUniqueKey]) {
                            delete globalLoading[remoteEntryUniqueKey];
                        }
                        host.snapshotHandler.manifestCache.delete(remoteInfo.entry);
                        // delete unloaded shared and instance
                        var remoteInsId = remoteInfo.buildVersion ? sdk.composeKeyWithSeparator(remoteInfo.name, remoteInfo.buildVersion) : remoteInfo.name;
                        var remoteInsIndex = CurrentGlobal.__FEDERATION__.__INSTANCES__.findIndex((ins)=>{
                            if (remoteInfo.buildVersion) {
                                return ins.options.id === remoteInsId;
                            } else {
                                return ins.name === remoteInsId;
                            }
                        });
                        if (remoteInsIndex !== -1) {
                            var remoteIns = CurrentGlobal.__FEDERATION__.__INSTANCES__[remoteInsIndex];
                            remoteInsId = remoteIns.options.id || remoteInsId;
                            var globalShareScopeMap = getGlobalShareScope();
                            var isAllSharedNotUsed = true;
                            var needDeleteKeys = [];
                            Object.keys(globalShareScopeMap).forEach((instId)=>{
                                var shareScopeMap = globalShareScopeMap[instId];
                                shareScopeMap && Object.keys(shareScopeMap).forEach((shareScope)=>{
                                    var shareScopeVal = shareScopeMap[shareScope];
                                    shareScopeVal && Object.keys(shareScopeVal).forEach((shareName)=>{
                                        var sharedPkgs = shareScopeVal[shareName];
                                        sharedPkgs && Object.keys(sharedPkgs).forEach((shareVersion)=>{
                                            var shared = sharedPkgs[shareVersion];
                                            if (shared && typeof shared === 'object' && shared.from === remoteInfo.name) {
                                                if (shared.loaded || shared.loading) {
                                                    shared.useIn = shared.useIn.filter((usedHostName)=>usedHostName !== remoteInfo.name);
                                                    if (shared.useIn.length) {
                                                        isAllSharedNotUsed = false;
                                                    } else {
                                                        needDeleteKeys.push([
                                                            instId,
                                                            shareScope,
                                                            shareName,
                                                            shareVersion
                                                        ]);
                                                    }
                                                } else {
                                                    needDeleteKeys.push([
                                                        instId,
                                                        shareScope,
                                                        shareName,
                                                        shareVersion
                                                    ]);
                                                }
                                            }
                                        });
                                    });
                                });
                            });
                            if (isAllSharedNotUsed) {
                                remoteIns.shareScopeMap = {};
                                delete globalShareScopeMap[remoteInsId];
                            }
                            needDeleteKeys.forEach((ref)=>{
                                var _ref = _sliced_to_array._(ref, 4), insId = _ref[0], shareScope = _ref[1], shareName = _ref[2], shareVersion = _ref[3];
                                var _globalShareScopeMap_insId_shareScope_shareName, _globalShareScopeMap_insId_shareScope, _globalShareScopeMap_insId;
                                (_globalShareScopeMap_insId = globalShareScopeMap[insId]) == null ? true : (_globalShareScopeMap_insId_shareScope = _globalShareScopeMap_insId[shareScope]) == null ? true : (_globalShareScopeMap_insId_shareScope_shareName = _globalShareScopeMap_insId_shareScope[shareName]) == null ? true : delete _globalShareScopeMap_insId_shareScope_shareName[shareVersion];
                            });
                            CurrentGlobal.__FEDERATION__.__INSTANCES__.splice(remoteInsIndex, 1);
                        }
                        var hostGlobalSnapshot = getGlobalRemoteInfo(remote, host).hostGlobalSnapshot;
                        if (hostGlobalSnapshot) {
                            var remoteKey = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, remote.name).key;
                            if (remoteKey) {
                                delete hostGlobalSnapshot.remotesInfo[remoteKey];
                                if (Boolean(Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey])) {
                                    delete Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey];
                                }
                            }
                        }
                        host.moduleCache.delete(remote.name);
                    }
                } catch (err) {
                    logger.log('removeRemote fail: ', err);
                }
            }
        }
    ]);
    return RemoteHandler;
}();
var FederationHost = /*#__PURE__*/ function() {
    function FederationHost(userOptions) {
        _class_call_check._(this, FederationHost);
        this.hooks = new PluginSystem({
            beforeInit: new SyncWaterfallHook('beforeInit'),
            init: new SyncHook(),
            // maybe will change, temporarily for internal use only
            beforeInitContainer: new AsyncWaterfallHook('beforeInitContainer'),
            // maybe will change, temporarily for internal use only
            initContainer: new AsyncWaterfallHook('initContainer')
        });
        this.version = "0.13.1";
        this.moduleCache = new Map();
        this.loaderHook = new PluginSystem({
            // FIXME: may not be suitable , not open to the public yet
            getModuleInfo: new SyncHook(),
            createScript: new SyncHook(),
            createLink: new SyncHook(),
            fetch: new AsyncHook(),
            loadEntryError: new AsyncHook(),
            getModuleFactory: new AsyncHook()
        });
        this.bridgeHook = new PluginSystem({
            beforeBridgeRender: new SyncHook(),
            afterBridgeRender: new SyncHook(),
            beforeBridgeDestroy: new SyncHook(),
            afterBridgeDestroy: new SyncHook()
        });
        // TODO: Validate the details of the options
        // Initialize options with default values
        var defaultOptions = {
            id: getBuilderId(),
            name: userOptions.name,
            plugins: [
                snapshotPlugin(),
                generatePreloadAssetsPlugin()
            ],
            remotes: [],
            shared: {},
            inBrowser: sdk.isBrowserEnv()
        };
        this.name = userOptions.name;
        this.options = defaultOptions;
        this.snapshotHandler = new SnapshotHandler(this);
        this.sharedHandler = new SharedHandler(this);
        this.remoteHandler = new RemoteHandler(this);
        this.shareScopeMap = this.sharedHandler.shareScopeMap;
        this.registerPlugins(_to_consumable_array._(defaultOptions.plugins).concat(_to_consumable_array._(userOptions.plugins || [])));
        this.options = this.formatOptions(defaultOptions, userOptions);
    }
    _create_class._(FederationHost, [
        {
            key: "initOptions",
            value: function initOptions(userOptions) {
                this.registerPlugins(userOptions.plugins);
                var options = this.formatOptions(this.options, userOptions);
                this.options = options;
                return options;
            }
        },
        {
            key: "loadShare",
            value: function loadShare(pkgName, extraOptions) {
                var _this = this;
                return _async_to_generator._(function*() {
                    return _this.sharedHandler.loadShare(pkgName, extraOptions);
                })();
            }
        },
        {
            // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.
            // 1. If the loaded shared already exists globally, then it will be reused
            // 2. If lib exists in local shared, it will be used directly
            // 3. If the local get returns something other than Promise, then it will be used directly
            key: "loadShareSync",
            value: function loadShareSync(pkgName, extraOptions) {
                return this.sharedHandler.loadShareSync(pkgName, extraOptions);
            }
        },
        {
            key: "initializeSharing",
            value: function initializeSharing(ref, extraOptions) {
                var shareScopeName = ref === void 0 ? DEFAULT_SCOPE : ref;
                return this.sharedHandler.initializeSharing(shareScopeName, extraOptions);
            }
        },
        {
            key: "initRawContainer",
            value: function initRawContainer(name1, url, container) {
                var remoteInfo = getRemoteInfo({
                    name: name1,
                    entry: url
                });
                var module = new Module({
                    host: this,
                    remoteInfo
                });
                module.remoteEntryExports = container;
                this.moduleCache.set(name1, module);
                return module;
            }
        },
        {
            key: "loadRemote",
            value: // eslint-disable-next-line max-lines-per-function
            // eslint-disable-next-line @typescript-eslint/member-ordering
            function loadRemote(id, options) {
                var _this = this;
                return _async_to_generator._(function*() {
                    return _this.remoteHandler.loadRemote(id, options);
                })();
            }
        },
        {
            key: "preloadRemote",
            value: // eslint-disable-next-line @typescript-eslint/member-ordering
            function preloadRemote(preloadOptions) {
                var _this = this;
                return _async_to_generator._(function*() {
                    return _this.remoteHandler.preloadRemote(preloadOptions);
                })();
            }
        },
        {
            key: "initShareScopeMap",
            value: function initShareScopeMap(scopeName, shareScope, ref) {
                var extraOptions = ref === void 0 ? {} : ref;
                this.sharedHandler.initShareScopeMap(scopeName, shareScope, extraOptions);
            }
        },
        {
            key: "formatOptions",
            value: function formatOptions(globalOptions, userOptions) {
                var shared = formatShareConfigs(globalOptions, userOptions).shared;
                var _this_hooks_lifecycle_beforeInit_emit = this.hooks.lifecycle.beforeInit.emit({
                    origin: this,
                    userOptions,
                    options: globalOptions,
                    shareInfo: shared
                }), userOptionsRes = _this_hooks_lifecycle_beforeInit_emit.userOptions, globalOptionsRes = _this_hooks_lifecycle_beforeInit_emit.options;
                var remotes = this.remoteHandler.formatAndRegisterRemote(globalOptionsRes, userOptionsRes);
                var _this_sharedHandler_registerShared = this.sharedHandler.registerShared(globalOptionsRes, userOptionsRes), handledShared = _this_sharedHandler_registerShared.shared;
                var plugins = _to_consumable_array._(globalOptionsRes.plugins);
                if (userOptionsRes.plugins) {
                    userOptionsRes.plugins.forEach((plugin)=>{
                        if (!plugins.includes(plugin)) {
                            plugins.push(plugin);
                        }
                    });
                }
                var optionsRes = polyfills._extends({}, globalOptions, userOptions, {
                    plugins,
                    remotes,
                    shared: handledShared
                });
                this.hooks.lifecycle.init.emit({
                    origin: this,
                    options: optionsRes
                });
                return optionsRes;
            }
        },
        {
            key: "registerPlugins",
            value: function registerPlugins1(plugins) {
                var pluginRes = registerPlugins(plugins, [
                    this.hooks,
                    this.remoteHandler.hooks,
                    this.sharedHandler.hooks,
                    this.snapshotHandler.hooks,
                    this.loaderHook,
                    this.bridgeHook
                ]);
                // Merge plugin
                this.options.plugins = this.options.plugins.reduce((res, plugin)=>{
                    if (!plugin) return res;
                    if (res && !res.find((item)=>item.name === plugin.name)) {
                        res.push(plugin);
                    }
                    return res;
                }, pluginRes || []);
            }
        },
        {
            key: "registerRemotes",
            value: function registerRemotes(remotes, options) {
                return this.remoteHandler.registerRemotes(remotes, options);
            }
        }
    ]);
    return FederationHost;
}();
var index = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
exports.loadScript = sdk.loadScript;
exports.loadScriptNode = sdk.loadScriptNode;
exports.CurrentGlobal = CurrentGlobal;
exports.FederationHost = FederationHost;
exports.Global = Global;
exports.Module = Module;
exports.addGlobalSnapshot = addGlobalSnapshot;
exports.assert = assert;
exports.getGlobalFederationConstructor = getGlobalFederationConstructor;
exports.getGlobalSnapshot = getGlobalSnapshot;
exports.getInfoWithoutType = getInfoWithoutType;
exports.getRegisteredShare = getRegisteredShare;
exports.getRemoteEntry = getRemoteEntry;
exports.getRemoteInfo = getRemoteInfo;
exports.helpers = helpers;
exports.isStaticResourcesEqual = isStaticResourcesEqual;
exports.matchRemoteWithNameAndExpose = matchRemoteWithNameAndExpose;
exports.registerGlobalPlugins = registerGlobalPlugins;
exports.resetFederationGlobalInfo = resetFederationGlobalInfo;
exports.safeWrapper = safeWrapper;
exports.satisfy = satisfy;
exports.setGlobalFederationConstructor = setGlobalFederationConstructor;
exports.setGlobalFederationInstance = setGlobalFederationInstance;
exports.types = index;


}),
31824: (function (__unused_webpack_module, exports) {
"use strict";

function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports._extends = _extends;
exports._object_without_properties_loose = _object_without_properties_loose;


}),
44647: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var runtimeCore = __webpack_require__(94875);
var utils = __webpack_require__(93573);
var FederationInstance = null;
function init(options) {
    // Retrieve the same instance with the same name
    var instance = utils.getGlobalFederationInstance(options.name, options.version);
    if (!instance) {
        // Retrieve debug constructor
        var FederationConstructor = runtimeCore.getGlobalFederationConstructor() || runtimeCore.FederationHost;
        FederationInstance = new FederationConstructor(options);
        runtimeCore.setGlobalFederationInstance(FederationInstance);
        return FederationInstance;
    } else {
        // Merge options
        instance.initOptions(options);
        if (!FederationInstance) {
            FederationInstance = instance;
        }
        return instance;
    }
}
function loadRemote(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    var loadRemote1 = FederationInstance.loadRemote;
    // eslint-disable-next-line prefer-spread
    return loadRemote1.apply(FederationInstance, args);
}
function loadShare(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    var loadShare1 = FederationInstance.loadShare;
    return loadShare1.apply(FederationInstance, args);
}
function loadShareSync(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    var loadShareSync1 = FederationInstance.loadShareSync;
    // eslint-disable-next-line prefer-spread
    return loadShareSync1.apply(FederationInstance, args);
}
function preloadRemote(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.preloadRemote.apply(FederationInstance, args);
}
function registerRemotes(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.registerRemotes.apply(FederationInstance, args);
}
function registerPlugins(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.registerPlugins.apply(FederationInstance, args);
}
function getInstance() {
    return FederationInstance;
}
// Inject for debug
runtimeCore.setGlobalFederationConstructor(runtimeCore.FederationHost);
exports.FederationHost = runtimeCore.FederationHost;
exports.Module = runtimeCore.Module;
exports.getRemoteEntry = runtimeCore.getRemoteEntry;
exports.getRemoteInfo = runtimeCore.getRemoteInfo;
exports.loadScript = runtimeCore.loadScript;
exports.loadScriptNode = runtimeCore.loadScriptNode;
exports.registerGlobalPlugins = runtimeCore.registerGlobalPlugins;
exports.getInstance = getInstance;
exports.init = init;
exports.loadRemote = loadRemote;
exports.loadShare = loadShare;
exports.loadShareSync = loadShareSync;
exports.preloadRemote = preloadRemote;
exports.registerPlugins = registerPlugins;
exports.registerRemotes = registerRemotes;


}),
93573: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var runtimeCore = __webpack_require__(94875);
// injected by bundler, so it can not use runtime-core stuff
function getBuilderId() {
    //@ts-ignore
    return  true ? "HostApp:0.0.1" : 0;
}
function getGlobalFederationInstance(name, version) {
    var buildId = getBuilderId();
    return runtimeCore.CurrentGlobal.__FEDERATION__.__INSTANCES__.find((GMInstance)=>{
        if (buildId && GMInstance.options.id === getBuilderId()) {
            return true;
        }
        if (GMInstance.options.name === name && !GMInstance.options.version && !version) {
            return true;
        }
        if (GMInstance.options.name === name && version && GMInstance.options.version === version) {
            return true;
        }
        return false;
    });
}
exports.getGlobalFederationInstance = getGlobalFederationInstance;


}),
10144: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(11809);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _sliced_to_array = __webpack_require__(78474);
var _to_array = __webpack_require__(12309);
var _to_consumable_array = __webpack_require__(92716);
var polyfills = __webpack_require__(26735);
var FederationModuleManifest = 'federation-manifest.json';
var MANIFEST_EXT = '.json';
var BROWSER_LOG_KEY = 'FEDERATION_DEBUG';
var BROWSER_LOG_VALUE = '1';
var NameTransformSymbol = {
    AT: '@',
    HYPHEN: '-',
    SLASH: '/'
};
var NameTransformMap = {
    [NameTransformSymbol.AT]: 'scope_',
    [NameTransformSymbol.HYPHEN]: '_',
    [NameTransformSymbol.SLASH]: '__'
};
var EncodedNameTransformMap = {
    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,
    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,
    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH
};
var SEPARATOR = ':';
var ManifestFileName = 'mf-manifest.json';
var StatsFileName = 'mf-stats.json';
var MFModuleType = {
    NPM: 'npm',
    APP: 'app'
};
var MODULE_DEVTOOL_IDENTIFIER = '__MF_DEVTOOLS_MODULE_INFO__';
var ENCODE_NAME_PREFIX = 'ENCODE_NAME_PREFIX';
var TEMP_DIR = '.federation';
var MFPrefetchCommon = {
    identifier: 'MFDataPrefetch',
    globalKey: '__PREFETCH__',
    library: 'mf-data-prefetch',
    exportsKey: '__PREFETCH_EXPORTS__',
    fileName: 'bootstrap.js'
};
var ContainerPlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var ContainerReferencePlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var ModuleFederationPlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var SharePlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
function isBrowserEnv() {
    return typeof window !== 'undefined' && typeof window.document !== 'undefined';
}
function isReactNativeEnv() {
    var _navigator;
    return typeof navigator !== 'undefined' && ((_navigator = navigator) == null ? void 0 : _navigator.product) === 'ReactNative';
}
function isBrowserDebug() {
    try {
        if (isBrowserEnv() && window.localStorage) {
            return localStorage.getItem(BROWSER_LOG_KEY) === BROWSER_LOG_VALUE;
        }
    } catch (error1) {
        return false;
    }
    return false;
}
function isDebugMode() {
    if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {
        return Boolean(process.env['FEDERATION_DEBUG']);
    }
    if (typeof FEDERATION_DEBUG !== 'undefined' && Boolean(FEDERATION_DEBUG)) {
        return true;
    }
    return isBrowserDebug();
}
var getProcessEnv = function() {
    return typeof process !== 'undefined' && process.env ? process.env : {};
};
var LOG_CATEGORY = '[ Federation Runtime ]';
// entry: name:version   version : 1.0.0 | ^1.2.3
// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json
var parseEntry = (str, devVerOrUrl, ref)=>{
    var separator = ref === void 0 ? SEPARATOR : ref;
    var strSplit = str.split(separator);
    var devVersionOrUrl = getProcessEnv()['NODE_ENV'] === 'development' && devVerOrUrl;
    var defaultVersion = '*';
    var isEntry = (s)=>s.startsWith('http') || s.includes(MANIFEST_EXT);
    // Check if the string starts with a type
    if (strSplit.length >= 2) {
        var _strSplit = _to_array._(strSplit), name = _strSplit[0], versionOrEntryArr = _strSplit.slice(1);
        // @name@manifest-url.json
        if (str.startsWith(separator)) {
            name = strSplit.slice(0, 2).join(separator);
            versionOrEntryArr = [
                devVersionOrUrl || strSplit.slice(2).join(separator)
            ];
        }
        var versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);
        if (isEntry(versionOrEntry)) {
            return {
                name,
                entry: versionOrEntry
            };
        } else {
            // Apply version rule
            // devVersionOrUrl => inputVersion => defaultVersion
            return {
                name,
                version: versionOrEntry || defaultVersion
            };
        }
    } else if (strSplit.length === 1) {
        var _strSplit1 = _sliced_to_array._(strSplit, 1), name1 = _strSplit1[0];
        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {
            return {
                name: name1,
                entry: devVersionOrUrl
            };
        }
        return {
            name: name1,
            version: devVersionOrUrl || defaultVersion
        };
    } else {
        throw `Invalid entry value: ${str}`;
    }
};
var composeKeyWithSeparator = function(...args) {
    if (!args.length) {
        return '';
    }
    return args.reduce((sum, cur)=>{
        if (!cur) {
            return sum;
        }
        if (!sum) {
            return cur;
        }
        return `${sum}${SEPARATOR}${cur}`;
    }, '');
};
var encodeName = function(name, ref, ref1) {
    var prefix = ref === void 0 ? '' : ref, withExt = ref1 === void 0 ? false : ref1;
    try {
        var ext = withExt ? '.js' : '';
        return `${prefix}${name.replace(new RegExp(`${NameTransformSymbol.AT}`, 'g'), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`, 'g'), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`, 'g'), NameTransformMap[NameTransformSymbol.SLASH])}${ext}`;
    } catch (err) {
        throw err;
    }
};
var decodeName = function(name, prefix, withExt) {
    try {
        var decodedName = name;
        if (prefix) {
            if (!decodedName.startsWith(prefix)) {
                return decodedName;
            }
            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');
        }
        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);
        if (withExt) {
            decodedName = decodedName.replace('.js', '');
        }
        return decodedName;
    } catch (err) {
        throw err;
    }
};
var generateExposeFilename = (exposeName, withExt)=>{
    if (!exposeName) {
        return '';
    }
    var expose = exposeName;
    if (expose === '.') {
        expose = 'default_export';
    }
    if (expose.startsWith('./')) {
        expose = expose.replace('./', '');
    }
    return encodeName(expose, '__federation_expose_', withExt);
};
var generateShareFilename = (pkgName, withExt)=>{
    if (!pkgName) {
        return '';
    }
    return encodeName(pkgName, '__federation_shared_', withExt);
};
var getResourceUrl = (module, sourceUrl)=>{
    if ('getPublicPath' in module) {
        var publicPath;
        if (!module.getPublicPath.startsWith('function')) {
            publicPath = new Function(module.getPublicPath)();
        } else {
            publicPath = new Function('return ' + module.getPublicPath)()();
        }
        return `${publicPath}${sourceUrl}`;
    } else if ('publicPath' in module) {
        if (!isBrowserEnv() && !isReactNativeEnv() && 'ssrPublicPath' in module) {
            return `${module.ssrPublicPath}${sourceUrl}`;
        }
        return `${module.publicPath}${sourceUrl}`;
    } else {
        console.warn('Cannot get resource URL. If in debug mode, please ignore.', module, sourceUrl);
        return '';
    }
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
var assert = (condition, msg)=>{
    if (!condition) {
        error(msg);
    }
};
var error = (msg)=>{
    throw new Error(`${LOG_CATEGORY}: ${msg}`);
};
var warn = (msg)=>{
    console.warn(`${LOG_CATEGORY}: ${msg}`);
};
function safeToString(info) {
    try {
        return JSON.stringify(info, null, 2);
    } catch (e) {
        return '';
    }
}
// RegExp for version string
var VERSION_PATTERN_REGEXP = /^([\d^=v<>~]|[*xX]$)/;
function isRequiredVersion(str) {
    return VERSION_PATTERN_REGEXP.test(str);
}
var simpleJoinRemoteEntry = (rPath, rName)=>{
    if (!rPath) {
        return rName;
    }
    var transformPath = (str)=>{
        if (str === '.') {
            return '';
        }
        if (str.startsWith('./')) {
            return str.replace('./', '');
        }
        if (str.startsWith('/')) {
            var strWithoutSlash = str.slice(1);
            if (strWithoutSlash.endsWith('/')) {
                return strWithoutSlash.slice(0, -1);
            }
            return strWithoutSlash;
        }
        return str;
    };
    var transformedPath = transformPath(rPath);
    if (!transformedPath) {
        return rName;
    }
    if (transformedPath.endsWith('/')) {
        return `${transformedPath}${rName}`;
    }
    return `${transformedPath}/${rName}`;
};
function inferAutoPublicPath(url) {
    return url.replace(/#.*$/, '').replace(/\?.*$/, '').replace(/\/[^\/]+$/, '/');
}
// Priority: overrides > remotes
// eslint-disable-next-line max-lines-per-function
function generateSnapshotFromManifest(manifest, ref) {
    var options = ref === void 0 ? {} : ref;
    var _manifest_metaData, _manifest_metaData1;
    var _options_remotes = options.remotes, remotes = _options_remotes === void 0 ? {} : _options_remotes, _options_overrides = options.overrides, overrides = _options_overrides === void 0 ? {} : _options_overrides, version = options.version;
    var remoteSnapshot;
    var getPublicPath = ()=>{
        if ('publicPath' in manifest.metaData) {
            if (manifest.metaData.publicPath === 'auto' && version) {
                // use same implementation as publicPath auto runtime module implements
                return inferAutoPublicPath(version);
            }
            return manifest.metaData.publicPath;
        } else {
            return manifest.metaData.getPublicPath;
        }
    };
    var overridesKeys = Object.keys(overrides);
    var remotesInfo = {};
    // If remotes are not provided, only the remotes in the manifest will be read
    if (!Object.keys(remotes).length) {
        var _manifest_remotes;
        remotesInfo = ((_manifest_remotes = manifest.remotes) == null ? void 0 : _manifest_remotes.reduce((res, next)=>{
            var matchedVersion;
            var name = next.federationContainerName;
            // overrides have higher priority
            if (overridesKeys.includes(name)) {
                matchedVersion = overrides[name];
            } else {
                if ('version' in next) {
                    matchedVersion = next.version;
                } else {
                    matchedVersion = next.entry;
                }
            }
            res[name] = {
                matchedVersion
            };
            return res;
        }, {})) || {};
    }
    // If remotes (deploy scenario) are specified, they need to be traversed again
    Object.keys(remotes).forEach((key)=>remotesInfo[key] = {
            // overrides will override dependencies
            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]
        });
    var _manifest_metaData2 = manifest.metaData, _manifest_metaData_remoteEntry = _manifest_metaData2.remoteEntry, remoteEntryPath = _manifest_metaData_remoteEntry.path, remoteEntryName = _manifest_metaData_remoteEntry.name, remoteEntryType = _manifest_metaData_remoteEntry.type, remoteTypes = _manifest_metaData2.types, buildVersion = _manifest_metaData2.buildInfo.buildVersion, globalName = _manifest_metaData2.globalName, ssrRemoteEntry = _manifest_metaData2.ssrRemoteEntry;
    var exposes = manifest.exposes;
    var basicRemoteSnapshot = {
        version: version ? version : '',
        buildVersion,
        globalName,
        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),
        remoteEntryType,
        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),
        remoteTypesZip: remoteTypes.zip || '',
        remoteTypesAPI: remoteTypes.api || '',
        remotesInfo,
        shared: manifest == null ? void 0 : manifest.shared.map((item)=>({
                assets: item.assets,
                sharedName: item.name,
                version: item.version
            })),
        modules: exposes == null ? void 0 : exposes.map((expose)=>({
                moduleName: expose.name,
                modulePath: expose.path,
                assets: expose.assets
            }))
    };
    if ((_manifest_metaData = manifest.metaData) == null ? void 0 : _manifest_metaData.prefetchInterface) {
        var prefetchInterface = manifest.metaData.prefetchInterface;
        basicRemoteSnapshot = polyfills._({}, basicRemoteSnapshot, {
            prefetchInterface
        });
    }
    if ((_manifest_metaData1 = manifest.metaData) == null ? void 0 : _manifest_metaData1.prefetchEntry) {
        var _manifest_metaData_prefetchEntry = manifest.metaData.prefetchEntry, path = _manifest_metaData_prefetchEntry.path, name = _manifest_metaData_prefetchEntry.name, type = _manifest_metaData_prefetchEntry.type;
        basicRemoteSnapshot = polyfills._({}, basicRemoteSnapshot, {
            prefetchEntry: simpleJoinRemoteEntry(path, name),
            prefetchEntryType: type
        });
    }
    if ('publicPath' in manifest.metaData) {
        remoteSnapshot = polyfills._({}, basicRemoteSnapshot, {
            publicPath: getPublicPath(),
            ssrPublicPath: manifest.metaData.ssrPublicPath
        });
    } else {
        remoteSnapshot = polyfills._({}, basicRemoteSnapshot, {
            getPublicPath: getPublicPath()
        });
    }
    if (ssrRemoteEntry) {
        var fullSSRRemoteEntry = simpleJoinRemoteEntry(ssrRemoteEntry.path, ssrRemoteEntry.name);
        remoteSnapshot.ssrRemoteEntry = fullSSRRemoteEntry;
        remoteSnapshot.ssrRemoteEntryType = ssrRemoteEntry.type || 'commonjs-module';
    }
    return remoteSnapshot;
}
function isManifestProvider(moduleInfo) {
    if ('remoteEntry' in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {
        return true;
    } else {
        return false;
    }
}
var PREFIX = '[ Module Federation ]';
var Logger = /*#__PURE__*/ function() {
    function Logger1(prefix) {
        _class_call_check._(this, Logger1);
        this.prefix = prefix;
    }
    _create_class._(Logger1, [
        {
            key: "setPrefix",
            value: function setPrefix(prefix) {
                this.prefix = prefix;
            }
        },
        {
            key: "log",
            value: function log(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "warn",
            value: function warn1(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "error",
            value: function error1(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "success",
            value: function success(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "info",
            value: function info(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "ready",
            value: function ready(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "debug",
            value: function debug(...args) {
                if (isDebugMode()) {
                    var _console;
                    (_console = console).log.apply(_console, [
                        this.prefix
                    ].concat(_to_consumable_array._(args)));
                }
            }
        }
    ]);
    return Logger1;
}();
function createLogger(prefix) {
    return new Logger(prefix);
}
var logger = createLogger(PREFIX);
function safeWrapper(callback, disableWarn) {
    return _safeWrapper.apply(this, arguments);
}
function _safeWrapper() {
    _safeWrapper = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _async_to_generator._(function*(callback, disableWarn) {
        try {
            var res = yield callback();
            return res;
        } catch (e) {
            !disableWarn && warn(e);
            return;
        }
    });
    return _safeWrapper.apply(this, arguments);
}
function isStaticResourcesEqual(url1, url2) {
    var REG_EXP = /^(https?:)?\/\//i;
    // Transform url1 and url2 into relative paths
    var relativeUrl1 = url1.replace(REG_EXP, '').replace(/\/$/, '');
    var relativeUrl2 = url2.replace(REG_EXP, '').replace(/\/$/, '');
    // Check if the relative paths are identical
    return relativeUrl1 === relativeUrl2;
}
function createScript(info) {
    // Retrieve the existing script element by its src attribute
    var script = null;
    var needAttach = true;
    var timeout = 20000;
    var timeoutId;
    var scripts = document.getElementsByTagName('script');
    for(var i = 0; i < scripts.length; i++){
        var s = scripts[i];
        var scriptSrc = s.getAttribute('src');
        if (scriptSrc && isStaticResourcesEqual(scriptSrc, info.url)) {
            script = s;
            needAttach = false;
            break;
        }
    }
    if (!script) {
        var attrs = info.attrs;
        script = document.createElement('script');
        script.type = (attrs == null ? void 0 : attrs['type']) === 'module' ? 'module' : 'text/javascript';
        var createScriptRes = undefined;
        if (info.createScriptHook) {
            createScriptRes = info.createScriptHook(info.url, info.attrs);
            if (createScriptRes instanceof HTMLScriptElement) {
                script = createScriptRes;
            } else if (typeof createScriptRes === 'object') {
                if ('script' in createScriptRes && createScriptRes.script) {
                    script = createScriptRes.script;
                }
                if ('timeout' in createScriptRes && createScriptRes.timeout) {
                    timeout = createScriptRes.timeout;
                }
            }
        }
        if (!script.src) {
            script.src = info.url;
        }
        if (attrs && !createScriptRes) {
            Object.keys(attrs).forEach((name)=>{
                if (script) {
                    if (name === 'async' || name === 'defer') {
                        script[name] = attrs[name];
                    // Attributes that do not exist are considered overridden
                    } else if (!script.getAttribute(name)) {
                        script.setAttribute(name, attrs[name]);
                    }
                }
            });
        }
    }
    var onScriptComplete = /*#__PURE__*/ function() {
        var _ref = _async_to_generator._(function*(prev, event) {
            clearTimeout(timeoutId);
            var onScriptCompleteCallback = ()=>{
                if ((event == null ? void 0 : event.type) === 'error') {
                    (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));
                } else {
                    (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());
                }
            };
            // Prevent memory leaks in IE.
            if (script) {
                script.onerror = null;
                script.onload = null;
                safeWrapper(()=>{
                    var _info_needDeleteScript = info.needDeleteScript, needDeleteScript = _info_needDeleteScript === void 0 ? true : _info_needDeleteScript;
                    if (needDeleteScript) {
                        (script == null ? void 0 : script.parentNode) && script.parentNode.removeChild(script);
                    }
                });
                if (prev && typeof prev === 'function') {
                    var result = prev(event);
                    if (result instanceof Promise) {
                        var res = yield result;
                        onScriptCompleteCallback();
                        return res;
                    }
                    onScriptCompleteCallback();
                    return result;
                }
            }
            onScriptCompleteCallback();
        });
        return function onScriptComplete(prev, event) {
            return _ref.apply(this, arguments);
        };
    }();
    script.onerror = onScriptComplete.bind(null, script.onerror);
    script.onload = onScriptComplete.bind(null, script.onload);
    timeoutId = setTimeout(()=>{
        onScriptComplete(null, new Error(`Remote script "${info.url}" time-outed.`));
    }, timeout);
    return {
        script,
        needAttach
    };
}
function createLink(info) {
    // <link rel="preload" href="script.js" as="script">
    // Retrieve the existing script element by its src attribute
    var link = null;
    var needAttach = true;
    var links = document.getElementsByTagName('link');
    for(var i = 0; i < links.length; i++){
        var l = links[i];
        var linkHref = l.getAttribute('href');
        var linkRel = l.getAttribute('rel');
        if (linkHref && isStaticResourcesEqual(linkHref, info.url) && linkRel === info.attrs['rel']) {
            link = l;
            needAttach = false;
            break;
        }
    }
    if (!link) {
        link = document.createElement('link');
        link.setAttribute('href', info.url);
        var createLinkRes = undefined;
        var attrs = info.attrs;
        if (info.createLinkHook) {
            createLinkRes = info.createLinkHook(info.url, attrs);
            if (createLinkRes instanceof HTMLLinkElement) {
                link = createLinkRes;
            }
        }
        if (attrs && !createLinkRes) {
            Object.keys(attrs).forEach((name)=>{
                if (link && !link.getAttribute(name)) {
                    link.setAttribute(name, attrs[name]);
                }
            });
        }
    }
    var onLinkComplete = (prev, event)=>{
        var onLinkCompleteCallback = ()=>{
            if ((event == null ? void 0 : event.type) === 'error') {
                (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));
            } else {
                (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());
            }
        };
        // Prevent memory leaks in IE.
        if (link) {
            link.onerror = null;
            link.onload = null;
            safeWrapper(()=>{
                var _info_needDeleteLink = info.needDeleteLink, needDeleteLink = _info_needDeleteLink === void 0 ? true : _info_needDeleteLink;
                if (needDeleteLink) {
                    (link == null ? void 0 : link.parentNode) && link.parentNode.removeChild(link);
                }
            });
            if (prev) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var res = prev(event);
                onLinkCompleteCallback();
                return res;
            }
        }
        onLinkCompleteCallback();
    };
    link.onerror = onLinkComplete.bind(null, link.onerror);
    link.onload = onLinkComplete.bind(null, link.onload);
    return {
        link,
        needAttach
    };
}
function loadScript(url, info) {
    var _info_attrs = info.attrs, attrs = _info_attrs === void 0 ? {} : _info_attrs, createScriptHook = info.createScriptHook;
    return new Promise((resolve, reject)=>{
        var _createScript = createScript({
            url,
            cb: resolve,
            onErrorCallback: reject,
            attrs: polyfills._({
                fetchpriority: 'high'
            }, attrs),
            createScriptHook,
            needDeleteScript: true
        }), script = _createScript.script, needAttach = _createScript.needAttach;
        needAttach && document.head.appendChild(script);
    });
}
function importNodeModule(name) {
    if (!name) {
        throw new Error('import specifier is required');
    }
    var importModule = new Function('name', `return import(name)`);
    return importModule(name).then((res)=>res).catch((error1)=>{
        console.error(`Error importing module ${name}:`, error1);
        throw error1;
    });
}
var loadNodeFetch = /*#__PURE__*/ function() {
    var _ref = _async_to_generator._(function*() {
        var fetchModule = yield importNodeModule('node-fetch');
        return fetchModule.default || fetchModule;
    });
    return function loadNodeFetch1() {
        return _ref.apply(this, arguments);
    };
}();
var lazyLoaderHookFetch = /*#__PURE__*/ function() {
    var _ref = _async_to_generator._(function*(input, init, loaderHook) {
        var hook = (url, init)=>{
            return loaderHook.lifecycle.fetch.emit(url, init);
        };
        var res = yield hook(input, init || {});
        if (!res || !(res instanceof Response)) {
            var fetchFunction = typeof fetch === 'undefined' ? yield loadNodeFetch() : fetch;
            return fetchFunction(input, init || {});
        }
        return res;
    });
    return function lazyLoaderHookFetch1(input, init, loaderHook) {
        return _ref.apply(this, arguments);
    };
}();
function createScriptNode(url, cb, attrs, loaderHook) {
    if (loaderHook == null ? void 0 : loaderHook.createScriptHook) {
        var hookResult = loaderHook.createScriptHook(url);
        if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {
            url = hookResult.url;
        }
    }
    var urlObj;
    try {
        urlObj = new URL(url);
    } catch (e) {
        console.error('Error constructing URL:', e);
        cb(new Error(`Invalid URL: ${e}`));
        return;
    }
    var getFetch = /*#__PURE__*/ function() {
        var _ref = _async_to_generator._(function*() {
            if (loaderHook == null ? void 0 : loaderHook.fetch) {
                return (input, init)=>lazyLoaderHookFetch(input, init, loaderHook);
            }
            return typeof fetch === 'undefined' ? loadNodeFetch() : fetch;
        });
        return function getFetch() {
            return _ref.apply(this, arguments);
        };
    }();
    var handleScriptFetch = /*#__PURE__*/ function() {
        var _ref = _async_to_generator._(function*(f, urlObj) {
            try {
                var _vm_constants;
                var res = yield f(urlObj.href);
                var data = yield res.text();
                var _ref = _sliced_to_array._((yield Promise.all([
                    importNodeModule('path'),
                    importNodeModule('vm')
                ])), 2), path = _ref[0], vm = _ref[1];
                var scriptContext = {
                    exports: {},
                    module: {
                        exports: {}
                    }
                };
                var urlDirname = urlObj.pathname.split('/').slice(0, -1).join('/');
                var filename = path.basename(urlObj.pathname);
                var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;
                var script = new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\n})`, {
                    filename,
                    importModuleDynamically: (_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER = (_vm_constants = vm.constants) == null ? void 0 : _vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER) != null ? _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER : importNodeModule
                });
                script.runInThisContext()(scriptContext.exports, scriptContext.module, eval('require'), urlDirname, filename);
                var exportedInterface = scriptContext.module.exports || scriptContext.exports;
                if (attrs && exportedInterface && attrs['globalName']) {
                    var container = exportedInterface[attrs['globalName']] || exportedInterface;
                    cb(undefined, container);
                    return;
                }
                cb(undefined, exportedInterface);
            } catch (e) {
                cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));
            }
        });
        return function handleScriptFetch(f, urlObj) {
            return _ref.apply(this, arguments);
        };
    }();
    getFetch().then(/*#__PURE__*/ function() {
        var _ref = _async_to_generator._(function*(f) {
            if ((attrs == null ? void 0 : attrs['type']) === 'esm' || (attrs == null ? void 0 : attrs['type']) === 'module') {
                return loadModule(urlObj.href, {
                    fetch: f,
                    vm: yield importNodeModule('vm')
                }).then(/*#__PURE__*/ function() {
                    var _ref = _async_to_generator._(function*(module) {
                        yield module.evaluate();
                        cb(undefined, module.namespace);
                    });
                    return function(module) {
                        return _ref.apply(this, arguments);
                    };
                }()).catch((e)=>{
                    cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));
                });
            }
            handleScriptFetch(f, urlObj);
        });
        return function(f) {
            return _ref.apply(this, arguments);
        };
    }()).catch((err)=>{
        cb(err);
    });
}
function loadScriptNode(url, info) {
    return new Promise((resolve, reject)=>{
        createScriptNode(url, (error1, scriptContext)=>{
            if (error1) {
                reject(error1);
            } else {
                var _info_attrs, _info_attrs1;
                var remoteEntryKey = (info == null ? void 0 : (_info_attrs = info.attrs) == null ? void 0 : _info_attrs['globalName']) || `__FEDERATION_${info == null ? void 0 : (_info_attrs1 = info.attrs) == null ? void 0 : _info_attrs1['name']}:custom__`;
                var entryExports = globalThis[remoteEntryKey] = scriptContext;
                resolve(entryExports);
            }
        }, info.attrs, info.loaderHook);
    });
}
function loadModule(url, options) {
    return _loadModule.apply(this, arguments);
}
function _loadModule() {
    _loadModule = _async_to_generator._(function*(url, options) {
        var fetch1 = options.fetch, vm = options.vm;
        var response = yield fetch1(url);
        var code = yield response.text();
        var module = new vm.SourceTextModule(code, {
            // @ts-ignore
            importModuleDynamically: /*#__PURE__*/ function() {
                var _ref = _async_to_generator._(function*(specifier, script) {
                    var resolvedUrl = new URL(specifier, url).href;
                    return loadModule(resolvedUrl, options);
                });
                return function(specifier, script) {
                    return _ref.apply(this, arguments);
                };
            }()
        });
        yield module.link(/*#__PURE__*/ function() {
            var _ref = _async_to_generator._(function*(specifier) {
                var resolvedUrl = new URL(specifier, url).href;
                var module = yield loadModule(resolvedUrl, options);
                return module;
            });
            return function(specifier) {
                return _ref.apply(this, arguments);
            };
        }());
        return module;
    });
    return _loadModule.apply(this, arguments);
}
function normalizeOptions(enableDefault, defaultOptions, key) {
    return function(options) {
        if (options === false) {
            return false;
        }
        if (typeof options === 'undefined') {
            if (enableDefault) {
                return defaultOptions;
            } else {
                return false;
            }
        }
        if (options === true) {
            return defaultOptions;
        }
        if (options && typeof options === 'object') {
            return polyfills._({}, defaultOptions, options);
        }
        throw new Error(`Unexpected type for \`${key}\`, expect boolean/undefined/object, got: ${typeof options}`);
    };
}
exports.BROWSER_LOG_KEY = BROWSER_LOG_KEY;
exports.BROWSER_LOG_VALUE = BROWSER_LOG_VALUE;
exports.ENCODE_NAME_PREFIX = ENCODE_NAME_PREFIX;
exports.EncodedNameTransformMap = EncodedNameTransformMap;
exports.FederationModuleManifest = FederationModuleManifest;
exports.MANIFEST_EXT = MANIFEST_EXT;
exports.MFModuleType = MFModuleType;
exports.MFPrefetchCommon = MFPrefetchCommon;
exports.MODULE_DEVTOOL_IDENTIFIER = MODULE_DEVTOOL_IDENTIFIER;
exports.ManifestFileName = ManifestFileName;
exports.NameTransformMap = NameTransformMap;
exports.NameTransformSymbol = NameTransformSymbol;
exports.SEPARATOR = SEPARATOR;
exports.StatsFileName = StatsFileName;
exports.TEMP_DIR = TEMP_DIR;
exports.assert = assert;
exports.composeKeyWithSeparator = composeKeyWithSeparator;
exports.containerPlugin = ContainerPlugin;
exports.containerReferencePlugin = ContainerReferencePlugin;
exports.createLink = createLink;
exports.createLogger = createLogger;
exports.createScript = createScript;
exports.createScriptNode = createScriptNode;
exports.decodeName = decodeName;
exports.encodeName = encodeName;
exports.error = error;
exports.generateExposeFilename = generateExposeFilename;
exports.generateShareFilename = generateShareFilename;
exports.generateSnapshotFromManifest = generateSnapshotFromManifest;
exports.getProcessEnv = getProcessEnv;
exports.getResourceUrl = getResourceUrl;
exports.inferAutoPublicPath = inferAutoPublicPath;
exports.isBrowserEnv = isBrowserEnv;
exports.isDebugMode = isDebugMode;
exports.isManifestProvider = isManifestProvider;
exports.isReactNativeEnv = isReactNativeEnv;
exports.isRequiredVersion = isRequiredVersion;
exports.isStaticResourcesEqual = isStaticResourcesEqual;
exports.loadScript = loadScript;
exports.loadScriptNode = loadScriptNode;
exports.logger = logger;
exports.moduleFederationPlugin = ModuleFederationPlugin;
exports.normalizeOptions = normalizeOptions;
exports.parseEntry = parseEntry;
exports.safeToString = safeToString;
exports.safeWrapper = safeWrapper;
exports.sharePlugin = SharePlugin;
exports.simpleJoinRemoteEntry = simpleJoinRemoteEntry;
exports.warn = warn;


}),
26735: (function (__unused_webpack_module, exports) {
"use strict";

function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports._ = _extends;


}),
52681: (function (__unused_webpack_module, exports) {
"use strict";

var FEDERATION_SUPPORTED_TYPES = [
    'script'
];
exports.FEDERATION_SUPPORTED_TYPES = FEDERATION_SUPPORTED_TYPES;


}),
42319: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var runtime = __webpack_require__(44647);
var constant = __webpack_require__(52681);
var sdk = __webpack_require__(10144);
function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        for(var k in e){
            n[k] = e[k];
        }
    }
    n.default = e;
    return Object.freeze(n);
}
var runtime__namespace = /*#__PURE__*/ _interopNamespaceDefault(runtime);
function attachShareScopeMap(webpackRequire) {
    if (!webpackRequire.S || webpackRequire.federation.hasAttachShareScopeMap || !webpackRequire.federation.instance || !webpackRequire.federation.instance.shareScopeMap) {
        return;
    }
    webpackRequire.S = webpackRequire.federation.instance.shareScopeMap;
    webpackRequire.federation.hasAttachShareScopeMap = true;
}
function remotes(options) {
    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, idToExternalAndNameMapping = options.idToExternalAndNameMapping, webpackRequire = options.webpackRequire, idToRemoteMap = options.idToRemoteMap;
    attachShareScopeMap(webpackRequire);
    if (webpackRequire.o(chunkMapping, chunkId)) {
        chunkMapping[chunkId].forEach((id)=>{
            var getScope = webpackRequire.R;
            if (!getScope) {
                getScope = [];
            }
            var data = idToExternalAndNameMapping[id];
            var remoteInfos = idToRemoteMap[id];
            // @ts-ignore seems not work
            if (getScope.indexOf(data) >= 0) {
                return;
            }
            // @ts-ignore seems not work
            getScope.push(data);
            if (data.p) {
                return promises.push(data.p);
            }
            var onError = (error)=>{
                if (!error) {
                    error = new Error('Container missing');
                }
                if (typeof error.message === 'string') {
                    error.message += `\nwhile loading "${data[1]}" from ${data[2]}`;
                }
                webpackRequire.m[id] = ()=>{
                    throw error;
                };
                data.p = 0;
            };
            var handleFunction = (fn, arg1, arg2, d, next, first)=>{
                try {
                    var promise = fn(arg1, arg2);
                    if (promise && promise.then) {
                        var p = promise.then((result)=>next(result, d), onError);
                        if (first) {
                            promises.push(data.p = p);
                        } else {
                            return p;
                        }
                    } else {
                        return next(promise, d, first);
                    }
                } catch (error) {
                    onError(error);
                }
            };
            var onExternal = (external, _, first)=>external ? handleFunction(webpackRequire.I, data[0], 0, external, onInitialized, first) : onError();
            // eslint-disable-next-line no-var
            var onInitialized = (_, external, first)=>handleFunction(external.get, data[1], getScope, 0, onFactory, first);
            // eslint-disable-next-line no-var
            var onFactory = (factory)=>{
                data.p = 1;
                webpackRequire.m[id] = (module1)=>{
                    module1.exports = factory();
                };
            };
            var onRemoteLoaded = ()=>{
                try {
                    var remoteName = sdk.decodeName(remoteInfos[0].name, sdk.ENCODE_NAME_PREFIX);
                    var remoteModuleName = remoteName + data[1].slice(1);
                    var instance = webpackRequire.federation.instance;
                    var loadRemote = ()=>webpackRequire.federation.instance.loadRemote(remoteModuleName, {
                            loadFactory: false,
                            from: 'build'
                        });
                    if (instance.options.shareStrategy === 'version-first') {
                        return Promise.all(instance.sharedHandler.initializeSharing(data[0])).then(()=>{
                            return loadRemote();
                        });
                    }
                    return loadRemote();
                } catch (error) {
                    onError(error);
                }
            };
            var useRuntimeLoad = remoteInfos.length === 1 && constant.FEDERATION_SUPPORTED_TYPES.includes(remoteInfos[0].externalType) && remoteInfos[0].name;
            if (useRuntimeLoad) {
                handleFunction(onRemoteLoaded, data[2], 0, 0, onFactory, 1);
            } else {
                handleFunction(webpackRequire, data[2], 0, 0, onExternal, 1);
            }
        });
    }
}
function consumes(options) {
    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, installedModules = options.installedModules, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;
    attachShareScopeMap(webpackRequire);
    if (webpackRequire.o(chunkMapping, chunkId)) {
        chunkMapping[chunkId].forEach((id)=>{
            if (webpackRequire.o(installedModules, id)) {
                return promises.push(installedModules[id]);
            }
            var onFactory = (factory)=>{
                installedModules[id] = 0;
                webpackRequire.m[id] = (module1)=>{
                    delete webpackRequire.c[id];
                    module1.exports = factory();
                };
            };
            var onError = (error)=>{
                delete installedModules[id];
                webpackRequire.m[id] = (module1)=>{
                    delete webpackRequire.c[id];
                    throw error;
                };
            };
            try {
                var federationInstance = webpackRequire.federation.instance;
                if (!federationInstance) {
                    throw new Error('Federation instance not found!');
                }
                var _moduleToHandlerMapping_id = moduleToHandlerMapping[id], shareKey = _moduleToHandlerMapping_id.shareKey, getter = _moduleToHandlerMapping_id.getter, shareInfo = _moduleToHandlerMapping_id.shareInfo;
                var promise = federationInstance.loadShare(shareKey, {
                    customShareInfo: shareInfo
                }).then((factory)=>{
                    if (factory === false) {
                        return getter();
                    }
                    return factory;
                });
                if (promise.then) {
                    promises.push(installedModules[id] = promise.then(onFactory).catch(onError));
                } else {
                    // @ts-ignore maintain previous logic
                    onFactory(promise);
                }
            } catch (e) {
                onError(e);
            }
        });
    }
}
function initializeSharing(ref) {
    var shareScopeName = ref.shareScopeName, webpackRequire = ref.webpackRequire, initPromises = ref.initPromises, initTokens = ref.initTokens, initScope = ref.initScope;
    var shareScopeKeys = Array.isArray(shareScopeName) ? shareScopeName : [
        shareScopeName
    ];
    var initializeSharingPromises = [];
    var _initializeSharing = function(shareScopeKey) {
        if (!initScope) initScope = [];
        var mfInstance = webpackRequire.federation.instance;
        // handling circular init calls
        var initToken = initTokens[shareScopeKey];
        if (!initToken) initToken = initTokens[shareScopeKey] = {
            from: mfInstance.name
        };
        if (initScope.indexOf(initToken) >= 0) return;
        initScope.push(initToken);
        var promise = initPromises[shareScopeKey];
        if (promise) return promise;
        var warn = (msg)=>typeof console !== 'undefined' && console.warn && console.warn(msg);
        var initExternal = (id)=>{
            var handleError = (err)=>warn('Initialization of sharing external failed: ' + err);
            try {
                var _$module = webpackRequire(id);
                if (!_$module) return;
                var initFn = (module1)=>module1 && module1.init && // @ts-ignore compat legacy mf shared behavior
                    module1.init(webpackRequire.S[shareScopeKey], initScope, {
                        shareScopeMap: webpackRequire.S || {},
                        shareScopeKeys: shareScopeName
                    });
                if (_$module.then) return promises.push(_$module.then(initFn, handleError));
                var initResult = initFn(_$module);
                // @ts-ignore
                if (initResult && typeof initResult !== 'boolean' && initResult.then) return promises.push(initResult['catch'](handleError));
            } catch (err) {
                handleError(err);
            }
        };
        var promises = mfInstance.initializeSharing(shareScopeKey, {
            strategy: mfInstance.options.shareStrategy,
            initScope,
            from: 'build'
        });
        attachShareScopeMap(webpackRequire);
        var bundlerRuntimeRemotesOptions = webpackRequire.federation.bundlerRuntimeOptions.remotes;
        if (bundlerRuntimeRemotesOptions) {
            Object.keys(bundlerRuntimeRemotesOptions.idToRemoteMap).forEach((moduleId)=>{
                var info = bundlerRuntimeRemotesOptions.idToRemoteMap[moduleId];
                var externalModuleId = bundlerRuntimeRemotesOptions.idToExternalAndNameMapping[moduleId][2];
                if (info.length > 1) {
                    initExternal(externalModuleId);
                } else if (info.length === 1) {
                    var remoteInfo = info[0];
                    if (!constant.FEDERATION_SUPPORTED_TYPES.includes(remoteInfo.externalType)) {
                        initExternal(externalModuleId);
                    }
                }
            });
        }
        if (!promises.length) {
            return initPromises[shareScopeKey] = true;
        }
        return initPromises[shareScopeKey] = Promise.all(promises).then(()=>initPromises[shareScopeKey] = true);
    };
    shareScopeKeys.forEach((key)=>{
        initializeSharingPromises.push(_initializeSharing(key));
    });
    return Promise.all(initializeSharingPromises).then(()=>true);
}
function handleInitialConsumes(options) {
    var moduleId = options.moduleId, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;
    var federationInstance = webpackRequire.federation.instance;
    if (!federationInstance) {
        throw new Error('Federation instance not found!');
    }
    var _moduleToHandlerMapping_moduleId = moduleToHandlerMapping[moduleId], shareKey = _moduleToHandlerMapping_moduleId.shareKey, shareInfo = _moduleToHandlerMapping_moduleId.shareInfo;
    try {
        return federationInstance.loadShareSync(shareKey, {
            customShareInfo: shareInfo
        });
    } catch (err) {
        console.error('loadShareSync failed! The function should not be called unless you set "eager:true". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.');
        console.error('The original error message is as follows: ');
        throw err;
    }
}
function installInitialConsumes(options) {
    var moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire, installedModules = options.installedModules, initialConsumes = options.initialConsumes;
    initialConsumes.forEach((id)=>{
        webpackRequire.m[id] = (module1)=>{
            // Handle scenario when module is used synchronously
            installedModules[id] = 0;
            delete webpackRequire.c[id];
            var factory = handleInitialConsumes({
                moduleId: id,
                moduleToHandlerMapping,
                webpackRequire
            });
            if (typeof factory !== 'function') {
                throw new Error(`Shared module is not available for eager consumption: ${id}`);
            }
            module1.exports = factory();
        };
    });
}
function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function initContainerEntry(options) {
    var webpackRequire = options.webpackRequire, shareScope = options.shareScope, initScope = options.initScope, shareScopeKey = options.shareScopeKey, remoteEntryInitOptions = options.remoteEntryInitOptions;
    if (!webpackRequire.S) return;
    if (!webpackRequire.federation || !webpackRequire.federation.instance || !webpackRequire.federation.initOptions) return;
    var federationInstance = webpackRequire.federation.instance;
    federationInstance.initOptions(_extends({
        name: webpackRequire.federation.initOptions.name,
        remotes: []
    }, remoteEntryInitOptions));
    var hostShareScopeKeys = remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeKeys;
    var hostShareScopeMap = remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap;
    // host: 'default' remote: 'default'  remote['default'] = hostShareScopeMap['default']
    // host: ['default', 'scope1'] remote: 'default'  remote['default'] = hostShareScopeMap['default']; remote['scope1'] = hostShareScopeMap['scop1']
    // host: 'default' remote: ['default','scope1']  remote['default'] = hostShareScopeMap['default']; remote['scope1'] = hostShareScopeMap['scope1'] = {}
    // host: ['scope1','default'] remote: ['scope1','scope2'] => remote['scope1'] = hostShareScopeMap['scope1']; remote['scope2'] = hostShareScopeMap['scope2'] = {};
    if (!shareScopeKey || typeof shareScopeKey === 'string') {
        var key = shareScopeKey || 'default';
        if (Array.isArray(hostShareScopeKeys)) {
            // const sc = hostShareScopeMap![key];
            // if (!sc) {
            //   throw new Error('shareScopeKey is not exist in hostShareScopeMap');
            // }
            // federationInstance.initShareScopeMap(key, sc, {
            //   hostShareScopeMap: remoteEntryInitOptions?.shareScopeMap || {},
            // });
            hostShareScopeKeys.forEach((hostKey)=>{
                if (!hostShareScopeMap[hostKey]) {
                    hostShareScopeMap[hostKey] = {};
                }
                var sc = hostShareScopeMap[hostKey];
                federationInstance.initShareScopeMap(hostKey, sc, {
                    hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}
                });
            });
        } else {
            federationInstance.initShareScopeMap(key, shareScope, {
                hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}
            });
        }
    } else {
        shareScopeKey.forEach((key)=>{
            if (!hostShareScopeKeys || !hostShareScopeMap) {
                federationInstance.initShareScopeMap(key, shareScope, {
                    hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}
                });
                return;
            }
            if (!hostShareScopeMap[key]) {
                hostShareScopeMap[key] = {};
            }
            var sc = hostShareScopeMap[key];
            federationInstance.initShareScopeMap(key, sc, {
                hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}
            });
        });
    }
    if (webpackRequire.federation.attachShareScopeMap) {
        webpackRequire.federation.attachShareScopeMap(webpackRequire);
    }
    if (typeof webpackRequire.federation.prefetch === 'function') {
        webpackRequire.federation.prefetch();
    }
    if (!Array.isArray(shareScopeKey)) {
        // @ts-ignore
        return webpackRequire.I(shareScopeKey || 'default', initScope);
    }
    var proxyInitializeSharing = Boolean(webpackRequire.federation.initOptions.shared);
    if (proxyInitializeSharing) {
        // @ts-ignore
        return webpackRequire.I(shareScopeKey, initScope);
    }
    // @ts-ignore
    return Promise.all(shareScopeKey.map((key)=>{
        // @ts-ignore
        return webpackRequire.I(key, initScope);
    })).then(()=>true);
}
var federation = {
    runtime: runtime__namespace,
    instance: undefined,
    initOptions: undefined,
    bundlerRuntime: {
        remotes,
        consumes,
        I: initializeSharing,
        S: {},
        installInitialConsumes,
        initContainerEntry
    },
    attachShareScopeMap,
    bundlerRuntimeOptions: {}
};
module.exports = federation;


}),
92954: (function (__unused_webpack_module, exports) {
"use strict";

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
exports._ = _array_like_to_array;


}),
52066: (function (__unused_webpack_module, exports) {
"use strict";

function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
exports._ = _array_with_holes;


}),
15769: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_like_to_array = __webpack_require__(92954);
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array._(arr);
}
exports._ = _array_without_holes;


}),
95111: (function (__unused_webpack_module, exports) {
"use strict";

function _assert_this_initialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports._ = _assert_this_initialized;


}),
11809: (function (__unused_webpack_module, exports) {
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
exports._ = _async_to_generator;


}),
19436: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
var _is_native_reflect_construct = __webpack_require__(26019);
var _possible_constructor_return = __webpack_require__(55176);
function _call_super(_this, derived, args) {
    // Super
    derived = _get_prototype_of._(derived);
    return _possible_constructor_return._(_this, _is_native_reflect_construct._() ? Reflect.construct(derived, args || [], _get_prototype_of._(_this).constructor) : derived.apply(_this, args));
}
exports._ = _call_super;


}),
8864: (function (__unused_webpack_module, exports) {
"use strict";

function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports._ = _class_call_check;


}),
28713: (function (__unused_webpack_module, exports) {
"use strict";

function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
exports._ = _class_private_field_loose_base;


}),
7979: (function (__unused_webpack_module, exports) {
"use strict";

var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
exports._ = _class_private_field_loose_key;


}),
98812: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _is_native_reflect_construct = __webpack_require__(26019);
var _set_prototype_of = __webpack_require__(40998);
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct._()) exports._ = _construct = Reflect.construct;
    else {
        exports._ = _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of._(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
exports._ = _construct;


}),
93072: (function (__unused_webpack_module, exports) {
"use strict";

function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
exports._ = _create_class;


}),
52193: (function (__unused_webpack_module, exports) {
"use strict";

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else obj[key] = value;
    return obj;
}
exports._ = _define_property;


}),
4084: (function (__unused_webpack_module, exports) {
"use strict";

function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
exports._ = _export_star;


}),
616: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _super_prop_base = __webpack_require__(70777);
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) exports._ = _get = Reflect.get;
    else {
        exports._ = _get = function get(target, property, receiver) {
            var base = _super_prop_base._(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
exports._ = _get;


}),
86880: (function (__unused_webpack_module, exports) {
"use strict";

function _get_prototype_of(o) {
    exports._ = _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
exports._ = _get_prototype_of;


}),
82397: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _set_prototype_of = __webpack_require__(40998);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of._(subClass, superClass);
}
exports._ = _inherits;


}),
66705: (function (__unused_webpack_module, exports) {
"use strict";

function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports._ = _interop_require_default;


}),
83610: (function (__unused_webpack_module, exports) {
"use strict";

function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
            else newObj[key] = obj[key];
        }
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
exports._ = _interop_require_wildcard;


}),
5534: (function (__unused_webpack_module, exports) {
"use strict";

function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
exports._ = _is_native_function;


}),
26019: (function (__unused_webpack_module, exports) {
"use strict";

function _is_native_reflect_construct() {
    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
        // If the internal slots aren't set, this throws an error similar to
        //   TypeError: this is not a Boolean object.
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (exports._ = _is_native_reflect_construct = function() {
        return !!result;
    })();
}
exports._ = _is_native_reflect_construct;


}),
22104: (function (__unused_webpack_module, exports) {
"use strict";

function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
        return Array.from(iter);
    }
}
exports._ = _iterable_to_array;


}),
55730: (function (__unused_webpack_module, exports) {
"use strict";

function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
exports._ = _iterable_to_array_limit;


}),
93467: (function (__unused_webpack_module, exports) {
"use strict";

function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports._ = _non_iterable_rest;


}),
61506: (function (__unused_webpack_module, exports) {
"use strict";

function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports._ = _non_iterable_spread;


}),
36192: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _define_property = __webpack_require__(52193);
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property._(target, key, source[key]);
        });
    }
    return target;
}
exports._ = _object_spread;


}),
83590: (function (__unused_webpack_module, exports) {
"use strict";

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
exports._ = _object_spread_props;


}),
86136: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _object_without_properties_loose = __webpack_require__(3574);
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose._(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
exports._ = _object_without_properties;


}),
3574: (function (__unused_webpack_module, exports) {
"use strict";

function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports._ = _object_without_properties_loose;


}),
55176: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _assert_this_initialized = __webpack_require__(95111);
var _type_of = __webpack_require__(94210);
function _possible_constructor_return(self, call) {
    if (call && (_type_of._(call) === "object" || typeof call === "function")) return call;
    return _assert_this_initialized._(self);
}
exports._ = _possible_constructor_return;


}),
40998: (function (__unused_webpack_module, exports) {
"use strict";

function _set_prototype_of(o, p) {
    exports._ = _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
exports._ = _set_prototype_of;


}),
78474: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_with_holes = __webpack_require__(52066);
var _iterable_to_array_limit = __webpack_require__(55730);
var _non_iterable_rest = __webpack_require__(93467);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _sliced_to_array(arr, i) {
    return _array_with_holes._(arr) || _iterable_to_array_limit._(arr, i) || _unsupported_iterable_to_array._(arr, i) || _non_iterable_rest._();
}
exports._ = _sliced_to_array;


}),
70777: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of._(object);
        if (object === null) break;
    }
    return object;
}
exports._ = _super_prop_base;


}),
12309: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_with_holes = __webpack_require__(52066);
var _iterable_to_array = __webpack_require__(22104);
var _non_iterable_rest = __webpack_require__(93467);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _to_array(arr) {
    return _array_with_holes._(arr) || _iterable_to_array._(arr) || _unsupported_iterable_to_array._(arr) || _non_iterable_rest._();
}
exports._ = _to_array;


}),
92716: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_without_holes = __webpack_require__(15769);
var _iterable_to_array = __webpack_require__(22104);
var _non_iterable_spread = __webpack_require__(61506);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _to_consumable_array(arr) {
    return _array_without_holes._(arr) || _iterable_to_array._(arr) || _unsupported_iterable_to_array._(arr) || _non_iterable_spread._();
}
exports._ = _to_consumable_array;


}),
94210: (function (__unused_webpack_module, exports) {
"use strict";

function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
exports._ = _type_of;


}),
21859: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_like_to_array = __webpack_require__(92954);
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array._(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array._(o, minLen);
}
exports._ = _unsupported_iterable_to_array;


}),
30753: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _construct = __webpack_require__(98812);
var _get_prototype_of = __webpack_require__(86880);
var _is_native_function = __webpack_require__(5534);
var _set_prototype_of = __webpack_require__(40998);
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    exports._ = _wrap_native_super = function(Class) {
        if (Class === null || !_is_native_function._(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct._(Class, arguments, _get_prototype_of._(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of._(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
exports._ = _wrap_native_super;


}),
33352: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var eventTargetShim = __webpack_require__(65803);
/**
 * The signal class.
 * @see https://dom.spec.whatwg.org/#abortsignal
 */ var AbortSignal = /*#__PURE__*/ function(_eventTargetShim_EventTarget) {
    _inherits._(AbortSignal, _eventTargetShim_EventTarget);
    function AbortSignal() {
        _class_call_check._(this, AbortSignal);
        var _this;
        _this = _call_super._(this, AbortSignal);
        throw new TypeError("AbortSignal cannot be constructed directly");
        return _this;
    }
    _create_class._(AbortSignal, [
        {
            key: "aborted",
            get: /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */ function() {
                var aborted = abortedFlags.get(this);
                if (typeof aborted !== "boolean") {
                    throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
                }
                return aborted;
            }
        }
    ]);
    return AbortSignal;
}(eventTargetShim.EventTarget);
eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
/**
 * Create an AbortSignal object.
 */ function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
}
/**
 * Abort a given signal.
 */ function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
        return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
        type: "abort"
    });
}
/**
 * Aborted flag for each instances.
 */ var abortedFlags = new WeakMap();
// Properties should be enumerable.
Object.defineProperties(AbortSignal.prototype, {
    aborted: {
        enumerable: true
    }
});
// `toString()` should return `"[object AbortSignal]"`
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal"
    });
}
/**
 * The AbortController.
 * @see https://dom.spec.whatwg.org/#abortcontroller
 */ var AbortController = /*#__PURE__*/ function() {
    function AbortController() {
        _class_call_check._(this, AbortController);
        signals.set(this, createAbortSignal());
    }
    _create_class._(AbortController, [
        {
            key: "signal",
            get: /**
     * Returns the `AbortSignal` object associated with this object.
     */ function() {
                return getSignal(this);
            }
        },
        {
            /**
     * Abort and signal to any observers that the associated activity is to be aborted.
     */ key: "abort",
            value: function abort() {
                abortSignal(getSignal(this));
            }
        }
    ]);
    return AbortController;
}();
/**
 * Associated signals.
 */ var signals = new WeakMap();
/**
 * Get the associated signal of a given controller.
 */ function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
}
// Properties should be enumerable.
Object.defineProperties(AbortController.prototype, {
    signal: {
        enumerable: true
    },
    abort: {
        enumerable: true
    }
});
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController"
    });
}
exports.AbortController = AbortController;
exports.AbortSignal = AbortSignal;
exports["default"] = AbortController;
module.exports = AbortController;
module.exports.AbortController = module.exports["default"] = AbortController;
module.exports.AbortSignal = AbortSignal //# sourceMappingURL=abort-controller.js.map
;


}),
1531: (function (module) {
"use strict";

module.exports = (ref)=>{
    var _ref = ref === void 0 ? {} : ref, _ref_onlyFirst = _ref.onlyFirst, onlyFirst = _ref_onlyFirst === void 0 ? false : _ref_onlyFirst;
    var pattern = [
        '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
        '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
    ].join('|');
    return new RegExp(pattern, onlyFirst ? undefined : 'g');
};


}),
66656: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NormalizedScriptLocatorHTTPMethod: function() {
        return NormalizedScriptLocatorHTTPMethod;
    },
    NormalizedScriptLocatorSignatureVerificationMode: function() {
        return NormalizedScriptLocatorSignatureVerificationMode;
    },
    default: function() {
        return _default;
    }
});
var _reactnative = __webpack_require__(22705);
var NormalizedScriptLocatorHTTPMethod = function(NormalizedScriptLocatorHTTPMethod) {
    NormalizedScriptLocatorHTTPMethod["GET"] = "GET";
    NormalizedScriptLocatorHTTPMethod["POST"] = "POST";
    return NormalizedScriptLocatorHTTPMethod;
}({});
var NormalizedScriptLocatorSignatureVerificationMode = function(NormalizedScriptLocatorSignatureVerificationMode) {
    NormalizedScriptLocatorSignatureVerificationMode["STRICT"] = "strict";
    NormalizedScriptLocatorSignatureVerificationMode["LAX"] = "lax";
    NormalizedScriptLocatorSignatureVerificationMode["OFF"] = "off";
    return NormalizedScriptLocatorSignatureVerificationMode;
}({});
var _default = _reactnative.TurboModuleRegistry.get('ScriptManager');


}),
25608: (function (__unused_webpack_module, exports) {
"use strict";

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}


}),
65803: (function (module, exports) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */ /**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */ var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */ var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */ function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */ function setCancelFlag(data) {
    if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
        }
        return;
    }
    if (!data.event.cancelable) {
        return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
    }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */ /**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */ function Event(eventTarget, event) {
    privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
    });
    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
        value: false,
        enumerable: true
    });
    // Define accessors
    var keys = Object.keys(event);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
    }
}
// Should be enumerable, but class methods are not enumerable.
Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */ get type () {
        return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get target () {
        return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get currentTarget () {
        return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */ composedPath () {
        var currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
            return [];
        }
        return [
            currentTarget
        ];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */ get NONE () {
        return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */ get CAPTURING_PHASE () {
        return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */ get AT_TARGET () {
        return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */ get BUBBLING_PHASE () {
        return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */ get eventPhase () {
        return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopPropagation () {
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
        }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopImmediatePropagation () {
        var data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
        }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */ get bubbles () {
        return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */ get cancelable () {
        return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */ preventDefault () {
        setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */ get defaultPrevented () {
        return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */ get composed () {
        return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */ get timeStamp () {
        return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */ get srcElement () {
        return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */ get cancelBubble () {
        return pd(this).stopped;
    },
    set cancelBubble (value){
        if (!value) {
            return;
        }
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
        }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */ get returnValue () {
        return !pd(this).canceled;
    },
    set returnValue (value){
        if (!value) {
            setCancelFlag(pd(this));
        }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */ initEvent () {
    // Do nothing.
    }
};
// `constructor` is not enumerable.
Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
});
// Ensure `event instanceof window.Event` is `true`.
if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */ function defineRedirectDescriptor(key) {
    return {
        get () {
            return pd(this).event[key];
        },
        set (value1) {
            pd(this).event[key] = value1;
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */ function defineCallDescriptor(key) {
    return {
        value () {
            var event = pd(this).event;
            return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */ function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
        return BaseEvent;
    }
    /** CustomEvent */ function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true
        }
    });
    // Define accessors.
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in BaseEvent.prototype)) {
            var descriptor = Object.getOwnPropertyDescriptor(proto, key);
            var isFunc = typeof descriptor.value === "function";
            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
        }
    }
    return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */ function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
        return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
    }
    return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */ function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */ function isStopped(event) {
    return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */ function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */ function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */ function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */ /**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */ var listenersMap = new WeakMap();
// Listener types
var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */ function isObject(x) {
    return x !== null && typeof x === "object" //eslint-disable-line no-restricted-syntax
    ;
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */ function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
        throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */ function defineEventAttributeDescriptor(eventName) {
    return {
        get () {
            var listeners = getListeners(this);
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    return node.listener;
                }
                node = node.next;
            }
            return null;
        },
        set (listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
                listener = null; // eslint-disable-line no-param-reassign
            }
            var listeners = getListeners(this);
            // Traverse to the tail while removing old value.
            var prev = null;
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    // Remove old value.
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                } else {
                    prev = node;
                }
                node = node.next;
            }
            // Add new value.
            if (listener !== null) {
                var newNode = {
                    listener,
                    listenerType: ATTRIBUTE,
                    passive: false,
                    once: false,
                    next: null
                };
                if (prev === null) {
                    listeners.set(eventName, newNode);
                } else {
                    prev.next = newNode;
                }
            }
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */ function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */ function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */ function CustomEventTarget() {
        EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true
        }
    });
    for(var i = 0; i < eventNames.length; ++i){
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */ function EventTarget() {
    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
        var types = new Array(arguments.length);
        for(var i = 0; i < arguments.length; ++i){
            types[i] = arguments[i];
        }
        return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
/*eslint-enable consistent-return */ }
// Should be enumerable, but class methods are not enumerable.
EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ addEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError("'listener' should be a function or an object.");
        }
        var listeners = getListeners(this);
        var optionsIsObj = isObject(options);
        var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var newNode = {
            listener,
            listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null
        };
        // Set it as the first node if the first node is null.
        var node = listeners.get(eventName);
        if (node === undefined) {
            listeners.set(eventName, newNode);
            return;
        }
        // Traverse to the tail while checking duplication..
        var prev = null;
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                // Should ignore duplication.
                return;
            }
            prev = node;
            node = node.next;
        }
        // Add it.
        prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ removeEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        var listeners = getListeners(this);
        var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = listeners.get(eventName);
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
                return;
            }
            prev = node;
            node = node.next;
        }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */ dispatchEvent (event) {
        if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.');
        }
        // If listeners aren't registered, terminate.
        var listeners = getListeners(this);
        var eventName = event.type;
        var node = listeners.get(eventName);
        if (node == null) {
            return true;
        }
        // Since we cannot rewrite several properties, so wrap object.
        var wrappedEvent = wrapEvent(this, event);
        // This doesn't process capturing phase and bubbling phase.
        // This isn't participating in a tree.
        var prev = null;
        while(node != null){
            // Remove this listener if it's once
            if (node.once) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
            } else {
                prev = node;
            }
            // Call this listener
            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
            if (typeof node.listener === "function") {
                try {
                    node.listener.call(this, wrappedEvent);
                } catch (err) {
                    if (typeof console !== "undefined" && typeof console.error === "function") {
                        console.error(err);
                    }
                }
            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                node.listener.handleEvent(wrappedEvent);
            }
            // Break if `event.stopImmediatePropagation` was called.
            if (isStopped(wrappedEvent)) {
                break;
            }
            node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
    }
};
// `constructor` is not enumerable.
Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
});
// Ensure `eventTarget instanceof window.EventTarget` is `true`.
if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}
exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports["default"] = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports["default"] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute //# sourceMappingURL=event-target-shim.js.map
;


}),
96014: (function (module) {
"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
} else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
    };
}
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) {
            // Note: The comments on the `throw` lines are intentional, they show
            // up in Node's output if this results in an unhandled exception.
            throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
    } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') {
            // Adding the second element, need to change to array.
            existing = events[type] = prepend ? [
                listener,
                existing
            ] : [
                existing,
                listener
            ];
        // If we've already got an array, just append.
        } else if (prepend) {
            existing.unshift(listener);
        } else {
            existing.push(listener);
        }
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--){
            if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
            }
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else {
            spliceOne(list, position);
        }
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
        // LIFO order
        for(i = listeners.length - 1; i >= 0; i--){
            this.removeListener(type, listeners[i]);
        }
    }
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
    } else {
        return listenerCount.call(emitter, type);
    }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') {
            return 1;
        } else if (evlistener !== undefined) {
            return evlistener.length;
        }
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i){
        ret[i] = arr[i].listener || arr[i];
    }
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') {
                emitter.removeListener('error', errorListener);
            }
            resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') {
            addErrorHandlerIfEventEmitter(emitter, errorListener, {
                once: true
            });
        }
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) {
            emitter.once(name, listener);
        } else {
            emitter.on(name, listener);
        }
    } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
            // IE does not have builtin `{ once: true }` support so we
            // have to do it manually.
            if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
        });
    } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
}


}),
56481: (function (module) {
"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function(condition, format, a, b, c, d, e, f) {
    if (false) {}
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;


}),
29068: (function (module) {
"use strict";

var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
};
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for(var i = 0; i < newInputs.length; i++){
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}
function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) {
        isEqual = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        var newArgs = [];
        for(var _i = 0; _i < arguments.length; _i++){
            newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}
module.exports = memoizeOne;


}),
92956: (function (module) {
"use strict";

function nullthrows(x, message) {
    if (x != null) {
        return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
}
module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
    value: true
}));


}),
61826: (function (module) {
"use strict";

function noop() {}
// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable
// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.
// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
    try {
        return obj.then;
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallOne(fn, a) {
    try {
        return fn(a);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallTwo(fn, a, b) {
    try {
        fn(a, b);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
module.exports = Promise;
function Promise(fn) {
    if (typeof this !== 'object') {
        throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
        throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
}
Promise._B = null;
Promise._C = null;
Promise._D = noop;
Promise.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
};
function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
        var res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
    });
}
function handle(self, deferred) {
    while(self._y === 3){
        self = self._z;
    }
    if (Promise._B) {
        Promise._B(self);
    }
    if (self._y === 0) {
        if (self._x === 0) {
            self._x = 1;
            self._A = deferred;
            return;
        }
        if (self._x === 1) {
            self._x = 2;
            self._A = [
                self._A,
                deferred
            ];
            return;
        }
        self._A.push(deferred);
        return;
    }
    handleResolved(self, deferred);
}
function handleResolved(self, deferred) {
    setImmediate(function() {
        var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
            if (self._y === 1) {
                resolve(deferred.promise, self._z);
            } else {
                reject(deferred.promise, self._z);
            }
            return;
        }
        var ret = tryCallOne(cb, self._z);
        if (ret === IS_ERROR) {
            reject(deferred.promise, LAST_ERROR);
        } else {
            resolve(deferred.promise, ret);
        }
    });
}
function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
        return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
            return reject(self, LAST_ERROR);
        }
        if (then === self.then && newValue instanceof Promise) {
            self._y = 3;
            self._z = newValue;
            finale(self);
            return;
        } else if (typeof then === 'function') {
            doResolve(then.bind(newValue), self);
            return;
        }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
}
function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
        Promise._C(self, newValue);
    }
    finale(self);
}
function finale(self) {
    if (self._x === 1) {
        handle(self, self._A);
        self._A = null;
    }
    if (self._x === 2) {
        for(var i = 0; i < self._A.length; i++){
            handle(self, self._A[i]);
        }
        self._A = null;
    }
}
function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
}
/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */ function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function(value) {
        if (done) return;
        done = true;
        resolve(promise, value);
    }, function(reason) {
        if (done) return;
        done = true;
        reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
    }
}


}),
46361: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

//This file contains the ES6 extensions to the core Promises/A+ API
var Promise = __webpack_require__(61826);
module.exports = Promise;
/* Static Functions */ var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');
function valuePromise(value) {
    var p = new Promise(Promise._D);
    p._y = 1;
    p._z = value;
    return p;
}
Promise.resolve = function(value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
        try {
            var then = value.then;
            if (typeof then === 'function') {
                return new Promise(then.bind(value));
            }
        } catch (ex) {
            return new Promise(function(resolve, reject) {
                reject(ex);
            });
        }
    }
    return valuePromise(value);
};
var iterableToArray = function(iterable) {
    if (typeof Array.from === 'function') {
        // ES2015+, iterables exist
        iterableToArray = Array.from;
        return Array.from(iterable);
    }
    // ES5, only arrays and array-likes exist
    iterableToArray = function(x) {
        return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
};
Promise.all = function(arr) {
    var args = iterableToArray(arr);
    return new Promise(function(resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
            if (val && (typeof val === 'object' || typeof val === 'function')) {
                if (val instanceof Promise && val.then === Promise.prototype.then) {
                    while(val._y === 3){
                        val = val._z;
                    }
                    if (val._y === 1) return res(i, val._z);
                    if (val._y === 2) reject(val._z);
                    val.then(function(val) {
                        res(i, val);
                    }, reject);
                    return;
                } else {
                    var then = val.then;
                    if (typeof then === 'function') {
                        var p = new Promise(then.bind(val));
                        p.then(function(val) {
                            res(i, val);
                        }, reject);
                        return;
                    }
                }
            }
            args[i] = val;
            if (--remaining === 0) {
                resolve(args);
            }
        }
        for(var i = 0; i < args.length; i++){
            res(i, args[i]);
        }
    });
};
function onSettledFulfill(value) {
    return {
        status: 'fulfilled',
        value: value
    };
}
function onSettledReject(reason) {
    return {
        status: 'rejected',
        reason: reason
    };
}
function mapAllSettled(item) {
    if (item && (typeof item === 'object' || typeof item === 'function')) {
        if (item instanceof Promise && item.then === Promise.prototype.then) {
            return item.then(onSettledFulfill, onSettledReject);
        }
        var then = item.then;
        if (typeof then === 'function') {
            return new Promise(then.bind(item)).then(onSettledFulfill, onSettledReject);
        }
    }
    return onSettledFulfill(item);
}
Promise.allSettled = function(iterable) {
    return Promise.all(iterableToArray(iterable).map(mapAllSettled));
};
Promise.reject = function(value) {
    return new Promise(function(resolve, reject) {
        reject(value);
    });
};
Promise.race = function(values) {
    return new Promise(function(resolve, reject) {
        iterableToArray(values).forEach(function(value) {
            Promise.resolve(value).then(resolve, reject);
        });
    });
};
/* Prototype Methods */ Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
};
function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
        return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
}
Promise.any = function promiseAny(values) {
    return new Promise(function(resolve, reject) {
        var promises = iterableToArray(values);
        var hasResolved = false;
        var rejectionReasons = [];
        function resolveOnce(value) {
            if (!hasResolved) {
                hasResolved = true;
                resolve(value);
            }
        }
        function rejectionCheck(reason) {
            rejectionReasons.push(reason);
            if (rejectionReasons.length === promises.length) {
                reject(getAggregateError(rejectionReasons));
            }
        }
        if (promises.length === 0) {
            reject(getAggregateError(rejectionReasons));
        } else {
            promises.forEach(function(value) {
                Promise.resolve(value).then(resolveOnce, rejectionCheck);
            });
        }
    });
};


}),
82639: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var Promise = __webpack_require__(61826);
module.exports = Promise;
Promise.prototype.finally = function(f) {
    return this.then(function(value) {
        return Promise.resolve(f()).then(function() {
            return value;
        });
    }, function(err) {
        return Promise.resolve(f()).then(function() {
            throw err;
        });
    });
};


}),
72: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
'use strict';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var react = __webpack_require__(4931);
var ErrorBoundaryContext = react.createContext(null);
var initialState = {
    didCatch: false,
    error: null
};
var ErrorBoundary = /*#__PURE__*/ function(_react_Component) {
    "use strict";
    _inherits._(ErrorBoundary, _react_Component);
    function ErrorBoundary(props) {
        _class_call_check._(this, ErrorBoundary);
        var _this;
        _this = _call_super._(this, ErrorBoundary, [
            props
        ]);
        _this.resetErrorBoundary = _this.resetErrorBoundary.bind(_this);
        _this.state = initialState;
        return _this;
    }
    _create_class._(ErrorBoundary, [
        {
            key: "resetErrorBoundary",
            value: function resetErrorBoundary() {
                var error = this.state.error;
                if (error !== null) {
                    var _this$props$onReset, _this$props;
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {
                        args,
                        reason: "imperative-api"
                    });
                    this.setState(initialState);
                }
            }
        },
        {
            key: "componentDidCatch",
            value: function componentDidCatch(error, info) {
                var _this$props$onError, _this$props2;
                (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                var didCatch = this.state.didCatch;
                var resetKeys = this.props.resetKeys;
                // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,
                // we'd end up resetting the error boundary immediately.
                // This would likely trigger a second error to be thrown.
                // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.
                if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {
                    var _this$props$onReset2, _this$props3;
                    (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {
                        next: resetKeys,
                        prev: prevProps.resetKeys,
                        reason: "keys"
                    });
                    this.setState(initialState);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, children = _this_props.children, fallbackRender = _this_props.fallbackRender, FallbackComponent = _this_props.FallbackComponent, fallback = _this_props.fallback;
                var _this_state = this.state, didCatch = _this_state.didCatch, error = _this_state.error;
                var childToRender = children;
                if (didCatch) {
                    var props = {
                        error,
                        resetErrorBoundary: this.resetErrorBoundary
                    };
                    if (typeof fallbackRender === "function") {
                        childToRender = fallbackRender(props);
                    } else if (FallbackComponent) {
                        childToRender = react.createElement(FallbackComponent, props);
                    } else if (fallback !== undefined) {
                        childToRender = fallback;
                    } else {
                        throw error;
                    }
                }
                return react.createElement(ErrorBoundaryContext.Provider, {
                    value: {
                        didCatch,
                        error,
                        resetErrorBoundary: this.resetErrorBoundary
                    }
                }, childToRender);
            }
        }
    ], [
        {
            key: "getDerivedStateFromError",
            value: function getDerivedStateFromError(error) {
                return {
                    didCatch: true,
                    error
                };
            }
        }
    ]);
    return ErrorBoundary;
}(react.Component);
function hasArrayChanged() {
    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));
}
function assertErrorBoundaryContext(value) {
    if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") {
        throw new Error("ErrorBoundaryContext not found");
    }
}
function useErrorBoundary() {
    var context = react.useContext(ErrorBoundaryContext);
    assertErrorBoundaryContext(context);
    var _react_useState = _sliced_to_array._(react.useState({
        error: null,
        hasError: false
    }), 2), state = _react_useState[0], setState = _react_useState[1];
    var memoized = react.useMemo(()=>({
            resetBoundary: ()=>{
                context.resetErrorBoundary();
                setState({
                    error: null,
                    hasError: false
                });
            },
            showBoundary: (error)=>setState({
                    error,
                    hasError: true
                })
        }), [
        context.resetErrorBoundary
    ]);
    if (state.hasError) {
        throw state.error;
    }
    return memoized;
}
function withErrorBoundary(component, errorBoundaryProps) {
    var Wrapped = react.forwardRef((props, ref)=>react.createElement(ErrorBoundary, errorBoundaryProps, react.createElement(component, _object_spread_props._(_object_spread._({}, props), {
            ref
        }))));
    // Format for display in DevTools
    var name = component.displayName || component.name || "Unknown";
    Wrapped.displayName = "withErrorBoundary(".concat(name, ")");
    return Wrapped;
}
exports.ErrorBoundary = ErrorBoundary;
exports.ErrorBoundaryContext = ErrorBoundaryContext;
exports.useErrorBoundary = useErrorBoundary;
exports.withErrorBoundary = withErrorBoundary;


}),
1361: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
function jsxProd(type, config, maybeKey) {
    var key = null;
    void 0 !== maybeKey && (key = "" + maybeKey);
    void 0 !== config.key && (key = "" + config.key);
    if ("key" in config) {
        maybeKey = {};
        for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
    } else maybeKey = config;
    config = maybeKey.ref;
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: void 0 !== config ? config : null,
        props: maybeKey
    };
}
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.jsx = jsxProd;
exports.jsxs = jsxProd;


}),
80342: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
}
var ReactNoopUpdateQueue = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, assign = Object.assign, emptyObject = {};
function Component(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
}
Component.prototype.isReactComponent = {};
Component.prototype.setState = function(partialState, callback) {
    if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState) throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, partialState, callback, "setState");
};
Component.prototype.forceUpdate = function(callback) {
    this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
};
function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;
function PureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
}
var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = !0;
var isArrayImpl = Array.isArray, ReactSharedInternals = {
    H: null,
    A: null,
    T: null,
    S: null
}, hasOwnProperty = Object.prototype.hasOwnProperty;
function ReactElement(type, key, self, source, owner, props) {
    self = props.ref;
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: void 0 !== self ? self : null,
        props: props
    };
}
function cloneAndReplaceKey(oldElement, newKey) {
    return ReactElement(oldElement.type, newKey, void 0, void 0, void 0, oldElement.props);
}
function isValidElement(object) {
    return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
}
function escape(key) {
    var escaperLookup = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + key.replace(/[=:]/g, function(match) {
        return escaperLookup[match];
    });
}
var userProvidedKeyEscapeRegex = /\/+/g;
function getElementKey(element, index) {
    return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
}
function noop$1() {}
function resolveThenable(thenable) {
    switch(thenable.status){
        case "fulfilled":
            return thenable.value;
        case "rejected":
            throw thenable.reason;
        default:
            switch("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
                "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
            }, function(error) {
                "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
            })), thenable.status){
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenable.reason;
            }
    }
    throw thenable;
}
function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
    var type = typeof children;
    if ("undefined" === type || "boolean" === type) children = null;
    var invokeCallback = !1;
    if (null === children) invokeCallback = !0;
    else switch(type){
        case "bigint":
        case "string":
        case "number":
            invokeCallback = !0;
            break;
        case "object":
            switch(children.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    invokeCallback = !0;
                    break;
                case REACT_LAZY_TYPE:
                    return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
            }
    }
    if (invokeCallback) return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
        return c;
    })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + invokeCallback)), array.push(callback)), 1;
    invokeCallback = 0;
    var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
    if (isArrayImpl(children)) for(var i = 0; i < children.length; i++)nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
    else if (i = getIteratorFn(children), "function" === typeof i) for(children = i.call(children), i = 0; !(nameSoFar = children.next()).done;)nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
    else if ("object" === type) {
        if ("function" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
        array = String(children);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
    }
    return invokeCallback;
}
function mapChildren(children, func, context) {
    if (null == children) return children;
    var result = [], count = 0;
    mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
    });
    return result;
}
function lazyInitializer(payload) {
    if (-1 === payload._status) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(function(moduleObject) {
            if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;
        }, function(error) {
            if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;
        });
        -1 === payload._status && (payload._status = 0, payload._result = ctor);
    }
    if (1 === payload._status) return payload._result.default;
    throw payload._result;
}
var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error: error
        });
        if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
    }
    console.error(error);
};
function noop() {}
exports.Children = {
    map: mapChildren,
    forEach: function(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
        }, forEachContext);
    },
    count: function(children) {
        var n = 0;
        mapChildren(children, function() {
            n++;
        });
        return n;
    },
    toArray: function(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    },
    only: function(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
};
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
exports.act = function() {
    throw Error("act(...) is not supported in production builds of React.");
};
exports.cache = function(fn) {
    return function() {
        return fn.apply(null, arguments);
    };
};
exports.cloneElement = function(element, config, children) {
    if (null === element || void 0 === element) throw Error("The argument must be a React element, but you passed " + element + ".");
    var props = assign({}, element.props), key = element.key, owner = void 0;
    if (null != config) for(propName in void 0 !== config.ref && (owner = void 0), void 0 !== config.key && (key = "" + config.key), config)!hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
    var propName = arguments.length - 2;
    if (1 === propName) props.children = children;
    else if (1 < propName) {
        for(var childArray = Array(propName), i = 0; i < propName; i++)childArray[i] = arguments[i + 2];
        props.children = childArray;
    }
    return ReactElement(element.type, key, void 0, void 0, owner, props);
};
exports.createContext = function(defaultValue) {
    defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
    };
    defaultValue.Provider = defaultValue;
    defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
    };
    return defaultValue;
};
exports.createElement = function(type, config, children) {
    var propName, props = {}, key = null;
    if (null != config) for(propName in void 0 !== config.key && (key = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
    var childrenLength = arguments.length - 2;
    if (1 === childrenLength) props.children = children;
    else if (1 < childrenLength) {
        for(var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
        props.children = childArray;
    }
    if (type && type.defaultProps) for(propName in childrenLength = type.defaultProps, childrenLength)void 0 === props[propName] && (props[propName] = childrenLength[propName]);
    return ReactElement(type, key, void 0, void 0, null, props);
};
exports.createRef = function() {
    return {
        current: null
    };
};
exports.forwardRef = function(render) {
    return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
    };
};
exports.isValidElement = isValidElement;
exports.lazy = function(ctor) {
    return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: {
            _status: -1,
            _result: ctor
        },
        _init: lazyInitializer
    };
};
exports.memo = function(type, compare) {
    return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: void 0 === compare ? null : compare
    };
};
exports.startTransition = function(scope) {
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    try {
        var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
    } catch (error) {
        reportGlobalError(error);
    } finally{
        ReactSharedInternals.T = prevTransition;
    }
};
exports.unstable_useCacheRefresh = function() {
    return ReactSharedInternals.H.useCacheRefresh();
};
exports.use = function(usable) {
    return ReactSharedInternals.H.use(usable);
};
exports.useActionState = function(action, initialState, permalink) {
    return ReactSharedInternals.H.useActionState(action, initialState, permalink);
};
exports.useCallback = function(callback, deps) {
    return ReactSharedInternals.H.useCallback(callback, deps);
};
exports.useContext = function(Context) {
    return ReactSharedInternals.H.useContext(Context);
};
exports.useDebugValue = function() {};
exports.useDeferredValue = function(value, initialValue) {
    return ReactSharedInternals.H.useDeferredValue(value, initialValue);
};
exports.useEffect = function(create, deps) {
    return ReactSharedInternals.H.useEffect(create, deps);
};
exports.useId = function() {
    return ReactSharedInternals.H.useId();
};
exports.useImperativeHandle = function(ref, create, deps) {
    return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
};
exports.useInsertionEffect = function(create, deps) {
    return ReactSharedInternals.H.useInsertionEffect(create, deps);
};
exports.useLayoutEffect = function(create, deps) {
    return ReactSharedInternals.H.useLayoutEffect(create, deps);
};
exports.useMemo = function(create, deps) {
    return ReactSharedInternals.H.useMemo(create, deps);
};
exports.useOptimistic = function(passthrough, reducer) {
    return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
};
exports.useReducer = function(reducer, initialArg, init) {
    return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
};
exports.useRef = function(initialValue) {
    return ReactSharedInternals.H.useRef(initialValue);
};
exports.useState = function(initialState) {
    return ReactSharedInternals.H.useState(initialState);
};
exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
    return ReactSharedInternals.H.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
};
exports.useTransition = function() {
    return ReactSharedInternals.H.useTransition();
};
exports.version = "19.0.0";


}),
76388: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(80342);
} else {}


}),
70095: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(1361);
} else {}


}),
74655: (function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    "use strict";
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
    } catch (err) {
        define = function(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        defineProperty(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self, context)
        });
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
                reject(record.arg);
            } else {
                var result = record.arg;
                var value = result.value;
                if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                    return PromiseImpl.resolve(value.__await).then(function(value) {
                        invoke("next", value, resolve, reject);
                    }, function(err) {
                        invoke("throw", err, resolve, reject);
                    });
                }
                return PromiseImpl.resolve(value).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        defineProperty(this, "_invoke", {
            value: enqueue
        });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
                if (method === "throw") {
                    throw arg;
                }
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") {
                    // Setting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    context.sent = context._sent = context.arg;
                } else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") {
                    context.abrupt("return", context.arg);
                }
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) {
                        continue;
                    }
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method;
        var method = delegate.iterator[methodName];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method, or a missing .next mehtod, always terminate the
            // yield* loop.
            context.delegate = null;
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (methodName === "throw" && delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
            }
            if (methodName !== "return") {
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else {
            // Re-yield the result returned by the delegate method.
            return info;
        }
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) {
            entry.catchLoc = locs[1];
        }
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(val) {
        var object = Object(val);
        var keys = [];
        for(var key in object){
            keys.push(key);
        }
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
                return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
                return iterable;
            }
            if (!isNaN(iterable.length)) {
                var i = -1, next = function next() {
                    while(++i < iterable.length){
                        if (hasOwn.call(iterable, i)) {
                            next.value = iterable[i];
                            next.done = false;
                            return next;
                        }
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next.next = next;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this){
                    // Not sure about the optimal order of these conditions:
                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined;
                    }
                }
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
                throw rootRecord.arg;
            }
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) {
                throw exception;
            }
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") {
                    // Exception thrown outside of any try block that could handle
                    // it, so set the completion value of the entire function to
                    // throw the exception.
                    return handle("end");
                }
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        }
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else {
                        throw new Error("try statement without catch or finally");
                    }
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") {
                throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
                this.next = record.arg;
            } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
            }
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
            }
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
    } else {
        Function("r", "regeneratorRuntime = r")(runtime);
    }
}


}),
46288: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * @license React
 * scheduler.native.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
function push(heap, node) {
    var index = heap.length;
    heap.push(node);
    a: for(; 0 < index;){
        var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
        if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
        else break a;
    }
}
function peek(heap) {
    return 0 === heap.length ? null : heap[0];
}
function pop(heap) {
    if (0 === heap.length) return null;
    var first = heap[0], last = heap.pop();
    if (last !== first) {
        heap[0] = last;
        a: for(var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;){
            var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
            else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;
            else break a;
        }
    }
    return first;
}
function compare(a, b) {
    var diff = a.sortIndex - b.sortIndex;
    return 0 !== diff ? diff : a.id - b.id;
}
var getCurrentTime;
if ("object" === typeof performance && "function" === typeof performance.now) {
    var localPerformance = performance;
    getCurrentTime = function() {
        return localPerformance.now();
    };
} else {
    var localDate = Date, initialTime = localDate.now();
    getCurrentTime = function() {
        return localDate.now() - initialTime;
    };
}
var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
function advanceTimers(currentTime) {
    for(var timer = peek(timerQueue); null !== timer;){
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else break;
        timer = peek(timerQueue);
    }
}
function handleTimeout(currentTime) {
    isHostTimeoutScheduled = !1;
    advanceTimers(currentTime);
    if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
    else {
        var firstTimer = peek(timerQueue);
        null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }
}
function unstable_scheduleCallback$1(priorityLevel, callback, options) {
    var currentTime = getCurrentTime();
    "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
    switch(priorityLevel){
        case 1:
            var timeout = -1;
            break;
        case 2:
            timeout = 250;
            break;
        case 5:
            timeout = 1073741823;
            break;
        case 4:
            timeout = 1e4;
            break;
        default:
            timeout = 5e3;
    }
    timeout = options + timeout;
    priorityLevel = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
    };
    options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline())));
    return priorityLevel;
}
function unstable_cancelCallback$1(task) {
    task.callback = null;
}
function unstable_getCurrentPriorityLevel$1() {
    return currentPriorityLevel;
}
var isMessageLoopRunning = !1, taskTimeoutID = -1, startTime = -1;
function shouldYieldToHost() {
    return 5 > getCurrentTime() - startTime ? !1 : !0;
}
function requestPaint() {}
function performWorkUntilDeadline() {
    if (isMessageLoopRunning) {
        var currentTime = getCurrentTime();
        startTime = currentTime;
        var hasMoreWork = !0;
        try {
            a: {
                isHostCallbackScheduled = !1;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = !0;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                    b: {
                        advanceTimers(currentTime);
                        for(currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());){
                            var callback = currentTask.callback;
                            if ("function" === typeof callback) {
                                currentTask.callback = null;
                                currentPriorityLevel = currentTask.priorityLevel;
                                var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                                currentTime = getCurrentTime();
                                if ("function" === typeof continuationCallback) {
                                    currentTask.callback = continuationCallback;
                                    advanceTimers(currentTime);
                                    hasMoreWork = !0;
                                    break b;
                                }
                                currentTask === peek(taskQueue) && pop(taskQueue);
                                advanceTimers(currentTime);
                            } else pop(taskQueue);
                            currentTask = peek(taskQueue);
                        }
                        if (null !== currentTask) hasMoreWork = !0;
                        else {
                            var firstTimer = peek(timerQueue);
                            null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                            hasMoreWork = !1;
                        }
                    }
                    break a;
                } finally{
                    currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
                }
                hasMoreWork = void 0;
            }
        } finally{
            hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;
        }
    }
}
var schedulePerformWorkUntilDeadline;
if ("function" === typeof localSetImmediate) schedulePerformWorkUntilDeadline = function() {
    localSetImmediate(performWorkUntilDeadline);
};
else if ("undefined" !== typeof MessageChannel) {
    var channel = new MessageChannel(), port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;
    schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
    };
} else schedulePerformWorkUntilDeadline = function() {
    localSetTimeout(performWorkUntilDeadline, 0);
};
function requestHostTimeout(callback, ms) {
    taskTimeoutID = localSetTimeout(function() {
        callback(getCurrentTime());
    }, ms);
}
var unstable_UserBlockingPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_UserBlockingPriority : 2, unstable_NormalPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_NormalPriority : 3, unstable_LowPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_LowPriority : 4, unstable_ImmediatePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_ImmediatePriority : 1, unstable_scheduleCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_scheduleCallback : unstable_scheduleCallback$1, unstable_cancelCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_cancelCallback : unstable_cancelCallback$1, unstable_getCurrentPriorityLevel = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_getCurrentPriorityLevel : unstable_getCurrentPriorityLevel$1, unstable_shouldYield = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_shouldYield : shouldYieldToHost, unstable_requestPaint = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_requestPaint : requestPaint, unstable_now = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_now : getCurrentTime;
function throwNotImplemented() {
    throw Error("Not implemented.");
}
exports.unstable_IdlePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_IdlePriority : 5;
exports.unstable_ImmediatePriority = unstable_ImmediatePriority;
exports.unstable_LowPriority = unstable_LowPriority;
exports.unstable_NormalPriority = unstable_NormalPriority;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = unstable_UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = throwNotImplemented;
exports.unstable_forceFrameRate = throwNotImplemented;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = throwNotImplemented;
exports.unstable_next = throwNotImplemented;
exports.unstable_now = unstable_now;
exports.unstable_pauseExecution = throwNotImplemented;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = throwNotImplemented;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = throwNotImplemented;


}),
43827: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(46288);
} else {}


}),
1120: (function (module) {
//
module.exports = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
    if (ret !== void 0) {
        return !!ret;
    }
    if (objA === objB) {
        return true;
    }
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
        return false;
    }
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    // Test for A's keys different from B.
    for(var idx = 0; idx < keysA.length; idx++){
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
            return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
        }
    }
    return true;
};


}),
18881: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var UNKNOWN_FUNCTION = '<unknown>';
/**
 * This parses the different stack traces and puts them into one format
 * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)
 */ function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function(stack, line) {
        var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
        if (parseResult) {
            stack.push(parseResult);
        }
        return stack;
    }, []);
}
var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
function parseChrome(line) {
    var parts = chromeRe.exec(line);
    if (!parts) {
        return null;
    }
    var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
    var submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
        // throw out eval line/column and use top-most line/column number
        parts[2] = submatch[1]; // url
        parts[3] = submatch[2]; // line
        parts[4] = submatch[3]; // column
    }
    return {
        file: !isNative ? parts[2] : null,
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: isNative ? [
            parts[2]
        ] : [],
        lineNumber: parts[3] ? +parts[3] : null,
        column: parts[4] ? +parts[4] : null
    };
}
var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
function parseWinjs(line) {
    var parts = winjsRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
    };
}
var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
function parseGecko(line) {
    var parts = geckoRe.exec(line);
    if (!parts) {
        return null;
    }
    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
        // throw out eval line/column and use top-most line number
        parts[3] = submatch[1];
        parts[4] = submatch[2];
        parts[5] = null; // no column when eval
    }
    return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: parts[2] ? parts[2].split(',') : [],
        lineNumber: parts[4] ? +parts[4] : null,
        column: parts[5] ? +parts[5] : null
    };
}
var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[4],
        column: parts[5] ? +parts[5] : null
    };
}
var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
function parseNode(line) {
    var parts = nodeRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
    };
}
exports.parse = parse;


}),
1533: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncParallelBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncParallelBailHookCodeFactory, HookCodeFactory);
    function AsyncParallelBailHookCodeFactory() {
        _class_call_check._(this, AsyncParallelBailHookCodeFactory);
        return _call_super._(this, AsyncParallelBailHookCodeFactory, arguments);
    }
    _create_class._(AsyncParallelBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone;
                var code = "";
                code += `var _results = new Array(${this.options.taps.length});\n`;
                code += "var _checkDone = function() {\n";
                code += "for(var i = 0; i < _results.length; i++) {\n";
                code += "var item = _results[i];\n";
                code += "if(item === undefined) return false;\n";
                code += "if(item.result !== undefined) {\n";
                code += onResult("item.result");
                code += "return true;\n";
                code += "}\n";
                code += "if(item.error) {\n";
                code += onError("item.error");
                code += "return true;\n";
                code += "}\n";
                code += "}\n";
                code += "return false;\n";
                code += "}\n";
                code += this.callTapsParallel({
                    onError: (i, err, done, doneBreak)=>{
                        var code = "";
                        code += `if(${i} < _results.length && ((_results.length = ${i + 1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\n`;
                        code += doneBreak(true);
                        code += "} else {\n";
                        code += done();
                        code += "}\n";
                        return code;
                    },
                    onResult: (i, result, done, doneBreak)=>{
                        var code = "";
                        code += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i + 1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\n`;
                        code += doneBreak(true);
                        code += "} else {\n";
                        code += done();
                        code += "}\n";
                        return code;
                    },
                    onTap: (i, run, done, doneBreak)=>{
                        var code = "";
                        if (i > 0) {
                            code += `if(${i} >= _results.length) {\n`;
                            code += done();
                            code += "} else {\n";
                        }
                        code += run();
                        if (i > 0) code += "}\n";
                        return code;
                    },
                    onDone
                });
                return code;
            }
        }
    ]);
    return AsyncParallelBailHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncParallelBailHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncParallelBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncParallelBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncParallelBailHook.prototype = null;
module.exports = AsyncParallelBailHook;


}),
298: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncParallelHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncParallelHookCodeFactory, HookCodeFactory);
    function AsyncParallelHookCodeFactory() {
        _class_call_check._(this, AsyncParallelHookCodeFactory);
        return _call_super._(this, AsyncParallelHookCodeFactory, arguments);
    }
    _create_class._(AsyncParallelHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsParallel({
                    onError: (i, err, done, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncParallelHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncParallelHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncParallelHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncParallelHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncParallelHook.prototype = null;
module.exports = AsyncParallelHook;


}),
79737: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesBailHookCodeFactory, HookCodeFactory);
    function AsyncSeriesBailHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesBailHookCodeFactory);
        return _call_super._(this, AsyncSeriesBailHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onResult: (i, result, next)=>`if(${result} !== undefined) {\n${onResult(result)}\n} else {\n${next()}}\n`,
                    resultReturns,
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesBailHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesBailHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesBailHook.prototype = null;
module.exports = AsyncSeriesBailHook;


}),
65195: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesHookCodeFactory, HookCodeFactory);
    function AsyncSeriesHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesHookCodeFactory);
        return _call_super._(this, AsyncSeriesHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesHook.prototype = null;
module.exports = AsyncSeriesHook;


}),
70791: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesLoopHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesLoopHookCodeFactory, HookCodeFactory);
    function AsyncSeriesLoopHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesLoopHookCodeFactory);
        return _call_super._(this, AsyncSeriesLoopHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesLoopHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsLooping({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesLoopHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesLoopHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesLoopHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesLoopHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesLoopHook.prototype = null;
module.exports = AsyncSeriesLoopHook;


}),
16213: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesWaterfallHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesWaterfallHookCodeFactory, HookCodeFactory);
    function AsyncSeriesWaterfallHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesWaterfallHookCodeFactory);
        return _call_super._(this, AsyncSeriesWaterfallHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesWaterfallHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onResult: (i, result, next)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += `${this._args[0]} = ${result};\n`;
                        code += `}\n`;
                        code += next();
                        return code;
                    },
                    onDone: ()=>onResult(this._args[0])
                });
            }
        }
    ]);
    return AsyncSeriesWaterfallHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesWaterfallHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesWaterfallHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    if (args.length < 1) throw new Error("Waterfall hooks must have at least one argument");
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesWaterfallHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesWaterfallHook.prototype = null;
module.exports = AsyncSeriesWaterfallHook;


}),
34666: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _to_consumable_array = __webpack_require__(92716);
var util = __webpack_require__(25709);
var deprecateContext = util.deprecate(()=>{}, "Hook.context is deprecated and will be removed");
var CALL_DELEGATE = function(...args) {
    this.call = this._createCall("sync");
    return this.call.apply(this, _to_consumable_array._(args));
};
var CALL_ASYNC_DELEGATE = function(...args) {
    this.callAsync = this._createCall("async");
    return this.callAsync.apply(this, _to_consumable_array._(args));
};
var PROMISE_DELEGATE = function(...args) {
    this.promise = this._createCall("promise");
    return this.promise.apply(this, _to_consumable_array._(args));
};
var Hook = /*#__PURE__*/ function() {
    function Hook(ref, ref1) {
        var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
        _class_call_check._(this, Hook);
        this._args = args;
        this.name = name;
        this.taps = [];
        this.interceptors = [];
        this._call = CALL_DELEGATE;
        this.call = CALL_DELEGATE;
        this._callAsync = CALL_ASYNC_DELEGATE;
        this.callAsync = CALL_ASYNC_DELEGATE;
        this._promise = PROMISE_DELEGATE;
        this.promise = PROMISE_DELEGATE;
        this._x = undefined;
        this.compile = this.compile;
        this.tap = this.tap;
        this.tapAsync = this.tapAsync;
        this.tapPromise = this.tapPromise;
    }
    _create_class._(Hook, [
        {
            key: "compile",
            value: function compile(options) {
                throw new Error("Abstract: should be overridden");
            }
        },
        {
            key: "_createCall",
            value: function _createCall(type) {
                return this.compile({
                    taps: this.taps,
                    interceptors: this.interceptors,
                    args: this._args,
                    type: type
                });
            }
        },
        {
            key: "_tap",
            value: function _tap(type, options, fn) {
                if (typeof options === "string") {
                    options = {
                        name: options.trim()
                    };
                } else if (typeof options !== "object" || options === null) {
                    throw new Error("Invalid tap options");
                }
                if (typeof options.name !== "string" || options.name === "") {
                    throw new Error("Missing name for tap");
                }
                if (typeof options.context !== "undefined") {
                    deprecateContext();
                }
                options = Object.assign({
                    type,
                    fn
                }, options);
                options = this._runRegisterInterceptors(options);
                this._insert(options);
            }
        },
        {
            key: "tap",
            value: function tap(options, fn) {
                this._tap("sync", options, fn);
            }
        },
        {
            key: "tapAsync",
            value: function tapAsync(options, fn) {
                this._tap("async", options, fn);
            }
        },
        {
            key: "tapPromise",
            value: function tapPromise(options, fn) {
                this._tap("promise", options, fn);
            }
        },
        {
            key: "_runRegisterInterceptors",
            value: function _runRegisterInterceptors(options) {
                for (var interceptor of this.interceptors){
                    if (interceptor.register) {
                        var newOptions = interceptor.register(options);
                        if (newOptions !== undefined) {
                            options = newOptions;
                        }
                    }
                }
                return options;
            }
        },
        {
            key: "withOptions",
            value: function withOptions(options) {
                var mergeOptions = (opt)=>Object.assign({}, options, typeof opt === "string" ? {
                        name: opt
                    } : opt);
                return {
                    name: this.name,
                    tap: (opt, fn)=>this.tap(mergeOptions(opt), fn),
                    tapAsync: (opt, fn)=>this.tapAsync(mergeOptions(opt), fn),
                    tapPromise: (opt, fn)=>this.tapPromise(mergeOptions(opt), fn),
                    intercept: (interceptor)=>this.intercept(interceptor),
                    isUsed: ()=>this.isUsed(),
                    withOptions: (opt)=>this.withOptions(mergeOptions(opt))
                };
            }
        },
        {
            key: "isUsed",
            value: function isUsed() {
                return this.taps.length > 0 || this.interceptors.length > 0;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                this._resetCompilation();
                this.interceptors.push(Object.assign({}, interceptor));
                if (interceptor.register) {
                    for(var i = 0; i < this.taps.length; i++){
                        this.taps[i] = interceptor.register(this.taps[i]);
                    }
                }
            }
        },
        {
            key: "_resetCompilation",
            value: function _resetCompilation() {
                this.call = this._call;
                this.callAsync = this._callAsync;
                this.promise = this._promise;
            }
        },
        {
            key: "_insert",
            value: function _insert(item) {
                this._resetCompilation();
                var before;
                if (typeof item.before === "string") {
                    before = new Set([
                        item.before
                    ]);
                } else if (Array.isArray(item.before)) {
                    before = new Set(item.before);
                }
                var stage = 0;
                if (typeof item.stage === "number") {
                    stage = item.stage;
                }
                var i = this.taps.length;
                while(i > 0){
                    i--;
                    var x = this.taps[i];
                    this.taps[i + 1] = x;
                    var xStage = x.stage || 0;
                    if (before) {
                        if (before.has(x.name)) {
                            before.delete(x.name);
                            continue;
                        }
                        if (before.size > 0) {
                            continue;
                        }
                    }
                    if (xStage > stage) {
                        continue;
                    }
                    i++;
                    break;
                }
                this.taps[i] = item;
            }
        }
    ]);
    return Hook;
}();
Object.setPrototypeOf(Hook.prototype, null);
module.exports = Hook;


}),
30403: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var HookCodeFactory = /*#__PURE__*/ function() {
    function HookCodeFactory(config) {
        _class_call_check._(this, HookCodeFactory);
        this.config = config;
        this.options = undefined;
        this._args = undefined;
    }
    _create_class._(HookCodeFactory, [
        {
            key: "create",
            value: function create(options) {
                this.init(options);
                var fn;
                switch(this.options.type){
                    case "sync":
                        fn = new Function(this.args(), '"use strict";\n' + this.header() + this.contentWithInterceptors({
                            onError: (err)=>`throw ${err};\n`,
                            onResult: (result)=>`return ${result};\n`,
                            resultReturns: true,
                            onDone: ()=>"",
                            rethrowIfPossible: true
                        }));
                        break;
                    case "async":
                        fn = new Function(this.args({
                            after: "_callback"
                        }), '"use strict";\n' + this.header() + this.contentWithInterceptors({
                            onError: (err)=>`_callback(${err});\n`,
                            onResult: (result)=>`_callback(null, ${result});\n`,
                            onDone: ()=>"_callback();\n"
                        }));
                        break;
                    case "promise":
                        var errorHelperUsed = false;
                        var content = this.contentWithInterceptors({
                            onError: (err)=>{
                                errorHelperUsed = true;
                                return `_error(${err});\n`;
                            },
                            onResult: (result)=>`_resolve(${result});\n`,
                            onDone: ()=>"_resolve();\n"
                        });
                        var code = "";
                        code += '"use strict";\n';
                        code += this.header();
                        code += "return new Promise((function(_resolve, _reject) {\n";
                        if (errorHelperUsed) {
                            code += "var _sync = true;\n";
                            code += "function _error(_err) {\n";
                            code += "if(_sync)\n";
                            code += "_resolve(Promise.resolve().then((function() { throw _err; })));\n";
                            code += "else\n";
                            code += "_reject(_err);\n";
                            code += "};\n";
                        }
                        code += content;
                        if (errorHelperUsed) {
                            code += "_sync = false;\n";
                        }
                        code += "}));\n";
                        fn = new Function(this.args(), code);
                        break;
                }
                this.deinit();
                return fn;
            }
        },
        {
            key: "setup",
            value: function setup(instance, options) {
                instance._x = options.taps.map((t)=>t.fn);
            }
        },
        {
            /**
	 * @param {{ type: "sync" | "promise" | "async", taps: Array<Tap>, interceptors: Array<Interceptor> }} options
	 */ key: "init",
            value: function init(options) {
                this.options = options;
                this._args = options.args.slice();
            }
        },
        {
            key: "deinit",
            value: function deinit() {
                this.options = undefined;
                this._args = undefined;
            }
        },
        {
            key: "contentWithInterceptors",
            value: function contentWithInterceptors(options) {
                if (this.options.interceptors.length > 0) {
                    var onError = options.onError;
                    var onResult = options.onResult;
                    var onDone = options.onDone;
                    var code = "";
                    for(var i = 0; i < this.options.interceptors.length; i++){
                        var interceptor = this.options.interceptors[i];
                        if (interceptor.call) {
                            code += `${this.getInterceptor(i)}.call(${this.args({
                                before: interceptor.context ? "_context" : undefined
                            })});\n`;
                        }
                    }
                    code += this.content(Object.assign(options, {
                        onError: onError && ((err)=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.error) {
                                    code += `${this.getInterceptor(i)}.error(${err});\n`;
                                }
                            }
                            code += onError(err);
                            return code;
                        }),
                        onResult: onResult && ((result)=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.result) {
                                    code += `${this.getInterceptor(i)}.result(${result});\n`;
                                }
                            }
                            code += onResult(result);
                            return code;
                        }),
                        onDone: onDone && (()=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.done) {
                                    code += `${this.getInterceptor(i)}.done();\n`;
                                }
                            }
                            code += onDone();
                            return code;
                        })
                    }));
                    return code;
                } else {
                    return this.content(options);
                }
            }
        },
        {
            key: "header",
            value: function header() {
                var code = "";
                if (this.needContext()) {
                    code += "var _context = {};\n";
                } else {
                    code += "var _context;\n";
                }
                code += "var _x = this._x;\n";
                if (this.options.interceptors.length > 0) {
                    code += "var _taps = this.taps;\n";
                    code += "var _interceptors = this.interceptors;\n";
                }
                return code;
            }
        },
        {
            key: "needContext",
            value: function needContext() {
                for (var tap of this.options.taps)if (tap.context) return true;
                return false;
            }
        },
        {
            key: "callTap",
            value: function callTap(tapIndex, ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                var code = "";
                var hasTapCached = false;
                for(var i = 0; i < this.options.interceptors.length; i++){
                    var interceptor = this.options.interceptors[i];
                    if (interceptor.tap) {
                        if (!hasTapCached) {
                            code += `var _tap${tapIndex} = ${this.getTap(tapIndex)};\n`;
                            hasTapCached = true;
                        }
                        code += `${this.getInterceptor(i)}.tap(${interceptor.context ? "_context, " : ""}_tap${tapIndex});\n`;
                    }
                }
                code += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};\n`;
                var tap = this.options.taps[tapIndex];
                switch(tap.type){
                    case "sync":
                        if (!rethrowIfPossible) {
                            code += `var _hasError${tapIndex} = false;\n`;
                            code += "try {\n";
                        }
                        if (onResult) {
                            code += `var _result${tapIndex} = _fn${tapIndex}(${this.args({
                                before: tap.context ? "_context" : undefined
                            })});\n`;
                        } else {
                            code += `_fn${tapIndex}(${this.args({
                                before: tap.context ? "_context" : undefined
                            })});\n`;
                        }
                        if (!rethrowIfPossible) {
                            code += "} catch(_err) {\n";
                            code += `_hasError${tapIndex} = true;\n`;
                            code += onError("_err");
                            code += "}\n";
                            code += `if(!_hasError${tapIndex}) {\n`;
                        }
                        if (onResult) {
                            code += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            code += onDone();
                        }
                        if (!rethrowIfPossible) {
                            code += "}\n";
                        }
                        break;
                    case "async":
                        var cbCode = "";
                        if (onResult) cbCode += `(function(_err${tapIndex}, _result${tapIndex}) {\n`;
                        else cbCode += `(function(_err${tapIndex}) {\n`;
                        cbCode += `if(_err${tapIndex}) {\n`;
                        cbCode += onError(`_err${tapIndex}`);
                        cbCode += "} else {\n";
                        if (onResult) {
                            cbCode += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            cbCode += onDone();
                        }
                        cbCode += "}\n";
                        cbCode += "})";
                        code += `_fn${tapIndex}(${this.args({
                            before: tap.context ? "_context" : undefined,
                            after: cbCode
                        })});\n`;
                        break;
                    case "promise":
                        code += `var _hasResult${tapIndex} = false;\n`;
                        code += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({
                            before: tap.context ? "_context" : undefined
                        })});\n`;
                        code += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)\n`;
                        code += `  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${tapIndex} + ')');\n`;
                        code += `_promise${tapIndex}.then((function(_result${tapIndex}) {\n`;
                        code += `_hasResult${tapIndex} = true;\n`;
                        if (onResult) {
                            code += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            code += onDone();
                        }
                        code += `}), function(_err${tapIndex}) {\n`;
                        code += `if(_hasResult${tapIndex}) throw _err${tapIndex};\n`;
                        code += onError(`_err${tapIndex}`);
                        code += "});\n";
                        break;
                }
                return code;
            }
        },
        {
            key: "callTapsSeries",
            value: function callTapsSeries(ref) {
                var _this, _loop = function(j) {
                    var i = j;
                    var unroll = current !== onDone && (_this.options.taps[i].type !== "sync" || unrollCounter++ > 20);
                    if (unroll) {
                        unrollCounter = 0;
                        code += `function _next${i}() {\n`;
                        code += current();
                        code += `}\n`;
                        current = ()=>`${somethingReturns ? "return " : ""}_next${i}();\n`;
                    }
                    var done = current;
                    var doneBreak = (skipDone)=>{
                        if (skipDone) return "";
                        return onDone();
                    };
                    var content = _this.callTap(i, {
                        onError: (error)=>onError(i, error, done, doneBreak),
                        onResult: onResult && ((result)=>{
                            return onResult(i, result, done, doneBreak);
                        }),
                        onDone: !onResult && done,
                        rethrowIfPossible: rethrowIfPossible && (firstAsync < 0 || i < firstAsync)
                    });
                    current = ()=>content;
                };
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone, doneReturns = ref.doneReturns, rethrowIfPossible = ref.rethrowIfPossible;
                if (this.options.taps.length === 0) return onDone();
                var firstAsync = this.options.taps.findIndex((t)=>t.type !== "sync");
                var somethingReturns = resultReturns || doneReturns;
                var code = "";
                var current = onDone;
                var unrollCounter = 0;
                for(var j = this.options.taps.length - 1; j >= 0; j--)_this = this, _loop(j);
                code += current();
                return code;
            }
        },
        {
            key: "callTapsLooping",
            value: function callTapsLooping(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                if (this.options.taps.length === 0) return onDone();
                var syncOnly = this.options.taps.every((t)=>t.type === "sync");
                var code = "";
                if (!syncOnly) {
                    code += "var _looper = (function() {\n";
                    code += "var _loopAsync = false;\n";
                }
                code += "var _loop;\n";
                code += "do {\n";
                code += "_loop = false;\n";
                for(var i = 0; i < this.options.interceptors.length; i++){
                    var interceptor = this.options.interceptors[i];
                    if (interceptor.loop) {
                        code += `${this.getInterceptor(i)}.loop(${this.args({
                            before: interceptor.context ? "_context" : undefined
                        })});\n`;
                    }
                }
                code += this.callTapsSeries({
                    onError,
                    onResult: (i, result, next, doneBreak)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += "_loop = true;\n";
                        if (!syncOnly) code += "if(_loopAsync) _looper();\n";
                        code += doneBreak(true);
                        code += `} else {\n`;
                        code += next();
                        code += `}\n`;
                        return code;
                    },
                    onDone: onDone && (()=>{
                        var code = "";
                        code += "if(!_loop) {\n";
                        code += onDone();
                        code += "}\n";
                        return code;
                    }),
                    rethrowIfPossible: rethrowIfPossible && syncOnly
                });
                code += "} while(_loop);\n";
                if (!syncOnly) {
                    code += "_loopAsync = true;\n";
                    code += "});\n";
                    code += "_looper();\n";
                }
                return code;
            }
        },
        {
            key: "callTapsParallel",
            value: function callTapsParallel(ref) {
                var _this, _loop = function(i) {
                    var done = ()=>{
                        if (onDone) return "if(--_counter === 0) _done();\n";
                        else return "--_counter;";
                    };
                    var doneBreak = (skipDone)=>{
                        if (skipDone || !onDone) return "_counter = 0;\n";
                        else return "_counter = 0;\n_done();\n";
                    };
                    code += "if(_counter <= 0) break;\n";
                    code += onTap(i, ()=>_this.callTap(i, {
                            onError: (error)=>{
                                var code = "";
                                code += "if(_counter > 0) {\n";
                                code += onError(i, error, done, doneBreak);
                                code += "}\n";
                                return code;
                            },
                            onResult: onResult && ((result)=>{
                                var code = "";
                                code += "if(_counter > 0) {\n";
                                code += onResult(i, result, done, doneBreak);
                                code += "}\n";
                                return code;
                            }),
                            onDone: !onResult && (()=>{
                                return done();
                            }),
                            rethrowIfPossible
                        }), done, doneBreak);
                };
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible, _ref_onTap = ref.onTap, onTap = _ref_onTap === void 0 ? (i, run)=>run() : _ref_onTap;
                if (this.options.taps.length <= 1) {
                    return this.callTapsSeries({
                        onError,
                        onResult,
                        onDone,
                        rethrowIfPossible
                    });
                }
                var code = "";
                code += "do {\n";
                code += `var _counter = ${this.options.taps.length};\n`;
                if (onDone) {
                    code += "var _done = (function() {\n";
                    code += onDone();
                    code += "});\n";
                }
                for(var i = 0; i < this.options.taps.length; i++)_this = this, _loop(i);
                code += "} while(false);\n";
                return code;
            }
        },
        {
            key: "args",
            value: function args(ref) {
                var _ref = ref === void 0 ? {} : ref, before = _ref.before, after = _ref.after;
                var allArgs = this._args;
                if (before) allArgs = [
                    before
                ].concat(allArgs);
                if (after) allArgs = allArgs.concat(after);
                if (allArgs.length === 0) {
                    return "";
                } else {
                    return allArgs.join(", ");
                }
            }
        },
        {
            key: "getTapFn",
            value: function getTapFn(idx) {
                return `_x[${idx}]`;
            }
        },
        {
            key: "getTap",
            value: function getTap(idx) {
                return `_taps[${idx}]`;
            }
        },
        {
            key: "getInterceptor",
            value: function getInterceptor(idx) {
                return `_interceptors[${idx}]`;
            }
        }
    ]);
    return HookCodeFactory;
}();
module.exports = HookCodeFactory;


}),
15641: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var util = __webpack_require__(25709);
var defaultFactory = (key, hook)=>hook;
var HookMap = /*#__PURE__*/ function() {
    function HookMap(factory, ref) {
        var name = ref === void 0 ? undefined : ref;
        _class_call_check._(this, HookMap);
        this._map = new Map();
        this.name = name;
        this._factory = factory;
        this._interceptors = [];
    }
    _create_class._(HookMap, [
        {
            key: "get",
            value: function get(key) {
                return this._map.get(key);
            }
        },
        {
            key: "for",
            value: function _for(key) {
                var hook = this.get(key);
                if (hook !== undefined) {
                    return hook;
                }
                var newHook = this._factory(key);
                var interceptors = this._interceptors;
                for(var i = 0; i < interceptors.length; i++){
                    newHook = interceptors[i].factory(key, newHook);
                }
                this._map.set(key, newHook);
                return newHook;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                this._interceptors.push(Object.assign({
                    factory: defaultFactory
                }, interceptor));
            }
        }
    ]);
    return HookMap;
}();
HookMap.prototype.tap = util.deprecate(function(key, options, fn) {
    return this.for(key).tap(options, fn);
}, "HookMap#tap(key,\u2026) is deprecated. Use HookMap#for(key).tap(\u2026) instead.");
HookMap.prototype.tapAsync = util.deprecate(function(key, options, fn) {
    return this.for(key).tapAsync(options, fn);
}, "HookMap#tapAsync(key,\u2026) is deprecated. Use HookMap#for(key).tapAsync(\u2026) instead.");
HookMap.prototype.tapPromise = util.deprecate(function(key, options, fn) {
    return this.for(key).tapPromise(options, fn);
}, "HookMap#tapPromise(key,\u2026) is deprecated. Use HookMap#for(key).tapPromise(\u2026) instead.");
module.exports = HookMap;


}),
166: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Hook = __webpack_require__(34666);
var MultiHook = /*#__PURE__*/ function() {
    function MultiHook(hooks, ref) {
        var name = ref === void 0 ? undefined : ref;
        _class_call_check._(this, MultiHook);
        this.hooks = hooks;
        this.name = name;
    }
    _create_class._(MultiHook, [
        {
            key: "tap",
            value: function tap(options, fn) {
                for (var hook of this.hooks){
                    hook.tap(options, fn);
                }
            }
        },
        {
            key: "tapAsync",
            value: function tapAsync(options, fn) {
                for (var hook of this.hooks){
                    hook.tapAsync(options, fn);
                }
            }
        },
        {
            key: "tapPromise",
            value: function tapPromise(options, fn) {
                for (var hook of this.hooks){
                    hook.tapPromise(options, fn);
                }
            }
        },
        {
            key: "isUsed",
            value: function isUsed() {
                for (var hook of this.hooks){
                    if (hook.isUsed()) return true;
                }
                return false;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                for (var hook of this.hooks){
                    hook.intercept(interceptor);
                }
            }
        },
        {
            key: "withOptions",
            value: function withOptions(options) {
                return new MultiHook(this.hooks.map((h)=>h.withOptions(options)), this.name);
            }
        }
    ]);
    return MultiHook;
}();
module.exports = MultiHook;


}),
39314: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncBailHookCodeFactory, HookCodeFactory);
    function SyncBailHookCodeFactory() {
        _class_call_check._(this, SyncBailHookCodeFactory);
        return _call_super._(this, SyncBailHookCodeFactory, arguments);
    }
    _create_class._(SyncBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onResult: (i, result, next)=>`if(${result} !== undefined) {\n${onResult(result)};\n} else {\n${next()}}\n`,
                    resultReturns,
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncBailHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncBailHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncBailHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncBailHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncBailHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncBailHook.prototype = null;
module.exports = SyncBailHook;


}),
30727: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncHookCodeFactory, HookCodeFactory);
    function SyncHookCodeFactory() {
        _class_call_check._(this, SyncHookCodeFactory);
        return _call_super._(this, SyncHookCodeFactory, arguments);
    }
    _create_class._(SyncHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncHook.prototype = null;
module.exports = SyncHook;


}),
98540: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncLoopHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncLoopHookCodeFactory, HookCodeFactory);
    function SyncLoopHookCodeFactory() {
        _class_call_check._(this, SyncLoopHookCodeFactory);
        return _call_super._(this, SyncLoopHookCodeFactory, arguments);
    }
    _create_class._(SyncLoopHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsLooping({
                    onError: (i, err)=>onError(err),
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncLoopHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncLoopHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncLoopHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncLoopHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncLoopHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncLoopHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncLoopHook.prototype = null;
module.exports = SyncLoopHook;


}),
1410: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncWaterfallHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncWaterfallHookCodeFactory, HookCodeFactory);
    function SyncWaterfallHookCodeFactory() {
        _class_call_check._(this, SyncWaterfallHookCodeFactory);
        return _call_super._(this, SyncWaterfallHookCodeFactory, arguments);
    }
    _create_class._(SyncWaterfallHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onResult: (i, result, next)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += `${this._args[0]} = ${result};\n`;
                        code += `}\n`;
                        code += next();
                        return code;
                    },
                    onDone: ()=>onResult(this._args[0]),
                    doneReturns: resultReturns,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncWaterfallHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncWaterfallHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncWaterfallHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncWaterfallHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncWaterfallHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    if (args.length < 1) throw new Error("Waterfall hooks must have at least one argument");
    var hook = new Hook(args, name);
    hook.constructor = SyncWaterfallHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncWaterfallHook.prototype = null;
module.exports = SyncWaterfallHook;


}),
26898: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
exports.__esModule = true;
exports.SyncHook = __webpack_require__(30727);
exports.SyncBailHook = __webpack_require__(39314);
exports.SyncWaterfallHook = __webpack_require__(1410);
exports.SyncLoopHook = __webpack_require__(98540);
exports.AsyncParallelHook = __webpack_require__(298);
exports.AsyncParallelBailHook = __webpack_require__(1533);
exports.AsyncSeriesHook = __webpack_require__(65195);
exports.AsyncSeriesBailHook = __webpack_require__(79737);
exports.AsyncSeriesLoopHook = __webpack_require__(70791);
exports.AsyncSeriesWaterfallHook = __webpack_require__(16213);
exports.HookMap = __webpack_require__(15641);
exports.MultiHook = __webpack_require__(166);


}),
25709: (function (__unused_webpack_module, exports) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
exports.deprecate = (fn, msg)=>{
    var once = true;
    return function() {
        if (once) {
            console.warn("DeprecationWarning: " + msg);
            once = false;
        }
        return fn.apply(this, arguments);
    };
};


}),
71840: (function (__unused_webpack_module, exports, __webpack_require__) {
(function(global1, factory) {
     true ? factory(exports) : 0;
})(this, function(exports1) {
    'use strict';
    /* eslint-disable no-prototype-builtins */ var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || // eslint-disable-next-line no-undef
    typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g || {};
    var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob: 'FileReader' in g && 'Blob' in g && function() {
            try {
                new Blob();
                return true;
            } catch (e) {
                return false;
            }
        }(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
        var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
    }
    function normalizeName(name) {
        if (typeof name !== 'string') {
            name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
    }
    function normalizeValue(value) {
        if (typeof value !== 'string') {
            value = String(value);
        }
        return value;
    }
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
        var iterator = {
            next: function() {
                var value = items.shift();
                return {
                    done: value === undefined,
                    value: value
                };
            }
        };
        if (support.iterable) {
            iterator[Symbol.iterator] = function() {
                return iterator;
            };
        }
        return iterator;
    }
    function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
                this.append(name, value);
            }, this);
        } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
                if (header.length != 2) {
                    throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
                }
                this.append(header[0], header[1]);
            }, this);
        } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
            }, this);
        }
    }
    Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
        for(var name in this.map){
            if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
            }
        }
    };
    Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push(name);
        });
        return iteratorFor(items);
    };
    Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
            items.push(value);
        });
        return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push([
                name,
                value
            ]);
        });
        return iteratorFor(items);
    };
    if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
            reader.onload = function() {
                resolve(reader.result);
            };
            reader.onerror = function() {
                reject(reader.error);
            };
        });
    }
    function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
    }
    function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
    }
    function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for(var i = 0; i < view.length; i++){
            chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
    }
    function bufferClone(buf) {
        if (buf.slice) {
            return buf.slice(0);
        } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
        }
    }
    function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
            /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */ // eslint-disable-next-line no-self-assign
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
                this._noBody = true;
                this._bodyText = '';
            } else if (typeof body === 'string') {
                this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([
                    this._bodyArrayBuffer
                ]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
            } else {
                this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
            }
        };
        if (support.blob) {
            this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                    return rejected;
                }
                if (this._bodyBlob) {
                    return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(new Blob([
                        this._bodyArrayBuffer
                    ]));
                } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as blob');
                } else {
                    return Promise.resolve(new Blob([
                        this._bodyText
                    ]));
                }
            };
        }
        this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                    return isConsumed;
                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                }
            } else if (support.blob) {
                return this.blob().then(readBlobAsArrayBuffer);
            } else {
                throw new Error('could not read as ArrayBuffer');
            }
        };
        this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
                return rejected;
            }
            if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text');
            } else {
                return Promise.resolve(this._bodyText);
            }
        };
        if (support.formData) {
            this.formData = function() {
                return this.text().then(decode);
            };
        }
        this.json = function() {
            return this.text().then(JSON.parse);
        };
        return this;
    }
    // HTTP methods whose capitalization should be normalized
    var methods = [
        'CONNECT',
        'DELETE',
        'GET',
        'HEAD',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
        'TRACE'
    ];
    function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
        if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
            if (input.bodyUsed) {
                throw new TypeError('Already read');
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
                this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
            }
        } else {
            this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function() {
            if ('AbortController' in g) {
                var ctrl = new AbortController();
                return ctrl.signal;
            }
        }();
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
        if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                    // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                    // Otherwise add a new '_' parameter to the end with the current time
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
            }
        }
    }
    Request.prototype.clone = function() {
        return new Request(this, {
            body: this._bodyInit
        });
    };
    function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
                var split = bytes.split('=');
                var name = split.shift().replace(/\+/g, ' ');
                var value = split.join('=').replace(/\+/g, ' ');
                form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
        });
        return form;
    }
    function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders.split('\r').map(function(header) {
            return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
        }).forEach(function(line) {
            var parts = line.split(':');
            var key = parts.shift().trim();
            if (key) {
                var value = parts.join(':').trim();
                try {
                    headers.append(key, value);
                } catch (error) {
                    console.warn('Response ' + error.message);
                }
            }
        });
        return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
            options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
        });
    };
    Response.error = function() {
        var response = new Response(null, {
            status: 200,
            statusText: ''
        });
        response.ok = false;
        response.status = 0;
        response.type = 'error';
        return response;
    };
    var redirectStatuses = [
        301,
        302,
        303,
        307,
        308
    ];
    Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
        }
        return new Response(null, {
            status: status,
            headers: {
                location: url
            }
        });
    };
    exports1.DOMException = g.DOMException;
    try {
        new exports1.DOMException();
    } catch (err) {
        exports1.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
        };
        exports1.DOMException.prototype = Object.create(Error.prototype);
        exports1.DOMException.prototype.constructor = exports1.DOMException;
    }
    function fetch(input, init) {
        return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
                return reject(new exports1.DOMException('Aborted', 'AbortError'));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
                xhr.abort();
            }
            xhr.onload = function() {
                var options = {
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                };
                // This check if specifically for when a user fetches a file locally from the file system
                // Only if the status is out of a normal range
                if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
                    options.status = 200;
                } else {
                    options.status = xhr.status;
                }
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                    resolve(new Response(body, options));
                }, 0);
            };
            xhr.onerror = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request failed'));
                }, 0);
            };
            xhr.ontimeout = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request timed out'));
                }, 0);
            };
            xhr.onabort = function() {
                setTimeout(function() {
                    reject(new exports1.DOMException('Aborted', 'AbortError'));
                }, 0);
            };
            function fixUrl(url) {
                try {
                    return url === '' && g.location.href ? g.location.href : url;
                } catch (e) {
                    return url;
                }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === 'include') {
                xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
            }
            if ('responseType' in xhr) {
                if (support.blob) {
                    xhr.responseType = 'blob';
                } else if (support.arrayBuffer) {
                    xhr.responseType = 'arraybuffer';
                }
            }
            if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
                var names = [];
                Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                    names.push(normalizeName(name));
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                request.headers.forEach(function(value, name) {
                    if (names.indexOf(name) === -1) {
                        xhr.setRequestHeader(name, value);
                    }
                });
            } else {
                request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
            }
            if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);
                xhr.onreadystatechange = function() {
                    // DONE (success or failure)
                    if (xhr.readyState === 4) {
                        request.signal.removeEventListener('abort', abortXhr);
                    }
                };
            }
            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
    }
    exports1.Headers = Headers;
    exports1.Request = Request;
    exports1.Response = Response;
    exports1.fetch = fetch;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
});


}),
82348: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
/*:: import type {PackagerAsset} from './registry.js'; */ var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
};
var ANDROID_BASE_DENSITY = 160;
/**
 * FIXME: using number to represent discrete scale numbers is fragile in essence because of
 * floating point numbers imprecision.
 */ function getAndroidAssetSuffix(scale /*: number */ ) /*: string */ {
    if (scale.toString() in androidScaleSuffix) {
        // $FlowFixMe[invalid-computed-prop]
        return androidScaleSuffix[scale.toString()];
    }
    // NOTE: Android Gradle Plugin does not fully support the nnndpi format.
    // See https://issuetracker.google.com/issues/72884435
    if (Number.isFinite(scale) && scale > 0) {
        return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
    }
    throw new Error('no such scale ' + scale.toString());
}
// See https://developer.android.com/guide/topics/resources/drawable-resource.html
var drawableFileTypes = new Set([
    'gif',
    'jpeg',
    'jpg',
    'ktx',
    'png',
    'webp',
    'xml'
]);
function getAndroidResourceFolderName(asset /*: PackagerAsset */ , scale /*: number */ ) /*: string */ {
    if (!drawableFileTypes.has(asset.type)) {
        return 'raw';
    }
    var suffix = getAndroidAssetSuffix(scale);
    if (!suffix) {
        throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }
    return 'drawable-' + suffix;
}
function getAndroidResourceIdentifier(asset /*: PackagerAsset */ ) /*: string */ {
    return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_') // Encode folder structure in file name
    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars
    .replace(/^(?:assets|assetsunstable_path)_/, ''); // Remove "assets_" or "assetsunstable_path_" prefix
}
function getBasePath(asset /*: PackagerAsset */ ) /*: string */ {
    var basePath = asset.httpServerLocation;
    return basePath.startsWith('/') ? basePath.slice(1) : basePath;
}
module.exports = {
    getAndroidResourceFolderName,
    getAndroidResourceIdentifier,
    getBasePath
};


}),
58258: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
/*::
export type AssetDestPathResolver = 'android' | 'generic';

export type PackagerAsset = {
  +__packager_asset: boolean,
  +fileSystemLocation: string,
  +httpServerLocation: string,
  +width: ?number,
  +height: ?number,
  +scales: Array<number>,
  +hash: string,
  +name: string,
  +type: string,
  +resolver?: AssetDestPathResolver,
  ...
};
*/ var assets /*: Array<PackagerAsset> */  = [];
function registerAsset(asset /*: PackagerAsset */ ) /*: number */ {
    // `push` returns new array length, so the first asset will
    // get id 1 (not 0) to make the value truthy
    return assets.push(asset);
}
function getAssetByID(assetId /*: number */ ) /*: PackagerAsset */ {
    return assets[assetId - 1];
}
module.exports = {
    registerAsset,
    getAssetByID
};


}),
15269: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @polyfill
 * @nolint
 * @format
 */ 'use client';
__webpack_unused_export__ = ({
    value: true
});
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
/* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */ /**
 * This pipes all of our console logging functions to native logging so that
 * JavaScript errors in required modules show up in Xcode via NSLog.
 */ var inspect = function() {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // https://github.com/joyent/node/blob/master/lib/util.js
    function inspect(obj, opts) {
        var ctx = {
            seen: [],
            formatValueCalls: 0,
            stylize: stylizeNoColor
        };
        return formatValue(ctx, obj, opts.depth);
    }
    function stylizeNoColor(str, styleType) {
        return str;
    }
    function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
            hash[val] = true;
        });
        return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
        ctx.formatValueCalls++;
        if (ctx.formatValueCalls > 200) {
            return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;
        }
        // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
            return primitive;
        }
        // Look up the keys of the object.
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
        }
        // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
            if (isFunction(value)) {
                var name = value.name ? ': ' + value.name : '';
                return ctx.stylize('[Function' + name + ']', 'special');
            }
            if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }
            if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }
            if (isError(value)) {
                return formatError(value);
            }
        }
        var base = '', array = false, braces = [
            '{',
            '}'
        ];
        // Make Array say that they are Array
        if (isArray(value)) {
            array = true;
            braces = [
                '[',
                ']'
            ];
        }
        // Make functions say that they are functions
        if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
        }
        // Make RegExps say that they are RegExps
        if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
        }
        // Make dates with properties first say the date
        if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
        }
        // Make error with message first say the error
        if (isError(value)) {
            base = ' ' + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
            if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
                return ctx.stylize('[Object]', 'special');
            }
        }
        ctx.seen.push(value);
        var output;
        if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
            output = keys.map(function(key) {
                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
        }
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
        if (isString(value)) {
            var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            return ctx.stylize(simple, 'string');
        }
        if (isNumber(value)) return ctx.stylize('' + value, 'number');
        if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
        // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize('null', 'null');
    }
    function formatError(value) {
        return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for(var i = 0, l = value.length; i < l; ++i){
            if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
                output.push('');
            }
        }
        keys.forEach(function(key) {
            if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
        });
        return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
        };
        if (desc.get) {
            if (desc.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
                str = ctx.stylize('[Getter]', 'special');
            }
        } else {
            if (desc.set) {
                str = ctx.stylize('[Setter]', 'special');
            }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
        }
        if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                }
                if (str.indexOf('\n') > -1) {
                    if (array) {
                        str = str.split('\n').map(function(line) {
                            return '  ' + line;
                        }).join('\n').slice(2);
                    } else {
                        str = '\n' + str.split('\n').map(function(line) {
                            return '   ' + line;
                        }).join('\n');
                    }
                }
            } else {
                str = ctx.stylize('[Circular]', 'special');
            }
        }
        if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
                return str;
            }
            name = JSON.stringify('' + key);
            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.slice(1, name.length - 1);
                name = ctx.stylize(name, 'name');
            } else {
                name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, 'string');
            }
        }
        return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
        }, 0);
        if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
        }
        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
        return Array.isArray(ar);
    }
    function isBoolean(arg) {
        return typeof arg === 'boolean';
    }
    function isNull(arg) {
        return arg === null;
    }
    function isNullOrUndefined(arg) {
        return arg == null;
    }
    function isNumber(arg) {
        return typeof arg === 'number';
    }
    function isString(arg) {
        return typeof arg === 'string';
    }
    function isSymbol(arg) {
        return typeof arg === 'symbol';
    }
    function isUndefined(arg) {
        return arg === void 0;
    }
    function isRegExp(re) {
        return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
    }
    function isDate(d) {
        return isObject(d) && objectToString(d) === '[object Date]';
    }
    function isError(e) {
        return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    function isFunction(arg) {
        return typeof arg === 'function';
    }
    function objectToString(o) {
        return Object.prototype.toString.call(o);
    }
    function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    return inspect;
}();
var INDEX_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
};
function getNativeLogFunction(level) {
    return function() {
        var str;
        if (arguments.length === 1 && typeof arguments[0] === 'string') {
            str = arguments[0];
        } else {
            str = Array.prototype.map.call(arguments, function(arg) {
                return inspect(arg, {
                    depth: 10
                });
            }).join(', ');
        }
        // TRICKY
        // If more than one argument is provided, the code above collapses them all
        // into a single formatted string. This transform wraps string arguments in
        // single quotes (e.g. "foo" -> "'foo'") which then breaks the "Warning:"
        // check below. So it's important that we look at the first argument, rather
        // than the formatted argument string.
        var firstArg = arguments[0];
        var logLevel = level;
        if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
            // React warnings use console.error so that a stack trace is shown,
            // but we don't (currently) want these to show a redbox
            // (Note: Logic duplicated in ExceptionsManager.js.)
            logLevel = LOG_LEVELS.warn;
        }
        if (groupStack.length) {
            str = groupFormat('', str);
        }
        __webpack_require__.g.nativeLoggingHook(str, logLevel);
    };
}
function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function() {
        return element;
    });
}
function formatCellValue(cell, key) {
    if (key === INDEX_COLUMN_NAME) {
        return cell[key];
    }
    if (cell.hasOwnProperty(key)) {
        var cellValue = cell[key];
        switch(typeof cellValue){
            case 'function':
                return "\u0192";
            case 'string':
                return "'" + cellValue + "'";
            case 'object':
                return cellValue == null ? 'null' : "{\u2026}";
        }
        return String(cellValue);
    }
    return '';
}
function consoleTablePolyfill(data, columns) {
    var rows;
    // convert object -> array
    if (Array.isArray(data)) {
        rows = data.map((row, index)=>{
            var processedRow = {};
            processedRow[INDEX_COLUMN_NAME] = String(index);
            Object.assign(processedRow, row);
            return processedRow;
        });
    } else {
        rows = [];
        for(var key in data){
            if (data.hasOwnProperty(key)) {
                var processedRow = {};
                processedRow[INDEX_COLUMN_NAME] = key;
                Object.assign(processedRow, data[key]);
                rows.push(processedRow);
            }
        }
    }
    if (rows.length === 0) {
        __webpack_require__.g.nativeLoggingHook('', LOG_LEVELS.info);
        return;
    }
    if (Array.isArray(columns)) {
        columns = [
            INDEX_COLUMN_NAME
        ].concat(columns);
    } else {
        columns = Array.from(rows.reduce((columnSet, row)=>{
            Object.keys(row).forEach((key)=>columnSet.add(key));
            return columnSet;
        }, new Set()));
    }
    var stringRows = [];
    var columnWidths = [];
    // Convert each cell to a string. Also
    // figure out max cell width for each column
    columns.forEach(function(k, i) {
        columnWidths[i] = k.length;
        for(var j = 0; j < rows.length; j++){
            var cellStr = formatCellValue(rows[j], k);
            stringRows[j] = stringRows[j] || [];
            stringRows[j][i] = cellStr;
            columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
    });
    // Join all elements in the row into a single string with | separators
    // (appends extra spaces to each cell to make separators  | aligned)
    function joinRow(row, space) {
        var cells = row.map(function(cell, i) {
            var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
            return cell + extraSpaces;
        });
        space = space || ' ';
        return '| ' + cells.join(space + '|' + space) + ' |';
    }
    var separators = columnWidths.map(function(columnWidth) {
        return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators);
    var header = joinRow(columns);
    var table = [
        header,
        separatorRow
    ];
    for(var i = 0; i < rows.length; i++){
        table.push(joinRow(stringRows[i]));
    }
    // Notice extra empty line at the beginning.
    // Native logging hook adds "RCTLog >" at the front of every
    // logged string, which would shift the header and screw up
    // the table
    __webpack_require__.g.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
}
var GROUP_PAD = '\u2502'; // Box light vertical
var GROUP_OPEN = '\u2510'; // Box light down+left
var GROUP_CLOSE = '\u2518'; // Box light up+left
var groupStack = [];
function groupFormat(prefix, msg) {
    // Insert group formatting before the console message
    return groupStack.join('') + prefix + ' ' + (msg || '');
}
function consoleGroupPolyfill(label) {
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
}
function consoleGroupCollapsedPolyfill(label) {
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
}
function consoleGroupEndPolyfill() {
    groupStack.pop();
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
}
function consoleAssertPolyfill(expression, label) {
    if (!expression) {
        __webpack_require__.g.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
}
if (__webpack_require__.g.nativeLoggingHook) {
    var originalConsole = __webpack_require__.g.console;
    // Preserve the original `console` as `originalConsole`
    if (false) { var descriptor }
    __webpack_require__.g.console = _object_spread_props._(_object_spread._({}, originalConsole ?? {}), {
        error: getNativeLogFunction(LOG_LEVELS.error),
        info: getNativeLogFunction(LOG_LEVELS.info),
        log: getNativeLogFunction(LOG_LEVELS.info),
        warn: getNativeLogFunction(LOG_LEVELS.warn),
        trace: getNativeLogFunction(LOG_LEVELS.trace),
        debug: getNativeLogFunction(LOG_LEVELS.trace),
        table: consoleTablePolyfill,
        group: consoleGroupPolyfill,
        groupEnd: consoleGroupEndPolyfill,
        groupCollapsed: consoleGroupCollapsedPolyfill,
        assert: consoleAssertPolyfill
    });
    // TODO(T206796580): This was copy-pasted from ExceptionsManager.js
    // Delete the copy there after the c++ pipeline is rolled out everywhere.
    if (__webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling === true) {
        var originalConsoleError = console.error;
        console.reportErrorsAsExceptions = true;
        function stringifySafe(arg) {
            return inspect(arg, {
                depth: 10
            }).replace(/\n\s*/g, ' ');
        }
        console.error = function(...args) {
            var _global_RN$inExceptionHandler, _global;
            originalConsoleError.apply(this, args);
            if (!console.reportErrorsAsExceptions) {
                return;
            }
            if ((_global_RN$inExceptionHandler = (_global = __webpack_require__.g).RN$inExceptionHandler) === null || _global_RN$inExceptionHandler === void 0 ? void 0 : _global_RN$inExceptionHandler.call(_global)) {
                return;
            }
            var error;
            var firstArg = args[0];
            if (firstArg === null || firstArg === void 0 ? void 0 : firstArg.stack) {
                // RN$handleException will console.error this with high enough fidelity.
                error = firstArg;
            } else {
                if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
                    // React warnings use console.error so that a stack trace is shown, but
                    // we don't (currently) want these to show a redbox
                    return;
                }
                var message = args.map((arg)=>typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
                error = new Error(message);
                error.name = 'console.error';
            }
            var isFatal = false;
            var reportToConsole = false;
            __webpack_require__.g.RN$handleException(error, isFatal, reportToConsole);
        };
    }
    Object.defineProperty(console, '_isPolyfilled', {
        value: true,
        enumerable: false
    });
    // If available, also call the original `console` method since that is
    // sometimes useful. Ex: on OS X, this will let you see rich output in
    // the Safari Web Inspector console.
    if (false) {}
} else if (!__webpack_require__.g.console) {
    function stub() {}
    var log = __webpack_require__.g.print || stub;
    __webpack_require__.g.console = {
        debug: log,
        error: log,
        info: log,
        log: log,
        trace: log,
        warn: log,
        assert (expression, label) {
            if (!expression) {
                log('Assertion failed: ' + label);
            }
        },
        clear: stub,
        dir: stub,
        dirxml: stub,
        group: stub,
        groupCollapsed: stub,
        groupEnd: stub,
        profile: stub,
        profileEnd: stub,
        table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
        value: true,
        enumerable: false
    });
}


}),
97599: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 * @polyfill
 */ var _inGuard = 0;
/**
 * This is the error handler that is called when we encounter an exception
 * when loading a module. This will report any errors encountered before
 * ExceptionsManager is configured.
 */ var _globalHandler = __webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling === true ? __webpack_require__.g.RN$handleException : (e, isFatal)=>{
    throw e;
};
/**
 * The particular require runtime that we are using looks for a global
 * `ErrorUtils` object and if it exists, then it requires modules with the
 * error handler specified via ErrorUtils.setGlobalHandler by calling the
 * require function with applyWithGuard. Since the require module is loaded
 * before any of the modules, this ErrorUtils must be defined (and the handler
 * set) globally before requiring anything.
 */ var ErrorUtils = {
    setGlobalHandler (fun) {
        _globalHandler = fun;
    },
    getGlobalHandler () {
        return _globalHandler;
    },
    reportError (error) {
        _globalHandler && _globalHandler(error, false);
    },
    reportFatalError (error) {
        // NOTE: This has an untyped call site in Metro.
        _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard (fun, context, args, // Unused, but some code synced from www sets it to null.
    unused_onError, // Some callers pass a name here, which we ignore.
    unused_name) {
        try {
            _inGuard++;
            /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ return fun.apply(context, args);
        } catch (e) {
            ErrorUtils.reportError(e);
        } finally{
            _inGuard--;
        }
        return null;
    },
    applyWithGuardIfNeeded (fun, context, args) {
        if (ErrorUtils.inGuard()) {
            /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ return fun.apply(context, args);
        } else {
            ErrorUtils.applyWithGuard(fun, context, args);
        }
        return null;
    },
    inGuard () {
        return !!_inGuard;
    },
    guard (fun, name, context) {
        // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types
        // should be sufficient.
        if (typeof fun !== 'function') {
            console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
            return null;
        }
        var guardName = name ?? fun.name ?? '<generated guard>';
        /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */ function guarded(...args) {
            return ErrorUtils.applyWithGuard(fun, context ?? this, args, null, guardName);
        }
        return guarded;
    }
};
__webpack_require__.g.ErrorUtils = ErrorUtils;


}),
35665: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *        
 */ /* eslint no-bitwise: 0 */ 
function normalizeColor(color) {
    if (typeof color === 'number') {
        if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
            return color;
        }
        return null;
    }
    if (typeof color !== 'string') {
        return null;
    }
    var matchers = getMatchers();
    var match;
    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
        return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
        return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
        return (parse255(match[1]) << 24 | // r
        parse255(match[2]) << 16 | // g
        parse255(match[3]) << 8 | // b
        0x000000ff) >>> // a
        0;
    }
    if (match = matchers.rgba.exec(color)) {
        // rgba(R G B / A) notation
        if (match[6] !== undefined) {
            return (parse255(match[6]) << 24 | // r
            parse255(match[7]) << 16 | // g
            parse255(match[8]) << 8 | // b
            parse1(match[9])) >>> // a
            0;
        }
        // rgba(R, G, B, A) notation
        return (parse255(match[2]) << 24 | // r
        parse255(match[3]) << 16 | // g
        parse255(match[4]) << 8 | // b
        parse1(match[5])) >>> // a
        0;
    }
    if (match = matchers.hex3.exec(color)) {
        return parseInt(match[1] + match[1] + // r
        match[2] + match[2] + // g
        match[3] + match[3] + // b
        'ff', 16) >>> 0;
    }
    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
        return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
        return parseInt(match[1] + match[1] + // r
        match[2] + match[2] + // g
        match[3] + match[3] + // b
        match[4] + match[4], 16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
        return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> // a
        0;
    }
    if (match = matchers.hsla.exec(color)) {
        // hsla(H S L / A) notation
        if (match[6] !== undefined) {
            return (hslToRgb(parse360(match[6]), parsePercentage(match[7]), parsePercentage(match[8])) | parse1(match[9])) >>> // a
            0;
        }
        // hsla(H, S, L, A) notation
        return (hslToRgb(parse360(match[2]), parsePercentage(match[3]), parsePercentage(match[4])) | parse1(match[5])) >>> // a
        0;
    }
    if (match = matchers.hwb.exec(color)) {
        return (hwbToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> // a
        0;
    }
    return null;
}
function hue2rgb(p, q, t) {
    if (t < 0) {
        t += 1;
    }
    if (t > 1) {
        t -= 1;
    }
    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
        return q;
    }
    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
}
function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
        var gray = Math.round(w * 255 / (w + b));
        return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 1 / 3) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 1 / 3) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
}
var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';
function call(...args) {
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
}
function callModern(...args) {
    return '\\(\\s*(' + args.join(')\\s*(') + ')\\s*\\)';
}
function callWithSlashSeparator(...args) {
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
}
function commaSeparatedCall(...args) {
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
}
var cachedMatchers;
function getMatchers() {
    if (cachedMatchers === undefined) {
        cachedMatchers = {
            rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
            rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
            hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
            hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
            hwb: new RegExp('hwb' + callModern(NUMBER, PERCENTAGE, PERCENTAGE)),
            hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#([0-9a-fA-F]{6})$/,
            hex8: /^#([0-9a-fA-F]{8})$/
        };
    }
    return cachedMatchers;
}
function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
        return 0;
    }
    if (int > 255) {
        return 255;
    }
    return int;
}
function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
        return 0;
    }
    if (num > 1) {
        return 255;
    }
    return Math.round(num * 255);
}
function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
        return 0;
    }
    if (int > 100) {
        return 1;
    }
    return int / 100;
}
function normalizeKeyword(name) {
    // prettier-ignore
    switch(name){
        case 'transparent':
            return 0x00000000;
        // http://www.w3.org/TR/css3-color/#svg-color
        case 'aliceblue':
            return 0xf0f8ffff;
        case 'antiquewhite':
            return 0xfaebd7ff;
        case 'aqua':
            return 0x00ffffff;
        case 'aquamarine':
            return 0x7fffd4ff;
        case 'azure':
            return 0xf0ffffff;
        case 'beige':
            return 0xf5f5dcff;
        case 'bisque':
            return 0xffe4c4ff;
        case 'black':
            return 0x000000ff;
        case 'blanchedalmond':
            return 0xffebcdff;
        case 'blue':
            return 0x0000ffff;
        case 'blueviolet':
            return 0x8a2be2ff;
        case 'brown':
            return 0xa52a2aff;
        case 'burlywood':
            return 0xdeb887ff;
        case 'burntsienna':
            return 0xea7e5dff;
        case 'cadetblue':
            return 0x5f9ea0ff;
        case 'chartreuse':
            return 0x7fff00ff;
        case 'chocolate':
            return 0xd2691eff;
        case 'coral':
            return 0xff7f50ff;
        case 'cornflowerblue':
            return 0x6495edff;
        case 'cornsilk':
            return 0xfff8dcff;
        case 'crimson':
            return 0xdc143cff;
        case 'cyan':
            return 0x00ffffff;
        case 'darkblue':
            return 0x00008bff;
        case 'darkcyan':
            return 0x008b8bff;
        case 'darkgoldenrod':
            return 0xb8860bff;
        case 'darkgray':
            return 0xa9a9a9ff;
        case 'darkgreen':
            return 0x006400ff;
        case 'darkgrey':
            return 0xa9a9a9ff;
        case 'darkkhaki':
            return 0xbdb76bff;
        case 'darkmagenta':
            return 0x8b008bff;
        case 'darkolivegreen':
            return 0x556b2fff;
        case 'darkorange':
            return 0xff8c00ff;
        case 'darkorchid':
            return 0x9932ccff;
        case 'darkred':
            return 0x8b0000ff;
        case 'darksalmon':
            return 0xe9967aff;
        case 'darkseagreen':
            return 0x8fbc8fff;
        case 'darkslateblue':
            return 0x483d8bff;
        case 'darkslategray':
            return 0x2f4f4fff;
        case 'darkslategrey':
            return 0x2f4f4fff;
        case 'darkturquoise':
            return 0x00ced1ff;
        case 'darkviolet':
            return 0x9400d3ff;
        case 'deeppink':
            return 0xff1493ff;
        case 'deepskyblue':
            return 0x00bfffff;
        case 'dimgray':
            return 0x696969ff;
        case 'dimgrey':
            return 0x696969ff;
        case 'dodgerblue':
            return 0x1e90ffff;
        case 'firebrick':
            return 0xb22222ff;
        case 'floralwhite':
            return 0xfffaf0ff;
        case 'forestgreen':
            return 0x228b22ff;
        case 'fuchsia':
            return 0xff00ffff;
        case 'gainsboro':
            return 0xdcdcdcff;
        case 'ghostwhite':
            return 0xf8f8ffff;
        case 'gold':
            return 0xffd700ff;
        case 'goldenrod':
            return 0xdaa520ff;
        case 'gray':
            return 0x808080ff;
        case 'green':
            return 0x008000ff;
        case 'greenyellow':
            return 0xadff2fff;
        case 'grey':
            return 0x808080ff;
        case 'honeydew':
            return 0xf0fff0ff;
        case 'hotpink':
            return 0xff69b4ff;
        case 'indianred':
            return 0xcd5c5cff;
        case 'indigo':
            return 0x4b0082ff;
        case 'ivory':
            return 0xfffff0ff;
        case 'khaki':
            return 0xf0e68cff;
        case 'lavender':
            return 0xe6e6faff;
        case 'lavenderblush':
            return 0xfff0f5ff;
        case 'lawngreen':
            return 0x7cfc00ff;
        case 'lemonchiffon':
            return 0xfffacdff;
        case 'lightblue':
            return 0xadd8e6ff;
        case 'lightcoral':
            return 0xf08080ff;
        case 'lightcyan':
            return 0xe0ffffff;
        case 'lightgoldenrodyellow':
            return 0xfafad2ff;
        case 'lightgray':
            return 0xd3d3d3ff;
        case 'lightgreen':
            return 0x90ee90ff;
        case 'lightgrey':
            return 0xd3d3d3ff;
        case 'lightpink':
            return 0xffb6c1ff;
        case 'lightsalmon':
            return 0xffa07aff;
        case 'lightseagreen':
            return 0x20b2aaff;
        case 'lightskyblue':
            return 0x87cefaff;
        case 'lightslategray':
            return 0x778899ff;
        case 'lightslategrey':
            return 0x778899ff;
        case 'lightsteelblue':
            return 0xb0c4deff;
        case 'lightyellow':
            return 0xffffe0ff;
        case 'lime':
            return 0x00ff00ff;
        case 'limegreen':
            return 0x32cd32ff;
        case 'linen':
            return 0xfaf0e6ff;
        case 'magenta':
            return 0xff00ffff;
        case 'maroon':
            return 0x800000ff;
        case 'mediumaquamarine':
            return 0x66cdaaff;
        case 'mediumblue':
            return 0x0000cdff;
        case 'mediumorchid':
            return 0xba55d3ff;
        case 'mediumpurple':
            return 0x9370dbff;
        case 'mediumseagreen':
            return 0x3cb371ff;
        case 'mediumslateblue':
            return 0x7b68eeff;
        case 'mediumspringgreen':
            return 0x00fa9aff;
        case 'mediumturquoise':
            return 0x48d1ccff;
        case 'mediumvioletred':
            return 0xc71585ff;
        case 'midnightblue':
            return 0x191970ff;
        case 'mintcream':
            return 0xf5fffaff;
        case 'mistyrose':
            return 0xffe4e1ff;
        case 'moccasin':
            return 0xffe4b5ff;
        case 'navajowhite':
            return 0xffdeadff;
        case 'navy':
            return 0x000080ff;
        case 'oldlace':
            return 0xfdf5e6ff;
        case 'olive':
            return 0x808000ff;
        case 'olivedrab':
            return 0x6b8e23ff;
        case 'orange':
            return 0xffa500ff;
        case 'orangered':
            return 0xff4500ff;
        case 'orchid':
            return 0xda70d6ff;
        case 'palegoldenrod':
            return 0xeee8aaff;
        case 'palegreen':
            return 0x98fb98ff;
        case 'paleturquoise':
            return 0xafeeeeff;
        case 'palevioletred':
            return 0xdb7093ff;
        case 'papayawhip':
            return 0xffefd5ff;
        case 'peachpuff':
            return 0xffdab9ff;
        case 'peru':
            return 0xcd853fff;
        case 'pink':
            return 0xffc0cbff;
        case 'plum':
            return 0xdda0ddff;
        case 'powderblue':
            return 0xb0e0e6ff;
        case 'purple':
            return 0x800080ff;
        case 'rebeccapurple':
            return 0x663399ff;
        case 'red':
            return 0xff0000ff;
        case 'rosybrown':
            return 0xbc8f8fff;
        case 'royalblue':
            return 0x4169e1ff;
        case 'saddlebrown':
            return 0x8b4513ff;
        case 'salmon':
            return 0xfa8072ff;
        case 'sandybrown':
            return 0xf4a460ff;
        case 'seagreen':
            return 0x2e8b57ff;
        case 'seashell':
            return 0xfff5eeff;
        case 'sienna':
            return 0xa0522dff;
        case 'silver':
            return 0xc0c0c0ff;
        case 'skyblue':
            return 0x87ceebff;
        case 'slateblue':
            return 0x6a5acdff;
        case 'slategray':
            return 0x708090ff;
        case 'slategrey':
            return 0x708090ff;
        case 'snow':
            return 0xfffafaff;
        case 'springgreen':
            return 0x00ff7fff;
        case 'steelblue':
            return 0x4682b4ff;
        case 'tan':
            return 0xd2b48cff;
        case 'teal':
            return 0x008080ff;
        case 'thistle':
            return 0xd8bfd8ff;
        case 'tomato':
            return 0xff6347ff;
        case 'turquoise':
            return 0x40e0d0ff;
        case 'violet':
            return 0xee82eeff;
        case 'wheat':
            return 0xf5deb3ff;
        case 'white':
            return 0xffffffff;
        case 'whitesmoke':
            return 0xf5f5f5ff;
        case 'yellow':
            return 0xffff00ff;
        case 'yellowgreen':
            return 0x9acd32ff;
    }
    return null;
}
module.exports = normalizeColor;


}),
53685: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "CellRenderMask", ({
    enumerable: true,
    get: function() {
        return CellRenderMask;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var CellRenderMask = /*#__PURE__*/ function() {
    "use strict";
    function CellRenderMask(numCells) {
        _class_call_check._(this, CellRenderMask);
        (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');
        this._numCells = numCells;
        if (numCells === 0) {
            this._regions = [];
        } else {
            this._regions = [
                {
                    first: 0,
                    last: numCells - 1,
                    isSpacer: true
                }
            ];
        }
    }
    _create_class._(CellRenderMask, [
        {
            key: "enumerateRegions",
            value: function enumerateRegions() {
                return this._regions;
            }
        },
        {
            key: "addCells",
            value: function addCells(cells) {
                var _this__regions;
                (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');
                // VirtualizedList uses inclusive ranges, where zero-count states are
                // possible. E.g. [0, -1] for no cells, starting at 0.
                if (cells.last < cells.first) {
                    return;
                }
                var _this__findRegion = _sliced_to_array._(this._findRegion(cells.first), 2), firstIntersect = _this__findRegion[0], firstIntersectIdx = _this__findRegion[1];
                var _this__findRegion1 = _sliced_to_array._(this._findRegion(cells.last), 2), lastIntersect = _this__findRegion1[0], lastIntersectIdx = _this__findRegion1[1];
                // Fast-path if the cells to add are already all present in the mask. We
                // will otherwise need to do some mutation.
                if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {
                    return;
                }
                // We need to replace the existing covered regions with 1-3 new regions
                // depending whether we need to split spacers out of overlapping regions.
                var newLeadRegion = [];
                var newTailRegion = [];
                var newMainRegion = _object_spread_props._(_object_spread._({}, cells), {
                    isSpacer: false
                });
                if (firstIntersect.first < newMainRegion.first) {
                    if (firstIntersect.isSpacer) {
                        newLeadRegion.push({
                            first: firstIntersect.first,
                            last: newMainRegion.first - 1,
                            isSpacer: true
                        });
                    } else {
                        newMainRegion.first = firstIntersect.first;
                    }
                }
                if (lastIntersect.last > newMainRegion.last) {
                    if (lastIntersect.isSpacer) {
                        newTailRegion.push({
                            first: newMainRegion.last + 1,
                            last: lastIntersect.last,
                            isSpacer: true
                        });
                    } else {
                        newMainRegion.last = lastIntersect.last;
                    }
                }
                var replacementRegions = _to_consumable_array._(newLeadRegion).concat([
                    newMainRegion
                ], _to_consumable_array._(newTailRegion));
                var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;
                (_this__regions = this._regions).splice.apply(_this__regions, [
                    firstIntersectIdx,
                    numRegionsToDelete
                ].concat(_to_consumable_array._(replacementRegions)));
            }
        },
        {
            key: "numCells",
            value: function numCells() {
                return this._numCells;
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i)=>region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);
            }
        },
        {
            key: "_findRegion",
            value: function _findRegion(cellIdx) {
                var firstIdx = 0;
                var lastIdx = this._regions.length - 1;
                while(firstIdx <= lastIdx){
                    var middleIdx = Math.floor((firstIdx + lastIdx) / 2);
                    var middleRegion = this._regions[middleIdx];
                    if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {
                        return [
                            middleRegion,
                            middleIdx
                        ];
                    } else if (cellIdx < middleRegion.first) {
                        lastIdx = middleIdx - 1;
                    } else if (cellIdx > middleRegion.last) {
                        firstIdx = middleIdx + 1;
                    }
                }
                (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);
            }
        }
    ]);
    return CellRenderMask;
}();


}),
17427: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ChildListCollection;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var ChildListCollection = /*#__PURE__*/ function() {
    "use strict";
    function ChildListCollection() {
        _class_call_check._(this, ChildListCollection);
        this._cellKeyToChildren = new Map();
        this._childrenToCellKey = new Map();
    }
    _create_class._(ChildListCollection, [
        {
            key: "add",
            value: function add(list, cellKey) {
                (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');
                var cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();
                cellLists.add(list);
                this._cellKeyToChildren.set(cellKey, cellLists);
                this._childrenToCellKey.set(list, cellKey);
            }
        },
        {
            key: "remove",
            value: function remove(list) {
                var cellKey = this._childrenToCellKey.get(list);
                (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');
                this._childrenToCellKey.delete(list);
                var cellLists = this._cellKeyToChildren.get(cellKey);
                (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');
                cellLists.delete(list);
                if (cellLists.size === 0) {
                    this._cellKeyToChildren.delete(cellKey);
                }
            }
        },
        {
            key: "forEach",
            value: function forEach(fn) {
                for (var listSet of this._cellKeyToChildren.values()){
                    for (var list of listSet){
                        fn(list);
                    }
                }
            }
        },
        {
            key: "forEachInCell",
            value: function forEachInCell(cellKey, fn) {
                var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
                for (var list of listSet){
                    fn(list);
                }
            }
        },
        {
            key: "anyInCell",
            value: function anyInCell(cellKey, fn) {
                var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
                for (var list of listSet){
                    if (fn(list)) {
                        return true;
                    }
                }
                return false;
            }
        },
        {
            key: "size",
            value: function size() {
                return this._childrenToCellKey.size;
            }
        }
    ]);
    return ChildListCollection;
}();


}),
70253: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _ListMetricsAggregator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53443));
var Info = function Info() {
    _class_call_check._(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
};
var DEBUG = false;
var _listeners = [];
var _minSampleCount = 10;
var _sampleRate = DEBUG ? 1 : null;
/**
 * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.
 * By default the sampling rate is set to zero and this will do nothing. If you want to collect
 * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.
 *
 * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with
 * `SceneTracker.getActiveScene` to determine the context of the events.
 */ var FillRateHelper = /*#__PURE__*/ function() {
    function FillRateHelper(listMetrics) {
        _class_call_check._(this, FillRateHelper);
        this._anyBlankStartTime = null;
        this._enabled = false;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
        this._listMetrics = listMetrics;
        this._enabled = (_sampleRate || 0) > Math.random();
        this._resetData();
    }
    _create_class._(FillRateHelper, [
        {
            key: "activate",
            value: function activate() {
                if (this._enabled && this._samplesStartTime == null) {
                    DEBUG && console.debug('FillRateHelper: activate');
                    this._samplesStartTime = __webpack_require__.g.performance.now();
                }
            }
        },
        {
            key: "deactivateAndFlush",
            value: function deactivateAndFlush() {
                if (!this._enabled) {
                    return;
                }
                var start = this._samplesStartTime; // const for flow
                if (start == null) {
                    DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
                    return;
                }
                if (this._info.sample_count < _minSampleCount) {
                    // Don't bother with under-sampled events.
                    this._resetData();
                    return;
                }
                var total_time_spent = __webpack_require__.g.performance.now() - start;
                var info = _object_spread_props._(_object_spread._({}, this._info), {
                    total_time_spent
                });
                if (DEBUG) {
                    var derived = {
                        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
                        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
                        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
                        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
                        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
                        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
                        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
                    };
                    for(var key in derived){
                        // $FlowFixMe[prop-missing]
                        // $FlowFixMe[invalid-computed-prop]
                        derived[key] = Math.round(1000 * derived[key]) / 1000;
                    }
                    console.debug('FillRateHelper deactivateAndFlush: ', {
                        derived,
                        info
                    });
                }
                _listeners.forEach((listener)=>listener(info));
                this._resetData();
            }
        },
        {
            key: "computeBlankness",
            value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {
                if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {
                    return 0;
                }
                var dOffset = scrollMetrics.dOffset, offset = scrollMetrics.offset, velocity = scrollMetrics.velocity, visibleLength = scrollMetrics.visibleLength;
                // Denominator metrics that we track for all events - most of the time there is no blankness and
                // we want to capture that.
                this._info.sample_count++;
                this._info.pixels_sampled += Math.round(visibleLength);
                this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
                var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec
                // Whether blank now or not, record the elapsed time blank if we were blank last time.
                var now = __webpack_require__.g.performance.now();
                if (this._anyBlankStartTime != null) {
                    this._info.any_blank_ms += now - this._anyBlankStartTime;
                }
                this._anyBlankStartTime = null;
                if (this._mostlyBlankStartTime != null) {
                    this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
                }
                this._mostlyBlankStartTime = null;
                var blankTop = 0;
                var first = cellsAroundViewport.first;
                var firstFrame = this._listMetrics.getCellMetrics(first, props);
                while(first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)){
                    firstFrame = this._listMetrics.getCellMetrics(first, props);
                    first++;
                }
                // Only count blankTop if we aren't rendering the first item, otherwise we will count the header
                // as blank.
                if (firstFrame && first > 0) {
                    blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
                }
                var blankBottom = 0;
                var last = cellsAroundViewport.last;
                var lastFrame = this._listMetrics.getCellMetrics(last, props);
                while(last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)){
                    lastFrame = this._listMetrics.getCellMetrics(last, props);
                    last--;
                }
                // Only count blankBottom if we aren't rendering the last item, otherwise we will count the
                // footer as blank.
                if (lastFrame && last < props.getItemCount(props.data) - 1) {
                    var bottomEdge = lastFrame.offset + lastFrame.length;
                    blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
                }
                var pixels_blank = Math.round(blankTop + blankBottom);
                var blankness = pixels_blank / visibleLength;
                if (blankness > 0) {
                    this._anyBlankStartTime = now;
                    this._info.any_blank_speed_sum += scrollSpeed;
                    this._info.any_blank_count++;
                    this._info.pixels_blank += pixels_blank;
                    if (blankness > 0.5) {
                        this._mostlyBlankStartTime = now;
                        this._info.mostly_blank_count++;
                    }
                } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
                    this.deactivateAndFlush();
                }
                return blankness;
            }
        },
        {
            key: "enabled",
            value: function enabled() {
                return this._enabled;
            }
        },
        {
            key: "_resetData",
            value: function _resetData() {
                this._anyBlankStartTime = null;
                this._info = new Info();
                this._mostlyBlankStartTime = null;
                this._samplesStartTime = null;
            }
        }
    ], [
        {
            key: "addListener",
            value: function addListener(callback) {
                if (_sampleRate === null) {
                    console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');
                }
                _listeners.push(callback);
                return {
                    remove: ()=>{
                        _listeners = _listeners.filter((listener)=>callback !== listener);
                    }
                };
            }
        },
        {
            key: "setSampleRate",
            value: function setSampleRate(sampleRate) {
                _sampleRate = sampleRate;
            }
        },
        {
            key: "setMinSampleCount",
            value: function setMinSampleCount(minSampleCount) {
                _minSampleCount = minSampleCount;
            }
        }
    ]);
    return FillRateHelper;
}();
var _default = FillRateHelper;


}),
53443: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ListMetricsAggregator;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _VirtualizeUtils = __webpack_require__(72351);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var ListMetricsAggregator = /*#__PURE__*/ function() {
    "use strict";
    function ListMetricsAggregator() {
        _class_call_check._(this, ListMetricsAggregator);
        this._averageCellLength = 0;
        this._cellMetrics = new Map();
        this._highestMeasuredCellIndex = 0;
        this._measuredCellsLength = 0;
        this._measuredCellsCount = 0;
        this._orientation = {
            horizontal: false,
            rtl: false
        };
    }
    _create_class._(ListMetricsAggregator, [
        {
            /**
   * Notify the ListMetricsAggregator that a cell has been laid out.
   *
   * @returns whether the cell layout has changed since last notification
   */ key: "notifyCellLayout",
            value: function notifyCellLayout(ref) {
                var cellIndex = ref.cellIndex, cellKey = ref.cellKey, orientation = ref.orientation, layout = ref.layout;
                this._invalidateIfOrientationChanged(orientation);
                var next = {
                    index: cellIndex,
                    length: this._selectLength(layout),
                    isMounted: true,
                    offset: this.flowRelativeOffset(layout)
                };
                var curr = this._cellMetrics.get(cellKey);
                if (!curr || next.offset !== curr.offset || next.length !== curr.length) {
                    if (curr) {
                        var dLength = next.length - curr.length;
                        this._measuredCellsLength += dLength;
                    } else {
                        this._measuredCellsLength += next.length;
                        this._measuredCellsCount += 1;
                    }
                    this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;
                    this._cellMetrics.set(cellKey, next);
                    this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);
                    return true;
                } else {
                    curr.isMounted = true;
                    return false;
                }
            }
        },
        {
            /**
   * Notify ListMetricsAggregator that a cell has been unmounted.
   */ key: "notifyCellUnmounted",
            value: function notifyCellUnmounted(cellKey) {
                var curr = this._cellMetrics.get(cellKey);
                if (curr) {
                    curr.isMounted = false;
                }
            }
        },
        {
            /**
   * Notify ListMetricsAggregator that the lists content container has been laid out.
   */ key: "notifyListContentLayout",
            value: function notifyListContentLayout(ref) {
                var orientation = ref.orientation, layout = ref.layout;
                this._invalidateIfOrientationChanged(orientation);
                this._contentLength = this._selectLength(layout);
            }
        },
        {
            /**
   * Return the average length of the cells which have been measured
   */ key: "getAverageCellLength",
            value: function getAverageCellLength() {
                return this._averageCellLength;
            }
        },
        {
            /**
   * Return the highest measured cell index (or 0 if nothing has been measured
   * yet)
   */ key: "getHighestMeasuredCellIndex",
            value: function getHighestMeasuredCellIndex() {
                return this._highestMeasuredCellIndex;
            }
        },
        {
            /**
   * Returns the exact metrics of a cell if it has already been laid out,
   * otherwise an estimate based on the average length of previously measured
   * cells
   */ key: "getCellMetricsApprox",
            value: function getCellMetricsApprox(index, props) {
                var frame = this.getCellMetrics(index, props);
                if (frame && frame.index === index) {
                    // check for invalid frames due to row re-ordering
                    return frame;
                } else {
                    var offset;
                    var highestMeasuredCellIndex = this.getHighestMeasuredCellIndex();
                    if (highestMeasuredCellIndex < index) {
                        // If any of the cells before this one have been laid out already, we
                        // should use that information in the estimations.
                        // This is important because if the list has a header, the initial cell
                        // will have a larger offset that we should take into account here.
                        var highestMeasuredCellFrame = this.getCellMetrics(highestMeasuredCellIndex, props);
                        if (highestMeasuredCellFrame) {
                            offset = highestMeasuredCellFrame.offset + highestMeasuredCellFrame.length + this._averageCellLength * (index - highestMeasuredCellIndex - 1);
                        }
                    }
                    if (offset == null) {
                        offset = this._averageCellLength * index;
                    }
                    var data = props.data, getItemCount = props.getItemCount;
                    (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);
                    return {
                        length: this._averageCellLength,
                        offset,
                        index,
                        isMounted: false
                    };
                }
            }
        },
        {
            /**
   * Returns the exact metrics of a cell if it has already been laid out
   */ key: "getCellMetrics",
            value: function getCellMetrics(index, props) {
                var data = props.data, getItem = props.getItem, getItemCount = props.getItemCount, getItemLayout = props.getItemLayout;
                (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);
                var keyExtractor = props.keyExtractor ?? _VirtualizeUtils.keyExtractor;
                var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));
                if (frame && frame.index === index) {
                    return frame;
                }
                if (getItemLayout) {
                    var _getItemLayout = getItemLayout(data, index), length = _getItemLayout.length, offset = _getItemLayout.offset;
                    // TODO: `isMounted` is used for both "is exact layout" and "has been
                    // unmounted". Should be refactored.
                    return {
                        index,
                        length,
                        offset,
                        isMounted: true
                    };
                }
                return null;
            }
        },
        {
            /**
   * Gets an approximate offset to an item at a given index. Supports
   * fractional indices.
   */ key: "getCellOffsetApprox",
            value: function getCellOffsetApprox(index, props) {
                if (Number.isInteger(index)) {
                    return this.getCellMetricsApprox(index, props).offset;
                } else {
                    var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);
                    var remainder = index - Math.floor(index);
                    return frameMetrics.offset + remainder * frameMetrics.length;
                }
            }
        },
        {
            /**
   * Returns the length of all ScrollView content along the scrolling axis.
   */ key: "getContentLength",
            value: function getContentLength() {
                return this._contentLength ?? 0;
            }
        },
        {
            /**
   * Whether a content length has been observed
   */ key: "hasContentLength",
            value: function hasContentLength() {
                return this._contentLength != null;
            }
        },
        {
            /**
   * Finds the flow-relative offset (e.g. starting from the left in LTR, but
   * right in RTL) from a layout box.
   */ key: "flowRelativeOffset",
            value: function flowRelativeOffset(layout, referenceContentLength) {
                var _this__orientation = this._orientation, horizontal = _this__orientation.horizontal, rtl = _this__orientation.rtl;
                if (horizontal && rtl) {
                    var contentLength = referenceContentLength ?? this._contentLength;
                    (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
                    return contentLength - (this._selectOffset(layout) + this._selectLength(layout));
                } else {
                    return this._selectOffset(layout);
                }
            }
        },
        {
            /**
   * Converts a flow-relative offset to a cartesian offset
   */ key: "cartesianOffset",
            value: function cartesianOffset(flowRelativeOffset) {
                var _this__orientation = this._orientation, horizontal = _this__orientation.horizontal, rtl = _this__orientation.rtl;
                if (horizontal && rtl) {
                    (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
                    return this._contentLength - flowRelativeOffset;
                } else {
                    return flowRelativeOffset;
                }
            }
        },
        {
            key: "_invalidateIfOrientationChanged",
            value: function _invalidateIfOrientationChanged(orientation) {
                if (orientation.rtl !== this._orientation.rtl) {
                    this._cellMetrics.clear();
                }
                if (orientation.horizontal !== this._orientation.horizontal) {
                    this._averageCellLength = 0;
                    this._highestMeasuredCellIndex = 0;
                    this._measuredCellsLength = 0;
                    this._measuredCellsCount = 0;
                }
                this._orientation = orientation;
            }
        },
        {
            key: "_selectLength",
            value: function _selectLength(ref) {
                var width = ref.width, height = ref.height;
                return this._orientation.horizontal ? width : height;
            }
        },
        {
            key: "_selectOffset",
            value: function _selectOffset(ref) {
                var x = ref.x, y = ref.y;
                return this._orientation.horizontal ? x : y;
            }
        }
    ]);
    return ListMetricsAggregator;
}();


}),
59220: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return StateSafePureComponent;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var StateSafePureComponent = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(StateSafePureComponent, _React_PureComponent);
    function StateSafePureComponent(props) {
        _class_call_check._(this, StateSafePureComponent);
        var _this;
        _this = _call_super._(this, StateSafePureComponent, [
            props
        ]), _this._inAsyncStateUpdate = false;
        _this._installSetStateHooks();
        return _this;
    }
    _create_class._(StateSafePureComponent, [
        {
            key: "setState",
            value: function setState(partialState, callback) {
                if (typeof partialState === 'function') {
                    _get._(_get_prototype_of._(StateSafePureComponent.prototype), "setState", this).call(this, (state, props)=>{
                        this._inAsyncStateUpdate = true;
                        var ret;
                        try {
                            ret = partialState(state, props);
                        } catch (err) {
                            throw err;
                        } finally{
                            this._inAsyncStateUpdate = false;
                        }
                        return ret;
                    }, callback);
                } else {
                    _get._(_get_prototype_of._(StateSafePureComponent.prototype), "setState", this).call(this, partialState, callback);
                }
            }
        },
        {
            key: "_installSetStateHooks",
            value: function _installSetStateHooks() {
                var that = this;
                var _this = this, props = _this.props, state = _this.state;
                Object.defineProperty(this, 'props', {
                    get () {
                        (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates');
                        return props;
                    },
                    set (newProps) {
                        props = newProps;
                    }
                });
                Object.defineProperty(this, 'state', {
                    get () {
                        (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.state" should not be acceessed during state updates');
                        return state;
                    },
                    set (newState) {
                        state = newState;
                    }
                });
            }
        }
    ]);
    return StateSafePureComponent;
}(_react.PureComponent);


}),
57222: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _ListMetricsAggregator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53443));
var invariant = __webpack_require__(56481);
/**
 * A Utility class for calculating viewable items based on current metrics like scroll position and
 * layout.
 *
 * An item is said to be in a "viewable" state when any of the following
 * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`
 * is true):
 *
 * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item
 *   visible in the view area >= `itemVisiblePercentThreshold`.
 * - Entirely visible on screen
 */ var ViewabilityHelper = /*#__PURE__*/ function() {
    function ViewabilityHelper(ref) {
        var config = ref === void 0 ? {
            viewAreaCoveragePercentThreshold: 0
        } : ref;
        _class_call_check._(this, ViewabilityHelper);
        this._hasInteracted = false;
        this._timers = new Set();
        this._viewableIndices = [];
        this._viewableItems = new Map();
        this._config = config;
    }
    _create_class._(ViewabilityHelper, [
        {
            /**
   * Cleanup, e.g. on unmount. Clears any pending timers.
   */ key: "dispose",
            value: function dispose() {
                /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
     * comment suppresses an error found when Flow v0.63 was deployed. To see
     * the error delete this comment and run Flow. */ this._timers.forEach(clearTimeout);
            }
        },
        {
            /**
   * Determines which items are viewable based on the current metrics and config.
   */ key: "computeViewableItems",
            value: function computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, // Optional optimization to reduce the scan size
            renderRange) {
                var itemCount = props.getItemCount(props.data);
                var _this__config = this._config, itemVisiblePercentThreshold = _this__config.itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold = _this__config.viewAreaCoveragePercentThreshold;
                var viewAreaMode = viewAreaCoveragePercentThreshold != null;
                var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
                invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
                var viewableIndices = [];
                if (itemCount === 0) {
                    return viewableIndices;
                }
                var firstVisible = -1;
                var _ref = renderRange || {
                    first: 0,
                    last: itemCount - 1
                }, first = _ref.first, last = _ref.last;
                if (last >= itemCount) {
                    console.warn('Invalid render range computing viewability ' + JSON.stringify({
                        renderRange,
                        itemCount
                    }));
                    return [];
                }
                for(var idx = first; idx <= last; idx++){
                    var metrics = listMetrics.getCellMetrics(idx, props);
                    if (!metrics) {
                        continue;
                    }
                    var top = Math.floor(metrics.offset - scrollOffset);
                    var bottom = Math.floor(top + metrics.length);
                    if (top < viewportHeight && bottom > 0) {
                        firstVisible = idx;
                        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
                            viewableIndices.push(idx);
                        }
                    } else if (firstVisible >= 0) {
                        break;
                    }
                }
                return viewableIndices;
            }
        },
        {
            /**
   * Figures out which items are viewable and how that has changed from before and calls
   * `onViewableItemsChanged` as appropriate.
   */ key: "onUpdate",
            value: function onUpdate(props, scrollOffset, viewportHeight, listMetrics, createViewToken, onViewableItemsChanged, // Optional optimization to reduce the scan size
            renderRange) {
                var itemCount = props.getItemCount(props.data);
                if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !listMetrics.getCellMetrics(0, props)) {
                    return;
                }
                var viewableIndices = [];
                if (itemCount) {
                    viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange);
                }
                if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii)=>v === viewableIndices[ii])) {
                    // We might get a lot of scroll events where visibility doesn't change and we don't want to do
                    // extra work in those cases.
                    return;
                }
                this._viewableIndices = viewableIndices;
                if (this._config.minimumViewTime) {
                    var handle = setTimeout(()=>{
                        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.63 was deployed. To
         * see the error delete this comment and run Flow. */ this._timers.delete(handle);
                        this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
                    }, this._config.minimumViewTime);
                    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
       * comment suppresses an error found when Flow v0.63 was deployed. To see
       * the error delete this comment and run Flow. */ this._timers.add(handle);
                } else {
                    this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
                }
            }
        },
        {
            /**
   * clean-up cached _viewableIndices to evaluate changed items on next update
   */ key: "resetViewableIndices",
            value: function resetViewableIndices() {
                this._viewableIndices = [];
            }
        },
        {
            /**
   * Records that an interaction has happened even if there has been no scroll.
   */ key: "recordInteraction",
            value: function recordInteraction() {
                this._hasInteracted = true;
            }
        },
        {
            key: "_onUpdateSync",
            value: function _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
                // Filter out indices that have gone out of view since this call was scheduled.
                viewableIndicesToCheck = viewableIndicesToCheck.filter((ii)=>this._viewableIndices.includes(ii));
                var prevItems = this._viewableItems;
                var nextItems = new Map(viewableIndicesToCheck.map((ii)=>{
                    var viewable = createViewToken(ii, true, props);
                    return [
                        viewable.key,
                        viewable
                    ];
                }));
                var changed = [];
                for (var ref of nextItems){
                    var _ref = _sliced_to_array._(ref, 2), key = _ref[0], viewable = _ref[1];
                    if (!prevItems.has(key)) {
                        changed.push(viewable);
                    }
                }
                for (var ref1 of prevItems){
                    var _ref1 = _sliced_to_array._(ref1, 2), key1 = _ref1[0], viewable1 = _ref1[1];
                    if (!nextItems.has(key1)) {
                        changed.push(_object_spread_props._(_object_spread._({}, viewable1), {
                            isViewable: false
                        }));
                    }
                }
                if (changed.length > 0) {
                    this._viewableItems = nextItems;
                    onViewableItemsChanged({
                        viewableItems: Array.from(nextItems.values()),
                        changed,
                        viewabilityConfig: this._config
                    });
                }
            }
        }
    ]);
    return ViewabilityHelper;
}();
function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
        return true;
    } else {
        var pixels = _getPixelsVisible(top, bottom, viewportHeight);
        var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
        return percent >= viewablePercentThreshold;
    }
}
function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
}
function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
}
var _default = ViewabilityHelper;


}),
72351: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    computeWindowedRenderLimits: function() {
        return computeWindowedRenderLimits;
    },
    elementsThatOverlapOffsets: function() {
        return elementsThatOverlapOffsets;
    },
    keyExtractor: function() {
        return keyExtractor;
    },
    newRangeCount: function() {
        return newRangeCount;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(12763));
function elementsThatOverlapOffsets(offsets, props, listMetrics, ref) {
    var zoomScale = ref === void 0 ? 1 : ref;
    var itemCount = props.getItemCount(props.data);
    var result = [];
    for(var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++){
        var currentOffset = offsets[offsetIndex];
        var left = 0;
        var right = itemCount - 1;
        while(left <= right){
            var mid = left + Math.floor((right - left) / 2);
            var frame = listMetrics.getCellMetricsApprox(mid, props);
            var scaledOffsetStart = frame.offset * zoomScale;
            var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;
            // We want the first frame that contains the offset, with inclusive bounds. Thus, for the
            // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.
            if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {
                right = mid - 1;
            } else if (currentOffset > scaledOffsetEnd) {
                left = mid + 1;
            } else {
                result[offsetIndex] = mid;
                break;
            }
        }
    }
    return result;
}
function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
}
function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, listMetrics, scrollMetrics) {
    var itemCount = props.getItemCount(props.data);
    if (itemCount === 0) {
        return {
            first: 0,
            last: -1
        };
    }
    var offset = scrollMetrics.offset, velocity = scrollMetrics.velocity, visibleLength = scrollMetrics.visibleLength, _scrollMetrics_zoomScale = scrollMetrics.zoomScale, zoomScale = _scrollMetrics_zoomScale === void 0 ? 1 : _scrollMetrics_zoomScale;
    // Start with visible area, then compute maximum overscan region by expanding from there, biased
    // in the direction of scroll. Total overscan area is capped, which should cap memory consumption
    // too.
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    // Considering velocity seems to introduce more churn than it's worth.
    var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;
    if (lastItemOffset < overscanBegin) {
        // Entire list is before our overscan window
        return {
            first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
            last: itemCount - 1
        };
    }
    // Find the indices that correspond to the items at the render boundaries we're targeting.
    var _elementsThatOverlapOffsets = _sliced_to_array._(elementsThatOverlapOffsets([
        overscanBegin,
        visibleBegin,
        visibleEnd,
        overscanEnd
    ], props, listMetrics, zoomScale), 4), overscanFirst = _elementsThatOverlapOffsets[0], first = _elementsThatOverlapOffsets[1], last = _elementsThatOverlapOffsets[2], overscanLast = _elementsThatOverlapOffsets[3];
    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
        first,
        last
    };
    // We want to limit the number of new cells we're rendering per batch so that we can fill the
    // content on the screen quickly. If we rendered the entire overscan window at once, the user
    // could be staring at white space for a long time waiting for a bunch of offscreen content to
    // render.
    var newCellCount = newRangeCount(prev, visible);
    while(true){
        if (first <= overscanFirst && last >= overscanLast) {
            break;
        }
        var maxNewCells = newCellCount >= maxToRenderPerBatch;
        var firstWillAddMore = void 0;
        var lastWillAddMore = void 0;
        if (_ReactNativeFeatureFlags.fixVirtualizeListCollapseWindowSize()) {
            firstWillAddMore = first <= prev.first;
            lastWillAddMore = last >= prev.last;
        } else {
            firstWillAddMore = first <= prev.first || first > prev.last;
            lastWillAddMore = last >= prev.last || last < prev.first;
        }
        var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
        var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
        if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
            break;
        }
        if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
            if (firstWillAddMore) {
                newCellCount++;
            }
            first--;
        }
        if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
            if (lastWillAddMore) {
                newCellCount++;
            }
            last++;
        }
    }
    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
        throw new Error('Bad window calculation ' + JSON.stringify({
            first,
            last,
            itemCount,
            overscanFirst,
            overscanLast,
            visible
        }));
    }
    return {
        first,
        last
    };
}
function keyExtractor(item, index) {
    if (typeof item === 'object' && (item === null || item === void 0 ? void 0 : item.key) != null) {
        return item.key;
    }
    if (typeof item === 'object' && (item === null || item === void 0 ? void 0 : item.id) != null) {
        return item.id;
    }
    return String(index);
}


}),
86629: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _jsxruntime = __webpack_require__(70095);
var _clamp = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78600));
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40501));
var _CellRenderMask = __webpack_require__(53685);
var _ChildListCollection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17427));
var _FillRateHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70253));
var _ListMetricsAggregator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53443));
var _StateSafePureComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59220));
var _ViewabilityHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57222));
var _VirtualizedListCellRenderer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51215));
var _VirtualizedListContext = __webpack_require__(89541);
var _VirtualizedListProps = __webpack_require__(12778);
var _VirtualizeUtils = __webpack_require__(72351);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _reactnative = __webpack_require__(22705);
var ON_EDGE_REACHED_EPSILON = 0.001;
var _usedIndexForKey = false;
var _keylessItemComponentName = '';
function getScrollingThreshold(threshold, visibleLength) {
    return threshold * visibleLength / 2;
}
/**
 * Base implementation for the more convenient [`<FlatList>`](https://reactnative.dev/docs/flatlist)
 * and [`<SectionList>`](https://reactnative.dev/docs/sectionlist) components, which are also better
 * documented. In general, this should only really be used if you need more flexibility than
 * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.
 *
 * Virtualization massively improves memory consumption and performance of large lists by
 * maintaining a finite render window of active items and replacing all items outside of the render
 * window with appropriately sized blank space. The window adapts to scrolling behavior, and items
 * are rendered incrementally with low-pri (after any running interactions) if they are far from the
 * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.
 *
 * Some caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` or `id` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 * - As an effort to remove defaultProps, use helper functions when referencing certain props
 *
 */ var VirtualizedList = /*#__PURE__*/ function(StateSafePureComponent) {
    "use strict";
    _inherits._(VirtualizedList, StateSafePureComponent);
    function VirtualizedList(props) {
        _class_call_check._(this, VirtualizedList);
        var _this;
        var _this_props_maintainVisibleContentPosition;
        _this = _call_super._(this, VirtualizedList, [
            props
        ]), // $FlowFixMe[missing-local-annot]
        _this._getScrollMetrics = ()=>{
            return _this._scrollMetrics;
        }, // $FlowFixMe[missing-local-annot]
        _this._getOutermostParentListRef = ()=>{
            if (_this._isNestedWithSameOrientation()) {
                return _this.context.getOutermostParentListRef();
            } else {
                return _this;
            }
        }, _this._registerAsNestedChild = (childList)=>{
            _this._nestedChildLists.add(childList.ref, childList.cellKey);
            if (_this._hasInteracted) {
                childList.ref.recordInteraction();
            }
        }, _this._unregisterAsNestedChild = (childList)=>{
            _this._nestedChildLists.remove(childList.ref);
        }, _this._onUpdateSeparators = (keys, newProps)=>{
            keys.forEach((key)=>{
                var ref = key != null && _this._cellRefs[key];
                ref && ref.updateSeparatorProps(newProps);
            });
        }, _this._getSpacerKey = (isVertical)=>isVertical ? 'height' : 'width', _this._cellRefs = {}, _this._listMetrics = new _ListMetricsAggregator.default(), _this._footerLength = 0, // Used for preventing scrollToIndex from being called multiple times for initialScrollIndex
        _this._hasTriggeredInitialScrollToIndex = false, _this._hasInteracted = false, _this._hasMore = false, _this._hasWarned = {}, _this._headerLength = 0, _this._hiPriInProgress = false // flag to prevent infinite hiPri cell limit update
        , _this._indicesToKeys = new Map(), _this._lastFocusedCellKey = null, _this._nestedChildLists = new _ChildListCollection.default(), _this._offsetFromParentVirtualizedList = 0, _this._pendingViewabilityUpdate = false, _this._prevParentOffset = 0, _this._scrollMetrics = {
            dOffset: 0,
            dt: 10,
            offset: 0,
            timestamp: 0,
            velocity: 0,
            visibleLength: 0,
            zoomScale: 1
        }, _this._scrollRef = null, _this._sentStartForContentLength = 0, _this._sentEndForContentLength = 0, _this._updateCellsToRenderTimeoutID = null, _this._viewabilityTuples = [], _this._captureScrollRef = (ref)=>{
            _this._scrollRef = ref;
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._defaultRenderScrollComponent = (props)=>{
            var onRefresh = props.onRefresh;
            if (_this._isNestedWithSameOrientation()) {
                // Prevent VirtualizedList._onContentSizeChange from being triggered by a bubbling onContentSizeChange event.
                // This could lead to internal inconsistencies within VirtualizedList.
                var onContentSizeChange = props.onContentSizeChange, otherProps = _object_without_properties._(props, [
                    "onContentSizeChange"
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({}, otherProps));
            } else if (onRefresh) {
                (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing ?? 'undefined') + '`');
                return(// $FlowFixMe[prop-missing] Invalid prop usage
                // $FlowFixMe[incompatible-use]
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.ScrollView, _object_spread_props._(_object_spread._({}, props), {
                    refreshControl: props.refreshControl == null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.RefreshControl, {
                        // $FlowFixMe[incompatible-type]
                        refreshing: props.refreshing,
                        onRefresh: onRefresh,
                        progressViewOffset: props.progressViewOffset
                    }) : props.refreshControl
                })));
            } else {
                // $FlowFixMe[prop-missing] Invalid prop usage
                // $FlowFixMe[incompatible-use]
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.ScrollView, _object_spread._({}, props));
            }
        }, _this._onCellLayout = (e, cellKey, cellIndex)=>{
            var layoutHasChanged = _this._listMetrics.notifyCellLayout({
                cellIndex,
                cellKey,
                layout: e.nativeEvent.layout,
                orientation: _this._orientation()
            });
            if (layoutHasChanged) {
                _this._scheduleCellsToRenderUpdate();
            }
            _this._triggerRemeasureForChildListsInCell(cellKey);
            _this._computeBlankness();
            _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        }, _this._onCellFocusCapture = (cellKey)=>{
            _this._lastFocusedCellKey = cellKey;
            _this._updateCellsToRender();
        }, _this._onCellUnmount = (cellKey)=>{
            delete _this._cellRefs[cellKey];
            _this._listMetrics.notifyCellUnmounted(cellKey);
        }, _this._onLayout = (e)=>{
            if (_this._isNestedWithSameOrientation()) {
                // Need to adjust our scroll metrics to be relative to our containing
                // VirtualizedList before we can make claims about list item viewability
                _this.measureLayoutRelativeToContainingList();
            } else {
                _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
            }
            _this.props.onLayout && _this.props.onLayout(e);
            _this._scheduleCellsToRenderUpdate();
            _this._maybeCallOnEdgeReached();
        }, _this._onLayoutEmpty = (e)=>{
            _this.props.onLayout && _this.props.onLayout(e);
        }, _this._onLayoutFooter = (e)=>{
            _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
            _this._footerLength = _this._selectLength(e.nativeEvent.layout);
        }, _this._onLayoutHeader = (e)=>{
            _this._headerLength = _this._selectLength(e.nativeEvent.layout);
        }, _this._onContentSizeChange = (width, height)=>{
            _this._listMetrics.notifyListContentLayout({
                layout: {
                    width,
                    height
                },
                orientation: _this._orientation()
            });
            _this._maybeScrollToInitialScrollIndex(width, height);
            if (_this.props.onContentSizeChange) {
                _this.props.onContentSizeChange(width, height);
            }
            _this._scheduleCellsToRenderUpdate();
            _this._maybeCallOnEdgeReached();
        }, /* Translates metrics from a scroll event in a parent VirtualizedList into
   * coordinates relative to the child list.
   */ _this._convertParentScrollMetrics = (metrics)=>{
            // Offset of the top of the nested list relative to the top of its parent's viewport
            var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
            // Child's visible length is the same as its parent's
            var visibleLength = metrics.visibleLength;
            var dOffset = offset - _this._scrollMetrics.offset;
            var contentLength = _this._listMetrics.getContentLength();
            return {
                visibleLength,
                contentLength,
                offset,
                dOffset
            };
        }, _this._onScroll = (e)=>{
            _this._nestedChildLists.forEach((childList)=>{
                childList._onScroll(e);
            });
            if (_this.props.onScroll) {
                _this.props.onScroll(e);
            }
            var timestamp = e.timeStamp;
            var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
            var contentLength = _this._selectLength(e.nativeEvent.contentSize);
            var offset = _this._offsetFromScrollEvent(e);
            var dOffset = offset - _this._scrollMetrics.offset;
            if (_this._isNestedWithSameOrientation()) {
                if (_this._listMetrics.getContentLength() === 0) {
                    // Ignore scroll events until onLayout has been called and we
                    // know our offset from our offset from our parent
                    return;
                }
                var ref;
                ref = _this._convertParentScrollMetrics({
                    visibleLength,
                    offset
                }), visibleLength = ref.visibleLength, contentLength = ref.contentLength, offset = ref.offset, dOffset = ref.dOffset, ref;
            }
            var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
            var velocity = dOffset / dt;
            if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
                (0, _infoLog.default)('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
                    dt,
                    prevDt: _this._scrollMetrics.dt,
                    contentLength
                });
                _this._hasWarned.perf = true;
            }
            // For invalid negative values (w/ RTL), set this to 1.
            var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
            _this._scrollMetrics = {
                dt,
                dOffset,
                offset,
                timestamp,
                velocity,
                visibleLength,
                zoomScale
            };
            if (_this.state.pendingScrollUpdateCount > 0) {
                _this.setState((state)=>({
                        pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
                    }));
            }
            _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
            if (!_this.props) {
                return;
            }
            _this._maybeCallOnEdgeReached();
            if (velocity !== 0) {
                _this._fillRateHelper.activate();
            }
            _this._computeBlankness();
            _this._scheduleCellsToRenderUpdate();
        }, _this._onScrollBeginDrag = (e)=>{
            _this._nestedChildLists.forEach((childList)=>{
                childList._onScrollBeginDrag(e);
            });
            _this._viewabilityTuples.forEach((tuple)=>{
                tuple.viewabilityHelper.recordInteraction();
            });
            _this._hasInteracted = true;
            _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        }, _this._onScrollEndDrag = (e)=>{
            _this._nestedChildLists.forEach((childList)=>{
                childList._onScrollEndDrag(e);
            });
            var velocity = e.nativeEvent.velocity;
            if (velocity) {
                _this._scrollMetrics.velocity = _this._selectOffset(velocity);
            }
            _this._computeBlankness();
            _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        }, _this._onMomentumScrollBegin = (e)=>{
            _this._nestedChildLists.forEach((childList)=>{
                childList._onMomentumScrollBegin(e);
            });
            _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
        }, _this._onMomentumScrollEnd = (e)=>{
            _this._nestedChildLists.forEach((childList)=>{
                childList._onMomentumScrollEnd(e);
            });
            _this._scrollMetrics.velocity = 0;
            _this._computeBlankness();
            _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        }, _this._updateCellsToRender = ()=>{
            _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
            _this.setState((state, props)=>{
                var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
                var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
                if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
                    return null;
                }
                return {
                    cellsAroundViewport,
                    renderMask
                };
            });
        }, _this._createViewToken = (index, isViewable, props)=>{
            var data = props.data, getItem = props.getItem;
            var item = getItem(data, index);
            return {
                index,
                item,
                key: VirtualizedList._keyExtractor(item, index, props),
                isViewable
            };
        }, _this._getNonViewportRenderRegions = (props)=>{
            // Keep a viewport's worth of content around the last focused cell to allow
            // random navigation around it without any blanking. E.g. tabbing from one
            // focused item out of viewport to another.
            if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
                return [];
            }
            var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
            var focusedCellIndex = lastFocusedCellRenderer.props.index;
            var itemCount = props.getItemCount(props.data);
            // The last cell we rendered may be at a new index. Bail if we don't know
            // where it is.
            if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
                return [];
            }
            var first = focusedCellIndex;
            var heightOfCellsBeforeFocused = 0;
            for(var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--){
                first--;
                heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
            }
            var last = focusedCellIndex;
            var heightOfCellsAfterFocused = 0;
            for(var i1 = last + 1; i1 < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; i1++){
                last++;
                heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(i1, props).length;
            }
            return [
                {
                    first,
                    last
                }
            ];
        };
        _this._checkProps(props);
        _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
        if (_this.props.viewabilityConfigCallbackPairs) {
            _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map((pair)=>({
                    viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
                    onViewableItemsChanged: pair.onViewableItemsChanged
                }));
        } else {
            var _this_props = _this.props, onViewableItemsChanged = _this_props.onViewableItemsChanged, viewabilityConfig = _this_props.viewabilityConfig;
            if (onViewableItemsChanged) {
                _this._viewabilityTuples.push({
                    viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
                    onViewableItemsChanged: onViewableItemsChanged
                });
            }
        }
        var initialRenderRegion = VirtualizedList._initialRenderRegion(props);
        var minIndexForVisible = ((_this_props_maintainVisibleContentPosition = _this.props.maintainVisibleContentPosition) === null || _this_props_maintainVisibleContentPosition === void 0 ? void 0 : _this_props_maintainVisibleContentPosition.minIndexForVisible) ?? 0;
        _this.state = {
            cellsAroundViewport: initialRenderRegion,
            renderMask: VirtualizedList._createRenderMask(props, initialRenderRegion),
            firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
            // When we have a non-zero initialScrollIndex, we will receive a
            // scroll event later so this will prevent the window from updating
            // until we get a valid offset.
            pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
        };
        return _this;
    }
    _create_class._(VirtualizedList, [
        {
            // scrollToEnd may be janky without getItemLayout prop
            key: "scrollToEnd",
            value: function scrollToEnd(params) {
                var animated = params ? params.animated : true;
                var veryLast = this.props.getItemCount(this.props.data) - 1;
                if (veryLast < 0) {
                    return;
                }
                var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
                var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
                // TODO: consider using `ref.scrollToEnd` directly
                this.scrollToOffset({
                    animated,
                    offset
                });
            }
        },
        {
            // scrollToIndex may be janky without getItemLayout prop
            key: "scrollToIndex",
            value: function scrollToIndex(params) {
                var _this_props = this.props, data = _this_props.data, getItemCount = _this_props.getItemCount, getItemLayout = _this_props.getItemLayout, onScrollToIndexFailed = _this_props.onScrollToIndexFailed;
                var animated = params.animated, index = params.index, viewOffset = params.viewOffset, viewPosition = params.viewPosition;
                (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
                (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
                (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
                if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
                    (0, _invariant.default)(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
                    onScrollToIndexFailed({
                        averageItemLength: this._listMetrics.getAverageCellLength(),
                        highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
                        index
                    });
                    return;
                }
                var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
                var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
                this.scrollToOffset({
                    offset,
                    animated
                });
            }
        },
        {
            // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -
            // use scrollToIndex instead if possible.
            key: "scrollToItem",
            value: function scrollToItem(params) {
                var item = params.item;
                var _this_props = this.props, data = _this_props.data, getItem = _this_props.getItem, getItemCount = _this_props.getItemCount;
                var itemCount = getItemCount(data);
                for(var index = 0; index < itemCount; index++){
                    if (getItem(data, index) === item) {
                        this.scrollToIndex(_object_spread_props._(_object_spread._({}, params), {
                            index
                        }));
                        break;
                    }
                }
            }
        },
        {
            /**
   * Scroll to a specific content pixel offset in the list.
   *
   * Param `offset` expects the offset to scroll to.
   * In case of `horizontal` is true, the offset is the x-value,
   * in any other case the offset is the y-value.
   *
   * Param `animated` (`true` by default) defines whether the list
   * should do an animation while scrolling.
   */ key: "scrollToOffset",
            value: function scrollToOffset(params) {
                var animated = params.animated, offset = params.offset;
                var scrollRef = this._scrollRef;
                if (scrollRef == null) {
                    return;
                }
                if (scrollRef.scrollTo == null) {
                    console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
                    return;
                }
                var _this__orientation = this._orientation(), horizontal = _this__orientation.horizontal, rtl = _this__orientation.rtl;
                if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
                    console.warn('scrollToOffset may not be called in RTL before content is laid out');
                    return;
                }
                // $FlowFixMe[incompatible-call]
                scrollRef.scrollTo(_object_spread._({
                    animated
                }, this._scrollToParamsFromOffset(offset)));
            }
        },
        {
            key: "_scrollToParamsFromOffset",
            value: function _scrollToParamsFromOffset(offset) {
                var _this__orientation = this._orientation(), horizontal = _this__orientation.horizontal, rtl = _this__orientation.rtl;
                if (horizontal && rtl) {
                    // Add the visible length of the scrollview so that the offset is right-aligned
                    var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
                    return horizontal ? {
                        x: cartOffset
                    } : {
                        y: cartOffset
                    };
                } else {
                    return horizontal ? {
                        x: offset
                    } : {
                        y: offset
                    };
                }
            }
        },
        {
            key: "recordInteraction",
            value: function recordInteraction() {
                this._nestedChildLists.forEach((childList)=>{
                    childList.recordInteraction();
                });
                this._viewabilityTuples.forEach((t)=>{
                    t.viewabilityHelper.recordInteraction();
                });
                this._updateViewableItems(this.props, this.state.cellsAroundViewport);
            }
        },
        {
            key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
                if (this._scrollRef == null) {
                    return;
                }
                this._scrollRef.flashScrollIndicators();
            }
        },
        {
            /**
   * Provides a handle to the underlying scroll responder.
   * Note that `this._scrollRef` might not be a `ScrollView`, so we
   * need to check that it responds to `getScrollResponder` before calling it.
   */ key: "getScrollResponder",
            value: function getScrollResponder() {
                if (this._scrollRef && this._scrollRef.getScrollResponder) {
                    return this._scrollRef.getScrollResponder();
                }
            }
        },
        {
            key: "getScrollableNode",
            value: function getScrollableNode() {
                if (this._scrollRef && this._scrollRef.getScrollableNode) {
                    return this._scrollRef.getScrollableNode();
                } else {
                    return (0, _reactnative.findNodeHandle)(this._scrollRef);
                }
            }
        },
        {
            key: "getScrollRef",
            value: function getScrollRef() {
                // $FlowFixMe[prop-missing]
                if (this._scrollRef && this._scrollRef.getScrollRef) {
                    // $FlowFixMe[not-a-function]
                    return this._scrollRef.getScrollRef();
                } else {
                    return this._scrollRef;
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                if (this._scrollRef) {
                    this._scrollRef.setNativeProps(props);
                }
            }
        },
        {
            key: "_getCellKey",
            value: function _getCellKey() {
                var _this_context;
                return ((_this_context = this.context) === null || _this_context === void 0 ? void 0 : _this_context.cellKey) || 'rootList';
            }
        },
        {
            key: "hasMore",
            value: function hasMore() {
                return this._hasMore;
            }
        },
        {
            key: "_checkProps",
            value: function _checkProps(props) {
                var onScroll = props.onScroll, windowSize = props.windowSize, getItemCount = props.getItemCount, data = props.data, initialScrollIndex = props.initialScrollIndex;
                (0, _invariant.default)(// $FlowFixMe[prop-missing]
                !onScroll || !onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
                (0, _invariant.default)((0, _VirtualizedListProps.windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
                (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
                var itemCount = getItemCount(data);
                if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
                    console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
                    this._hasWarned.initialScrollIndex = true;
                }
                if (false) { var flatStyles }
            }
        },
        {
            key: "_adjustCellsAroundViewport",
            value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
                var data = props.data, getItemCount = props.getItemCount;
                var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
                var _this__scrollMetrics = this._scrollMetrics, offset = _this__scrollMetrics.offset, visibleLength = _this__scrollMetrics.visibleLength;
                var contentLength = this._listMetrics.getContentLength();
                var distanceFromEnd = contentLength - visibleLength - offset;
                // Wait until the scroll view metrics have been set up. And until then,
                // we will trust the initialNumToRender suggestion
                if (visibleLength <= 0 || contentLength <= 0) {
                    return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
                }
                var newCellsAroundViewport;
                if (props.disableVirtualization) {
                    var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
                    newCellsAroundViewport = {
                        first: 0,
                        last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
                    };
                } else {
                    // If we have a pending scroll update, we should not adjust the render window as it
                    // might override the correct window.
                    if (pendingScrollUpdateCount > 0) {
                        return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
                    }
                    newCellsAroundViewport = (0, _VirtualizeUtils.computeWindowedRenderLimits)(props, (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _VirtualizedListProps.windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
                    (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
                }
                if (this._nestedChildLists.size() > 0) {
                    // If some cell in the new state has a child list in it, we should only render
                    // up through that item, so that we give that list a chance to render.
                    // Otherwise there's churn from multiple child lists mounting and un-mounting
                    // their items.
                    // Will this prevent rendering if the nested list doesn't realize the end?
                    var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
                    newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;
                }
                return newCellsAroundViewport;
            }
        },
        {
            key: "_findFirstChildWithMore",
            value: function _findFirstChildWithMore(first, last) {
                for(var ii = first; ii <= last; ii++){
                    var cellKeyForIndex = this._indicesToKeys.get(ii);
                    if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, (childList)=>childList.hasMore())) {
                        return ii;
                    }
                }
                return null;
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (this._isNestedWithSameOrientation()) {
                    this.context.registerAsNestedChild({
                        ref: this,
                        cellKey: this.context.cellKey
                    });
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this._isNestedWithSameOrientation()) {
                    this.context.unregisterAsNestedChild({
                        ref: this
                    });
                }
                clearTimeout(this._updateCellsToRenderTimeoutID);
                this._viewabilityTuples.forEach((tuple)=>{
                    tuple.viewabilityHelper.dispose();
                });
                this._fillRateHelper.deactivateAndFlush();
            }
        },
        {
            key: "_pushCells",
            value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
                var _this, _loop = function(ii) {
                    var item = getItem(data, ii);
                    var key = VirtualizedList._keyExtractor(item, ii, _this.props);
                    _this._indicesToKeys.set(ii, key);
                    if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                        stickyHeaderIndices.push(cells.length);
                    }
                    var shouldListenForLayout = getItemLayout == null || debug || _this._fillRateHelper.enabled();
                    cells.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListCellRenderer.default, _object_spread._({
                        CellRendererComponent: CellRendererComponent,
                        ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
                        ListItemComponent: ListItemComponent,
                        cellKey: key,
                        horizontal: horizontal,
                        index: ii,
                        inversionStyle: inversionStyle,
                        item: item,
                        prevCellKey: prevCellKey,
                        onUpdateSeparators: _this._onUpdateSeparators,
                        onCellFocusCapture: _this._onCellFocusCapture,
                        onUnmount: _this._onCellUnmount,
                        ref: (ref)=>{
                            _this._cellRefs[key] = ref;
                        },
                        renderItem: renderItem
                    }, shouldListenForLayout && {
                        onCellLayout: _this._onCellLayout
                    }), key));
                    prevCellKey = key;
                };
                var _this_props = this.props, CellRendererComponent = _this_props.CellRendererComponent, ItemSeparatorComponent = _this_props.ItemSeparatorComponent, ListHeaderComponent = _this_props.ListHeaderComponent, ListItemComponent = _this_props.ListItemComponent, data = _this_props.data, debug = _this_props.debug, getItem = _this_props.getItem, getItemCount = _this_props.getItemCount, getItemLayout = _this_props.getItemLayout, horizontal = _this_props.horizontal, renderItem = _this_props.renderItem;
                var stickyOffset = ListHeaderComponent ? 1 : 0;
                var end = getItemCount(data) - 1;
                var prevCellKey;
                last = Math.min(end, last);
                for(var ii = first; ii <= last; ii++)_this = this, _loop(ii);
            }
        },
        {
            key: "_isNestedWithSameOrientation",
            value: function _isNestedWithSameOrientation() {
                var nestedContext = this.context;
                return !!(nestedContext && !!nestedContext.horizontal === (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal));
            }
        },
        {
            key: "render",
            value: function render() {
                this._checkProps(this.props);
                var _this_props = this.props, ListEmptyComponent = _this_props.ListEmptyComponent, ListFooterComponent = _this_props.ListFooterComponent, ListHeaderComponent = _this_props.ListHeaderComponent;
                var _this_props1 = this.props, data = _this_props1.data, horizontal = _this_props1.horizontal;
                var inversionStyle = this.props.inverted ? (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
                var cells = [];
                var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
                var stickyHeaderIndices = [];
                // 1. Add cell for ListHeaderComponent
                if (ListHeaderComponent) {
                    if (stickyIndicesFromProps.has(0)) {
                        stickyHeaderIndices.push(0);
                    }
                    var element = /*#__PURE__*/ _react.isValidElement(ListHeaderComponent) ? ListHeaderComponent : // $FlowFixMe[not-a-component]
                    // $FlowFixMe[incompatible-type-arg]
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ListHeaderComponent, {});
                    cells.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
                        cellKey: this._getCellKey() + '-header',
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            // We expect that header component will be a single native view so make it
                            // not collapsable to avoid this view being flattened and make this assumption
                            // no longer true.
                            collapsable: false,
                            onLayout: this._onLayoutHeader,
                            style: _reactnative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
                            children: // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
                            element
                        })
                    }, "$header"));
                }
                // 2a. Add a cell for ListEmptyComponent if applicable
                var itemCount = this.props.getItemCount(data);
                if (itemCount === 0 && ListEmptyComponent) {
                    var element1 = /*#__PURE__*/ _react.isValidElement(ListEmptyComponent) ? ListEmptyComponent : // $FlowFixMe[not-a-component]
                    // $FlowFixMe[incompatible-type-arg]
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ListEmptyComponent, {});
                    cells.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
                        cellKey: this._getCellKey() + '-empty',
                        children: /*#__PURE__*/ _react.cloneElement(element1, {
                            onLayout: (event)=>{
                                this._onLayoutEmpty(event);
                                // $FlowFixMe[prop-missing] React.Element internal inspection
                                if (element1.props.onLayout) {
                                    element1.props.onLayout(event);
                                }
                            },
                            // $FlowFixMe[prop-missing] React.Element internal inspection
                            style: _reactnative.StyleSheet.compose(inversionStyle, element1.props.style)
                        })
                    }, "$empty"));
                }
                // 2b. Add cells and spacers for each item
                if (itemCount > 0) {
                    _usedIndexForKey = false;
                    _keylessItemComponentName = '';
                    var spacerKey = this._getSpacerKey(!horizontal);
                    var renderRegions = this.state.renderMask.enumerateRegions();
                    var lastRegion = renderRegions[renderRegions.length - 1];
                    var lastSpacer = (lastRegion === null || lastRegion === void 0 ? void 0 : lastRegion.isSpacer) ? lastRegion : null;
                    for (var section of renderRegions){
                        if (section.isSpacer) {
                            // Legacy behavior is to avoid spacers when virtualization is
                            // disabled (including head spacers on initial render).
                            if (this.props.disableVirtualization) {
                                continue;
                            }
                            // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to
                            // prevent the user for hyperscrolling into un-measured area because otherwise content will
                            // likely jump around as it renders in above the viewport.
                            var isLastSpacer = section === lastSpacer;
                            var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
                            var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
                            var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
                            var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
                            var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
                            cells.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                // $FlowFixMe[incompatible-type]
                                style: {
                                    [spacerKey]: spacerSize
                                }
                            }, `$spacer-${section.first}`));
                        } else {
                            this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
                        }
                    }
                    if (!this._hasWarned.keys && _usedIndexForKey) {
                        console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
                        this._hasWarned.keys = true;
                    }
                }
                // 3. Add cell for ListFooterComponent
                if (ListFooterComponent) {
                    var element2 = /*#__PURE__*/ _react.isValidElement(ListFooterComponent) ? ListFooterComponent : // $FlowFixMe[not-a-component]
                    // $FlowFixMe[incompatible-type-arg]
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ListFooterComponent, {});
                    cells.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
                        cellKey: this._getFooterCellKey(),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            onLayout: this._onLayoutFooter,
                            style: _reactnative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
                            children: // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
                            element2
                        })
                    }, "$footer"));
                }
                // 4. Render the ScrollView
                var scrollProps = _object_spread_props._(_object_spread._({}, this.props), {
                    onContentSizeChange: this._onContentSizeChange,
                    onLayout: this._onLayout,
                    onScroll: this._onScroll,
                    onScrollBeginDrag: this._onScrollBeginDrag,
                    onScrollEndDrag: this._onScrollEndDrag,
                    onMomentumScrollBegin: this._onMomentumScrollBegin,
                    onMomentumScrollEnd: this._onMomentumScrollEnd,
                    // iOS/macOS requires a non-zero scrollEventThrottle to fire more than a
                    // single notification while scrolling. This will otherwise no-op.
                    scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,
                    invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
                    stickyHeaderIndices,
                    style: inversionStyle ? [
                        inversionStyle,
                        this.props.style
                    ] : this.props.style,
                    isInvertedVirtualizedList: this.props.inverted,
                    maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? _object_spread_props._(_object_spread._({}, this.props.maintainVisibleContentPosition), {
                        // Adjust index to account for ListHeaderComponent.
                        minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
                    }) : undefined
                });
                this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
                var innerRet = /*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
                    value: {
                        cellKey: null,
                        getScrollMetrics: this._getScrollMetrics,
                        horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
                        getOutermostParentListRef: this._getOutermostParentListRef,
                        registerAsNestedChild: this._registerAsNestedChild,
                        unregisterAsNestedChild: this._unregisterAsNestedChild
                    },
                    children: /*#__PURE__*/ _react.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
                        ref: this._captureScrollRef
                    }, cells)
                });
                var ret = innerRet;
                if (false) {}
                if (this.props.debug) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: styles.debug,
                        children: [
                            ret,
                            this._renderDebugOverlay()
                        ]
                    });
                } else {
                    return ret;
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var _this_props = this.props, data = _this_props.data, extraData = _this_props.extraData, getItemLayout = _this_props.getItemLayout;
                if (data !== prevProps.data || extraData !== prevProps.extraData) {
                    // clear the viewableIndices cache to also trigger
                    // the onViewableItemsChanged callback with the new data
                    this._viewabilityTuples.forEach((tuple)=>{
                        tuple.viewabilityHelper.resetViewableIndices();
                    });
                }
                // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen
                // once per fiber update. The `_scheduleCellsToRenderUpdate` will set it to true
                // if a hiPri update needs to perform. If `componentDidUpdate` is triggered with
                // `this._hiPriInProgress=true`, means it's triggered by the hiPri update. The
                // `_scheduleCellsToRenderUpdate` will check this condition and not perform
                // another hiPri update.
                var hiPriInProgress = this._hiPriInProgress;
                this._scheduleCellsToRenderUpdate();
                // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`
                // is triggered with `this._hiPriInProgress = true`
                if (hiPriInProgress) {
                    this._hiPriInProgress = false;
                }
                // We only call `onEndReached` after we render the last cell, but when
                // getItemLayout is present, we can scroll past the last rendered cell, and
                // never trigger a new layout or bounds change, so we need to check again
                // after rendering more cells.
                if (getItemLayout != null) {
                    this._maybeCallOnEdgeReached();
                }
            }
        },
        {
            key: "_computeBlankness",
            value: function _computeBlankness() {
                this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
            }
        },
        {
            key: "_triggerRemeasureForChildListsInCell",
            value: function _triggerRemeasureForChildListsInCell(cellKey) {
                this._nestedChildLists.forEachInCell(cellKey, (childList)=>{
                    childList.measureLayoutRelativeToContainingList();
                });
            }
        },
        {
            key: "measureLayoutRelativeToContainingList",
            value: function measureLayoutRelativeToContainingList() {
                // TODO (T35574538): findNodeHandle sometimes crashes with "Unable to find
                // node on an unmounted component" during scrolling
                try {
                    if (!this._scrollRef) {
                        return;
                    }
                    // We are assuming that getOutermostParentListRef().getScrollRef()
                    // is a non-null reference to a ScrollView
                    this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), (x, y, width, height)=>{
                        this._offsetFromParentVirtualizedList = this._selectOffset({
                            x,
                            y
                        });
                        this._listMetrics.notifyListContentLayout({
                            layout: {
                                width,
                                height
                            },
                            orientation: this._orientation()
                        });
                        var scrollMetrics = this._convertParentScrollMetrics(this.context.getScrollMetrics());
                        var metricsChanged = this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || this._scrollMetrics.offset !== scrollMetrics.offset;
                        if (metricsChanged) {
                            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
                            this._scrollMetrics.offset = scrollMetrics.offset;
                            // If metrics of the scrollView changed, then we triggered remeasure for child list
                            // to ensure VirtualizedList has the right information.
                            this._nestedChildLists.forEach((childList)=>{
                                childList.measureLayoutRelativeToContainingList();
                            });
                        }
                    }, (error)=>{
                        console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
                    });
                } catch (error) {
                    console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
                }
            }
        },
        {
            key: "_getFooterCellKey",
            value: function _getFooterCellKey() {
                return this._getCellKey() + '-footer';
            }
        },
        {
            // $FlowFixMe[missing-local-annot]
            key: "_renderDebugOverlay",
            value: function _renderDebugOverlay() {
                var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
                var framesInLayout = [];
                var itemCount = this.props.getItemCount(this.props.data);
                for(var ii = 0; ii < itemCount; ii++){
                    var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
                    if (frame.isMounted) {
                        framesInLayout.push(frame);
                    }
                }
                var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
                var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
                var windowLen = frameLast.offset + frameLast.length - windowTop;
                var visTop = this._scrollMetrics.offset;
                var visLen = this._scrollMetrics.visibleLength;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                    style: [
                        styles.debugOverlayBase,
                        styles.debugOverlay
                    ],
                    children: [
                        framesInLayout.map((f, ii)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                style: [
                                    styles.debugOverlayBase,
                                    styles.debugOverlayFrame,
                                    {
                                        top: f.offset * normalize,
                                        height: f.length * normalize
                                    }
                                ]
                            }, 'f' + ii)),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: [
                                styles.debugOverlayBase,
                                styles.debugOverlayFrameLast,
                                {
                                    top: windowTop * normalize,
                                    height: windowLen * normalize
                                }
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: [
                                styles.debugOverlayBase,
                                styles.debugOverlayFrameVis,
                                {
                                    top: visTop * normalize,
                                    height: visLen * normalize
                                }
                            ]
                        })
                    ]
                });
            }
        },
        {
            key: "_selectLength",
            value: function _selectLength(metrics) {
                return !(0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
            }
        },
        {
            key: "_selectOffset",
            value: function _selectOffset(ref) {
                var x = ref.x, y = ref.y;
                return this._orientation().horizontal ? x : y;
            }
        },
        {
            key: "_orientation",
            value: function _orientation() {
                return {
                    horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
                    rtl: _reactnative.I18nManager.isRTL
                };
            }
        },
        {
            key: "_maybeCallOnEdgeReached",
            value: function _maybeCallOnEdgeReached() {
                var _this_props = this.props, data = _this_props.data, getItemCount = _this_props.getItemCount, onStartReached = _this_props.onStartReached, onStartReachedThreshold = _this_props.onStartReachedThreshold, onEndReached = _this_props.onEndReached, onEndReachedThreshold = _this_props.onEndReachedThreshold;
                // Wait until we have real metrics
                if (!this._listMetrics.hasContentLength() || this._scrollMetrics.visibleLength === 0) {
                    return;
                }
                // If we have any pending scroll updates it means that the scroll metrics
                // are out of date and we should not call any of the edge reached callbacks.
                if (this.state.pendingScrollUpdateCount > 0) {
                    return;
                }
                var _this__scrollMetrics = this._scrollMetrics, visibleLength = _this__scrollMetrics.visibleLength, offset = _this__scrollMetrics.offset;
                var distanceFromStart = offset;
                var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;
                // Especially when oERT is zero it's necessary to 'floor' very small distance values to be 0
                // since debouncing causes us to not fire this event for every single "pixel" we scroll and can thus
                // be at the edge of the list with a distance approximating 0 but not quite there.
                if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
                    distanceFromStart = 0;
                }
                if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
                    distanceFromEnd = 0;
                }
                // TODO: T121172172 Look into why we're "defaulting" to a threshold of 2px
                // when oERT is not present (different from 2 viewports used elsewhere)
                var DEFAULT_THRESHOLD_PX = 2;
                var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
                var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
                var isWithinStartThreshold = distanceFromStart <= startThreshold;
                var isWithinEndThreshold = distanceFromEnd <= endThreshold;
                // First check if the user just scrolled within the end threshold
                // and call onEndReached only once for a given content length,
                // and only if onStartReached is not being executed
                if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
                    this._sentEndForContentLength = this._listMetrics.getContentLength();
                    onEndReached({
                        distanceFromEnd
                    });
                }
                // Next check if the user just scrolled within the start threshold
                // and call onStartReached only once for a given content length,
                // and only if onEndReached is not being executed
                if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
                    this._sentStartForContentLength = this._listMetrics.getContentLength();
                    onStartReached({
                        distanceFromStart
                    });
                }
                // If the user scrolls away from the start or end and back again,
                // cause onStartReached or onEndReached to be triggered again
                if (!isWithinStartThreshold) {
                    this._sentStartForContentLength = 0;
                }
                if (!isWithinEndThreshold) {
                    this._sentEndForContentLength = 0;
                }
            }
        },
        {
            /**
   * Scroll to a specified `initialScrollIndex` prop after the ScrollView
   * content has been laid out, if it is still valid. Only a single scroll is
   * triggered throughout the lifetime of the list.
   */ key: "_maybeScrollToInitialScrollIndex",
            value: function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
                if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
                    if (this.props.contentOffset == null) {
                        if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
                            this.scrollToIndex({
                                animated: false,
                                index: (0, _nullthrows.default)(this.props.initialScrollIndex)
                            });
                        } else {
                            this.scrollToEnd({
                                animated: false
                            });
                        }
                    }
                    this._hasTriggeredInitialScrollToIndex = true;
                }
            }
        },
        {
            key: "unstable_onScroll",
            value: function unstable_onScroll(e) {
                this._onScroll(e);
            }
        },
        {
            key: "_offsetFromScrollEvent",
            value: function _offsetFromScrollEvent(e) {
                var _e_nativeEvent = e.nativeEvent, contentOffset = _e_nativeEvent.contentOffset, contentSize = _e_nativeEvent.contentSize, layoutMeasurement = _e_nativeEvent.layoutMeasurement;
                var _this__orientation = this._orientation(), horizontal = _this__orientation.horizontal, rtl = _this__orientation.rtl;
                if (horizontal && rtl) {
                    return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
                } else {
                    return this._selectOffset(contentOffset);
                }
            }
        },
        {
            key: "_scheduleCellsToRenderUpdate",
            value: function _scheduleCellsToRenderUpdate() {
                // Only trigger high-priority updates if we've actually rendered cells,
                // and with that size estimate, accurately compute how many cells we should render.
                // Otherwise, it would just render as many cells as it can (of zero dimension),
                // each time through attempting to render more (limited by maxToRenderPerBatch),
                // starving the renderer from actually laying out the objects and computing _averageCellLength.
                // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate
                // We shouldn't do another hipri cellToRenderUpdate
                if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
                    this._hiPriInProgress = true;
                    // Don't worry about interactions when scrolling quickly; focus on filling content as fast
                    // as possible.
                    if (this._updateCellsToRenderTimeoutID != null) {
                        clearTimeout(this._updateCellsToRenderTimeoutID);
                        this._updateCellsToRenderTimeoutID = null;
                    }
                    this._updateCellsToRender();
                    return;
                } else {
                    if (this._updateCellsToRenderTimeoutID == null) {
                        this._updateCellsToRenderTimeoutID = setTimeout(()=>{
                            this._updateCellsToRenderTimeoutID = null;
                            this._updateCellsToRender();
                        }, this.props.updateCellsBatchingPeriod ?? 50);
                    }
                }
            }
        },
        {
            key: "_shouldRenderWithPriority",
            value: function _shouldRenderWithPriority() {
                var _this_state_cellsAroundViewport = this.state.cellsAroundViewport, first = _this_state_cellsAroundViewport.first, last = _this_state_cellsAroundViewport.last;
                var _this__scrollMetrics = this._scrollMetrics, offset = _this__scrollMetrics.offset, visibleLength = _this__scrollMetrics.visibleLength, velocity = _this__scrollMetrics.velocity;
                var itemCount = this.props.getItemCount(this.props.data);
                var hiPri = false;
                var onStartReachedThreshold = (0, _VirtualizedListProps.onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
                var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
                // Mark as high priority if we're close to the start of the first item
                // But only if there are items before the first rendered item
                if (first > 0) {
                    var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
                    hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
                }
                // Mark as high priority if we're close to the end of the last item
                // But only if there are items after the last rendered item
                if (!hiPri && last >= 0 && last < itemCount - 1) {
                    var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
                    hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
                }
                return hiPri;
            }
        },
        {
            key: "unstable_onScrollBeginDrag",
            value: function unstable_onScrollBeginDrag(e) {
                this._onScrollBeginDrag(e);
            }
        },
        {
            key: "unstable_onScrollEndDrag",
            value: function unstable_onScrollEndDrag(e) {
                this._onScrollEndDrag(e);
            }
        },
        {
            key: "unstable_onMomentumScrollBegin",
            value: function unstable_onMomentumScrollBegin(e) {
                this._onMomentumScrollBegin(e);
            }
        },
        {
            key: "unstable_onMomentumScrollEnd",
            value: function unstable_onMomentumScrollEnd(e) {
                this._onMomentumScrollEnd(e);
            }
        },
        {
            key: "__getListMetrics",
            value: function __getListMetrics() {
                return this._listMetrics;
            }
        },
        {
            key: "_updateViewableItems",
            value: function _updateViewableItems(props, cellsAroundViewport) {
                // If we have any pending scroll updates it means that the scroll metrics
                // are out of date and we should not call any of the visibility callbacks.
                if (this.state.pendingScrollUpdateCount > 0) {
                    return;
                }
                this._viewabilityTuples.forEach((tuple)=>{
                    tuple.viewabilityHelper.onUpdate(props, this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._listMetrics, this._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
                });
            }
        }
    ], [
        {
            key: "_findItemIndexWithKey",
            value: function _findItemIndexWithKey(props, key, hint) {
                var itemCount = props.getItemCount(props.data);
                if (hint != null && hint >= 0 && hint < itemCount) {
                    var curKey = VirtualizedList._getItemKey(props, hint);
                    if (curKey === key) {
                        return hint;
                    }
                }
                for(var ii = 0; ii < itemCount; ii++){
                    var curKey1 = VirtualizedList._getItemKey(props, ii);
                    if (curKey1 === key) {
                        return ii;
                    }
                }
                return null;
            }
        },
        {
            key: "_getItemKey",
            value: function _getItemKey(props, index) {
                var item = props.getItem(props.data, index);
                return VirtualizedList._keyExtractor(item, index, props);
            }
        },
        {
            key: "_createRenderMask",
            value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
                var itemCount = props.getItemCount(props.data);
                (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
                var renderMask = new _CellRenderMask.CellRenderMask(itemCount);
                if (itemCount > 0) {
                    var allRegions = [
                        cellsAroundViewport
                    ].concat(_to_consumable_array._(additionalRegions ?? []));
                    for (var region of allRegions){
                        renderMask.addCells(region);
                    }
                    // The initially rendered cells are retained as part of the
                    // "scroll-to-top" optimization
                    if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
                        var initialRegion = VirtualizedList._initialRenderRegion(props);
                        renderMask.addCells(initialRegion);
                    }
                    // The layout coordinates of sticker headers may be off-screen while the
                    // actual header is on-screen. Keep the most recent before the viewport
                    // rendered, even if its layout coordinates are not in viewport.
                    var stickyIndicesSet = new Set(props.stickyHeaderIndices);
                    VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
                }
                return renderMask;
            }
        },
        {
            key: "_initialRenderRegion",
            value: function _initialRenderRegion(props) {
                var itemCount = props.getItemCount(props.data);
                var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)));
                var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _VirtualizedListProps.initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
                return {
                    first: firstCellIndex,
                    last: lastCellIndex
                };
            }
        },
        {
            key: "_ensureClosestStickyHeader",
            value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
                var stickyOffset = props.ListHeaderComponent ? 1 : 0;
                for(var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--){
                    if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
                        renderMask.addCells({
                            first: itemIdx,
                            last: itemIdx
                        });
                        break;
                    }
                }
            }
        },
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(newProps, prevState) {
                var _newProps_maintainVisibleContentPosition;
                // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
                // sure we're rendering a reasonable range here.
                var itemCount = newProps.getItemCount(newProps.data);
                if (itemCount === prevState.renderMask.numCells()) {
                    return prevState;
                }
                var maintainVisibleContentPositionAdjustment = null;
                var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
                var minIndexForVisible = ((_newProps_maintainVisibleContentPosition = newProps.maintainVisibleContentPosition) === null || _newProps_maintainVisibleContentPosition === void 0 ? void 0 : _newProps_maintainVisibleContentPosition.minIndexForVisible) ?? 0;
                var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
                if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
                    if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
                        // Fast path if items were added at the start of the list.
                        var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
                        var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
                        maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
                    } else {
                        maintainVisibleContentPositionAdjustment = null;
                    }
                }
                var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
                    first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
                    last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
                } : prevState.cellsAroundViewport, newProps);
                return {
                    cellsAroundViewport: constrainedCells,
                    renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
                    firstVisibleItemKey: newFirstVisibleItemKey,
                    pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
                };
            }
        },
        {
            key: "_constrainToItemCount",
            value: function _constrainToItemCount(cells, props) {
                var itemCount = props.getItemCount(props.data);
                var lastPossibleCellIndex = itemCount - 1;
                // Constraining `last` may significantly shrink the window. Adjust `first`
                // to expand the window if the new `last` results in a new window smaller
                // than the number of cells rendered per batch.
                var maxToRenderPerBatch = (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
                var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
                return {
                    first: (0, _clamp.default)(0, cells.first, maxFirst),
                    last: Math.min(lastPossibleCellIndex, cells.last)
                };
            }
        },
        {
            key: "_keyExtractor",
            value: function _keyExtractor(item, index, props) {
                if (props.keyExtractor != null) {
                    return props.keyExtractor(item, index);
                }
                var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
                if (key === String(index)) {
                    _usedIndexForKey = true;
                    if (item.type && item.type.displayName) {
                        _keylessItemComponentName = item.type.displayName;
                    }
                }
                return key;
            }
        }
    ]);
    return VirtualizedList;
}(_StateSafePureComponent.default);
VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
var styles = _reactnative.StyleSheet.create({
    verticallyInverted: _reactnative.Platform.OS === 'android' ? {
        transform: [
            {
                scale: -1
            }
        ]
    } : {
        transform: [
            {
                scaleY: -1
            }
        ]
    },
    horizontallyInverted: {
        transform: [
            {
                scaleX: -1
            }
        ]
    },
    debug: {
        flex: 1
    },
    debugOverlayBase: {
        position: 'absolute',
        top: 0,
        right: 0
    },
    debugOverlay: {
        bottom: 0,
        width: 20,
        borderColor: 'blue',
        borderWidth: 1
    },
    debugOverlayFrame: {
        left: 0,
        backgroundColor: 'orange'
    },
    debugOverlayFrameLast: {
        left: 0,
        borderColor: 'green',
        borderWidth: 2
    },
    debugOverlayFrameVis: {
        left: 0,
        borderColor: 'red',
        borderWidth: 2
    }
});
var _default = VirtualizedList;


}),
51215: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return CellRenderer;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _VirtualizedListContext = __webpack_require__(89541);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _reactnative = __webpack_require__(22705);
var CellRenderer = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(CellRenderer, _React_PureComponent);
    function CellRenderer() {
        _class_call_check._(this, CellRenderer);
        var _this;
        _this = _call_super._(this, CellRenderer, arguments), _this.state = {
            separatorProps: {
                highlighted: false,
                leadingItem: _this.props.item
            }
        }, // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not
        // reused by SectionList and we can keep VirtualizedList simpler.
        // $FlowFixMe[missing-local-annot]
        _this._separators = {
            highlight: ()=>{
                var _this_props = _this.props, cellKey = _this_props.cellKey, prevCellKey = _this_props.prevCellKey;
                _this.props.onUpdateSeparators([
                    cellKey,
                    prevCellKey
                ], {
                    highlighted: true
                });
            },
            unhighlight: ()=>{
                var _this_props = _this.props, cellKey = _this_props.cellKey, prevCellKey = _this_props.prevCellKey;
                _this.props.onUpdateSeparators([
                    cellKey,
                    prevCellKey
                ], {
                    highlighted: false
                });
            },
            updateProps: (select, newProps)=>{
                var _this_props = _this.props, cellKey = _this_props.cellKey, prevCellKey = _this_props.prevCellKey;
                _this.props.onUpdateSeparators([
                    select === 'leading' ? prevCellKey : cellKey
                ], newProps);
            }
        }, _this._onLayout = (nativeEvent)=>{
            var _this_props_onCellLayout, _this_props;
            (_this_props_onCellLayout = (_this_props = _this.props).onCellLayout) === null || _this_props_onCellLayout === void 0 ? void 0 : _this_props_onCellLayout.call(_this_props, nativeEvent, _this.props.cellKey, _this.props.index);
        }, _this._onCellFocusCapture = (e)=>{
            var _this_props_onCellFocusCapture, _this_props;
            (_this_props_onCellFocusCapture = (_this_props = _this.props).onCellFocusCapture) === null || _this_props_onCellFocusCapture === void 0 ? void 0 : _this_props_onCellFocusCapture.call(_this_props, _this.props.cellKey);
        };
        return _this;
    }
    _create_class._(CellRenderer, [
        {
            key: "updateSeparatorProps",
            value: function updateSeparatorProps(newProps) {
                this.setState((state)=>({
                        separatorProps: _object_spread._({}, state.separatorProps, newProps)
                    }));
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.props.onUnmount(this.props.cellKey);
            }
        },
        {
            key: "_renderElement",
            value: function _renderElement(renderItem, ListItemComponent, item, index) {
                if (renderItem && ListItemComponent) {
                    console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
                }
                if (ListItemComponent) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ListItemComponent, {
                        item: item,
                        index: index,
                        separators: this._separators
                    });
                }
                if (renderItem) {
                    return renderItem({
                        item,
                        index,
                        separators: this._separators
                    });
                }
                (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, CellRendererComponent = _this_props.CellRendererComponent, ItemSeparatorComponent = _this_props.ItemSeparatorComponent, ListItemComponent = _this_props.ListItemComponent, cellKey = _this_props.cellKey, horizontal = _this_props.horizontal, item = _this_props.item, index = _this_props.index, inversionStyle = _this_props.inversionStyle, onCellLayout = _this_props.onCellLayout, renderItem = _this_props.renderItem;
                var element = this._renderElement(renderItem, ListItemComponent, item, index);
                // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
                // called explicitly by `ScrollViewStickyHeader`.
                var itemSeparator = /*#__PURE__*/ _react.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && /*#__PURE__*/ (0, _jsxruntime.jsx)(ItemSeparatorComponent, _object_spread._({}, this.state.separatorProps));
                var cellStyle = inversionStyle ? horizontal ? [
                    styles.rowReverse,
                    inversionStyle
                ] : [
                    styles.columnReverse,
                    inversionStyle
                ] : horizontal ? [
                    styles.row,
                    inversionStyle
                ] : inversionStyle;
                var result = !CellRendererComponent ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, _object_spread_props._(_object_spread._({
                    style: cellStyle,
                    onFocusCapture: this._onCellFocusCapture
                }, onCellLayout && {
                    onLayout: this._onLayout
                }), {
                    children: [
                        element,
                        itemSeparator
                    ]
                })) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(CellRendererComponent, _object_spread_props._(_object_spread._({
                    cellKey: cellKey,
                    index: index,
                    item: item,
                    style: cellStyle,
                    onFocusCapture: this._onCellFocusCapture
                }, onCellLayout && {
                    onLayout: this._onLayout
                }), {
                    children: [
                        element,
                        itemSeparator
                    ]
                }));
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
                    cellKey: this.props.cellKey,
                    children: result
                });
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, prevState) {
                if (props.item !== prevState.separatorProps.leadingItem) {
                    return {
                        separatorProps: _object_spread_props._(_object_spread._({}, prevState.separatorProps), {
                            leadingItem: props.item
                        })
                    };
                }
                return null;
            }
        }
    ]);
    return CellRenderer;
}(_react.PureComponent);
var styles = _reactnative.StyleSheet.create({
    row: {
        flexDirection: 'row'
    },
    rowReverse: {
        flexDirection: 'row-reverse'
    },
    columnReverse: {
        flexDirection: 'column-reverse'
    }
});


}),
89541: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VirtualizedListCellContextProvider: function() {
        return VirtualizedListCellContextProvider;
    },
    VirtualizedListContext: function() {
        return VirtualizedListContext;
    },
    VirtualizedListContextProvider: function() {
        return VirtualizedListContextProvider;
    },
    VirtualizedListContextResetter: function() {
        return VirtualizedListContextResetter;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var VirtualizedListContext = /*#__PURE__*/ _react.createContext(null);
if (false) {}
function VirtualizedListContextResetter(ref) {
    var children = ref.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedListContext.Provider, {
        value: null,
        children: children
    });
}
function VirtualizedListContextProvider(ref) {
    var children = ref.children, value = ref.value;
    // Avoid setting a newly created context object if the values are identical.
    var context = (0, _react.useMemo)(()=>({
            cellKey: null,
            getScrollMetrics: value.getScrollMetrics,
            horizontal: value.horizontal,
            getOutermostParentListRef: value.getOutermostParentListRef,
            registerAsNestedChild: value.registerAsNestedChild,
            unregisterAsNestedChild: value.unregisterAsNestedChild
        }), [
        value.getScrollMetrics,
        value.horizontal,
        value.getOutermostParentListRef,
        value.registerAsNestedChild,
        value.unregisterAsNestedChild
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedListContext.Provider, {
        value: context,
        children: children
    });
}
function VirtualizedListCellContextProvider(ref) {
    var cellKey = ref.cellKey, children = ref.children;
    // Avoid setting a newly created context object if the values are identical.
    var currContext = (0, _react.useContext)(VirtualizedListContext);
    var context = (0, _react.useMemo)(()=>currContext == null ? null : _object_spread_props._(_object_spread._({}, currContext), {
            cellKey
        }), [
        currContext,
        cellKey
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedListContext.Provider, {
        value: context,
        children: children
    });
}


}),
12778: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    horizontalOrDefault: function() {
        return horizontalOrDefault;
    },
    initialNumToRenderOrDefault: function() {
        return initialNumToRenderOrDefault;
    },
    maxToRenderPerBatchOrDefault: function() {
        return maxToRenderPerBatchOrDefault;
    },
    onEndReachedThresholdOrDefault: function() {
        return onEndReachedThresholdOrDefault;
    },
    onStartReachedThresholdOrDefault: function() {
        return onStartReachedThresholdOrDefault;
    },
    windowSizeOrDefault: function() {
        return windowSizeOrDefault;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
function horizontalOrDefault(horizontal) {
    return horizontal ?? false;
}
function initialNumToRenderOrDefault(initialNumToRender) {
    return initialNumToRender ?? 10;
}
function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
    return maxToRenderPerBatch ?? 10;
}
function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
    return onStartReachedThreshold ?? 2;
}
function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
    return onEndReachedThreshold ?? 2;
}
function windowSizeOrDefault(windowSize) {
    return windowSize ?? 21;
}


}),
72685: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _VirtualizedList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86629));
var _VirtualizeUtils = __webpack_require__(72351);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Right now this just flattens everything into one list and uses VirtualizedList under the
 * hood. The only operation that might not scale well is concatting the data arrays of all the
 * sections when new props are received, which should be plenty fast for up to ~10,000 items.
 */ var VirtualizedSectionList = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(VirtualizedSectionList, _React_PureComponent);
    function VirtualizedSectionList() {
        _class_call_check._(this, VirtualizedSectionList);
        var _this;
        _this = _call_super._(this, VirtualizedSectionList, arguments), // $FlowFixMe[missing-local-annot]
        _this._keyExtractor = (item, index)=>{
            var info = _this._subExtractor(index);
            return info && info.key || String(index);
        }, _this._convertViewable = (viewable)=>{
            (0, _invariant.default)(viewable.index != null, 'Received a broken ViewToken');
            var info = _this._subExtractor(viewable.index);
            if (!info) {
                return null;
            }
            var keyExtractorWithNullableIndex = info.section.keyExtractor;
            var keyExtractorWithNonNullableIndex = _this.props.keyExtractor || _VirtualizeUtils.keyExtractor;
            var key = keyExtractorWithNullableIndex != null ? keyExtractorWithNullableIndex(viewable.item, info.index) : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);
            return _object_spread_props._(_object_spread._({}, viewable), {
                index: info.index,
                key,
                section: info.section
            });
        }, _this._onViewableItemsChanged = (ref)=>{
            var viewableItems = ref.viewableItems, changed = ref.changed;
            var onViewableItemsChanged = _this.props.onViewableItemsChanged;
            if (onViewableItemsChanged != null) {
                onViewableItemsChanged({
                    viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
                    changed: changed.map(_this._convertViewable, _this).filter(Boolean)
                });
            }
        }, _this._renderItem = (listItemCount)=>// eslint-disable-next-line react/no-unstable-nested-components
            (ref)=>{
                var item = ref.item, index = ref.index;
                var info = _this._subExtractor(index);
                if (!info) {
                    return null;
                }
                var infoIndex = info.index;
                if (infoIndex == null) {
                    var section = info.section;
                    if (info.header === true) {
                        var renderSectionHeader = _this.props.renderSectionHeader;
                        return renderSectionHeader ? renderSectionHeader({
                            section
                        }) : null;
                    } else {
                        var renderSectionFooter = _this.props.renderSectionFooter;
                        return renderSectionFooter ? renderSectionFooter({
                            section
                        }) : null;
                    }
                } else {
                    var renderItem = info.section.renderItem || _this.props.renderItem;
                    var SeparatorComponent = _this._getSeparatorComponent(index, info, listItemCount);
                    (0, _invariant.default)(renderItem, 'no renderItem!');
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ItemWithSeparator, {
                        SeparatorComponent: SeparatorComponent,
                        LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
                        cellKey: info.key,
                        index: infoIndex,
                        item: item,
                        leadingItem: info.leadingItem,
                        leadingSection: info.leadingSection,
                        prevCellKey: (_this._subExtractor(index - 1) || {}).key,
                        // Callback to provide updateHighlight for this item
                        setSelfHighlightCallback: _this._setUpdateHighlightFor,
                        setSelfUpdatePropsCallback: _this._setUpdatePropsFor,
                        // Provide child ability to set highlight/updateProps for previous item using prevCellKey
                        updateHighlightFor: _this._updateHighlightFor,
                        updatePropsFor: _this._updatePropsFor,
                        renderItem: renderItem,
                        section: info.section,
                        trailingItem: info.trailingItem,
                        trailingSection: info.trailingSection,
                        inverted: !!_this.props.inverted
                    });
                }
            }, _this._updatePropsFor = (cellKey, value)=>{
            var updateProps = _this._updatePropsMap[cellKey];
            if (updateProps != null) {
                updateProps(value);
            }
        }, _this._updateHighlightFor = (cellKey, value)=>{
            var updateHighlight = _this._updateHighlightMap[cellKey];
            if (updateHighlight != null) {
                updateHighlight(value);
            }
        }, _this._setUpdateHighlightFor = (cellKey, updateHighlightFn)=>{
            if (updateHighlightFn != null) {
                _this._updateHighlightMap[cellKey] = updateHighlightFn;
            } else {
                // $FlowFixMe[prop-missing]
                delete _this._updateHighlightFor[cellKey];
            }
        }, _this._setUpdatePropsFor = (cellKey, updatePropsFn)=>{
            if (updatePropsFn != null) {
                _this._updatePropsMap[cellKey] = updatePropsFn;
            } else {
                delete _this._updatePropsMap[cellKey];
            }
        }, _this._updateHighlightMap = {}, _this._updatePropsMap = {}, _this._captureRef = (ref)=>{
            _this._listRef = ref;
        };
        return _this;
    }
    _create_class._(VirtualizedSectionList, [
        {
            key: "scrollToLocation",
            value: function scrollToLocation(params) {
                var index = params.itemIndex;
                for(var i = 0; i < params.sectionIndex; i++){
                    index += this.props.getItemCount(this.props.sections[i].data) + 2;
                }
                var viewOffset = params.viewOffset || 0;
                if (this._listRef == null) {
                    return;
                }
                var listRef = this._listRef;
                if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
                    var frame = listRef.__getListMetrics().getCellMetricsApprox(index - params.itemIndex, listRef.props);
                    viewOffset += frame.length;
                }
                var toIndexParams = _object_spread_props._(_object_spread._({}, params), {
                    viewOffset,
                    index
                });
                // $FlowFixMe[incompatible-use]
                this._listRef.scrollToIndex(toIndexParams);
            }
        },
        {
            key: "getListRef",
            value: function getListRef() {
                return this._listRef;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, ItemSeparatorComponent = _this_props.ItemSeparatorComponent, SectionSeparatorComponent = _this_props.SectionSeparatorComponent, _renderItem = _this_props.renderItem, renderSectionFooter = _this_props.renderSectionFooter, renderSectionHeader = _this_props.renderSectionHeader, _sections = _this_props.sections, stickySectionHeadersEnabled = _this_props.stickySectionHeadersEnabled, passThroughProps = _object_without_properties._(_this_props, [
                    "ItemSeparatorComponent",
                    "SectionSeparatorComponent",
                    "renderItem",
                    "renderSectionFooter",
                    "renderSectionHeader",
                    "sections",
                    "stickySectionHeadersEnabled"
                ]);
                var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
                var stickyHeaderIndices = this.props.stickySectionHeadersEnabled ? [] : undefined;
                var itemCount = 0;
                for (var section of this.props.sections){
                    // Track the section header indices
                    if (stickyHeaderIndices != null) {
                        stickyHeaderIndices.push(itemCount + listHeaderOffset);
                    }
                    // Add two for the section header and footer.
                    itemCount += 2;
                    itemCount += this.props.getItemCount(section.data);
                }
                var renderItem = this._renderItem(itemCount);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_VirtualizedList.default, _object_spread_props._(_object_spread._({}, passThroughProps), {
                    keyExtractor: this._keyExtractor,
                    stickyHeaderIndices: stickyHeaderIndices,
                    renderItem: renderItem,
                    data: this.props.sections,
                    getItem: (sections, index)=>this._getItem(this.props, sections, index),
                    getItemCount: ()=>itemCount,
                    onViewableItemsChanged: this.props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
                    ref: this._captureRef
                }));
            }
        },
        {
            key: "_getItem",
            value: function _getItem(props, sections, index) {
                if (!sections) {
                    return null;
                }
                var itemIdx = index - 1;
                for(var i = 0; i < sections.length; i++){
                    var section = sections[i];
                    var sectionData = section.data;
                    var itemCount = props.getItemCount(sectionData);
                    if (itemIdx === -1 || itemIdx === itemCount) {
                        // We intend for there to be overflow by one on both ends of the list.
                        // This will be for headers and footers. When returning a header or footer
                        // item the section itself is the item.
                        return section;
                    } else if (itemIdx < itemCount) {
                        // If we are in the bounds of the list's data then return the item.
                        return props.getItem(sectionData, itemIdx);
                    } else {
                        itemIdx -= itemCount + 2; // Add two for the header and footer
                    }
                }
                return null;
            }
        },
        {
            key: "_subExtractor",
            value: function _subExtractor(index) {
                var itemIndex = index;
                var _this_props = this.props, getItem = _this_props.getItem, getItemCount = _this_props.getItemCount, keyExtractor = _this_props.keyExtractor, sections = _this_props.sections;
                for(var i = 0; i < sections.length; i++){
                    var section = sections[i];
                    var sectionData = section.data;
                    var key = section.key || String(i);
                    itemIndex -= 1; // The section adds an item for the header
                    if (itemIndex >= getItemCount(sectionData) + 1) {
                        itemIndex -= getItemCount(sectionData) + 1; // The section adds an item for the footer.
                    } else if (itemIndex === -1) {
                        return {
                            section,
                            key: key + ':header',
                            index: null,
                            header: true,
                            trailingSection: sections[i + 1]
                        };
                    } else if (itemIndex === getItemCount(sectionData)) {
                        return {
                            section,
                            key: key + ':footer',
                            index: null,
                            header: false,
                            trailingSection: sections[i + 1]
                        };
                    } else {
                        var extractor = section.keyExtractor || keyExtractor || _VirtualizeUtils.keyExtractor;
                        return {
                            section,
                            key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
                            index: itemIndex,
                            leadingItem: getItem(sectionData, itemIndex - 1),
                            leadingSection: sections[i - 1],
                            trailingItem: getItem(sectionData, itemIndex + 1),
                            trailingSection: sections[i + 1]
                        };
                    }
                }
            }
        },
        {
            key: "_getSeparatorComponent",
            value: function _getSeparatorComponent(index, info, listItemCount) {
                info = info || this._subExtractor(index);
                if (!info) {
                    return null;
                }
                var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
                var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
                var isLastItemInList = index === listItemCount - 1;
                var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;
                if (SectionSeparatorComponent && isLastItemInSection) {
                    return SectionSeparatorComponent;
                }
                if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
                    return ItemSeparatorComponent;
                }
                return null;
            }
        }
    ]);
    return VirtualizedSectionList;
}(_react.PureComponent);
function ItemWithSeparator(props) {
    var LeadingSeparatorComponent = props.LeadingSeparatorComponent, // this is the trailing separator and is associated with this item
    SeparatorComponent = props.SeparatorComponent, cellKey = props.cellKey, prevCellKey = props.prevCellKey, setSelfHighlightCallback = props.setSelfHighlightCallback, updateHighlightFor = props.updateHighlightFor, setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback, updatePropsFor = props.updatePropsFor, item = props.item, index = props.index, section = props.section, inverted = props.inverted;
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), leadingSeparatorHiglighted = _React_useState[0], setLeadingSeparatorHighlighted = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(false), 2), separatorHighlighted = _React_useState1[0], setSeparatorHighlighted = _React_useState1[1];
    var _React_useState2 = _sliced_to_array._(_react.useState({
        leadingItem: props.leadingItem,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.item,
        trailingSection: props.trailingSection
    }), 2), leadingSeparatorProps = _React_useState2[0], setLeadingSeparatorProps = _React_useState2[1];
    var _React_useState3 = _sliced_to_array._(_react.useState({
        leadingItem: props.item,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.trailingItem,
        trailingSection: props.trailingSection
    }), 2), separatorProps = _React_useState3[0], setSeparatorProps = _React_useState3[1];
    _react.useEffect(()=>{
        setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
        // $FlowFixMe[incompatible-call]
        setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
        return ()=>{
            setSelfUpdatePropsCallback(cellKey, null);
            setSelfHighlightCallback(cellKey, null);
        };
    }, [
        cellKey,
        setSelfHighlightCallback,
        setSeparatorProps,
        setSelfUpdatePropsCallback
    ]);
    var separators = {
        highlight: ()=>{
            setLeadingSeparatorHighlighted(true);
            setSeparatorHighlighted(true);
            if (prevCellKey != null) {
                updateHighlightFor(prevCellKey, true);
            }
        },
        unhighlight: ()=>{
            setLeadingSeparatorHighlighted(false);
            setSeparatorHighlighted(false);
            if (prevCellKey != null) {
                updateHighlightFor(prevCellKey, false);
            }
        },
        updateProps: (select, newProps)=>{
            if (select === 'leading') {
                if (LeadingSeparatorComponent != null) {
                    setLeadingSeparatorProps(_object_spread._({}, leadingSeparatorProps, newProps));
                } else if (prevCellKey != null) {
                    // update the previous item's separator
                    updatePropsFor(prevCellKey, _object_spread._({}, leadingSeparatorProps, newProps));
                }
            } else if (select === 'trailing' && SeparatorComponent != null) {
                setSeparatorProps(_object_spread._({}, separatorProps, newProps));
            }
        }
    };
    var element = props.renderItem({
        item,
        index,
        section,
        separators
    });
    var leadingSeparator = LeadingSeparatorComponent != null && /*#__PURE__*/ (0, _jsxruntime.jsx)(LeadingSeparatorComponent, _object_spread._({
        highlighted: leadingSeparatorHiglighted
    }, leadingSeparatorProps));
    var separator = SeparatorComponent != null && /*#__PURE__*/ (0, _jsxruntime.jsx)(SeparatorComponent, _object_spread._({
        highlighted: separatorHighlighted
    }, separatorProps));
    var RenderSeparator = leadingSeparator || separator;
    var firstSeparator = inverted === false ? leadingSeparator : separator;
    var secondSeparator = inverted === false ? separator : leadingSeparator;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            RenderSeparator ? firstSeparator : null,
            element,
            RenderSeparator ? secondSeparator : null
        ]
    });
}
var _default = VirtualizedSectionList;


}),
78600: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
function clamp(min, value, max) {
    if (value < min) {
        return min;
    }
    if (value > max) {
        return max;
    }
    return value;
}
var _default = clamp;


}),
40501: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _to_consumable_array = __webpack_require__(92716);
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog(...args) {
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array._(args));
}
var _default = infoLog;


}),
77469: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _VirtualizeUtils = __webpack_require__(72351);
var _default = {
    keyExtractor: _VirtualizeUtils.keyExtractor,
    get VirtualizedList () {
        return (__webpack_require__(86629)/* ["default"] */["default"]);
    },
    get VirtualizedSectionList () {
        return (__webpack_require__(72685)/* ["default"] */["default"]);
    },
    get VirtualizedListContextResetter () {
        var VirtualizedListContext = __webpack_require__(89541);
        return VirtualizedListContext.VirtualizedListContextResetter;
    },
    get ViewabilityHelper () {
        return (__webpack_require__(57222)/* ["default"] */["default"]);
    },
    get FillRateHelper () {
        return (__webpack_require__(70253)/* ["default"] */["default"]);
    }
};


}),
781: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(34643), exports));
var _default = _NativeActionSheetManager.default;


}),
83859: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    allowInterpolationParam: function() {
        return allowInterpolationParam;
    },
    allowStyleProp: function() {
        return allowStyleProp;
    },
    allowTransformProp: function() {
        return allowTransformProp;
    },
    default: function() {
        return _default;
    },
    isSupportedColorStyleProp: function() {
        return isSupportedColorStyleProp;
    },
    isSupportedInterpolationParam: function() {
        return isSupportedInterpolationParam;
    },
    isSupportedStyleProp: function() {
        return isSupportedStyleProp;
    },
    isSupportedTransformProp: function() {
        return isSupportedTransformProp;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
};
var SUPPORTED_STYLES = _object_spread_props._(_object_spread._({}, SUPPORTED_COLOR_STYLES), {
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
});
var SUPPORTED_TRANSFORMS = _object_spread._({
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true
}, _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? {
    matrix: true
} : {});
var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
};
var _default = {
    style: SUPPORTED_STYLES
};
function allowInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}
function allowStyleProp(prop) {
    SUPPORTED_STYLES[prop] = true;
}
function allowTransformProp(prop) {
    SUPPORTED_TRANSFORMS[prop] = true;
}
function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES.hasOwnProperty(prop);
}
function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(param);
}
function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES.hasOwnProperty(prop);
}
function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS.hasOwnProperty(prop);
}


}),
84546: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(67998), exports));
var _default = _NativeAnimatedModule.default;


}),
24539: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(11134), exports));
var _default = _NativeAnimatedTurboModule.default;


}),
87192: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(75466), exports));
var _default = _NativeAppState.default;


}),
40225: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _sliced_to_array = __webpack_require__(78474);
var BatchedBridge = (__webpack_require__(63531)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
function genModule(config, moduleID) {
    if (!config) {
        return null;
    }
    var _config = _sliced_to_array._(config, 5), moduleName = _config[0], constants = _config[1], methods = _config[2], promiseMethods = _config[3], syncMethods = _config[4];
    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side " + "but wasn't for " + moduleName);
    if (!constants && !methods) {
        return {
            name: moduleName
        };
    }
    var module = {};
    methods && methods.forEach((methodName, methodID)=>{
        var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;
        var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;
        invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
        var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
        module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(module, constants);
    if (module.getConstants == null) {
        module.getConstants = ()=>constants || Object.freeze({});
    } else {
        console.warn(`Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`);
    }
    if (false) {}
    return {
        name: moduleName,
        module
    };
}
__webpack_require__.g.__fbGenNativeModule = genModule;
function loadModule(name, moduleID) {
    invariant(__webpack_require__.g.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = __webpack_require__.g.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
}
function genMethod(moduleID, methodID, type) {
    var fn = null;
    if (type === 'promise') {
        fn = function promiseMethodWrapper(...args) {
            var enqueueingFrameError = new Error();
            return new Promise((resolve, reject)=>{
                BatchedBridge.enqueueNativeCall(moduleID, methodID, args, (data)=>resolve(data), (errorData)=>reject(updateErrorWithErrorData(errorData, enqueueingFrameError)));
            });
        };
    } else {
        fn = function nonPromiseMethodWrapper(...args) {
            var lastArg = args.length > 0 ? args[args.length - 1] : null;
            var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
            var hasSuccessCallback = typeof lastArg === 'function';
            var hasErrorCallback = typeof secondLastArg === 'function';
            hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
            var onSuccess = hasSuccessCallback ? lastArg : null;
            var onFail = hasErrorCallback ? secondLastArg : null;
            var callbackCount = hasSuccessCallback + hasErrorCallback;
            var newArgs = args.slice(0, args.length - callbackCount);
            if (type === 'sync') {
                return BatchedBridge.callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);
            } else {
                BatchedBridge.enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);
            }
        };
    }
    fn.type = type;
    return fn;
}
function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
}
function updateErrorWithErrorData(errorData, error) {
    return Object.assign(error, errorData || {});
}
var NativeModules = {};
if (__webpack_require__.g.nativeModuleProxy) {
    NativeModules = __webpack_require__.g.nativeModuleProxy;
} else {
    var bridgeConfig = __webpack_require__.g.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');
    var defineLazyObjectProperty = (__webpack_require__(53077)/* ["default"] */["default"]);
    (bridgeConfig.remoteModuleConfig || []).forEach((config, moduleID)=>{
        var info = genModule(config, moduleID);
        if (!info) {
            return;
        }
        if (info.module) {
            NativeModules[info.name] = info.module;
        } else {
            defineLazyObjectProperty(NativeModules, info.name, {
                get: ()=>loadModule(info.name, moduleID)
            });
        }
    });
}
var _default = NativeModules;


}),
63903: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(21591), exports));
var _default = _NativeBlobModule.default;


}),
88873: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(11258), exports));
var _default = _NativeFileReaderModule.default;


}),
81683: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(38940), exports));
var _default = _NativeBugReporting.default;


}),
97044: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(94140), exports));
var _default = _NativeAccessibilityInfo.default;


}),
29502: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(74387), exports));
var _default = _NativeAccessibilityManager.default;


}),
33217: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _ActivityIndicatorViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(47837), exports));
var _default = _ActivityIndicatorViewNativeComponent.default;


}),
10305: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(71655), exports));
var _default = _NativeClipboard.default;


}),
47608: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(85857), exports));
var _default = _AndroidDrawerLayoutNativeComponent.default;


}),
79006: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(52163), exports));
var _default = _NativeKeyboardObserver.default;


}),
47278: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var LayoutConformanceNativeComponent = _NativeComponentRegistry.get('LayoutConformance', ()=>({
        uiViewClassName: 'LayoutConformance',
        validAttributes: {
            mode: true
        }
    }));
var _default = LayoutConformanceNativeComponent;


}),
84102: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(43902), exports));
var _default = _ProgressBarAndroidNativeComponent.default;


}),
62009: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(37690), exports));
var _default = _AndroidSwipeRefreshLayoutNativeComponent.default;


}),
37328: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(33544), exports));
var _default = _PullToRefreshViewNativeComponent.default;


}),
14138: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _RCTSafeAreaViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(25503), exports));
var _default = _RCTSafeAreaViewNativeComponent.default;


}),
54944: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        decelerationRate: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        endFillColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        nestedScrollEnabled: true,
        overScrollMode: true,
        pagingEnabled: true,
        persistentScrollbar: true,
        horizontal: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollPerfTag: true,
        sendMomentumEvents: true,
        showsHorizontalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToStart: true,
        snapToOffsets: true,
        contentOffset: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderRadius: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        pointerEvents: true
    }
};
var AndroidHorizontalScrollViewNativeComponent = _NativeComponentRegistry.get('AndroidHorizontalScrollView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = AndroidHorizontalScrollViewNativeComponent;


}),
89207: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
};
var ScrollContentViewNativeComponent = _NativeComponentRegistry.get('RCTScrollContentView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ScrollContentViewNativeComponent;


}),
34676: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _ViewConfigIgnore = __webpack_require__(72291);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        }
    },
    validAttributes: {
        contentOffset: {
            diff: (__webpack_require__(60882)/* ["default"] */["default"])
        },
        decelerationRate: true,
        disableIntervalMomentum: true,
        maintainVisibleContentPosition: true,
        pagingEnabled: true,
        scrollEnabled: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        sendMomentumEvents: true,
        borderRadius: true,
        nestedScrollEnabled: true,
        scrollEventThrottle: true,
        borderStyle: true,
        borderRightColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderBottomColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        persistentScrollbar: true,
        horizontal: true,
        endFillColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        fadingEdgeLength: true,
        overScrollMode: true,
        borderTopLeftRadius: true,
        scrollPerfTag: true,
        borderTopColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        pointerEvents: true,
        isInvertedVirtualizedList: true
    }
} : {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
        topMomentumScrollBegin: {
            registrationName: 'onMomentumScrollBegin'
        },
        topMomentumScrollEnd: {
            registrationName: 'onMomentumScrollEnd'
        },
        topScroll: {
            registrationName: 'onScroll'
        },
        topScrollBeginDrag: {
            registrationName: 'onScrollBeginDrag'
        },
        topScrollEndDrag: {
            registrationName: 'onScrollEndDrag'
        },
        topScrollToTop: {
            registrationName: 'onScrollToTop'
        }
    },
    validAttributes: _object_spread._({
        alwaysBounceHorizontal: true,
        alwaysBounceVertical: true,
        automaticallyAdjustContentInsets: true,
        automaticallyAdjustKeyboardInsets: true,
        automaticallyAdjustsScrollIndicatorInsets: true,
        bounces: true,
        bouncesZoom: true,
        canCancelContentTouches: true,
        centerContent: true,
        contentInset: {
            diff: (__webpack_require__(14691)/* ["default"] */["default"])
        },
        contentOffset: {
            diff: (__webpack_require__(60882)/* ["default"] */["default"])
        },
        contentInsetAdjustmentBehavior: true,
        decelerationRate: true,
        endDraggingSensitivityMultiplier: true,
        directionalLockEnabled: true,
        disableIntervalMomentum: true,
        indicatorStyle: true,
        inverted: true,
        keyboardDismissMode: true,
        maintainVisibleContentPosition: true,
        maximumZoomScale: true,
        minimumZoomScale: true,
        pagingEnabled: true,
        pinchGestureEnabled: true,
        scrollEnabled: true,
        scrollEventThrottle: true,
        scrollIndicatorInsets: {
            diff: (__webpack_require__(14691)/* ["default"] */["default"])
        },
        scrollToOverflowEnabled: true,
        scrollsToTop: true,
        showsHorizontalScrollIndicator: true,
        showsVerticalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToOffsets: true,
        snapToStart: true,
        verticalScrollIndicatorInsets: {
            diff: (__webpack_require__(14691)/* ["default"] */["default"])
        },
        zoomScale: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onScrollBeginDrag: true,
        onMomentumScrollEnd: true,
        onScrollEndDrag: true,
        onMomentumScrollBegin: true,
        onScrollToTop: true,
        onScroll: true
    }))
};
var ScrollViewNativeComponent = _NativeComponentRegistry.get('RCTScrollView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ScrollViewNativeComponent;


}),
76197: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(67672), exports));
var _default = _NativeSoundManager.default;


}),
4016: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(69138), exports));
var _default = _NativeStatusBarManagerAndroid.default;


}),
65760: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(92836), exports));
var _default = _NativeStatusBarManagerIOS.default;


}),
47312: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(63939), exports));
var _default = _AndroidSwitchNativeComponent.default;


}),
54287: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(61964), exports));
var _default = _SwitchNativeComponent.default;


}),
23907: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        }
    },
    validAttributes: {
        maxFontSizeMultiplier: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        autoFocus: true,
        placeholder: true,
        inlineImagePadding: true,
        contextMenuHidden: true,
        textShadowColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        maxLength: true,
        selectTextOnFocus: true,
        textShadowRadius: true,
        underlineColorAndroid: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        textDecorationLine: true,
        submitBehavior: true,
        textAlignVertical: true,
        fontStyle: true,
        textShadowOffset: true,
        selectionColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        selectionHandleColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        placeholderTextColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        importantForAutofill: true,
        lineHeight: true,
        textTransform: true,
        returnKeyType: true,
        keyboardType: true,
        multiline: true,
        color: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        autoComplete: true,
        numberOfLines: true,
        letterSpacing: true,
        returnKeyLabel: true,
        fontSize: true,
        onKeyPress: true,
        cursorColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        text: true,
        showSoftInputOnFocus: true,
        textAlign: true,
        autoCapitalize: true,
        autoCorrect: true,
        caretHidden: true,
        secureTextEntry: true,
        textBreakStrategy: true,
        onScroll: true,
        onContentSizeChange: true,
        disableFullscreenUI: true,
        includeFontPadding: true,
        fontWeight: true,
        fontFamily: true,
        allowFontScaling: true,
        onSelectionChange: true,
        mostRecentEventCount: true,
        inlineImageLeft: true,
        editable: true,
        fontVariant: true,
        borderBottomRightRadius: true,
        borderBottomColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderRadius: true,
        borderRightColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderTopRightRadius: true,
        borderStyle: true,
        borderBottomLeftRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        }
    }
};
var AndroidTextInputNativeComponent = _NativeComponentRegistry.get('AndroidTextInput', ()=>__INTERNAL_VIEW_CONFIG);
var _default = AndroidTextInputNativeComponent;


}),
69873: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(62707), exports));
var _default = _RCTInputAccessoryViewNativeComponent.default;


}),
4045: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25297));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _object_spread_props._(_object_spread._({
    uiViewClassName: 'RCTMultilineTextInputView'
}, _RCTTextInputViewConfig.default), {
    validAttributes: _object_spread_props._(_object_spread._({}, _RCTTextInputViewConfig.default.validAttributes), {
        dataDetectorTypes: true
    })
});
var MultilineTextInputNativeComponent = _NativeComponentRegistry.get('RCTMultilineTextInputView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = MultilineTextInputNativeComponent;


}),
51023: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25297));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _object_spread._({
    uiViewClassName: 'RCTSinglelineTextInputView'
}, _RCTTextInputViewConfig.default);
var SinglelineTextInputNativeComponent = _NativeComponentRegistry.get('RCTSinglelineTextInputView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = SinglelineTextInputNativeComponent;


}),
80174: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(50214), exports));
var _default = _NativeToastAndroid.default;


}),
99318: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var ViewNativeComponent = _NativeComponentRegistry.get('RCTView', ()=>({
        uiViewClassName: 'RCTView'
    }));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'hotspotUpdate',
        'setPressed'
    ]
});
var _default = ViewNativeComponent;


}),
83822: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeExceptionsManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(14715), exports));
var _default = _NativeExceptionsManager.default;


}),
64978: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSegmentFetcher = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(94975), exports));
var _default = _NativeSegmentFetcher.default;


}),
90399: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(3087), exports));
var _default = _NativeTiming.default;


}),
55438: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeEventEmitter;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var NativeEventEmitter = /*#__PURE__*/ function() {
    function NativeEventEmitter(nativeModule) {
        _class_call_check._(this, NativeEventEmitter);
        if (_Platform.default.OS === 'ios') {
            (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
        }
        var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
        var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
        if (nativeModule && hasAddListener && hasRemoveListeners) {
            this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
            if (!hasAddListener) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
            }
            if (!hasRemoveListeners) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
            }
        }
    }
    _create_class._(NativeEventEmitter, [
        {
            key: "addListener",
            value: function addListener(eventType, listener, context) {
                var _this__nativeModule;
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.addListener(eventType);
                var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
                return {
                    remove: ()=>{
                        if (subscription != null) {
                            var _this__nativeModule;
                            (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(1);
                            subscription.remove();
                            subscription = null;
                        }
                    }
                };
            }
        },
        {
            key: "emit",
            value: function emit(eventType, ...args) {
                var _RCTDeviceEventEmitter1;
                (_RCTDeviceEventEmitter1 = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter1, [
                    eventType
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                var _this__nativeModule;
                (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(this.listenerCount(eventType));
                _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
            }
        },
        {
            key: "listenerCount",
            value: function listenerCount(eventType) {
                return _RCTDeviceEventEmitter.default.listenerCount(eventType);
            }
        }
    ]);
    return NativeEventEmitter;
}();


}),
61965: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _ViewConfigIgnore = __webpack_require__(72291);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'setIsVisible_EXPERIMENTAL'
    ]
});
var __INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: {
        blurRadius: true,
        defaultSource: true,
        internal_analyticTag: true,
        resizeMethod: true,
        resizeMode: true,
        resizeMultiplier: true,
        tintColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderBottomLeftRadius: true,
        borderTopLeftRadius: true,
        src: true,
        source: true,
        borderRadius: true,
        headers: true,
        shouldNotifyLoadEvents: true,
        overlayColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        accessible: true,
        progressiveRenderingEnabled: true,
        fadeDuration: true,
        borderBottomRightRadius: true,
        borderTopRightRadius: true,
        loadingIndicatorSrc: true
    }
} : {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
        topLoadStart: {
            registrationName: 'onLoadStart'
        },
        topProgress: {
            registrationName: 'onProgress'
        },
        topError: {
            registrationName: 'onError'
        },
        topPartialLoad: {
            registrationName: 'onPartialLoad'
        },
        topLoad: {
            registrationName: 'onLoad'
        },
        topLoadEnd: {
            registrationName: 'onLoadEnd'
        }
    },
    validAttributes: _object_spread._({
        blurRadius: true,
        capInsets: {
            diff: (__webpack_require__(14691)/* ["default"] */["default"])
        },
        defaultSource: {
            process: (__webpack_require__(63980)/* ["default"] */["default"])
        },
        internal_analyticTag: true,
        resizeMode: true,
        source: true,
        tintColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        }
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onLoadStart: true,
        onLoad: true,
        onLoadEnd: true,
        onProgress: true,
        onError: true,
        onPartialLoad: true
    }))
};
var ImageViewNativeComponent = _NativeComponentRegistry.get('RCTImageView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = ImageViewNativeComponent;


}),
12687: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(20864), exports));
var _default = _NativeImageLoaderAndroid.default;


}),
71834: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTTextInlineImage',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
        resizeMode: true,
        src: true,
        tintColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        headers: true
    }
};
var TextInlineImage = _NativeComponentRegistry.get('RCTTextInlineImage', ()=>__INTERNAL_VIEW_CONFIG);
var _default = TextInlineImage;


}),
39447: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(91189), exports));
var _default = _NativeFrameRateLogger.default;


}),
41872: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(69845), exports));
var _default = _NativeIntentAndroid.default;


}),
2485: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(5468), exports));
var _default = _NativeLinkingManager.default;


}),
29349: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(15717), exports));
var _default = _NativeModalManager.default;


}),
33307: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(12259), exports));
var _default = _RCTModalHostViewNativeComponent.default;


}),
97267: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    get: function() {
        return get;
    },
    getWithFallback_DEPRECATED: function() {
        return getWithFallback_DEPRECATED;
    },
    setRuntimeConfigProvider: function() {
        return setRuntimeConfigProvider;
    },
    unstable_hasStaticViewConfig: function() {
        return unstable_hasStaticViewConfig;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _getNativeComponentAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69093));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _ReactNativeViewConfigRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(25232));
var _StaticViewConfigValidator = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(65181));
var _ViewConfig = __webpack_require__(20764);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var getRuntimeConfig;
function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
        getRuntimeConfig = runtimeConfigProvider;
    }
}
function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.register(name, ()=>{
        var _ref = (getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
            native: !__webpack_require__.g.RN$Bridgeless,
            verify: false
        }, native = _ref.native, verify = _ref.verify;
        var viewConfig;
        if (native) {
            viewConfig = (0, _getNativeComponentAttributes.default)(name) ?? (0, _ViewConfig.createViewConfig)(viewConfigProvider());
        } else {
            viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider()) ?? (0, _getNativeComponentAttributes.default)(name);
        }
        (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component "%s".', name);
        if (verify) {
            var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
            if (nativeViewConfig == null) {
                return viewConfig;
            }
            var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
            var validationOutput = _StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
            if (validationOutput.type === 'invalid') {
                console.error(_StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
            }
        }
        return viewConfig;
    });
    return name;
}
function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
        if (hasNativeViewConfig(name)) {
            return get(name, viewConfigProvider);
        }
    } else {
        if (getRuntimeConfig(name) != null) {
            return get(name, viewConfigProvider);
        }
    }
    var FallbackNativeComponent = function(props) {
        return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
}
function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
}
function unstable_hasStaticViewConfig(name) {
    var native = ((getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
        native: true
    }).native;
    return !native;
}


}),
53655: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "unstable_hasComponent", ({
    enumerable: true,
    get: function() {
        return unstable_hasComponent;
    }
}));
var componentNameToExists = new Map();
function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
        if (__webpack_require__.g.__nativeComponentRegistry__hasComponent) {
            hasNativeComponent = __webpack_require__.g.__nativeComponentRegistry__hasComponent(name);
            componentNameToExists.set(name, hasNativeComponent);
        } else {
            throw `unstable_hasComponent('${name}'): Global function is not registered`;
        }
    }
    return hasNativeComponent;
}


}),
15849: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDevSettings = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(86293), exports));
var _default = _NativeDevSettings.default;


}),
28082: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(62658), exports));
var _default = _NativeDeviceEventManager.default;


}),
98207: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(7031), exports));
var _default = _NativeDialogManagerAndroid.default;


}),
57896: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(52970), exports));
var _default = _NativeRedBox.default;


}),
84925: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(89374), exports));
var _default = _NativeSourceCode.default;


}),
33291: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(27989), exports));
var _default = _NativeNetworkingAndroid.default;


}),
22133: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(75363), exports));
var _default = _NativePermissionsAndroid.default;


}),
58312: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(116), exports));
var _default = _NativePushNotificationManagerIOS.default;


}),
24149: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(9933), exports));
var _default = _NativeHeadlessJsTaskSupport.default;


}),
78546: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(47535), exports));
var _default = _NativeI18nManager.default;


}),
40142: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(38545), exports));
var _default = _NativeUIManager.default;


}),
66766: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var createReactNativeComponentClass = (__webpack_require__(94914)/* ["default"] */["default"]);
var getNativeComponentAttributes = (__webpack_require__(69093)/* ["default"] */["default"]);
var requireNativeComponent = (uiViewClassName)=>createReactNativeComponentClass(uiViewClassName, ()=>getNativeComponentAttributes(uiViewClassName));
var _default = requireNativeComponent;


}),
37591: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(53675), exports));
var _default = _NativeShareModule.default;


}),
66099: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NativeText: function() {
        return NativeText;
    },
    NativeVirtualText: function() {
        return NativeVirtualText;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _ViewConfig = __webpack_require__(20764);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _createReactNativeComponentClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94914));
var textViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        numberOfLines: true,
        ellipsizeMode: true,
        allowFontScaling: true,
        dynamicTypeRamp: true,
        maxFontSizeMultiplier: true,
        disabled: true,
        selectable: true,
        selectionColor: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        textBreakStrategy: true,
        onTextLayout: true,
        onInlineViewLayout: true,
        dataDetectorType: true,
        android_hyphenationFrequency: true,
        lineBreakStrategyIOS: true
    },
    directEventTypes: {
        topTextLayout: {
            registrationName: 'onTextLayout'
        },
        topInlineViewLayout: {
            registrationName: 'onInlineViewLayout'
        }
    },
    uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
    validAttributes: {
        isHighlighted: true,
        isPressable: true,
        maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
};
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', ()=>(0, _ViewConfig.createViewConfig)(textViewConfig));
var NativeVirtualText = !__webpack_require__.g.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', ()=>(0, _ViewConfig.createViewConfig)(virtualTextViewConfig));


}),
84893: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeAppearance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94462));
var _default = _NativeAppearance.default;


}),
19784: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(67660), exports));
var _default = _NativeDeviceInfo.default;


}),
63048: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativePlatformConstantsAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(40030), exports));
var _default = _NativePlatformConstantsAndroid.default;


}),
33433: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _requireNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66766));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
function codegenNativeComponent(componentName, options) {
    if (__webpack_require__.g.RN$Bridgeless === true && false) {}
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
        if (_UIManager.default.hasViewManagerConfig(componentName)) {
            componentNameInUse = componentName;
        } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
            componentNameInUse = options.paperComponentNameDeprecated;
        } else {
            throw new Error(`Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ?? '(unknown)'}`);
        }
    }
    return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = codegenNativeComponent;


}),
90069: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(4243), exports));
var _default = _NativeVibration.default;


}),
10967: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(80301), exports));
var _default = _NativeWebSocketModule.default;


}),
59851: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _to_consumable_array = __webpack_require__(92716);
var _NativeAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84546));
var _NativeAnimatedTurboModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24539));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var NativeAnimatedModule = _NativeAnimatedModule.default ?? _NativeAnimatedTurboModule.default;
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var waitingForQueuedOperations = new Set();
var queueOperations = false;
var queue = [];
var singleOpQueue = [];
var isSingleOpBatching = _Platform.default.OS === 'android' && (NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : NativeAnimatedModule.queueAndExecuteBatchedOperations) != null && _ReactNativeFeatureFlags.animatedShouldUseSingleOp();
var flushQueueImmediate = null;
var eventListenerGetValueCallbacks = {};
var eventListenerAnimationFinishedCallbacks = {};
var globalEventEmitterGetValueListener = null;
var globalEventEmitterAnimationFinishedListener = null;
function createNativeOperations() {
    var methodNames = [
        'createAnimatedNode',
        'updateAnimatedNodeConfig',
        'getValue',
        'startListeningToAnimatedNodeValue',
        'stopListeningToAnimatedNodeValue',
        'connectAnimatedNodes',
        'disconnectAnimatedNodes',
        'startAnimatingNode',
        'stopAnimation',
        'setAnimatedNodeValue',
        'setAnimatedNodeOffset',
        'flattenAnimatedNodeOffset',
        'extractAnimatedNodeOffset',
        'connectAnimatedNodeToView',
        'disconnectAnimatedNodeFromView',
        'restoreDefaultValues',
        'dropAnimatedNode',
        'addAnimatedEventToView',
        'removeAnimatedEventFromView',
        'addListener',
        'removeListener'
    ];
    var nativeOperations = {};
    if (isSingleOpBatching) {
        var _loop = function(ii, length) {
            var methodName = methodNames[ii];
            var operationID = ii + 1;
            nativeOperations[methodName] = (...args)=>{
                var _singleOpQueue;
                (_singleOpQueue = singleOpQueue).push.apply(_singleOpQueue, [
                    operationID
                ].concat(_to_consumable_array._(args)));
            };
        };
        for(var ii = 0, length = methodNames.length; ii < length; ii++)_loop(ii, length);
    } else {
        var _loop1 = function(ii1, length1) {
            var methodName = methodNames[ii1];
            nativeOperations[methodName] = (...args)=>{
                var method = (0, _nullthrows.default)(NativeAnimatedModule)[methodName];
                if (queueOperations || queue.length !== 0) {
                    queue.push(()=>method.apply(void 0, _to_consumable_array._(args)));
                } else {
                    method.apply(void 0, _to_consumable_array._(args));
                }
            };
        };
        for(var ii1 = 0, length1 = methodNames.length; ii1 < length1; ii1++)_loop1(ii1, length1);
    }
    return nativeOperations;
}
var NativeOperations = createNativeOperations();
var API = {
    getValue: isSingleOpBatching ? (tag, saveValueCallback)=>{
        if (saveValueCallback) {
            eventListenerGetValueCallbacks[tag] = saveValueCallback;
        }
        NativeOperations.getValue(tag);
    } : (tag, saveValueCallback)=>{
        NativeOperations.getValue(tag, saveValueCallback);
    },
    setWaitingForIdentifier (id) {
        waitingForQueuedOperations.add(id);
        queueOperations = true;
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueImmediate) {
            if (_ReactNativeFeatureFlags.enableAnimatedClearImmediateFix()) {
                clearImmediate(flushQueueImmediate);
            } else {
                clearTimeout(flushQueueImmediate);
            }
        }
    },
    unsetWaitingForIdentifier (id) {
        waitingForQueuedOperations.delete(id);
        if (waitingForQueuedOperations.size === 0) {
            queueOperations = false;
            API.disableQueue();
        }
    },
    disableQueue () {
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        if (_ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {
            var prevImmediate = flushQueueImmediate;
            clearImmediate(prevImmediate);
            flushQueueImmediate = setImmediate(API.flushQueue);
        } else {
            API.flushQueue();
        }
    },
    flushQueue: isSingleOpBatching ? ()=>{
        var _NativeAnimatedModule_queueAndExecuteBatchedOperations;
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        flushQueueImmediate = null;
        if (singleOpQueue.length === 0) {
            return;
        }
        ensureGlobalEventEmitterListeners();
        NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_queueAndExecuteBatchedOperations = NativeAnimatedModule.queueAndExecuteBatchedOperations) === null || _NativeAnimatedModule_queueAndExecuteBatchedOperations === void 0 ? void 0 : _NativeAnimatedModule_queueAndExecuteBatchedOperations.call(NativeAnimatedModule, singleOpQueue);
        singleOpQueue.length = 0;
    } : ()=>{
        (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
        flushQueueImmediate = null;
        if (queue.length === 0) {
            return;
        }
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_startOperationBatch;
            NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_startOperationBatch = NativeAnimatedModule.startOperationBatch) === null || _NativeAnimatedModule_startOperationBatch === void 0 ? void 0 : _NativeAnimatedModule_startOperationBatch.call(NativeAnimatedModule);
        }
        for(var q = 0, l = queue.length; q < l; q++){
            queue[q]();
        }
        queue.length = 0;
        if (_Platform.default.OS === 'android') {
            var _NativeAnimatedModule_finishOperationBatch;
            NativeAnimatedModule === null || NativeAnimatedModule === void 0 ? void 0 : (_NativeAnimatedModule_finishOperationBatch = NativeAnimatedModule.finishOperationBatch) === null || _NativeAnimatedModule_finishOperationBatch === void 0 ? void 0 : _NativeAnimatedModule_finishOperationBatch.call(NativeAnimatedModule);
        }
    },
    createAnimatedNode (tag, config) {
        NativeOperations.createAnimatedNode(tag, config);
    },
    updateAnimatedNodeConfig (tag, config) {
        var _NativeOperations_updateAnimatedNodeConfig;
        (_NativeOperations_updateAnimatedNodeConfig = NativeOperations.updateAnimatedNodeConfig) === null || _NativeOperations_updateAnimatedNodeConfig === void 0 ? void 0 : _NativeOperations_updateAnimatedNodeConfig.call(NativeOperations, tag, config);
    },
    startListeningToAnimatedNodeValue (tag) {
        NativeOperations.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue (tag) {
        NativeOperations.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes (parentTag, childTag) {
        NativeOperations.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes (parentTag, childTag) {
        NativeOperations.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: isSingleOpBatching ? (animationId, nodeTag, config, endCallback)=>{
        if (endCallback) {
            eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
        }
        NativeOperations.startAnimatingNode(animationId, nodeTag, config);
    } : (animationId, nodeTag, config, endCallback)=>{
        NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation (animationId) {
        NativeOperations.stopAnimation(animationId);
    },
    setAnimatedNodeValue (nodeTag, value) {
        NativeOperations.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset (nodeTag, offset) {
        NativeOperations.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset (nodeTag) {
        NativeOperations.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset (nodeTag) {
        NativeOperations.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView (nodeTag, viewTag) {
        NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView (nodeTag, viewTag) {
        NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    restoreDefaultValues (nodeTag) {
        var _NativeOperations_restoreDefaultValues;
        (_NativeOperations_restoreDefaultValues = NativeOperations.restoreDefaultValues) === null || _NativeOperations_restoreDefaultValues === void 0 ? void 0 : _NativeOperations_restoreDefaultValues.call(NativeOperations, nodeTag);
    },
    dropAnimatedNode (tag) {
        NativeOperations.dropAnimatedNode(tag);
    },
    addAnimatedEventToView (viewTag, eventName, eventMapping) {
        NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView (viewTag, eventName, animatedNodeTag) {
        NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
};
function ensureGlobalEventEmitterListeners() {
    if (globalEventEmitterGetValueListener && globalEventEmitterAnimationFinishedListener) {
        return;
    }
    globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', (params)=>{
        var tag = params.tag;
        var callback = eventListenerGetValueCallbacks[tag];
        if (!callback) {
            return;
        }
        callback(params.value);
        delete eventListenerGetValueCallbacks[tag];
    });
    globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', (params)=>{
        var animations = Array.isArray(params) ? params : [
            params
        ];
        for (var animation of animations){
            var animationId = animation.animationId;
            var callback = eventListenerAnimationFinishedCallbacks[animationId];
            if (callback) {
                callback(animation);
                delete eventListenerAnimationFinishedCallbacks[animationId];
            }
        }
    });
}
function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
}
var _warnedMissingNativeAnimated = false;
function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
        console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
        if (true) {
            if (!_warnedMissingNativeAnimated) {
                console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
                _warnedMissingNativeAnimated = true;
            }
        }
        return false;
    }
    return config.useNativeDriver || false;
}
function transformDataType(value) {
    if (typeof value !== 'string') {
        return value;
    }
    if (value.endsWith('deg')) {
        var degrees = parseFloat(value) || 0;
        return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
        return parseFloat(value) || 0;
    } else {
        return value;
    }
}
var _default = {
    API,
    generateNewNodeTag,
    generateNewAnimationId,
    assertNativeAnimatedModule,
    shouldUseNativeDriver,
    transformDataType,
    get nativeEventEmitter () {
        if (!nativeEventEmitter) {
            nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
        }
        return nativeEventEmitter;
    }
};


}),
84266: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    validateInterpolation: function() {
        return validateInterpolation;
    },
    validateStyles: function() {
        return validateStyles;
    },
    validateTransform: function() {
        return validateTransform;
    }
});
var _NativeAnimatedAllowlist = __webpack_require__(83859);
function validateInterpolation(config) {
    for(var key in config){
        if (key !== 'debugID' && !(0, _NativeAnimatedAllowlist.isSupportedInterpolationParam)(key)) {
            console.error(`Interpolation property '${key}' is not supported by native animated module`);
        }
    }
}
function validateStyles(styles) {
    for(var key in styles){
        if (!(0, _NativeAnimatedAllowlist.isSupportedStyleProp)(key)) {
            console.error(`Style property '${key}' is not supported by native animated module`);
        }
    }
}
function validateTransform(configs) {
    configs.forEach((config)=>{
        if (!(0, _NativeAnimatedAllowlist.isSupportedTransformProp)(config.property)) {
            console.error(`Property '${config.property}' is not supported by native animated module`);
        }
    });
}


}),
51038: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
47837: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var nativeComponentName = 'RCTActivityIndicatorView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTActivityIndicatorView",
    validAttributes: {
        hidesWhenStopped: true,
        animating: true,
        color: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        size: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
85857: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(52976)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidDrawerLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidDrawerLayout",
    directEventTypes: {
        topDrawerSlide: {
            registrationName: "onDrawerSlide"
        },
        topDrawerStateChanged: {
            registrationName: "onDrawerStateChanged"
        },
        topDrawerOpen: {
            registrationName: "onDrawerOpen"
        },
        topDrawerClose: {
            registrationName: "onDrawerClose"
        }
    },
    validAttributes: _object_spread._({
        keyboardDismissMode: true,
        drawerBackgroundColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        drawerPosition: true,
        drawerWidth: true,
        drawerLockMode: true,
        statusBarBackgroundColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onDrawerSlide: true,
        onDrawerStateChanged: true,
        onDrawerOpen: true,
        onDrawerClose: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    openDrawer (ref) {
        dispatchCommand(ref, "openDrawer", []);
    },
    closeDrawer (ref) {
        dispatchCommand(ref, "closeDrawer", []);
    }
};


}),
7520: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var nativeComponentName = 'AndroidHorizontalScrollContentView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidHorizontalScrollContentView",
    validAttributes: {
        removeClippedSubviews: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
37690: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(52976)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwipeRefreshLayout';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidSwipeRefreshLayout",
    directEventTypes: {
        topRefresh: {
            registrationName: "onRefresh"
        }
    },
    validAttributes: _object_spread._({
        enabled: true,
        colors: {
            process: ((req)=>'default' in req ? req.default : req)(__webpack_require__(16449))
        },
        progressBackgroundColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        size: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeRefreshing (ref, value) {
        dispatchCommand(ref, "setNativeRefreshing", [
            value
        ]);
    }
};


}),
63939: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(52976)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidSwitch",
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: "onChangeCapture",
                bubbled: "onChange"
            }
        }
    },
    validAttributes: _object_spread._({
        disabled: true,
        enabled: true,
        thumbColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        value: true,
        on: true,
        thumbTintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        trackTintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeValue (ref, value) {
        dispatchCommand(ref, "setNativeValue", [
            value
        ]);
    }
};


}),
43902: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var nativeComponentName = 'AndroidProgressBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidProgressBar",
    validAttributes: {
        styleAttr: true,
        typeAttr: true,
        indeterminate: true,
        progress: true,
        animating: true,
        color: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        testID: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
33544: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(52976)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTRefreshControl';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTRefreshControl",
    directEventTypes: {
        topRefresh: {
            registrationName: "onRefresh"
        }
    },
    validAttributes: _object_spread._({
        tintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        titleColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        title: true,
        progressViewOffset: true,
        refreshing: true
    }, ConditionallyIgnoredEventHandlers({
        onRefresh: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setNativeRefreshing (ref, refreshing) {
        dispatchCommand(ref, "setNativeRefreshing", [
            refreshing
        ]);
    }
};


}),
62707: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var nativeComponentName = 'RCTInputAccessoryView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTInputAccessoryView",
    validAttributes: {
        backgroundColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        }
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
12259: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTModalHostView",
    directEventTypes: {
        topRequestClose: {
            registrationName: "onRequestClose"
        },
        topShow: {
            registrationName: "onShow"
        },
        topDismiss: {
            registrationName: "onDismiss"
        },
        topOrientationChange: {
            registrationName: "onOrientationChange"
        }
    },
    validAttributes: _object_spread._({
        animationType: true,
        presentationStyle: true,
        transparent: true,
        statusBarTranslucent: true,
        navigationBarTranslucent: true,
        hardwareAccelerated: true,
        visible: true,
        animated: true,
        supportedOrientations: true,
        identifier: true
    }, ConditionallyIgnoredEventHandlers({
        onRequestClose: true,
        onShow: true,
        onDismiss: true,
        onOrientationChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
25503: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var NativeComponentRegistry = __webpack_require__(70735);
var nativeComponentName = 'RCTSafeAreaView';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTSafeAreaView",
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
61964: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _codegenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33433));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var NativeComponentRegistry = __webpack_require__(70735);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(31927)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(52976)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RCTSwitch';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTSwitch",
    bubblingEventTypes: {
        topChange: {
            phasedRegistrationNames: {
                captured: "onChangeCapture",
                bubbled: "onChange"
            }
        }
    },
    validAttributes: _object_spread._({
        disabled: true,
        value: true,
        tintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        onTintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        thumbTintColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        thumbColor: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        trackColorForFalse: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        },
        trackColorForTrue: {
            process: (__webpack_require__(36153)/* ["default"] */["default"])
        }
    }, ConditionallyIgnoredEventHandlers({
        onChange: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    setValue (ref, value) {
        dispatchCommand(ref, "setValue", [
            value
        ]);
    }
};


}),
94140: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('AccessibilityInfo');


}),
74387: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('AccessibilityManager');


}),
34643: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('ActionSheetManager');


}),
67998: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10682));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedModule') : null;
var _default = NativeModule;


}),
11134: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _shouldUseTurboAnimatedModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10682));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? _TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
var _default = NativeModule;


}),
75466: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('AppState');


}),
94462: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('Appearance');


}),
21591: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.get('BlobModule');
var constants = null;
var NativeBlobModule = null;
if (NativeModule != null) {
    NativeBlobModule = {
        getConstants () {
            if (constants == null) {
                constants = NativeModule.getConstants();
            }
            return constants;
        },
        addNetworkingHandler () {
            NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler (id) {
            NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler (id) {
            NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket (blob, socketID) {
            NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts (parts, withId) {
            NativeModule.createFromParts(parts, withId);
        },
        release (blobId) {
            NativeModule.release(blobId);
        }
    };
}
var _default = NativeBlobModule;


}),
38940: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('BugReporting');


}),
71655: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('Clipboard');


}),
68963: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('DevMenu');


}),
86293: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('DevSettings');


}),
62658: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('DeviceEventManager');


}),
67660: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('DeviceInfo');
var constants = null;
var NativeDeviceInfo = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeDeviceInfo;


}),
7031: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('DialogManagerAndroid');


}),
14715: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var NativeModule = _TurboModuleRegistry.getEnforcing('ExceptionsManager');
var ExceptionsManager = {
    reportFatalException (message, stack, exceptionId) {
        NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException (message, stack, exceptionId) {
        NativeModule.reportSoftException(message, stack, exceptionId);
    },
    dismissRedbox () {
        if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {
            NativeModule.dismissRedbox();
        }
    },
    reportException (data) {
        if (NativeModule.reportException) {
            NativeModule.reportException(data);
            return;
        }
        if (data.isFatal) {
            ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
        } else {
            ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
        }
    }
};
var _default = ExceptionsManager;


}),
11258: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('FileReaderModule');


}),
91189: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('FrameRateLogger');


}),
9933: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('HeadlessJsTaskSupport');


}),
47535: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('I18nManager');


}),
20864: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('ImageLoader');


}),
69845: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('IntentAndroid');


}),
52163: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('KeyboardObserver');


}),
5468: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('LinkingManager');


}),
15717: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('ModalManager');


}),
27989: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('Networking');


}),
75363: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('PermissionsAndroid');


}),
40030: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('PlatformConstants');


}),
116: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('PushNotificationManager');


}),
52970: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('RedBox');


}),
94975: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('SegmentFetcher');


}),
53675: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('ShareModule');


}),
67672: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('SoundManager');


}),
89374: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('SourceCode');
var constants = null;
var NativeSourceCode = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeSourceCode;


}),
69138: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    setColor (color, animated) {
        NativeModule.setColor(color, animated);
    },
    setTranslucent (translucent) {
        NativeModule.setTranslucent(translucent);
    },
    setStyle (statusBarStyle) {
        NativeModule.setStyle(statusBarStyle);
    },
    setHidden (hidden) {
        NativeModule.setHidden(hidden);
    }
};
var _default = NativeStatusBarManager;


}),
92836: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    },
    getHeight (callback) {
        NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible (visible) {
        NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener (eventType) {
        NativeModule.addListener(eventType);
    },
    removeListeners (count) {
        NativeModule.removeListeners(count);
    },
    setStyle (statusBarStyle, animated) {
        NativeModule.setStyle(statusBarStyle, animated);
    },
    setHidden (hidden, withAnimation) {
        NativeModule.setHidden(hidden, withAnimation);
    }
};
var _default = NativeStatusBarManager;


}),
3087: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('Timing');


}),
50214: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('ToastAndroid');


}),
38545: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('UIManager');


}),
4243: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('Vibration');


}),
80301: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('WebSocketModule');


}),
67548: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var RawNativeDOM = _TurboModuleRegistry.get('NativeDOMCxx');
var NativeDOM = {
    compareDocumentPosition (nativeNodeReference, otherNativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).compareDocumentPosition(nativeNodeReference, otherNativeNodeReference);
    },
    getChildNodes (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getChildNodes(nativeNodeReference);
    },
    getParentNode (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getParentNode(nativeNodeReference);
    },
    isConnected (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).isConnected(nativeNodeReference);
    },
    getBorderWidth (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getBorderWidth(nativeNodeReference);
    },
    getBoundingClientRect (nativeNodeReference, includeTransform) {
        return (0, _nullthrows.default)(RawNativeDOM).getBoundingClientRect(nativeNodeReference, includeTransform);
    },
    getInnerSize (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getInnerSize(nativeNodeReference);
    },
    getScrollPosition (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getScrollPosition(nativeNodeReference);
    },
    getScrollSize (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getScrollSize(nativeNodeReference);
    },
    getTagName (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getTagName(nativeNodeReference);
    },
    getTextContent (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getTextContent(nativeNodeReference);
    },
    hasPointerCapture (nativeNodeReference, pointerId) {
        return (0, _nullthrows.default)(RawNativeDOM).hasPointerCapture(nativeNodeReference, pointerId);
    },
    releasePointerCapture (nativeNodeReference, pointerId) {
        return (0, _nullthrows.default)(RawNativeDOM).releasePointerCapture(nativeNodeReference, pointerId);
    },
    setPointerCapture (nativeNodeReference, pointerId) {
        return (0, _nullthrows.default)(RawNativeDOM).setPointerCapture(nativeNodeReference, pointerId);
    },
    getOffset (nativeNodeReference) {
        return (0, _nullthrows.default)(RawNativeDOM).getOffset(nativeNodeReference);
    },
    linkRootNode (rootTag, instanceHandle) {
        return (0, _nullthrows.default)(RawNativeDOM === null || RawNativeDOM === void 0 ? void 0 : RawNativeDOM.linkRootNode)(rootTag, instanceHandle);
    },
    measure (nativeNodeReference, callback) {
        return (0, _nullthrows.default)(RawNativeDOM).measure(nativeNodeReference, callback);
    },
    measureInWindow (nativeNodeReference, callback) {
        return (0, _nullthrows.default)(RawNativeDOM).measureInWindow(nativeNodeReference, callback);
    },
    measureLayout (nativeNodeReference, relativeNode, onFail, onSuccess) {
        return (0, _nullthrows.default)(RawNativeDOM).measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess);
    }
};
var _default = NativeDOM;


}),
10792: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('NativeIdleCallbacksCxx');


}),
24887: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('NativeMicrotasksCxx');


}),
23806: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('NativePerformanceCxx');


}),
31420: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(781));
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
/**
 * Display action sheets and share sheets on iOS.
 *
 * See https://reactnative.dev/docs/actionsheetios
 */ var ActionSheetIOS = {
    /**
   * Display an iOS action sheet.
   *
   * The `options` object must contain one or more of:
   *
   * - `options` (array of strings) - a list of button titles (required)
   * - `cancelButtonIndex` (int) - index of cancel button in `options`
   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`
   * - `title` (string) - a title to show above the action sheet
   * - `message` (string) - a message to show below the title
   * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled
   *
   * The 'callback' function takes one parameter, the zero-based index
   * of the selected item.
   *
   * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions
   */ showActionSheetWithOptions (options, callback) {
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        var tintColor = options.tintColor, cancelButtonTintColor = options.cancelButtonTintColor, disabledButtonTintColor = options.disabledButtonTintColor, destructiveButtonIndex = options.destructiveButtonIndex, remainingOptions = _object_without_properties._(options, [
            "tintColor",
            "cancelButtonTintColor",
            "disabledButtonTintColor",
            "destructiveButtonIndex"
        ]);
        var destructiveButtonIndices = null;
        if (Array.isArray(destructiveButtonIndex)) {
            destructiveButtonIndices = destructiveButtonIndex;
        } else if (typeof destructiveButtonIndex === 'number') {
            destructiveButtonIndices = [
                destructiveButtonIndex
            ];
        }
        var processedTintColor = processColor(tintColor);
        var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
        var processedDisabledButtonTintColor = processColor(disabledButtonTintColor);
        invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
        invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
        invariant(processedDisabledButtonTintColor == null || typeof processedDisabledButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor');
        _NativeActionSheetManager.default.showActionSheetWithOptions(_object_spread_props._(_object_spread._({}, remainingOptions), {
            // $FlowFixMe[incompatible-call]
            tintColor: processedTintColor,
            // $FlowFixMe[incompatible-call]
            cancelButtonTintColor: processedCancelButtonTintColor,
            // $FlowFixMe[incompatible-call]
            disabledButtonTintColor: processedDisabledButtonTintColor,
            destructiveButtonIndices
        }), callback);
    },
    /**
   * Display the iOS share sheet. The `options` object should contain
   * one or both of `message` and `url` and can additionally have
   * a `subject` or `excludedActivityTypes`:
   *
   * - `url` (string) - a URL to share
   * - `message` (string) - a message to share
   * - `subject` (string) - a subject for the message
   * - `excludedActivityTypes` (array) - the activities to exclude from
   *   the ActionSheet
   * - `tintColor` (color) - tint color of the buttons
   *
   * The 'failureCallback' function takes one parameter, an error object.
   * The only property defined on this object is an optional `stack` property
   * of type `string`.
   *
   * The 'successCallback' function takes two parameters:
   *
   * - a boolean value signifying success or failure
   * - a string that, in the case of success, indicates the method of sharing
   *
   * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions
   */ showShareActionSheetWithOptions (options, failureCallback, successCallback) {
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
        invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        _NativeActionSheetManager.default.showShareActionSheetWithOptions(_object_spread_props._(_object_spread._({}, options), {
            tintColor: processColor(options.tintColor)
        }), failureCallback, successCallback);
    },
    /**
   * Dismisses the most upper iOS action sheet presented, if no action sheet is
   * present a warning is displayed.
   */ dismissActionSheet: ()=>{
        invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
        if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
            _NativeActionSheetManager.default.dismissActionSheet();
        }
    }
};
var _default = ActionSheetIOS;


}),
8306: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _RCTAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60012));
/**
 * @platform ios
 */ /**
 * @platform ios
 */ /**
 * Launches an alert dialog with the specified title and message.
 *
 * Optionally provide a list of buttons. Tapping any button will fire the
 * respective onPress callback and dismiss the alert. By default, the only
 * button will be an 'OK' button.
 *
 * This is an API that works both on iOS and Android and can show static
 * alerts. On iOS, you can show an alert that prompts the user to enter
 * some information.
 *
 * See https://reactnative.dev/docs/alert
 */ var Alert = /*#__PURE__*/ function() {
    "use strict";
    function Alert() {
        _class_call_check._(this, Alert);
    }
    _create_class._(Alert, null, [
        {
            key: "alert",
            value: function alert(title, message, buttons, options) {
                if (_Platform.default.OS === 'ios') {
                    Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
                } else if (_Platform.default.OS === 'android') {
                    var NativeDialogManagerAndroid = (__webpack_require__(98207)/* ["default"] */["default"]);
                    if (!NativeDialogManagerAndroid) {
                        return;
                    }
                    var constants = NativeDialogManagerAndroid.getConstants();
                    var config = {
                        title: title || '',
                        message: message || '',
                        cancelable: false
                    };
                    if (options && options.cancelable) {
                        config.cancelable = options.cancelable;
                    }
                    // At most three buttons (neutral, negative, positive). Ignore rest.
                    // The text 'OK' should be probably localized. iOS Alert does that in native.
                    var defaultPositiveText = 'OK';
                    var validButtons = buttons ? buttons.slice(0, 3) : [
                        {
                            text: defaultPositiveText
                        }
                    ];
                    var buttonPositive = validButtons.pop();
                    var buttonNegative = validButtons.pop();
                    var buttonNeutral = validButtons.pop();
                    if (buttonNeutral) {
                        config.buttonNeutral = buttonNeutral.text || '';
                    }
                    if (buttonNegative) {
                        config.buttonNegative = buttonNegative.text || '';
                    }
                    if (buttonPositive) {
                        config.buttonPositive = buttonPositive.text || defaultPositiveText;
                    }
                    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ var onAction = (action, buttonKey)=>{
                        if (action === constants.buttonClicked) {
                            if (buttonKey === constants.buttonNeutral) {
                                // $FlowFixMe[incompatible-type]
                                buttonNeutral.onPress && buttonNeutral.onPress();
                            } else if (buttonKey === constants.buttonNegative) {
                                // $FlowFixMe[incompatible-type]
                                buttonNegative.onPress && buttonNegative.onPress();
                            } else if (buttonKey === constants.buttonPositive) {
                                // $FlowFixMe[incompatible-type]
                                buttonPositive.onPress && buttonPositive.onPress();
                            }
                        } else if (action === constants.dismissed) {
                            options && options.onDismiss && options.onDismiss();
                        }
                    };
                    var onError = (errorMessage)=>console.warn(errorMessage);
                    NativeDialogManagerAndroid.showAlert(config, onError, onAction);
                }
            }
        },
        {
            key: "prompt",
            value: /**
   * @platform ios
   */ function prompt(title, message, callbackOrButtons, ref, defaultValue, keyboardType, options) {
                var type = ref === void 0 ? 'plain-text' : ref;
                if (_Platform.default.OS === 'ios') {
                    var callbacks = [];
                    var buttons = [];
                    var cancelButtonKey;
                    var destructiveButtonKey;
                    var preferredButtonKey;
                    if (typeof callbackOrButtons === 'function') {
                        callbacks = [
                            callbackOrButtons
                        ];
                    } else if (Array.isArray(callbackOrButtons)) {
                        callbackOrButtons.forEach((btn, index)=>{
                            callbacks[index] = btn.onPress;
                            if (btn.style === 'cancel') {
                                cancelButtonKey = String(index);
                            } else if (btn.style === 'destructive') {
                                destructiveButtonKey = String(index);
                            }
                            if (btn.isPreferred) {
                                preferredButtonKey = String(index);
                            }
                            if (btn.text || index < (callbackOrButtons || []).length - 1) {
                                var btnDef = {};
                                btnDef[index] = btn.text || '';
                                buttons.push(btnDef);
                            }
                        });
                    }
                    _RCTAlertManager.default.alertWithArgs({
                        title: title || '',
                        message: message || undefined,
                        buttons,
                        type: type || undefined,
                        defaultValue,
                        cancelButtonKey,
                        destructiveButtonKey,
                        preferredButtonKey,
                        keyboardType,
                        userInterfaceStyle: (options === null || options === void 0 ? void 0 : options.userInterfaceStyle) || undefined
                    }, (id, value)=>{
                        var cb = callbacks[id];
                        cb && cb(value);
                    });
                }
            }
        }
    ]);
    return Alert;
}();
var _default = Alert;


}),
60012: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98207));
function emptyCallback() {}
var _default = {
    alertWithArgs: function(args, callback) {
        // TODO(5998984): Polyfill it correctly with DialogManagerAndroid
        if (!_NativeDialogManagerAndroid.default) {
            return;
        }
        _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
};


}),
22644: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ // The AnimatedExports module is typed as multiple exports to allow
// for an implicit namespace, but underneath is's a single default export.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Animated = (__webpack_require__(21033)/* ["default"] */["default"]);
var _default = Animated;


}),
12164: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AnimatedEvent: function() {
        return AnimatedEvent;
    },
    attachNativeEvent: function() {
        return attachNativeEvent;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _RendererProxy = __webpack_require__(46513);
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86473));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    // Find animated values in `argMapping` and create an array representing their
    // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].
    var eventMappings = [];
    var traverse = (value, path)=>{
        if (value instanceof _AnimatedValue.default) {
            value.__makeNative(platformConfig);
            eventMappings.push({
                nativeEventPath: path,
                animatedValueTag: value.__getNativeTag()
            });
        } else if (value instanceof _AnimatedValueXY.default) {
            traverse(value.x, path.concat('x'));
            traverse(value.y, path.concat('y'));
        } else if (typeof value === 'object') {
            for(var key in value){
                traverse(value[key], path.concat(key));
            }
        }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    // Assume that the event containing `nativeEvent` is always the first argument.
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _RendererProxy.findNodeHandle)(viewRef);
    if (viewTag != null) {
        eventMappings.forEach((mapping)=>{
            _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
        });
    }
    return {
        detach () {
            if (viewTag != null) {
                eventMappings.forEach((mapping)=>{
                    _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName, // $FlowFixMe[incompatible-call]
                    mapping.animatedValueTag);
                });
            }
        }
    };
}
function validateMapping(argMapping, args) {
    var validate = (recMapping, recEvt, key)=>{
        if (recMapping instanceof _AnimatedValue.default) {
            (0, _invariant.default)(typeof recEvt === 'number', 'Bad mapping of event key ' + key + ', should be number but got ' + typeof recEvt);
            return;
        }
        if (recMapping instanceof _AnimatedValueXY.default) {
            (0, _invariant.default)(typeof recEvt.x === 'number' && typeof recEvt.y === 'number', 'Bad mapping of event key ' + key + ', should be XY but got ' + recEvt);
            return;
        }
        if (typeof recEvt === 'number') {
            (0, _invariant.default)(recMapping instanceof _AnimatedValue.default, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
        }
        (0, _invariant.default)(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        (0, _invariant.default)(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for(var mappingKey in recMapping){
            validate(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
    };
    (0, _invariant.default)(args.length >= argMapping.length, 'Event has less arguments than mapping');
    argMapping.forEach((mapping, idx)=>{
        validate(mapping, args[idx], 'arg' + idx);
    });
}
var AnimatedEvent = /*#__PURE__*/ function() {
    function AnimatedEvent(argMapping, config) {
        _class_call_check._(this, AnimatedEvent);
        this._listeners = [];
        this._callListeners = (...args)=>{
            this._listeners.forEach((listener)=>listener.apply(void 0, _to_consumable_array._(args)));
        };
        this._argMapping = argMapping;
        if (config == null) {
            console.warn('Animated.event now requires a second argument for options');
            config = {
                useNativeDriver: false
            };
        }
        if (config.listener) {
            this.__addListener(config.listener);
        }
        this._attachedEvent = null;
        this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        this.__platformConfig = config.platformConfig;
    }
    _create_class._(AnimatedEvent, [
        {
            key: "__addListener",
            value: function __addListener(callback) {
                this._listeners.push(callback);
            }
        },
        {
            key: "__removeListener",
            value: function __removeListener(callback) {
                this._listeners = this._listeners.filter((listener)=>listener !== callback);
            }
        },
        {
            key: "__attach",
            value: function __attach(viewRef, eventName) {
                (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
                this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
            }
        },
        {
            key: "__detach",
            value: function __detach(viewTag, eventName) {
                (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
                this._attachedEvent && this._attachedEvent.detach();
            }
        },
        {
            key: "__getHandler",
            value: function __getHandler() {
                if (this.__isNative) {
                    if (false) { var validatedMapping } else {
                        return this._callListeners;
                    }
                }
                var validatedMapping1 = false;
                return (...args)=>{
                    if (false) {}
                    var traverse = (recMapping, recEvt)=>{
                        if (recMapping instanceof _AnimatedValue.default) {
                            if (typeof recEvt === 'number') {
                                recMapping.setValue(recEvt);
                            }
                        } else if (recMapping instanceof _AnimatedValueXY.default) {
                            if (typeof recEvt === 'object') {
                                traverse(recMapping.x, recEvt.x);
                                traverse(recMapping.y, recEvt.y);
                            }
                        } else if (typeof recMapping === 'object') {
                            for(var mappingKey in recMapping){
                                /* $FlowFixMe[prop-missing] (>=0.120.0) This comment suppresses an
             * error found when Flow v0.120 was deployed. To see the error,
             * delete this comment and run Flow. */ traverse(recMapping[mappingKey], recEvt[mappingKey]);
                            }
                        }
                    };
                    this._argMapping.forEach((mapping, idx)=>{
                        traverse(mapping, args[idx]);
                    });
                    this._callListeners.apply(this, _to_consumable_array._(args));
                };
            }
        }
    ]);
    return AnimatedEvent;
}();


}),
21033: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 * @oncall react_native
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90345));
var _AnimatedMock = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5255));
var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = _object_spread._({
    get FlatList () {
        return (__webpack_require__(42209)/* ["default"] */["default"]);
    },
    get Image () {
        return (__webpack_require__(14622)/* ["default"] */["default"]);
    },
    get ScrollView () {
        return (__webpack_require__(44606)/* ["default"] */["default"]);
    },
    get SectionList () {
        return (__webpack_require__(91137)/* ["default"] */["default"]);
    },
    get Text () {
        return (__webpack_require__(32468)/* ["default"] */["default"]);
    },
    get View () {
        return (__webpack_require__(58634)/* ["default"] */["default"]);
    }
}, Animated);


}),
90345: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _to_consumable_array = __webpack_require__(92716);
var _AnimatedEvent = __webpack_require__(12164);
var _DecayAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(36604));
var _SpringAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78952));
var _TimingAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13686));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _AnimatedAddition = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87054));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51387));
var _AnimatedDiffClamp = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76891));
var _AnimatedDivision = /*#__PURE__*/ _interop_require_default._(__webpack_require__(37306));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedModulo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70056));
var _AnimatedMultiplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57268));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedSubtraction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76781));
var _AnimatedTracking = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75538));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86473));
var add = function(a, b) {
    return new _AnimatedAddition.default(a, b);
};
var subtract = function(a, b) {
    return new _AnimatedSubtraction.default(a, b);
};
var divide = function(a, b) {
    return new _AnimatedDivision.default(a, b);
};
var multiply = function(a, b) {
    return new _AnimatedMultiplication.default(a, b);
};
var modulo = function(a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
};
var diffClamp = function(a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
};
var _combineCallbacks = function(callback, config) {
    if (callback && config.onComplete) {
        return (...args)=>{
            var _config;
            config.onComplete && (_config = config).onComplete.apply(_config, _to_consumable_array._(args));
            callback && callback.apply(void 0, _to_consumable_array._(args));
        };
    } else {
        return callback || config.onComplete;
    }
};
var maybeVectorAnim = function(value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
        var configX = _object_spread._({}, config);
        var configY = _object_spread._({}, config);
        for(var key in config){
            var _config_key = config[key], x = _config_key.x, y = _config_key.y;
            if (x !== undefined && y !== undefined) {
                configX[key] = x;
                configY[key] = y;
            }
        }
        var aX = anim(value.x, configX);
        var aY = anim(value.y, configY);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aX,
            aY
        ], {
            stopTogether: false
        });
    } else if (value instanceof _AnimatedColor.default) {
        var configR = _object_spread._({}, config);
        var configG = _object_spread._({}, config);
        var configB = _object_spread._({}, config);
        var configA = _object_spread._({}, config);
        for(var key1 in config){
            var _config_key1 = config[key1], r = _config_key1.r, g = _config_key1.g, b = _config_key1.b, a = _config_key1.a;
            if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
                configR[key1] = r;
                configG[key1] = g;
                configB[key1] = b;
                configA[key1] = a;
            }
        }
        var aR = anim(value.r, configR);
        var aG = anim(value.g, configG);
        var aB = anim(value.b, configB);
        var aA = anim(value.a, configA);
        // We use `stopTogether: false` here because otherwise tracking will break
        // because the second animation will get stopped before it can update.
        return parallel([
            aR,
            aG,
            aB,
            aA
        ], {
            stopTogether: false
        });
    }
    return null;
};
var spring = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, spring) || {
        start: function(callback) {
            start(value, config, callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var timing = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        if (configuration.toValue instanceof _AnimatedNode.default) {
            singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
        } else {
            singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
        }
    };
    return maybeVectorAnim(value, config, timing) || {
        start: function(callback, isLooping) {
            start(value, _object_spread_props._(_object_spread._({}, config), {
                isLooping
            }), callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var decay = function(value, config) {
    var start = function(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
        start: function(callback) {
            start(value, config, callback);
        },
        stop: function() {
            value.stopAnimation();
        },
        reset: function() {
            value.resetAnimation();
        },
        _startNativeLoop: function(iterations) {
            var singleConfig = _object_spread_props._(_object_spread._({}, config), {
                iterations
            });
            start(value, singleConfig);
        },
        _isUsingNativeDriver: function() {
            return config.useNativeDriver || false;
        }
    };
};
var sequence = function(animations) {
    var current = 0;
    return {
        start: function(callback, isLooping) {
            var onComplete = function(result) {
                if (!result.finished) {
                    callback && callback(result);
                    return;
                }
                current++;
                if (current === animations.length) {
                    // if the start is called, even without a reset, it should start from the beginning
                    current = 0;
                    callback && callback(result);
                    return;
                }
                animations[current].start(onComplete, isLooping);
            };
            if (animations.length === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                animations[current].start(onComplete, isLooping);
            }
        },
        stop: function() {
            if (current < animations.length) {
                animations[current].stop();
            }
        },
        reset: function() {
            animations.forEach((animation, idx)=>{
                if (idx <= current) {
                    animation.reset();
                }
            });
            current = 0;
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
        },
        _isUsingNativeDriver: function() {
            return false;
        }
    };
};
var parallel = function(animations, config) {
    var doneCount = 0;
    // Make sure we only call stop() at most once for each animation
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
        start: function(callback, isLooping) {
            if (doneCount === animations.length) {
                callback && callback({
                    finished: true
                });
                return;
            }
            animations.forEach((animation, idx)=>{
                var cb = function(endResult) {
                    hasEnded[idx] = true;
                    doneCount++;
                    if (doneCount === animations.length) {
                        doneCount = 0;
                        callback && callback(endResult);
                        return;
                    }
                    if (!endResult.finished && stopTogether) {
                        result.stop();
                    }
                };
                if (!animation) {
                    cb({
                        finished: true
                    });
                } else {
                    animation.start(cb, isLooping);
                }
            });
        },
        stop: function() {
            animations.forEach((animation, idx)=>{
                !hasEnded[idx] && animation.stop();
                hasEnded[idx] = true;
            });
        },
        reset: function() {
            animations.forEach((animation, idx)=>{
                animation.reset();
                hasEnded[idx] = false;
                doneCount = 0;
            });
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
        },
        _isUsingNativeDriver: function() {
            return false;
        }
    };
    return result;
};
var delay = function(time) {
    // Would be nice to make a specialized implementation
    return timing(new _AnimatedValue.default(0), {
        toValue: 0,
        delay: time,
        duration: 0,
        useNativeDriver: false
    });
};
var stagger = function(time, animations) {
    return parallel(animations.map((animation, i)=>{
        return sequence([
            delay(time * i),
            animation
        ]);
    }));
};
var loop = function(animation, // $FlowFixMe[prop-missing]
ref) {
    var _ref = ref === void 0 ? {} : ref, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations, _ref_resetBeforeIteration = _ref.resetBeforeIteration, resetBeforeIteration = _ref_resetBeforeIteration === void 0 ? true : _ref_resetBeforeIteration;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
        start: function(callback) {
            var restart = function(ref) {
                var result = ref === void 0 ? {
                    finished: true
                } : ref;
                if (isFinished || iterationsSoFar === iterations || result.finished === false) {
                    callback && callback(result);
                } else {
                    iterationsSoFar++;
                    resetBeforeIteration && animation.reset();
                    animation.start(restart, iterations === -1);
                }
            };
            if (!animation || iterations === 0) {
                callback && callback({
                    finished: true
                });
            } else {
                if (animation._isUsingNativeDriver()) {
                    animation._startNativeLoop(iterations);
                } else {
                    restart(); // Start looping recursively on the js thread
                }
            }
        },
        stop: function() {
            isFinished = true;
            animation.stop();
        },
        reset: function() {
            iterationsSoFar = 0;
            isFinished = false;
            animation.reset();
        },
        _startNativeLoop: function() {
            throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
        },
        _isUsingNativeDriver: function() {
            return animation._isUsingNativeDriver();
        }
    };
};
function forkEvent(event, listener) {
    if (!event) {
        return listener;
    } else if (event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__addListener(listener);
        return event;
    } else {
        return (...args)=>{
            typeof event === 'function' && event.apply(void 0, _to_consumable_array._(args));
            listener.apply(void 0, _to_consumable_array._(args));
        };
    }
}
function unforkEvent(event, listener) {
    if (event && event instanceof _AnimatedEvent.AnimatedEvent) {
        event.__removeListener(listener);
    }
}
var event = function(argMapping, config) {
    var animatedEvent = new _AnimatedEvent.AnimatedEvent(argMapping, config);
    if (animatedEvent.__isNative) {
        return animatedEvent;
    } else {
        return animatedEvent.__getHandler();
    }
};
var _default = {
    /**
   * Standard value class for driving animations.  Typically initialized with
   * `new Animated.Value(0);`
   *
   * See https://reactnative.dev/docs/animated#value
   */ Value: _AnimatedValue.default,
    /**
   * 2D value class for driving 2D animations, such as pan gestures.
   *
   * See https://reactnative.dev/docs/animatedvaluexy
   */ ValueXY: _AnimatedValueXY.default,
    /**
   * Value class for driving color animations.
   */ Color: _AnimatedColor.default,
    /**
   * Exported to use the Interpolation type in flow.
   *
   * See https://reactnative.dev/docs/animated#interpolation
   */ Interpolation: _AnimatedInterpolation.default,
    /**
   * Exported for ease of type checking. All animated values derive from this
   * class.
   *
   * See https://reactnative.dev/docs/animated#node
   */ Node: _AnimatedNode.default,
    /**
   * Animates a value from an initial velocity to zero based on a decay
   * coefficient.
   *
   * See https://reactnative.dev/docs/animated#decay
   */ decay,
    /**
   * Animates a value along a timed easing curve. The Easing module has tons of
   * predefined curves, or you can use your own function.
   *
   * See https://reactnative.dev/docs/animated#timing
   */ timing,
    /**
   * Animates a value according to an analytical spring model based on
   * damped harmonic oscillation.
   *
   * See https://reactnative.dev/docs/animated#spring
   */ spring,
    /**
   * Creates a new Animated value composed from two Animated values added
   * together.
   *
   * See https://reactnative.dev/docs/animated#add
   */ add,
    /**
   * Creates a new Animated value composed by subtracting the second Animated
   * value from the first Animated value.
   *
   * See https://reactnative.dev/docs/animated#subtract
   */ subtract,
    /**
   * Creates a new Animated value composed by dividing the first Animated value
   * by the second Animated value.
   *
   * See https://reactnative.dev/docs/animated#divide
   */ divide,
    /**
   * Creates a new Animated value composed from two Animated values multiplied
   * together.
   *
   * See https://reactnative.dev/docs/animated#multiply
   */ multiply,
    /**
   * Creates a new Animated value that is the (non-negative) modulo of the
   * provided Animated value.
   *
   * See https://reactnative.dev/docs/animated#modulo
   */ modulo,
    /**
   * Create a new Animated value that is limited between 2 values. It uses the
   * difference between the last value so even if the value is far from the
   * bounds it will start changing when the value starts getting closer again.
   *
   * See https://reactnative.dev/docs/animated#diffclamp
   */ diffClamp,
    /**
   * Starts an animation after the given delay.
   *
   * See https://reactnative.dev/docs/animated#delay
   */ delay,
    /**
   * Starts an array of animations in order, waiting for each to complete
   * before starting the next. If the current running animation is stopped, no
   * following animations will be started.
   *
   * See https://reactnative.dev/docs/animated#sequence
   */ sequence,
    /**
   * Starts an array of animations all at the same time. By default, if one
   * of the animations is stopped, they will all be stopped. You can override
   * this with the `stopTogether` flag.
   *
   * See https://reactnative.dev/docs/animated#parallel
   */ parallel,
    /**
   * Array of animations may run in parallel (overlap), but are started in
   * sequence with successive delays.  Nice for doing trailing effects.
   *
   * See https://reactnative.dev/docs/animated#stagger
   */ stagger,
    /**
   * Loops a given animation continuously, so that each time it reaches the
   * end, it resets and begins again from the start.
   *
   * See https://reactnative.dev/docs/animated#loop
   */ loop,
    /**
   * Takes an array of mappings and extracts values from each arg accordingly,
   * then calls `setValue` on the mapped outputs.
   *
   * See https://reactnative.dev/docs/animated#event
   */ event,
    /**
   * Make any React component Animatable.  Used to create `Animated.View`, etc.
   *
   * See https://reactnative.dev/docs/animated#createanimatedcomponent
   */ createAnimatedComponent: _createAnimatedComponent.default,
    /**
   * Imperative API to attach an animated value to an event on a view. Prefer
   * using `Animated.event` with `useNativeDrive: true` if possible.
   *
   * See https://reactnative.dev/docs/animated#attachnativeevent
   */ attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    /**
   * Advanced imperative API for snooping on animated events that are passed in
   * through props. Use values directly where possible.
   *
   * See https://reactnative.dev/docs/animated#forkevent
   */ forkEvent,
    unforkEvent,
    /**
   * Expose Event class, so it can be used as a type for type checkers.
   */ Event: _AnimatedEvent.AnimatedEvent
};


}),
5255: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _to_consumable_array = __webpack_require__(92716);
var _AnimatedEvent = __webpack_require__(12164);
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90345));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51387));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedValueXY = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86473));
/**
 * Animations are a source of flakiness in snapshot testing. This mock replaces
 * animation functions from AnimatedImplementation with empty animations for
 * predictability in tests. When possible the animation will run immediately
 * to the final state.
 */ // Prevent any callback invocation from recursively triggering another
// callback, which may trigger another animation
var inAnimationCallback = false;
function mockAnimationStart(start) {
    return (callback)=>{
        var guardedCallback = callback == null ? callback : (...args)=>{
            if (inAnimationCallback) {
                console.warn('Ignoring recursive animation callback when running mock animations');
                return;
            }
            inAnimationCallback = true;
            try {
                callback.apply(void 0, _to_consumable_array._(args));
            } finally{
                inAnimationCallback = false;
            }
        };
        start(guardedCallback);
    };
}
var emptyAnimation = {
    start: ()=>{},
    stop: ()=>{},
    reset: ()=>{},
    _startNativeLoop: ()=>{},
    _isUsingNativeDriver: ()=>{
        return false;
    }
};
var mockCompositeAnimation = (animations)=>_object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            animations.forEach((animation)=>animation.start());
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
var spring = function(value, config) {
    var anyValue = value;
    return _object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            anyValue.setValue(config.toValue);
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
};
var timing = function(value, config) {
    var anyValue = value;
    return _object_spread_props._(_object_spread._({}, emptyAnimation), {
        start: mockAnimationStart((callback)=>{
            anyValue.setValue(config.toValue);
            callback === null || callback === void 0 ? void 0 : callback({
                finished: true
            });
        })
    });
};
var decay = function(value, config) {
    return emptyAnimation;
};
var sequence = function(animations) {
    return mockCompositeAnimation(animations);
};
var parallel = function(animations, config) {
    return mockCompositeAnimation(animations);
};
var delay = function(time) {
    return emptyAnimation;
};
var stagger = function(time, animations) {
    return mockCompositeAnimation(animations);
};
var loop = function(animation, // $FlowFixMe[prop-missing]
ref) {
    var _ref = ref === void 0 ? {} : ref, _ref_iterations = _ref.iterations, iterations = _ref_iterations === void 0 ? -1 : _ref_iterations;
    return emptyAnimation;
};
var _default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
};


}),
72466: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ease;
/**
 * The `Easing` module implements common easing functions. This module is used
 * by [Animate.timing()](docs/animate.html#timing) to convey physically
 * believable motion in animations.
 *
 * You can find a visualization of some common easing functions at
 * http://easings.net/
 *
 * ### Predefined animations
 *
 * The `Easing` module provides several predefined animations through the
 * following methods:
 *
 * - [`back`](docs/easing.html#back) provides a simple animation where the
 *   object goes slightly back before moving forward
 * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
 * - [`ease`](docs/easing.html#ease) provides a simple inertial animation
 * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
 *
 * ### Standard functions
 *
 * Three standard easing functions are provided:
 *
 * - [`linear`](docs/easing.html#linear)
 * - [`quad`](docs/easing.html#quad)
 * - [`cubic`](docs/easing.html#cubic)
 *
 * The [`poly`](docs/easing.html#poly) function can be used to implement
 * quartic, quintic, and other higher power functions.
 *
 * ### Additional functions
 *
 * Additional mathematical functions are provided by the following methods:
 *
 * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
 * - [`circle`](docs/easing.html#circle) provides a circular function
 * - [`sin`](docs/easing.html#sin) provides a sinusoidal function
 * - [`exp`](docs/easing.html#exp) provides an exponential function
 *
 * The following helpers are used to modify other easing functions.
 *
 * - [`in`](docs/easing.html#in) runs an easing function forwards
 * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
 * - [`out`](docs/easing.html#out) runs an easing function backwards
 */ var Easing = {
    /**
   * A stepping function, returns 1 for any positive value of `n`.
   */ step0 (n) {
        return n > 0 ? 1 : 0;
    },
    /**
   * A stepping function, returns 1 if `n` is greater than or equal to 1.
   */ step1 (n) {
        return n >= 1 ? 1 : 0;
    },
    /**
   * A linear function, `f(t) = t`. Position correlates to elapsed time one to
   * one.
   *
   * http://cubic-bezier.com/#0,0,1,1
   */ linear (t) {
        return t;
    },
    /**
   * A simple inertial interaction, similar to an object slowly accelerating to
   * speed.
   *
   * http://cubic-bezier.com/#.42,0,1,1
   */ ease (t) {
        if (!ease) {
            ease = Easing.bezier(0.42, 0, 1, 1);
        }
        return ease(t);
    },
    /**
   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
   * time.
   *
   * http://easings.net/#easeInQuad
   */ quad (t) {
        return t * t;
    },
    /**
   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
   * time.
   *
   * http://easings.net/#easeInCubic
   */ cubic (t) {
        return t * t * t;
    },
    /**
   * A power function. Position is equal to the Nth power of elapsed time.
   *
   * n = 4: http://easings.net/#easeInQuart
   * n = 5: http://easings.net/#easeInQuint
   */ poly (n) {
        return (t)=>Math.pow(t, n);
    },
    /**
   * A sinusoidal function.
   *
   * http://easings.net/#easeInSine
   */ sin (t) {
        return 1 - Math.cos(t * Math.PI / 2);
    },
    /**
   * A circular function.
   *
   * http://easings.net/#easeInCirc
   */ circle (t) {
        return 1 - Math.sqrt(1 - t * t);
    },
    /**
   * An exponential function.
   *
   * http://easings.net/#easeInExpo
   */ exp (t) {
        return Math.pow(2, 10 * (t - 1));
    },
    /**
   * A simple elastic interaction, similar to a spring oscillating back and
   * forth.
   *
   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
   * times.
   *
   * http://easings.net/#easeInElastic
   */ elastic (ref) {
        var bounciness = ref === void 0 ? 1 : ref;
        var p = bounciness * Math.PI;
        return (t)=>1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    },
    /**
   * Use with `Animated.parallel()` to create a simple effect where the object
   * animates back slightly as the animation starts.
   *
   * https://easings.net/#easeInBack
   */ back (ref) {
        var s = ref === void 0 ? 1.70158 : ref;
        return (t)=>t * t * ((s + 1) * t - s);
    },
    /**
   * Provides a simple bouncing effect.
   *
   * http://easings.net/#easeInBounce
   */ bounce (t) {
        if (t < 1 / 2.75) {
            return 7.5625 * t * t;
        }
        if (t < 2 / 2.75) {
            var t2 = t - 1.5 / 2.75;
            return 7.5625 * t2 * t2 + 0.75;
        }
        if (t < 2.5 / 2.75) {
            var t21 = t - 2.25 / 2.75;
            return 7.5625 * t21 * t21 + 0.9375;
        }
        var t22 = t - 2.625 / 2.75;
        return 7.5625 * t22 * t22 + 0.984375;
    },
    /**
   * Provides a cubic bezier curve, equivalent to CSS Transitions'
   * `transition-timing-function`.
   *
   * A useful tool to visualize cubic bezier curves can be found at
   * http://cubic-bezier.com/
   */ bezier (x1, y1, x2, y2) {
        var _bezier = (__webpack_require__(97324)/* ["default"] */["default"]);
        return _bezier(x1, y1, x2, y2);
    },
    /**
   * Runs an easing function forwards.
   */ in (easing) {
        return easing;
    },
    /**
   * Runs an easing function backwards.
   */ out (easing) {
        return (t)=>1 - easing(1 - t);
    },
    /**
   * Makes any easing function symmetrical. The easing function will run
   * forwards for half of the duration, then backwards for the rest of the
   * duration.
   */ inOut (easing) {
        return (t)=>{
            if (t < 0.5) {
                return easing(t * 2) / 2;
            }
            return 1 - easing((1 - t) * 2) / 2;
        };
    }
};
var _default = Easing;


}),
83808: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fromBouncinessAndSpeed: function() {
        return fromBouncinessAndSpeed;
    },
    fromOrigamiTensionAndFriction: function() {
        return fromOrigamiTensionAndFriction;
    }
});
function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
    return {
        stiffness: stiffnessFromOrigamiValue(tension),
        damping: dampingFromOrigamiValue(friction)
    };
}
function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
        return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
        return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
        return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
        return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
        return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
        return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
        return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
        if (tension <= 18) {
            return b3Friction1(tension);
        } else if (tension > 18 && tension <= 44) {
            return b3Friction2(tension);
        } else {
            return b3Friction3(tension);
        }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
        stiffness: stiffnessFromOrigamiValue(bouncyTension),
        damping: dampingFromOrigamiValue(bouncyFriction)
    };
}


}),
93492: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Animation;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _to_consumable_array = __webpack_require__(92716);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33994));
var startNativeAnimationNextId = 1;
var _nativeID = /*#__PURE__*/ _class_private_field_loose_key._("_nativeID"), _onEnd = /*#__PURE__*/ _class_private_field_loose_key._("_onEnd"), _useNativeDriver = /*#__PURE__*/ _class_private_field_loose_key._("_useNativeDriver");
var Animation = /*#__PURE__*/ function() {
    "use strict";
    function Animation(config) {
        _class_call_check._(this, Animation);
        Object.defineProperty(this, _nativeID, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _onEnd, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _useNativeDriver, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver] = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
        this.__active = false;
        this.__isInteraction = config.isInteraction ?? !_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver];
        this.__isLooping = config.isLooping;
        this.__iterations = config.iterations ?? 1;
        if (false) {}
    }
    _create_class._(Animation, [
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                if (!_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver] && animatedValue.__isNative === true) {
                    throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
                }
                _class_private_field_loose_base._(this, _onEnd)[_onEnd] = onEnd;
                this.__active = true;
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (_class_private_field_loose_base._(this, _nativeID)[_nativeID] != null) {
                    var nativeID = _class_private_field_loose_base._(this, _nativeID)[_nativeID];
                    var identifier = `${nativeID}:stopAnimation`;
                    try {
                        // This is only required when singleOpBatching is used, as otherwise
                        // we flush calls immediately when there's no pending queue.
                        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(identifier);
                        _NativeAnimatedHelper.default.API.stopAnimation(nativeID);
                    } finally{
                        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(identifier);
                    }
                }
                this.__active = false;
            }
        },
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                // Subclasses that have corresponding animation implementation done in native
                // should override this method
                throw new Error('This animation type cannot be offloaded to native');
            }
        },
        {
            key: "__findAnimatedPropsNodes",
            value: function __findAnimatedPropsNodes(node) {
                var result = [];
                if (node instanceof _AnimatedProps.default) {
                    result.push(node);
                    return result;
                }
                for (var child of node.__getChildren()){
                    var _result;
                    (_result = result).push.apply(_result, _to_consumable_array._(this.__findAnimatedPropsNodes(child)));
                }
                return result;
            }
        },
        {
            key: "__startAnimationIfNative",
            value: function __startAnimationIfNative(animatedValue) {
                if (!_class_private_field_loose_base._(this, _useNativeDriver)[_useNativeDriver]) {
                    return false;
                }
                var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
                startNativeAnimationNextId += 1;
                _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
                try {
                    var config = this.__getNativeAnimationConfig();
                    animatedValue.__makeNative(config.platformConfig);
                    _class_private_field_loose_base._(this, _nativeID)[_nativeID] = _NativeAnimatedHelper.default.generateNewAnimationId();
                    _NativeAnimatedHelper.default.API.startAnimatingNode(_class_private_field_loose_base._(this, _nativeID)[_nativeID], animatedValue.__getNativeTag(), config, (result)=>{
                        this.__notifyAnimationEnd(result);
                        // When using natively driven animations, once the animation completes,
                        // we need to ensure that the JS side nodes are synced with the updated
                        // values.
                        var value = result.value;
                        if (value != null) {
                            animatedValue.__onAnimatedValueUpdateReceived(value);
                            if (this.__isLooping === true) {
                                return;
                            }
                            // Once the JS side node is synced with the updated values, trigger an
                            // update on the AnimatedProps nodes to call any registered callbacks.
                            this.__findAnimatedPropsNodes(animatedValue).forEach((node)=>node.update());
                        }
                    });
                    return true;
                } catch (e) {
                    throw e;
                } finally{
                    _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
                }
            }
        },
        {
            /**
   * Notify the completion callback that the animation has ended. The completion
   * callback will never be called more than once.
   */ key: "__notifyAnimationEnd",
            value: function __notifyAnimationEnd(result) {
                var callback = _class_private_field_loose_base._(this, _onEnd)[_onEnd];
                if (callback != null) {
                    _class_private_field_loose_base._(this, _onEnd)[_onEnd] = null;
                    callback(result);
                }
            }
        },
        {
            key: "__getDebugID",
            value: function __getDebugID() {
                if (false) {}
                return undefined;
            }
        }
    ]);
    return Animation;
}();


}),
36604: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DecayAnimation;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93492));
var DecayAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(DecayAnimation, Animation);
    function DecayAnimation(config) {
        _class_call_check._(this, DecayAnimation);
        var _this;
        _this = _call_super._(this, DecayAnimation, [
            config
        ]);
        _this._deceleration = config.deceleration ?? 0.998;
        _this._velocity = config.velocity;
        _this._platformConfig = config.platformConfig;
        return _this;
    }
    _create_class._(DecayAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                return {
                    type: 'decay',
                    deceleration: this._deceleration,
                    velocity: this._velocity,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(DecayAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._lastValue = fromValue;
                this._fromValue = fromValue;
                this._onUpdate = onUpdate;
                this._startTime = Date.now();
                var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                if (!useNativeDriver) {
                    this._animationFrame = requestAnimationFrame(()=>this.onUpdate());
                }
            }
        },
        {
            key: "onUpdate",
            value: function onUpdate() {
                var now = Date.now();
                var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
                this._onUpdate(value);
                if (Math.abs(this._lastValue - value) < 0.1) {
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                this._lastValue = value;
                if (this.__active) {
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                }
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(DecayAnimation.prototype), "stop", this).call(this);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return DecayAnimation;
}(_wrap_native_super._(_Animation.default));


}),
78952: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SpringAnimation;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _wrap_native_super = __webpack_require__(30753);
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51387));
var _SpringConfig = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(83808));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93492));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var SpringAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(SpringAnimation, Animation);
    function SpringAnimation(config) {
        _class_call_check._(this, SpringAnimation);
        var _this;
        _this = _call_super._(this, SpringAnimation, [
            config
        ]);
        _this._overshootClamping = config.overshootClamping ?? false;
        _this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;
        _this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;
        _this._initialVelocity = config.velocity ?? 0;
        _this._lastVelocity = config.velocity ?? 0;
        _this._toValue = config.toValue;
        _this._delay = config.delay ?? 0;
        _this._platformConfig = config.platformConfig;
        if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
            (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            _this._stiffness = config.stiffness ?? 100;
            _this._damping = config.damping ?? 10;
            _this._mass = config.mass ?? 1;
        } else if (config.bounciness !== undefined || config.speed !== undefined) {
            // Convert the origami bounciness/speed values to stiffness/damping
            // We assume mass is 1.
            (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
            var springConfig = _SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);
            _this._stiffness = springConfig.stiffness;
            _this._damping = springConfig.damping;
            _this._mass = 1;
        } else {
            // Convert the origami tension/friction values to stiffness/damping
            // We assume mass is 1.
            var springConfig1 = _SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);
            _this._stiffness = springConfig1.stiffness;
            _this._damping = springConfig1.damping;
            _this._mass = 1;
        }
        (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
        (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
        (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
        return _this;
    }
    _create_class._(SpringAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                return {
                    type: 'spring',
                    overshootClamping: this._overshootClamping,
                    restDisplacementThreshold: this._restDisplacementThreshold,
                    restSpeedThreshold: this._restSpeedThreshold,
                    stiffness: this._stiffness,
                    damping: this._damping,
                    mass: this._mass,
                    initialVelocity: this._initialVelocity ?? this._lastVelocity,
                    toValue: this._toValue,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(SpringAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._startPosition = fromValue;
                this._lastPosition = this._startPosition;
                this._onUpdate = onUpdate;
                this._lastTime = Date.now();
                this._frameTime = 0.0;
                if (previousAnimation instanceof SpringAnimation) {
                    var internalState = previousAnimation.getInternalState();
                    this._lastPosition = internalState.lastPosition;
                    this._lastVelocity = internalState.lastVelocity;
                    // Set the initial velocity to the last velocity
                    this._initialVelocity = this._lastVelocity;
                    this._lastTime = internalState.lastTime;
                }
                var start = ()=>{
                    var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                    if (!useNativeDriver) {
                        this.onUpdate();
                    }
                };
                //  If this._delay is more than 0, we start after the timeout.
                if (this._delay) {
                    this._timeout = setTimeout(start, this._delay);
                } else {
                    start();
                }
            }
        },
        {
            key: "getInternalState",
            value: function getInternalState() {
                return {
                    lastPosition: this._lastPosition,
                    lastVelocity: this._lastVelocity,
                    lastTime: this._lastTime
                };
            }
        },
        {
            /**
   * This spring model is based off of a damped harmonic oscillator
   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
   *
   * We use the closed form of the second order differential equation:
   *
   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0
   *
   * where
   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),
   *    ζ = c / 2√mk (damping ratio),
   *    c = damping constant
   *    k = stiffness
   *    m = mass
   *
   * The derivation of the closed form is described in detail here:
   * http://planetmath.org/sites/default/files/texpdf/39745.pdf
   *
   * This algorithm happens to match the algorithm used by CASpringAnimation,
   * a QuartzCore (iOS) API that creates spring animations.
   */ key: "onUpdate",
            value: function onUpdate() {
                // If for some reason we lost a lot of frames (e.g. process large payload or
                // stopped in the debugger), we only advance by 4 frames worth of
                // computation and will continue on the next frame. It's better to have it
                // running at faster speed than jumping to the end.
                var MAX_STEPS = 64;
                var now = Date.now();
                if (now > this._lastTime + MAX_STEPS) {
                    now = this._lastTime + MAX_STEPS;
                }
                var deltaTime = (now - this._lastTime) / 1000;
                this._frameTime += deltaTime;
                var c = this._damping;
                var m = this._mass;
                var k = this._stiffness;
                var v0 = -this._initialVelocity;
                var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio
                var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)
                var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay
                var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0
                var position = 0.0;
                var velocity = 0.0;
                var t = this._frameTime;
                if (zeta < 1) {
                    // Under damped
                    var envelope = Math.exp(-zeta * omega0 * t);
                    position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
                    // This looks crazy -- it's actually just the derivative of the
                    // oscillation function
                    velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
                } else {
                    // Critically damped
                    var envelope1 = Math.exp(-omega0 * t);
                    position = this._toValue - envelope1 * (x0 + (v0 + omega0 * x0) * t);
                    velocity = envelope1 * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
                }
                this._lastTime = now;
                this._lastPosition = position;
                this._lastVelocity = velocity;
                this._onUpdate(position);
                if (!this.__active) {
                    // a listener might have stopped us in _onUpdate
                    return;
                }
                // Conditions for stopping the spring animation
                var isOvershooting = false;
                if (this._overshootClamping && this._stiffness !== 0) {
                    if (this._startPosition < this._toValue) {
                        isOvershooting = position > this._toValue;
                    } else {
                        isOvershooting = position < this._toValue;
                    }
                }
                var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
                var isDisplacement = true;
                if (this._stiffness !== 0) {
                    isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
                }
                if (isOvershooting || isVelocity && isDisplacement) {
                    if (this._stiffness !== 0) {
                        // Ensure that we end up with a round value
                        this._lastPosition = this._toValue;
                        this._lastVelocity = 0;
                        this._onUpdate(this._toValue);
                    }
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(SpringAnimation.prototype), "stop", this).call(this);
                clearTimeout(this._timeout);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return SpringAnimation;
}(_wrap_native_super._(_Animation.default));


}),
13686: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TimingAnimation;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _AnimatedColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51387));
var _Animation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93492));
var _easeInOut;
function easeInOut() {
    if (!_easeInOut) {
        var Easing = (__webpack_require__(72466)/* ["default"] */["default"]);
        _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
}
var TimingAnimation = /*#__PURE__*/ function(Animation) {
    "use strict";
    _inherits._(TimingAnimation, Animation);
    function TimingAnimation(config) {
        _class_call_check._(this, TimingAnimation);
        var _this;
        _this = _call_super._(this, TimingAnimation, [
            config
        ]);
        _this._toValue = config.toValue;
        _this._easing = config.easing ?? easeInOut();
        _this._duration = config.duration ?? 500;
        _this._delay = config.delay ?? 0;
        _this._platformConfig = config.platformConfig;
        return _this;
    }
    _create_class._(TimingAnimation, [
        {
            key: "__getNativeAnimationConfig",
            value: function __getNativeAnimationConfig() {
                var frameDuration = 1000.0 / 60.0;
                var frames = [];
                var numFrames = Math.round(this._duration / frameDuration);
                for(var frame = 0; frame < numFrames; frame++){
                    frames.push(this._easing(frame / numFrames));
                }
                frames.push(this._easing(1));
                return {
                    type: 'frames',
                    frames,
                    toValue: this._toValue,
                    iterations: this.__iterations,
                    platformConfig: this._platformConfig,
                    debugID: this.__getDebugID()
                };
            }
        },
        {
            key: "start",
            value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
                _get._(_get_prototype_of._(TimingAnimation.prototype), "start", this).call(this, fromValue, onUpdate, onEnd, previousAnimation, animatedValue);
                this._fromValue = fromValue;
                this._onUpdate = onUpdate;
                var start = ()=>{
                    this._startTime = Date.now();
                    var useNativeDriver = this.__startAnimationIfNative(animatedValue);
                    if (!useNativeDriver) {
                        // Animations that sometimes have 0 duration and sometimes do not
                        // still need to use the native driver when duration is 0 so as to
                        // not cause intermixed JS and native animations.
                        if (this._duration === 0) {
                            this._onUpdate(this._toValue);
                            this.__notifyAnimationEnd({
                                finished: true
                            });
                        } else {
                            this._animationFrame = requestAnimationFrame(()=>this.onUpdate());
                        }
                    }
                };
                if (this._delay) {
                    this._timeout = setTimeout(start, this._delay);
                } else {
                    start();
                }
            }
        },
        {
            key: "onUpdate",
            value: function onUpdate() {
                var now = Date.now();
                if (now >= this._startTime + this._duration) {
                    if (this._duration === 0) {
                        this._onUpdate(this._toValue);
                    } else {
                        this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
                    }
                    this.__notifyAnimationEnd({
                        finished: true
                    });
                    return;
                }
                this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
                if (this.__active) {
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                }
            }
        },
        {
            key: "stop",
            value: function stop() {
                _get._(_get_prototype_of._(TimingAnimation.prototype), "stop", this).call(this);
                clearTimeout(this._timeout);
                if (this._animationFrame != null) {
                    __webpack_require__.g.cancelAnimationFrame(this._animationFrame);
                }
                this.__notifyAnimationEnd({
                    finished: false
                });
            }
        }
    ]);
    return TimingAnimation;
}(_wrap_native_super._(_Animation.default));


}),
97324: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Portions Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * BezierEasing - use bezier curve for transition easing function
 * https://github.com/gre/bezier-easing
 * @copyright 2014-2015 Gaëtan Renaudeau. MIT License.
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return bezier;
    }
}));
// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
    return 3.0 * aA1;
}
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX, currentT, i = 0, aA = _aA, aB = _aB;
    do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
            aB = currentT;
        } else {
            aA = currentT;
        }
    }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for(var i = 0; i < NEWTON_ITERATIONS; ++i){
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0.0) {
            return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
    }
    // Precompute samples table
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
        for(var i = 0; i < kSplineTableSize; ++i){
            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
    }
    function getTForX(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample){
            intervalStart += kSampleStepSize;
        }
        --currentSample;
        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
            return guessForT;
        } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
    }
    return function BezierEasing(x) {
        if (mX1 === mY1 && mX2 === mY2) {
            return x; // linear
        }
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
            return 0;
        }
        if (x === 1) {
            return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
    };
}


}),
42209: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _FlatList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99130));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _createAnimatedComponent.default)(_FlatList.default);


}),
14622: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24451));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _createAnimatedComponent.default)(_Image.default);


}),
44606: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _RefreshControl = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88414));
var _ScrollView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27864));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89492));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _useAnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60690));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * @see https://github.com/facebook/react-native/commit/b8c8562
 */ var AnimatedScrollView = /*#__PURE__*/ _react.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
    // (Android only) When a ScrollView has a RefreshControl and
    // any `style` property set with an Animated.Value, the CSS
    // gets incorrectly applied twice. This is because ScrollView
    // swaps the parent/child relationship of itself and the
    // RefreshControl component (see ScrollView.js for more details).
    if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
        return(// $FlowFixMe[prop-missing]
        /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScrollViewWithInvertedRefreshControl, _object_spread_props._(_object_spread._({
            scrollEventThrottle: 0.0001
        }, props), {
            ref: forwardedRef,
            refreshControl: props.refreshControl
        })));
    } else {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, _object_spread_props._(_object_spread._({
            scrollEventThrottle: 0.0001
        }, props), {
            ref: forwardedRef
        }));
    }
});
var AnimatedScrollViewWithInvertedRefreshControl = /*#__PURE__*/ _react.forwardRef(// $FlowFixMe[incompatible-call]
function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
    // Split `props` into the animate-able props for the parent (RefreshControl)
    // and child (ScrollView).
    var _useMemo = (0, _react.useMemo)(()=>{
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[incompatible-call]
        var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
        return {
            intermediatePropsForRefreshControl: {
                style: outer
            },
            intermediatePropsForScrollView: _object_spread_props._(_object_spread._({}, props), {
                style: inner
            })
        };
    }, [
        props
    ]), intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl, intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
    // Handle animated props on `refreshControl`.
    var _useAnimatedProps1 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForRefreshControl), 2), refreshControlAnimatedProps = _useAnimatedProps1[0], refreshControlRef = _useAnimatedProps1[1];
    // NOTE: Assumes that refreshControl.ref` and `refreshControl.style` can be
    // safely clobbered.
    var refreshControl = /*#__PURE__*/ _react.cloneElement(props.refreshControl, _object_spread_props._(_object_spread._({}, refreshControlAnimatedProps), {
        ref: refreshControlRef
    }));
    // Handle animated props on `NativeDirectionalScrollView`.
    var _useAnimatedProps2 = _sliced_to_array._((0, _useAnimatedProps.default)(intermediatePropsForScrollView), 2), scrollViewAnimatedProps = _useAnimatedProps2[0], scrollViewRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return(// $FlowFixMe[incompatible-use] Investigate useAnimatedProps return value
    /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScrollView.default, _object_spread_props._(_object_spread._({}, scrollViewAnimatedProps), {
        ref: ref,
        refreshControl: refreshControl,
        // Because `refreshControl` is a clone of `props.refreshControl` with
        // `refreshControlAnimatedProps` added, we need to pass ScrollView.js
        // the combined styles since it also splits the outer/inner styles for
        // its parent/child, respectively. Without this, the refreshControl
        // styles would be ignored.
        style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
    })));
});
var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
var _default = AnimatedScrollView;


}),
91137: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _SectionList = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82231));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _createAnimatedComponent.default)(_SectionList.default);


}),
32468: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _createAnimatedComponent.default)(_Text.default);


}),
58634: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _createAnimatedComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11263));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _createAnimatedComponent.default)(_View.default);


}),
11263: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // We could use a mapped type here to introduce acceptable Animated variants
    // of properties, instead of doing so in the core StyleSheetTypes
    // Inexact Props are not supported, they'll be made exact here.
    default: function() {
        return createAnimatedComponent;
    },
    unstable_createAnimatedComponentWithAllowlist: function() {
        return unstable_createAnimatedComponentWithAllowlist;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _createAnimatedPropsHook = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97382));
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90285));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
function createAnimatedComponent(Component) {
    return unstable_createAnimatedComponentWithAllowlist(Component, null);
}
function unstable_createAnimatedComponentWithAllowlist(Component, allowlist) {
    var useAnimatedProps = (0, _createAnimatedPropsHook.default)(allowlist);
    var AnimatedComponent = /*#__PURE__*/ _react.forwardRef((props, forwardedRef)=>{
        var _useAnimatedProps = _sliced_to_array._(useAnimatedProps(props), 2), reducedProps = _useAnimatedProps[0], callbackRef = _useAnimatedProps[1];
        var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
        // Some components require explicit passthrough values for animation
        // to work properly. For example, if an animated component is
        // transformed and Pressable, onPress will not work after transform
        // without these passthrough values.
        // $FlowFixMe[prop-missing]
        var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues, style = reducedProps.style;
        var passthroughStyle = passthroughAnimatedPropExplicitValues === null || passthroughAnimatedPropExplicitValues === void 0 ? void 0 : passthroughAnimatedPropExplicitValues.style;
        var mergedStyle = (0, _react.useMemo)(()=>(0, _composeStyles.default)(style, passthroughStyle), [
            passthroughStyle,
            style
        ]);
        // NOTE: It is important that `passthroughAnimatedPropExplicitValues` is
        // spread after `reducedProps` but before `style`.
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, _object_spread_props._(_object_spread._({}, reducedProps, passthroughAnimatedPropExplicitValues), {
            style: mergedStyle,
            ref: ref
        }));
    });
    AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
    return AnimatedComponent;
}


}),
87054: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedAddition;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedAddition = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedAddition, AnimatedWithChildren);
    function AnimatedAddition(a, b, config) {
        _class_call_check._(this, AnimatedAddition);
        var _this;
        _this = _call_super._(this, AnimatedAddition, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedAddition, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() + this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedAddition.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'addition',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedAddition;
}(_AnimatedWithChildren.default);


}),
51387: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedColor;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12990));
var _PlatformColorValueTypes = __webpack_require__(49457);
var _AnimatedValue = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
};
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return null;
    }
    if (isRgbaValue(color)) {
        // $FlowIgnore[incompatible-cast] - Type is verified above
        return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(// $FlowIgnore[incompatible-cast] - Type is verified above
    color);
    if (normalizedColor === undefined || normalizedColor === null) {
        return null;
    }
    if (typeof normalizedColor === 'object') {
        var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    } else if (typeof normalizedColor === 'number') {
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            r,
            g,
            b,
            a
        };
    }
    return null;
}
function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
}
function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
}
var AnimatedColor = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedColor, AnimatedWithChildren);
    function AnimatedColor(valueIn, config) {
        _class_call_check._(this, AnimatedColor);
        var _this;
        _this = _call_super._(this, AnimatedColor, [
            config
        ]), _this._suspendCallbacks = 0;
        var value = valueIn ?? defaultColor;
        if (isRgbaAnimatedValue(value)) {
            // $FlowIgnore[incompatible-cast] - Type is verified above
            var rgbaAnimatedValue = value;
            _this.r = rgbaAnimatedValue.r;
            _this.g = rgbaAnimatedValue.g;
            _this.b = rgbaAnimatedValue.b;
            _this.a = rgbaAnimatedValue.a;
        } else {
            var processedColor = // $FlowIgnore[incompatible-cast] - Type is verified above
            processColor(value) ?? defaultColor;
            var initColor = defaultColor;
            if (isRgbaValue(processedColor)) {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                initColor = processedColor;
            } else {
                // $FlowIgnore[incompatible-cast] - Type is verified above
                _this.nativeColor = processedColor;
            }
            _this.r = new _AnimatedValue.default(initColor.r);
            _this.g = new _AnimatedValue.default(initColor.g);
            _this.b = new _AnimatedValue.default(initColor.b);
            _this.a = new _AnimatedValue.default(initColor.a);
        }
        if (config === null || config === void 0 ? void 0 : config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedColor, [
        {
            /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   */ key: "setValue",
            value: function setValue(value) {
                var shouldUpdateNodeConfig = false;
                if (this.__isNative) {
                    var nativeTag = this.__getNativeTag();
                    NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
                }
                var processedColor = processColor(value) ?? defaultColor;
                this._withSuspendedCallbacks(()=>{
                    if (isRgbaValue(processedColor)) {
                        // $FlowIgnore[incompatible-type] - Type is verified above
                        var rgbaValue = processedColor;
                        this.r.setValue(rgbaValue.r);
                        this.g.setValue(rgbaValue.g);
                        this.b.setValue(rgbaValue.b);
                        this.a.setValue(rgbaValue.a);
                        if (this.nativeColor != null) {
                            this.nativeColor = null;
                            shouldUpdateNodeConfig = true;
                        }
                    } else {
                        // $FlowIgnore[incompatible-type] - Type is verified above
                        var nativeColor = processedColor;
                        if (this.nativeColor !== nativeColor) {
                            this.nativeColor = nativeColor;
                            shouldUpdateNodeConfig = true;
                        }
                    }
                });
                if (this.__isNative) {
                    var nativeTag1 = this.__getNativeTag();
                    if (shouldUpdateNodeConfig) {
                        NativeAnimatedAPI.updateAnimatedNodeConfig(nativeTag1, this.__getNativeConfig());
                    }
                    NativeAnimatedAPI.unsetWaitingForIdentifier(nativeTag1.toString());
                } else {
                    (0, _AnimatedValue.flushValue)(this);
                }
                // $FlowFixMe[incompatible-call]
                this.__callListeners(this.__getValue());
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   */ key: "setOffset",
            value: function setOffset(offset) {
                this.r.setOffset(offset.r);
                this.g.setOffset(offset.g);
                this.b.setOffset(offset.b);
                this.a.setOffset(offset.a);
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this.r.flattenOffset();
                this.g.flattenOffset();
                this.b.flattenOffset();
                this.a.flattenOffset();
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   */ key: "extractOffset",
            value: function extractOffset() {
                this.r.extractOffset();
                this.g.extractOffset();
                this.b.extractOffset();
                this.a.extractOffset();
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.r.stopAnimation();
                this.g.stopAnimation();
                this.b.stopAnimation();
                this.a.stopAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.r.resetAnimation();
                this.g.resetAnimation();
                this.b.resetAnimation();
                this.a.resetAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                if (this.nativeColor != null) {
                    return this.nativeColor;
                } else {
                    return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
                }
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this.r.__addChild(this);
                this.g.__addChild(this);
                this.b.__addChild(this);
                this.a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this.r.__removeChild(this);
                this.g.__removeChild(this);
                this.b.__removeChild(this);
                this.a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "_withSuspendedCallbacks",
            value: function _withSuspendedCallbacks(callback) {
                this._suspendCallbacks++;
                callback();
                this._suspendCallbacks--;
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                if (this._suspendCallbacks === 0) {
                    _get._(_get_prototype_of._(AnimatedColor.prototype), "__callListeners", this).call(this, value);
                }
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.r.__makeNative(platformConfig);
                this.g.__makeNative(platformConfig);
                this.b.__makeNative(platformConfig);
                this.a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedColor.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'color',
                    r: this.r.__getNativeTag(),
                    g: this.g.__getNativeTag(),
                    b: this.b.__getNativeTag(),
                    a: this.a.__getNativeTag(),
                    nativeColor: this.nativeColor,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedColor;
}(_AnimatedWithChildren.default);


}),
76891: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDiffClamp;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedDiffClamp = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDiffClamp, AnimatedWithChildren);
    function AnimatedDiffClamp(a, min, max, config) {
        _class_call_check._(this, AnimatedDiffClamp);
        var _this;
        _this = _call_super._(this, AnimatedDiffClamp, [
            config
        ]);
        _this._a = a;
        _this._min = min;
        _this._max = max;
        _this._value = _this._lastValue = _this._a.__getValue();
        return _this;
    }
    _create_class._(AnimatedDiffClamp, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var value = this._a.__getValue();
                var diff = value - this._lastValue;
                this._lastValue = value;
                this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
                return this._value;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedDiffClamp.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'diffclamp',
                    input: this._a.__getNativeTag(),
                    min: this._min,
                    max: this._max,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedDiffClamp;
}(_AnimatedWithChildren.default);


}),
37306: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedDivision;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedDivision = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedDivision, AnimatedWithChildren);
    function AnimatedDivision(a, b, config) {
        _class_call_check._(this, AnimatedDivision);
        var _this;
        _this = _call_super._(this, AnimatedDivision, [
            config
        ]), _this._warnedAboutDivideByZero = false;
        if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
            console.error('Detected potential division by zero in AnimatedDivision');
        }
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedDivision, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var a = this._a.__getValue();
                var b = this._b.__getValue();
                if (b === 0) {
                    // Prevent spamming the console/LogBox
                    if (!this._warnedAboutDivideByZero) {
                        console.error('Detected division by zero in AnimatedDivision');
                        this._warnedAboutDivideByZero = true;
                    }
                    // Passing infinity/NaN to Fabric will cause a native crash
                    return 0;
                }
                this._warnedAboutDivideByZero = false;
                return a / b;
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedDivision.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'division',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedDivision;
}(_AnimatedWithChildren.default);


}),
34322: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /* eslint no-bitwise: 0 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedInterpolation;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _NativeAnimatedValidation = __webpack_require__(84266);
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12990));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72466));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
/**
 * Very handy helper to map input ranges to output ranges with an easing
 * function and custom behavior outside of the ranges.
 */ function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
    }
    return (input)=>{
        (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
}
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;
    // Extrapolate
    if (result < inputMin) {
        if (extrapolateLeft === 'identity') {
            return result;
        } else if (extrapolateLeft === 'clamp') {
            result = inputMin;
        } else if (extrapolateLeft === 'extend') {
        // noop
        }
    }
    if (result > inputMax) {
        if (extrapolateRight === 'identity') {
            return result;
        } else if (extrapolateRight === 'clamp') {
            result = inputMax;
        } else if (extrapolateRight === 'extend') {
        // noop
        }
    }
    if (outputMin === outputMax) {
        return outputMin;
    }
    if (inputMin === inputMax) {
        if (input <= inputMin) {
            return outputMin;
        }
        return outputMax;
    }
    // Input Range
    if (inputMin === -Infinity) {
        result = -result;
    } else if (inputMax === Infinity) {
        result = result - inputMin;
    } else {
        result = (result - inputMin) / (inputMax - inputMin);
    }
    // Easing
    result = easing(result);
    // Output Range
    if (outputMin === -Infinity) {
        result = -result;
    } else if (outputMax === Infinity) {
        result = result + outputMin;
    } else {
        result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
}
var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
// Maps string inputs an RGBA color or an array of numeric components
function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
        normalizedColor = normalizedColor || 0;
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
            isColor: true,
            components: [
                r,
                g,
                b,
                a
            ]
        };
    } else {
        var components = [];
        var lastMatchEnd = 0;
        var match;
        while((match = numericComponentRegex.exec(input)) != null){
            if (match.index > lastMatchEnd) {
                components.push(input.substring(lastMatchEnd, match.index));
            }
            components.push(parseFloat(match[0]));
            lastMatchEnd = match.index + match[0].length;
        }
        (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
        if (lastMatchEnd < input.length) {
            components.push(input.substring(lastMatchEnd, input.length));
        }
        return {
            isColor: false,
            components
        };
    }
}
/**
 * Supports string shapes by extracting numbers so new values can be computed,
 * and recombines those values into new strings of the same shape.  Supports
 * things like:
 *
 *   rgba(123, 42, 99, 0.36) // colors
 *   -45deg                  // values with units
 */ function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    if (false) { var firstOutput }
    var numericComponents = outputRange.map((output)=>isColor ? output.components : output.components.filter((c)=>typeof c === 'number'));
    var interpolations = numericComponents[0].map((_, i)=>createNumericInterpolation(_object_spread_props._(_object_spread._({}, config), {
            outputRange: numericComponents.map((components)=>components[i])
        })));
    if (!isColor) {
        return (input)=>{
            var values = interpolations.map((interpolation)=>interpolation(input));
            var i = 0;
            return outputRange[0].components.map((c)=>typeof c === 'number' ? values[i++] : c).join('');
        };
    } else {
        return (input)=>{
            var result = interpolations.map((interpolation, i)=>{
                var value = interpolation(input);
                // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
                // round the opacity (4th column).
                return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
            });
            return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;
        };
    }
}
function findRange(input, inputRange) {
    var i;
    for(i = 1; i < inputRange.length - 1; ++i){
        if (inputRange[i] >= input) {
            break;
        }
    }
    return i - 1;
}
function checkValidRanges(inputRange, outputRange) {
    checkInfiniteRange('outputRange', outputRange);
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
}
function checkValidInputRange(arr) {
    (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');
    var message = 'inputRange must be monotonically non-decreasing ' + String(arr);
    for(var i = 1; i < arr.length; ++i){
        (0, _invariant.default)(arr[i] >= arr[i - 1], message);
    }
}
function checkInfiniteRange(name, arr) {
    (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');
    (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression
     * below this comment, one or both of the operands may be something that
     * doesn't cleanly convert to a string, like undefined, null, and object,
     * etc. If you really mean this implicit string conversion, you can do
     * something like String(myThing) */ // $FlowFixMe[unsafe-addition]
    name + 'cannot be ]-infinity;+infinity[ ' + arr);
}
var AnimatedInterpolation = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedInterpolation, AnimatedWithChildren);
    function AnimatedInterpolation(parent, config) {
        _class_call_check._(this, AnimatedInterpolation);
        var _this;
        _this = _call_super._(this, AnimatedInterpolation, [
            config
        ]);
        _this._parent = parent;
        _this._config = config;
        if (false) {}
        return _this;
    }
    _create_class._(AnimatedInterpolation, [
        {
            key: "_getInterpolation",
            value: function _getInterpolation() {
                if (!this._interpolation) {
                    var config = this._config;
                    if (config.outputRange && typeof config.outputRange[0] === 'string') {
                        this._interpolation = createStringInterpolation(config);
                    } else {
                        this._interpolation = createNumericInterpolation(config);
                    }
                }
                return this._interpolation;
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._parent.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                var parentValue = this._parent.__getValue();
                (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
                return this._getInterpolation()(parentValue);
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new AnimatedInterpolation(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._parent.__addChild(this);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._parent.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedInterpolation.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                if (false) {}
                // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here
                var outputRange = this._config.outputRange;
                var outputType = null;
                if (typeof outputRange[0] === 'string') {
                    // $FlowIgnoreMe[incompatible-cast]
                    outputRange = outputRange.map((value)=>{
                        var processedColor = (0, _processColor.default)(value);
                        if (typeof processedColor === 'number') {
                            outputType = 'color';
                            return processedColor;
                        } else {
                            return _NativeAnimatedHelper.default.transformDataType(value);
                        }
                    });
                }
                return {
                    inputRange: this._config.inputRange,
                    outputRange,
                    outputType,
                    extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
                    extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
                    type: 'interpolation',
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedInterpolation;
}(_AnimatedWithChildren.default);


}),
70056: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedModulo;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedModulo = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedModulo, AnimatedWithChildren);
    function AnimatedModulo(a, modulus, config) {
        _class_call_check._(this, AnimatedModulo);
        var _this;
        _this = _call_super._(this, AnimatedModulo, [
            config
        ]);
        _this._a = a;
        _this._modulus = modulus;
        return _this;
    }
    _create_class._(AnimatedModulo, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedModulo.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'modulus',
                    input: this._a.__getNativeTag(),
                    modulus: this._modulus,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedModulo;
}(_AnimatedWithChildren.default);


}),
57268: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedMultiplication;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedMultiplication = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedMultiplication, AnimatedWithChildren);
    function AnimatedMultiplication(a, b, config) {
        _class_call_check._(this, AnimatedMultiplication);
        var _this;
        _this = _call_super._(this, AnimatedMultiplication, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedMultiplication, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() * this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedMultiplication.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'multiplication',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedMultiplication;
}(_AnimatedWithChildren.default);


}),
76188: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedNode;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _uniqueId = 1;
var _assertNativeAnimatedModule = ()=>{
    _NativeAnimatedHelper.default.assertNativeAnimatedModule();
    // We only have to assert that the module exists once. After we've asserted
    // this, clear out the function so we know to skip it in the future.
    _assertNativeAnimatedModule = null;
};
var _listeners = /*#__PURE__*/ _class_private_field_loose_key._("_listeners");
var AnimatedNode = /*#__PURE__*/ function() {
    "use strict";
    function AnimatedNode(config) {
        _class_call_check._(this, AnimatedNode);
        Object.defineProperty(this, _listeners, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _listeners)[_listeners] = new Map();
        this._platformConfig = undefined;
        /* Methods and props used by native Animated impl */ this.__isNative = false;
        this.__nativeTag = undefined;
        this.__debugID = undefined;
        if (false) {}
    }
    _create_class._(AnimatedNode, [
        {
            key: "__attach",
            value: function __attach() {}
        },
        {
            key: "__detach",
            value: function __detach() {
                this.removeAllListeners();
                if (this.__isNative && this.__nativeTag != null) {
                    _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
                    this.__nativeTag = undefined;
                }
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {}
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return this.__getValue();
            }
        },
        {
            key: "__addChild",
            value: function __addChild(child) {}
        },
        {
            key: "__removeChild",
            value: function __removeChild(child) {}
        },
        {
            key: "__getChildren",
            value: function __getChildren() {
                return [];
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                // Subclasses are expected to set `__isNative` to true before this.
                (0, _invariant.default)(this.__isNative, 'This node cannot be made a "native" animated node');
                this._platformConfig = platformConfig;
            }
        },
        {
            /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to
   * synchronously read the value because it might be driven natively.
   *
   * See https://reactnative.dev/docs/animatedvalue#addlistener
   */ key: "addListener",
            value: function addListener(callback) {
                var id = String(_uniqueId++);
                _class_private_field_loose_base._(this, _listeners)[_listeners].set(id, callback);
                return id;
            }
        },
        {
            /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvalue#removelistener
   */ key: "removeListener",
            value: function removeListener(id) {
                _class_private_field_loose_base._(this, _listeners)[_listeners].delete(id);
            }
        },
        {
            /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvalue#removealllisteners
   */ key: "removeAllListeners",
            value: function removeAllListeners() {
                _class_private_field_loose_base._(this, _listeners)[_listeners].clear();
            }
        },
        {
            key: "hasListeners",
            value: function hasListeners() {
                return _class_private_field_loose_base._(this, _listeners)[_listeners].size > 0;
            }
        },
        {
            key: "__onAnimatedValueUpdateReceived",
            value: function __onAnimatedValueUpdateReceived(value) {
                this.__callListeners(value);
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                var event = {
                    value
                };
                _class_private_field_loose_base._(this, _listeners)[_listeners].forEach((listener)=>{
                    listener(event);
                });
            }
        },
        {
            key: "__getNativeTag",
            value: function __getNativeTag() {
                var nativeTag = this.__nativeTag;
                if (nativeTag == null) {
                    _assertNativeAnimatedModule === null || _assertNativeAnimatedModule === void 0 ? void 0 : _assertNativeAnimatedModule();
                    // `__isNative` is initialized as false and only ever set to true. So we
                    // only need to check it once here when initializing `__nativeTag`.
                    (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
                    nativeTag = _NativeAnimatedHelper.default.generateNewNodeTag();
                    this.__nativeTag = nativeTag;
                    var config = this.__getNativeConfig();
                    if (this._platformConfig) {
                        config.platformConfig = this._platformConfig;
                    }
                    _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
                }
                return nativeTag;
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                throw new Error('This JS animated node type cannot be used as native animated node');
            }
        },
        {
            key: "__getPlatformConfig",
            value: function __getPlatformConfig() {
                return this._platformConfig;
            }
        },
        {
            key: "__setPlatformConfig",
            value: function __setPlatformConfig(platformConfig) {
                this._platformConfig = platformConfig;
            }
        },
        {
            /**
   * NOTE: This is intended to prevent `JSON.stringify` from throwing "cyclic
   * structure" errors in React DevTools. Avoid depending on this!
   */ key: "toJSON",
            value: function toJSON() {
                return this.__getValue();
            }
        },
        {
            key: "__getDebugID",
            value: function __getDebugID() {
                if (false) {}
                return undefined;
            }
        }
    ]);
    return AnimatedNode;
}();


}),
50961: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 * @oncall react_native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return AnimatedObject;
    },
    isPlainObject: function() {
        return isPlainObject;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var MAX_DEPTH = 5;
function isPlainObject(value) {
    return(// $FlowFixMe[incompatible-type-guard]
    value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object) && !/*#__PURE__*/ _react.isValidElement(value));
}
function flatAnimatedNodes(value, ref, ref1) {
    var nodes = ref === void 0 ? [] : ref, depth = ref1 === void 0 ? 0 : ref1;
    if (depth >= MAX_DEPTH) {
        return nodes;
    }
    if (value instanceof _AnimatedNode.default) {
        nodes.push(value);
    } else if (Array.isArray(value)) {
        for(var ii = 0, length = value.length; ii < length; ii++){
            var element = value[ii];
            flatAnimatedNodes(element, nodes, depth + 1);
        }
    } else if (isPlainObject(value)) {
        var keys = Object.keys(value);
        for(var ii1 = 0, length1 = keys.length; ii1 < length1; ii1++){
            var key = keys[ii1];
            flatAnimatedNodes(value[key], nodes, depth + 1);
        }
    }
    return nodes;
}
// Returns a copy of value with a transformation fn applied to any AnimatedNodes
function mapAnimatedNodes(value, fn, ref) {
    var depth = ref === void 0 ? 0 : ref;
    if (depth >= MAX_DEPTH) {
        return value;
    }
    if (value instanceof _AnimatedNode.default) {
        return fn(value);
    } else if (Array.isArray(value)) {
        return value.map((element)=>mapAnimatedNodes(element, fn, depth + 1));
    } else if (isPlainObject(value)) {
        var result = {};
        var keys = Object.keys(value);
        for(var ii = 0, length = keys.length; ii < length; ii++){
            var key = keys[ii];
            result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
        }
        return result;
    } else {
        return value;
    }
}
var _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedObject = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedObject, AnimatedWithChildren);
    function AnimatedObject(nodes, value, config) {
        _class_call_check._(this, AnimatedObject);
        var _this;
        _this = _call_super._(this, AnimatedObject, [
            config
        ]), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._value = value;
        return _this;
    }
    _create_class._(AnimatedObject, [
        {
            key: "__getValue",
            value: function __getValue() {
                return mapAnimatedNodes(this._value, (node)=>{
                    return node.__getValue();
                });
            }
        },
        {
            key: "__getValueWithStaticObject",
            value: function __getValueWithStaticObject(staticObject) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                var index = 0;
                // NOTE: We can depend on `this._value` and `staticObject` sharing a
                // structure because of `useAnimatedPropsMemo`.
                return mapAnimatedNodes(staticObject, ()=>nodes[index++].__getValue());
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return mapAnimatedNodes(this._value, (node)=>{
                    return node.__getAnimatedValue();
                });
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedObject.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'object',
                    value: mapAnimatedNodes(this._value, (node)=>{
                        return {
                            nodeTag: node.__getNativeTag()
                        };
                    }),
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedObject` if `value` contains `AnimatedNode` instances.
   * Otherwise, returns `null`.
   */ function from(value) {
                var nodes = flatAnimatedNodes(value);
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedObject(nodes, value);
            }
        }
    ]);
    return AnimatedObject;
}(_AnimatedWithChildren.default);


}),
33994: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedProps;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _sliced_to_array = __webpack_require__(78474);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _RendererProxy = __webpack_require__(46513);
var _AnimatedEvent = __webpack_require__(12164);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50961));
var _AnimatedStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4869));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
function createAnimatedProps(inputProps, allowlist) {
    var nodeKeys = [];
    var nodes = [];
    var props = {};
    var keys = Object.keys(inputProps);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputProps[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var node = void 0;
            if (key === 'style') {
                node = _AnimatedStyle.default.from(value, allowlist === null || allowlist === void 0 ? void 0 : allowlist.style);
            } else if (value instanceof _AnimatedNode.default) {
                node = value;
            } else {
                node = _AnimatedObject.default.from(value);
            }
            if (node == null) {
                props[key] = value;
            } else {
                nodeKeys.push(key);
                nodes.push(node);
                props[key] = node;
            }
        } else {
            if (false) {}
            props[key] = value;
        }
    }
    return [
        nodeKeys,
        nodes,
        props
    ];
}
var _animatedView = /*#__PURE__*/ _class_private_field_loose_key._("_animatedView"), _callback = /*#__PURE__*/ _class_private_field_loose_key._("_callback"), _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes"), _props = /*#__PURE__*/ _class_private_field_loose_key._("_props");
var AnimatedProps = /*#__PURE__*/ function(AnimatedNode) {
    "use strict";
    _inherits._(AnimatedProps, AnimatedNode);
    function AnimatedProps(inputProps, callback, allowlist, config) {
        _class_call_check._(this, AnimatedProps);
        var _this;
        _this = _call_super._(this, AnimatedProps, [
            config
        ]), Object.defineProperty(_this, _animatedView, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _callback, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _props, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _animatedView)[_animatedView] = null;
        var _createAnimatedProps = _sliced_to_array._(createAnimatedProps(inputProps, allowlist), 3), nodeKeys = _createAnimatedProps[0], nodes = _createAnimatedProps[1], props = _createAnimatedProps[2];
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _class_private_field_loose_base._(_this, _props)[_props] = props;
        _class_private_field_loose_base._(_this, _callback)[_callback] = callback;
        return _this;
    }
    _create_class._(AnimatedProps, [
        {
            key: "__getValue",
            value: function __getValue() {
                var props = {};
                var keys = Object.keys(_class_private_field_loose_base._(this, _props)[_props]);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var value = _class_private_field_loose_base._(this, _props)[_props][key];
                    if (value instanceof _AnimatedNode.default) {
                        props[key] = value.__getValue();
                    } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
                        props[key] = value.__getHandler();
                    } else {
                        props[key] = value;
                    }
                }
                return props;
            }
        },
        {
            /**
   * Creates a new `props` object that contains the same props as the supplied
   * `staticProps` object, except with animated nodes for any props that were
   * created by this `AnimatedProps` instance.
   */ key: "__getValueWithStaticProps",
            value: function __getValueWithStaticProps(staticProps) {
                var props = _object_spread._({}, staticProps);
                var keys = Object.keys(staticProps);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var maybeNode = _class_private_field_loose_base._(this, _props)[_props][key];
                    if (key === 'style' && maybeNode instanceof _AnimatedStyle.default) {
                        props[key] = maybeNode.__getValueWithStaticStyle(staticProps.style);
                    } else if (maybeNode instanceof _AnimatedNode.default) {
                        props[key] = maybeNode.__getValue();
                    } else if (maybeNode instanceof _AnimatedEvent.AnimatedEvent) {
                        props[key] = maybeNode.__getHandler();
                    }
                }
                return props;
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                var props = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    props[key] = node.__getAnimatedValue();
                }
                return props;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedProps.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                if (this.__isNative && _class_private_field_loose_base._(this, _animatedView)[_animatedView]) {
                    this.__disconnectAnimatedView();
                }
                _class_private_field_loose_base._(this, _animatedView)[_animatedView] = null;
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedProps.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "update",
            value: function update() {
                _class_private_field_loose_base._(this, _callback)[_callback]();
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                if (!this.__isNative) {
                    this.__isNative = true;
                    // Since this does not call the super.__makeNative, we need to store the
                    // supplied platformConfig here, before calling __connectAnimatedView
                    // where it will be needed to traverse the graph of attached values.
                    _get._(_get_prototype_of._(AnimatedProps.prototype), "__setPlatformConfig", this).call(this, platformConfig);
                    if (_class_private_field_loose_base._(this, _animatedView)[_animatedView]) {
                        this.__connectAnimatedView();
                    }
                }
            }
        },
        {
            key: "setNativeView",
            value: function setNativeView(animatedView) {
                if (_class_private_field_loose_base._(this, _animatedView)[_animatedView] === animatedView) {
                    return;
                }
                _class_private_field_loose_base._(this, _animatedView)[_animatedView] = animatedView;
                if (this.__isNative) {
                    this.__connectAnimatedView();
                }
            }
        },
        {
            key: "__connectAnimatedView",
            value: function __connectAnimatedView() {
                (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
                var nativeViewTag = (0, _RendererProxy.findNodeHandle)(_class_private_field_loose_base._(this, _animatedView)[_animatedView]);
                if (nativeViewTag == null) {
                    if (false) {} else {
                        throw new Error('Unable to locate attached view in the native tree');
                    }
                }
                _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
            }
        },
        {
            key: "__disconnectAnimatedView",
            value: function __disconnectAnimatedView() {
                (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
                var nativeViewTag = (0, _RendererProxy.findNodeHandle)(_class_private_field_loose_base._(this, _animatedView)[_animatedView]);
                if (nativeViewTag == null) {
                    if (false) {} else {
                        throw new Error('Unable to locate attached view in the native tree');
                    }
                }
                _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
            }
        },
        {
            key: "__restoreDefaultValues",
            value: function __restoreDefaultValues() {
                // When using the native driver, view properties need to be restored to
                // their default values manually since react no longer tracks them. This
                // is needed to handle cases where a prop driven by native animated is removed
                // after having been changed natively by an animation.
                if (this.__isNative) {
                    _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
                }
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var platformConfig = this.__getPlatformConfig();
                var propsConfig = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                    propsConfig[key] = node.__getNativeTag();
                }
                return {
                    type: 'props',
                    props: propsConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedProps;
}(_AnimatedNode.default);
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
4869: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedStyle;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _sliced_to_array = __webpack_require__(78474);
var _NativeAnimatedValidation = __webpack_require__(84266);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedObject = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50961));
var _AnimatedTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85943));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
function createAnimatedStyle(inputStyle, allowlist, keepUnanimatedValues) {
    var nodeKeys = [];
    var nodes = [];
    var style = {};
    var keys = Object.keys(inputStyle);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = inputStyle[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var node = void 0;
            if (value != null && key === 'transform') {
                node = _ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : _AnimatedTransform.default.from(value);
            } else if (value instanceof _AnimatedNode.default) {
                node = value;
            } else {
                node = _AnimatedObject.default.from(value);
            }
            if (node == null) {
                if (keepUnanimatedValues) {
                    style[key] = value;
                }
            } else {
                nodeKeys.push(key);
                nodes.push(node);
                style[key] = node;
            }
        } else {
            if (false) {}
            if (keepUnanimatedValues) {
                style[key] = value;
            }
        }
    }
    return [
        nodeKeys,
        nodes,
        style
    ];
}
var _inputStyle = /*#__PURE__*/ _class_private_field_loose_key._("_inputStyle"), _nodeKeys = /*#__PURE__*/ _class_private_field_loose_key._("_nodeKeys"), _nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes"), _style = /*#__PURE__*/ _class_private_field_loose_key._("_style");
var AnimatedStyle = /*#__PURE__*/ function(AnimatedWithChildren) {
    "use strict";
    _inherits._(AnimatedStyle, AnimatedWithChildren);
    function AnimatedStyle(nodeKeys, nodes, style, inputStyle, config) {
        _class_call_check._(this, AnimatedStyle);
        var _this;
        _this = _call_super._(this, AnimatedStyle, [
            config
        ]), Object.defineProperty(_this, _inputStyle, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodeKeys, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _style, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _class_private_field_loose_base._(_this, _style)[_style] = style;
        _class_private_field_loose_base._(_this, _inputStyle)[_inputStyle] = inputStyle;
        return _this;
    }
    _create_class._(AnimatedStyle, [
        {
            key: "__getValue",
            value: function __getValue() {
                var style = {};
                var keys = Object.keys(_class_private_field_loose_base._(this, _style)[_style]);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var value = _class_private_field_loose_base._(this, _style)[_style][key];
                    if (value instanceof _AnimatedNode.default) {
                        style[key] = value.__getValue();
                    } else {
                        style[key] = value;
                    }
                }
                /* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
     * Platform.flow.js */ return _Platform.default.OS === 'web' ? [
                    _class_private_field_loose_base._(this, _inputStyle)[_inputStyle],
                    style
                ] : style;
            }
        },
        {
            /**
   * Creates a new `style` object that contains the same style properties as
   * the supplied `staticStyle` object, except with animated nodes for any
   * style properties that were created by this `AnimatedStyle` instance.
   */ key: "__getValueWithStaticStyle",
            value: function __getValueWithStaticStyle(staticStyle) {
                var flatStaticStyle = (0, _flattenStyle.default)(staticStyle);
                var style = flatStaticStyle == null ? {} : flatStaticStyle === staticStyle ? _object_spread._({}, flatStaticStyle) : flatStaticStyle;
                var keys = Object.keys(style);
                for(var ii = 0, length = keys.length; ii < length; ii++){
                    var key = keys[ii];
                    var maybeNode = _class_private_field_loose_base._(this, _style)[_style][key];
                    if (key === 'transform' && maybeNode instanceof _AnimatedTransform.default) {
                        style[key] = maybeNode.__getValueWithStaticTransforms(// NOTE: This check should not be necessary, but the types are not
                        // enforced as of this writing.
                        Array.isArray(style[key]) ? style[key] : []);
                    } else if (maybeNode instanceof _AnimatedObject.default) {
                        style[key] = maybeNode.__getValueWithStaticObject(style[key]);
                    } else if (maybeNode instanceof _AnimatedNode.default) {
                        style[key] = maybeNode.__getValue();
                    }
                }
                /* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
     * Platform.flow.js */ return _Platform.default.OS === 'web' ? [
                    _class_private_field_loose_base._(this, _inputStyle)[_inputStyle],
                    style
                ] : style;
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                var style = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    style[key] = node.__getAnimatedValue();
                }
                return style;
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedStyle.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var platformConfig = this.__getPlatformConfig();
                var styleConfig = {};
                var nodeKeys = _class_private_field_loose_base._(this, _nodeKeys)[_nodeKeys];
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var key = nodeKeys[ii];
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                    styleConfig[key] = node.__getNativeTag();
                }
                if (false) {}
                return {
                    type: 'style',
                    style: styleConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedStyle` if `value` contains `AnimatedNode` instances.
   * Otherwise, returns `null`.
   */ function from(inputStyle, allowlist) {
                var flatStyle = (0, _flattenStyle.default)(inputStyle);
                if (flatStyle == null) {
                    return null;
                }
                var _createAnimatedStyle = _sliced_to_array._(createAnimatedStyle(flatStyle, allowlist, _Platform.default.OS !== 'web'), 3), nodeKeys = _createAnimatedStyle[0], nodes = _createAnimatedStyle[1], style = _createAnimatedStyle[2];
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedStyle(nodeKeys, nodes, style, inputStyle);
            }
        }
    ]);
    return AnimatedStyle;
}(_AnimatedWithChildren.default);
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
76781: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedSubtraction;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var AnimatedSubtraction = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedSubtraction, AnimatedWithChildren);
    function AnimatedSubtraction(a, b, config) {
        _class_call_check._(this, AnimatedSubtraction);
        var _this;
        _this = _call_super._(this, AnimatedSubtraction, [
            config
        ]);
        _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
        _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
        return _this;
    }
    _create_class._(AnimatedSubtraction, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this._a.__makeNative(platformConfig);
                this._b.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._a.__getValue() - this._b.__getValue();
            }
        },
        {
            key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._a.__addChild(this);
                this._b.__addChild(this);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._a.__removeChild(this);
                this._b.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedSubtraction.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'subtraction',
                    input: [
                        this._a.__getNativeTag(),
                        this._b.__getNativeTag()
                    ],
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedSubtraction;
}(_AnimatedWithChildren.default);


}),
75538: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTracking;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var AnimatedTracking = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedTracking, AnimatedNode);
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback, config) {
        _class_call_check._(this, AnimatedTracking);
        var _this;
        _this = _call_super._(this, AnimatedTracking, [
            config
        ]);
        _this._value = value;
        _this._parent = parent;
        _this._animationClass = animationClass;
        _this._animationConfig = animationConfig;
        _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
        _this._callback = callback;
        _this.__attach();
        return _this;
    }
    _create_class._(AnimatedTracking, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.__isNative = true;
                this._parent.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__makeNative", this).call(this, platformConfig);
                this._value.__makeNative(platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._parent.__getValue();
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this._parent.__addChild(this);
                if (this._useNativeDriver) {
                    // when the tracking starts we need to convert this node to a "native node"
                    // so that the parent node will be made "native" too. This is necessary as
                    // if we don't do this `update` method will get called. At that point it
                    // may be too late as it would mean the JS driver has already started
                    // updating node values
                    var platformConfig = this._animationConfig.platformConfig;
                    this.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this._parent.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedTracking.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "update",
            value: function update() {
                this._value.animate(new this._animationClass(_object_spread_props._(_object_spread._({}, this._animationConfig), {
                    toValue: this._animationConfig.toValue.__getValue()
                })), this._callback);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var animation = new this._animationClass(_object_spread_props._(_object_spread._({}, this._animationConfig), {
                    // remove toValue from the config as it's a ref to Animated.Value
                    toValue: undefined
                }));
                var animationConfig = animation.__getNativeAnimationConfig();
                return {
                    type: 'tracking',
                    animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
                    animationConfig,
                    toValue: this._parent.__getNativeTag(),
                    value: this._value.__getNativeTag(),
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedTracking;
}(_AnimatedNode.default);


}),
85943: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedTransform;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _NativeAnimatedValidation = __webpack_require__(84266);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
function flatAnimatedNodes(transforms) {
    var nodes = [];
    for(var ii = 0, length = transforms.length; ii < length; ii++){
        var transform = transforms[ii];
        // There should be exactly one property in `transform`.
        for(var key in transform){
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
                nodes.push(value);
            }
        }
    }
    return nodes;
}
var // NOTE: For potentially historical reasons, some operations only operate on
// the first level of AnimatedNode instances. This optimizes that bevavior.
_nodes = /*#__PURE__*/ _class_private_field_loose_key._("_nodes");
var AnimatedTransform = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedTransform, AnimatedWithChildren);
    function AnimatedTransform(nodes, transforms, config) {
        _class_call_check._(this, AnimatedTransform);
        var _this;
        _this = _call_super._(this, AnimatedTransform, [
            config
        ]), Object.defineProperty(_this, _nodes, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _nodes)[_nodes] = nodes;
        _this._transforms = transforms;
        return _this;
    }
    _create_class._(AnimatedTransform, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__makeNative(platformConfig);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return mapTransforms(this._transforms, (animatedNode)=>animatedNode.__getValue());
            }
        },
        {
            key: "__getValueWithStaticTransforms",
            value: function __getValueWithStaticTransforms(staticTransforms) {
                var values = [];
                mapTransforms(this._transforms, (node)=>{
                    values.push(node.__getValue());
                });
                // NOTE: We can depend on `this._transforms` and `staticTransforms` sharing
                // a structure because of `useAnimatedPropsMemo`.
                return mapTransforms(staticTransforms, ()=>values.shift());
            }
        },
        {
            key: "__getAnimatedValue",
            value: function __getAnimatedValue() {
                return mapTransforms(this._transforms, (animatedNode)=>animatedNode.__getAnimatedValue());
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__addChild(this);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                var nodes = _class_private_field_loose_base._(this, _nodes)[_nodes];
                for(var ii = 0, length = nodes.length; ii < length; ii++){
                    var node = nodes[ii];
                    node.__removeChild(this);
                }
                _get._(_get_prototype_of._(AnimatedTransform.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                var transformsConfig = [];
                var transforms = this._transforms;
                for(var ii = 0, length = transforms.length; ii < length; ii++){
                    var transform = transforms[ii];
                    // There should be exactly one property in `transform`.
                    for(var key in transform){
                        var value = transform[key];
                        if (value instanceof _AnimatedNode.default) {
                            transformsConfig.push({
                                type: 'animated',
                                property: key,
                                nodeTag: value.__getNativeTag()
                            });
                        } else {
                            transformsConfig.push({
                                type: 'static',
                                property: key,
                                /* $FlowFixMe[incompatible-call] - `value` can be an array or an
               object. This is not currently handled by `transformDataType`.
               Migrating to `TransformObject` might solve this. */ value: _NativeAnimatedHelper.default.transformDataType(value)
                            });
                        }
                    }
                }
                if (false) {}
                return {
                    type: 'transform',
                    transforms: transformsConfig,
                    debugID: this.__getDebugID()
                };
            }
        }
    ], [
        {
            key: "from",
            value: /**
   * Creates an `AnimatedTransform` if `transforms` contains `AnimatedNode`
   * instances. Otherwise, returns `null`.
   */ function from(transforms) {
                var nodes = flatAnimatedNodes(// NOTE: This check should not be necessary, but the types are not
                // enforced as of this writing. This check should be hoisted to
                // instantiation sites.
                Array.isArray(transforms) ? transforms : []);
                if (nodes.length === 0) {
                    return null;
                }
                return new AnimatedTransform(nodes, transforms);
            }
        }
    ]);
    return AnimatedTransform;
}(_AnimatedWithChildren.default);
function mapTransforms(transforms, mapFunction) {
    return transforms.map((transform)=>{
        var result = {};
        // There should be exactly one property in `transform`.
        for(var key in transform){
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
                result[key] = mapFunction(value);
            } else if (Array.isArray(value)) {
                result[key] = value.map((element)=>element instanceof _AnimatedNode.default ? mapFunction(element) : element);
            } else if (typeof value === 'object') {
                var object = {};
                for(var propertyName in value){
                    var propertyValue = value[propertyName];
                    object[propertyName] = propertyValue instanceof _AnimatedNode.default ? mapFunction(propertyValue) : propertyValue;
                }
                result[key] = object;
            } else {
                result[key] = value;
            }
        }
        return result;
    });
}


}),
26820: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return AnimatedValue;
    },
    flushValue: function() {
        return flushValue;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _InteractionManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9990));
var _AnimatedInterpolation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34322));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
function flushValue(rootNode) {
    // eslint-disable-next-line func-call-spacing
    var leaves = new Set();
    function findAnimatedStyles(node) {
        // $FlowFixMe[prop-missing]
        if (typeof node.update === 'function') {
            leaves.add(node);
        } else {
            node.__getChildren().forEach(findAnimatedStyles);
        }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach((leaf)=>leaf.update());
}
/**
 * Some operations are executed only on batch end, which is _mostly_ scheduled when
 * Animated component props change. For some of the changes which require immediate execution
 * (e.g. setValue), we create a separate batch in case none is scheduled.
 */ function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
}
var _listenerCount = /*#__PURE__*/ _class_private_field_loose_key._("_listenerCount"), _updateSubscription = /*#__PURE__*/ _class_private_field_loose_key._("_updateSubscription"), _ensureUpdateSubscriptionExists = /*#__PURE__*/ _class_private_field_loose_key._("_ensureUpdateSubscriptionExists");
var AnimatedValue = /*#__PURE__*/ function(AnimatedWithChildren) {
    "use strict";
    _inherits._(AnimatedValue, AnimatedWithChildren);
    function AnimatedValue(value, config) {
        _class_call_check._(this, AnimatedValue);
        var _this;
        _this = _call_super._(this, AnimatedValue, [
            config
        ]), Object.defineProperty(_this, _ensureUpdateSubscriptionExists, {
            value: ensureUpdateSubscriptionExists
        }), Object.defineProperty(_this, _listenerCount, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _updateSubscription, {
            writable: true,
            value: void 0
        }), _class_private_field_loose_base._(_this, _listenerCount)[_listenerCount] = 0, _class_private_field_loose_base._(_this, _updateSubscription)[_updateSubscription] = null;
        if (typeof value !== 'number') {
            throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        _this._startingValue = _this._value = value;
        _this._offset = 0;
        _this._animation = null;
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedValue, [
        {
            key: "__detach",
            value: function __detach() {
                if (this.__isNative) {
                    NativeAnimatedAPI.getValue(this.__getNativeTag(), (value)=>{
                        this._value = value - this._offset;
                    });
                }
                this.stopAnimation();
                _get._(_get_prototype_of._(AnimatedValue.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return this._value + this._offset;
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                _get._(_get_prototype_of._(AnimatedValue.prototype), "__makeNative", this).call(this, platformConfig);
                if (_class_private_field_loose_base._(this, _listenerCount)[_listenerCount] > 0) {
                    _class_private_field_loose_base._(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
                }
            }
        },
        {
            key: "addListener",
            value: function addListener(callback) {
                var id = _get._(_get_prototype_of._(AnimatedValue.prototype), "addListener", this).call(this, callback);
                _class_private_field_loose_base._(this, _listenerCount)[_listenerCount]++;
                if (this.__isNative) {
                    _class_private_field_loose_base._(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
                }
                return id;
            }
        },
        {
            key: "removeListener",
            value: function removeListener(id) {
                _get._(_get_prototype_of._(AnimatedValue.prototype), "removeListener", this).call(this, id);
                _class_private_field_loose_base._(this, _listenerCount)[_listenerCount]--;
                if (this.__isNative && _class_private_field_loose_base._(this, _listenerCount)[_listenerCount] === 0) {
                    var _class_private_field_loose_base__updateSubscription;
                    (_class_private_field_loose_base__updateSubscription = _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription]) === null || _class_private_field_loose_base__updateSubscription === void 0 ? void 0 : _class_private_field_loose_base__updateSubscription.remove();
                }
            }
        },
        {
            key: "removeAllListeners",
            value: function removeAllListeners() {
                _get._(_get_prototype_of._(AnimatedValue.prototype), "removeAllListeners", this).call(this);
                _class_private_field_loose_base._(this, _listenerCount)[_listenerCount] = 0;
                if (this.__isNative) {
                    var _class_private_field_loose_base__updateSubscription;
                    (_class_private_field_loose_base__updateSubscription = _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription]) === null || _class_private_field_loose_base__updateSubscription === void 0 ? void 0 : _class_private_field_loose_base__updateSubscription.remove();
                }
            }
        },
        {
            /**
   * Directly set the value.  This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvalue#setvalue
   */ key: "setValue",
            value: function setValue(value) {
                if (this._animation) {
                    this._animation.stop();
                    this._animation = null;
                }
                this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */ );
                if (this.__isNative) {
                    _executeAsAnimatedBatch(this.__getNativeTag().toString(), ()=>NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));
                }
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether via
   * `setValue`, an animation, or `Animated.event`.  Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvalue#setoffset
   */ key: "setOffset",
            value: function setOffset(offset) {
                this._offset = offset;
                if (this.__isNative) {
                    NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
                }
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#flattenoffset
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this._value += this._offset;
                this._offset = 0;
                if (this.__isNative) {
                    NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
                }
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvalue#extractoffset
   */ key: "extractOffset",
            value: function extractOffset() {
                this._offset += this._value;
                this._value = 0;
                if (this.__isNative) {
                    NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
                }
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvalue#stopanimation
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.stopTracking();
                this._animation && this._animation.stop();
                this._animation = null;
                if (callback) {
                    if (this.__isNative) {
                        NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
                    } else {
                        callback(this.__getValue());
                    }
                }
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvalue#resetanimation
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.stopAnimation(callback);
                this._value = this._startingValue;
                if (this.__isNative) {
                    NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
                }
            }
        },
        {
            key: "__onAnimatedValueUpdateReceived",
            value: function __onAnimatedValueUpdateReceived(value) {
                this._updateValue(value, false);
            }
        },
        {
            /**
   * Interpolates the value before updating the property, e.g. mapping 0-1 to
   * 0-10.
   */ key: "interpolate",
            value: function interpolate(config) {
                return new _AnimatedInterpolation.default(this, config);
            }
        },
        {
            /**
   * Typically only used internally, but could be used by a custom Animation
   * class.
   *
   * See https://reactnative.dev/docs/animatedvalue#animate
   */ key: "animate",
            value: function animate(animation, callback) {
                var handle = null;
                if (animation.__isInteraction) {
                    handle = _InteractionManager.default.createInteractionHandle();
                }
                var previousAnimation = this._animation;
                this._animation && this._animation.stop();
                this._animation = animation;
                animation.start(this._value, (value)=>{
                    // Natively driven animations will never call into that callback, therefore we can always
                    // pass flush = true to allow the updated value to propagate to native with setNativeProps
                    this._updateValue(value, true);
                }, (result)=>{
                    this._animation = null;
                    if (handle !== null) {
                        _InteractionManager.default.clearInteractionHandle(handle);
                    }
                    callback && callback(result);
                }, previousAnimation, this);
            }
        },
        {
            /**
   * Typically only used internally.
   */ key: "stopTracking",
            value: function stopTracking() {
                this._tracking && this._tracking.__detach();
                this._tracking = null;
            }
        },
        {
            /**
   * Typically only used internally.
   */ key: "track",
            value: function track(tracking) {
                this.stopTracking();
                this._tracking = tracking;
                // Make sure that the tracking animation starts executing
                this._tracking && this._tracking.update();
            }
        },
        {
            key: "_updateValue",
            value: function _updateValue(value, flush) {
                if (value === undefined) {
                    throw new Error('AnimatedValue: Attempting to set value to undefined');
                }
                this._value = value;
                if (flush) {
                    flushValue(this);
                }
                this.__callListeners(this.__getValue());
            }
        },
        {
            key: "__getNativeConfig",
            value: function __getNativeConfig() {
                return {
                    type: 'value',
                    value: this._value,
                    offset: this._offset,
                    debugID: this.__getDebugID()
                };
            }
        }
    ]);
    return AnimatedValue;
}(_AnimatedWithChildren.default);
function ensureUpdateSubscriptionExists() {
    if (_class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] != null) {
        return;
    }
    var nativeTag = this.__getNativeTag();
    NativeAnimatedAPI.startListeningToAnimatedNodeValue(nativeTag);
    var subscription = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', (data)=>{
        if (data.tag === nativeTag) {
            this.__onAnimatedValueUpdateReceived(data.value);
        }
    });
    _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] = {
        remove: ()=>{
            // Only this function assigns to `this.#updateSubscription`.
            if (_class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] == null) {
                return;
            }
            _class_private_field_loose_base._(this, _updateSubscription)[_updateSubscription] = null;
            subscription.remove();
            NativeAnimatedAPI.stopListeningToAnimatedNodeValue(nativeTag);
        }
    };
}


}),
86473: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedValueXY;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _AnimatedWithChildren = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17227));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _uniqueId = 1;
var AnimatedValueXY = /*#__PURE__*/ function(AnimatedWithChildren) {
    _inherits._(AnimatedValueXY, AnimatedWithChildren);
    function AnimatedValueXY(valueIn, config) {
        _class_call_check._(this, AnimatedValueXY);
        var _this;
        _this = _call_super._(this, AnimatedValueXY, [
            config
        ]);
        var value = valueIn || {
            x: 0,
            y: 0
        }; // @flowfixme: shouldn't need `: any`
        if (typeof value.x === 'number' && typeof value.y === 'number') {
            _this.x = new _AnimatedValue.default(value.x);
            _this.y = new _AnimatedValue.default(value.y);
        } else {
            (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
            _this.x = value.x;
            _this.y = value.y;
        }
        _this._listeners = {};
        if (config && config.useNativeDriver) {
            _this.__makeNative();
        }
        return _this;
    }
    _create_class._(AnimatedValueXY, [
        {
            /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setvalue
   */ key: "setValue",
            value: function setValue(value) {
                this.x.setValue(value.x);
                this.y.setValue(value.y);
            }
        },
        {
            /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#setoffset
   */ key: "setOffset",
            value: function setOffset(offset) {
                this.x.setOffset(offset.x);
                this.y.setOffset(offset.y);
            }
        },
        {
            /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#flattenoffset
   */ key: "flattenOffset",
            value: function flattenOffset() {
                this.x.flattenOffset();
                this.y.flattenOffset();
            }
        },
        {
            /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#extractoffset
   */ key: "extractOffset",
            value: function extractOffset() {
                this.x.extractOffset();
                this.y.extractOffset();
            }
        },
        {
            key: "__getValue",
            value: function __getValue() {
                return {
                    x: this.x.__getValue(),
                    y: this.y.__getValue()
                };
            }
        },
        {
            /**
   * Stops any animation and resets the value to its original.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#resetanimation
   */ key: "resetAnimation",
            value: function resetAnimation(callback) {
                this.x.resetAnimation();
                this.y.resetAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#stopanimation
   */ key: "stopAnimation",
            value: function stopAnimation(callback) {
                this.x.stopAnimation();
                this.y.stopAnimation();
                callback && callback(this.__getValue());
            }
        },
        {
            /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to synchronously read
   * the value because it might be driven natively.
   *
   * Returns a string that serves as an identifier for the listener.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#addlistener
   */ key: "addListener",
            value: function addListener(callback) {
                var id = String(_uniqueId++);
                var jointCallback = (ref)=>{
                    var number = ref.value;
                    callback(this.__getValue());
                };
                this._listeners[id] = {
                    x: this.x.addListener(jointCallback),
                    y: this.y.addListener(jointCallback)
                };
                return id;
            }
        },
        {
            /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removelistener
   */ key: "removeListener",
            value: function removeListener(id) {
                this.x.removeListener(this._listeners[id].x);
                this.y.removeListener(this._listeners[id].y);
                delete this._listeners[id];
            }
        },
        {
            /**
   * Remove all registered listeners.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#removealllisteners
   */ key: "removeAllListeners",
            value: function removeAllListeners() {
                this.x.removeAllListeners();
                this.y.removeAllListeners();
                this._listeners = {};
            }
        },
        {
            /**
   * Converts `{x, y}` into `{left, top}` for use in style.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#getlayout
   */ key: "getLayout",
            value: function getLayout() {
                return {
                    left: this.x,
                    top: this.y
                };
            }
        },
        {
            /**
   * Converts `{x, y}` into a useable translation transform.
   *
   * See https://reactnative.dev/docs/animatedvaluexy#gettranslatetransform
   */ key: "getTranslateTransform",
            value: function getTranslateTransform() {
                return [
                    {
                        translateX: this.x
                    },
                    {
                        translateY: this.y
                    }
                ];
            }
        },
        {
            key: "__attach",
            value: function __attach() {
                this.x.__addChild(this);
                this.y.__addChild(this);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__attach", this).call(this);
            }
        },
        {
            key: "__detach",
            value: function __detach() {
                this.x.__removeChild(this);
                this.y.__removeChild(this);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__detach", this).call(this);
            }
        },
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                this.x.__makeNative(platformConfig);
                this.y.__makeNative(platformConfig);
                _get._(_get_prototype_of._(AnimatedValueXY.prototype), "__makeNative", this).call(this, platformConfig);
            }
        }
    ]);
    return AnimatedValueXY;
}(_AnimatedWithChildren.default);


}),
17227: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return AnimatedWithChildren;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _NativeAnimatedHelper_API = _NativeAnimatedHelper.default.API, connectAnimatedNodes = _NativeAnimatedHelper_API.connectAnimatedNodes, disconnectAnimatedNodes = _NativeAnimatedHelper_API.disconnectAnimatedNodes;
var AnimatedWithChildren = /*#__PURE__*/ function(AnimatedNode) {
    _inherits._(AnimatedWithChildren, AnimatedNode);
    function AnimatedWithChildren() {
        _class_call_check._(this, AnimatedWithChildren);
        var _this;
        _this = _call_super._(this, AnimatedWithChildren, arguments), _this._children = [];
        return _this;
    }
    _create_class._(AnimatedWithChildren, [
        {
            key: "__makeNative",
            value: function __makeNative(platformConfig) {
                if (!this.__isNative) {
                    this.__isNative = true;
                    var children = this._children;
                    var length = children.length;
                    if (length > 0) {
                        for(var ii = 0; ii < length; ii++){
                            var child = children[ii];
                            child.__makeNative(platformConfig);
                            connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                        }
                    }
                }
                _get._(_get_prototype_of._(AnimatedWithChildren.prototype), "__makeNative", this).call(this, platformConfig);
            }
        },
        {
            key: "__addChild",
            value: function __addChild(child) {
                if (this._children.length === 0) {
                    this.__attach();
                }
                this._children.push(child);
                if (this.__isNative) {
                    // Only accept "native" animated nodes as children
                    child.__makeNative(this.__getPlatformConfig());
                    connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                }
            }
        },
        {
            key: "__removeChild",
            value: function __removeChild(child) {
                var index = this._children.indexOf(child);
                if (index === -1) {
                    console.warn("Trying to remove a child that doesn't exist");
                    return;
                }
                if (this.__isNative && child.__isNative) {
                    disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
                }
                this._children.splice(index, 1);
                if (this._children.length === 0) {
                    this.__detach();
                }
            }
        },
        {
            key: "__getChildren",
            value: function __getChildren() {
                return this._children;
            }
        },
        {
            key: "__callListeners",
            value: function __callListeners(value) {
                _get._(_get_prototype_of._(AnimatedWithChildren.prototype), "__callListeners", this).call(this, value);
                if (!this.__isNative) {
                    var children = this._children;
                    for(var ii = 0, length = children.length; ii < length; ii++){
                        var child = children[ii];
                        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                        if (child.__getValue) {
                            child.__callListeners(child.__getValue());
                        }
                    }
                }
            }
        }
    ]);
    return AnimatedWithChildren;
}(_AnimatedNode.default);


}),
10682: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
function shouldUseTurboAnimatedModule() {
    return _Platform.default.OS === 'ios' && __webpack_require__.g.RN$Bridgeless === true;
}
var _default = shouldUseTurboAnimatedModule;


}),
60690: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _createAnimatedPropsHook = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97382));
var _default = (0, _createAnimatedPropsHook.default)(null);


}),
38268: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedValue;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22644));
var _react = __webpack_require__(4931);
function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
        ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
}


}),
2474: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _logError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92071));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeAppState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87192));
/**
 * active - The app is running in the foreground
 * background - The app is running in the background. The user is either:
 *   - in another app
 *   - on the home screen
 *   - @platform android - on another Activity (even if it was launched by your app)
 * @platform ios - inactive - This is a state that occurs when transitioning between foreground & background, and during periods of inactivity such as entering the multitasking view, opening the Notification Center or in the event of an incoming call.
 */ /**
 * change - This even is received when the app state has changed.
 * memoryWarning - This event is used in the need of throwing memory warning or releasing it.
 * @platform android - focus - Received when the app gains focus (the user is interacting with the app).
 * @platform android - blur - Received when the user is not actively interacting with the app.
 */ /**
 * `AppState` can tell you if the app is in the foreground or background,
 * and notify you when the state changes.
 *
 * See https://reactnative.dev/docs/appstate
 */ var AppStateImpl = /*#__PURE__*/ function() {
    "use strict";
    function AppStateImpl() {
        _class_call_check._(this, AppStateImpl);
        this.currentState = null;
        if (_NativeAppState.default == null) {
            this.isAvailable = false;
        } else {
            this.isAvailable = true;
            var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
            // If you want to use the native module on other platforms, please remove this condition and test its behavior
            _Platform.default.OS !== 'ios' ? null : _NativeAppState.default);
            this._emitter = emitter;
            this.currentState = _NativeAppState.default.getConstants().initialAppState;
            var eventUpdated = false;
            // TODO: this is a terrible solution - in order to ensure `currentState`
            // prop is up to date, we have to register an observer that updates it
            // whenever the state changes, even if nobody cares. We should just
            // deprecate the `currentState` property and get rid of this.
            emitter.addListener('appStateDidChange', (appStateData)=>{
                eventUpdated = true;
                this.currentState = appStateData.app_state;
            });
            // TODO: see above - this request just populates the value of `currentState`
            // when the module is first initialized. Would be better to get rid of the
            // prop and expose `getCurrentAppState` method directly.
            // $FlowExpectedError[incompatible-call]
            _NativeAppState.default.getCurrentAppState((appStateData)=>{
                // It's possible that the state will have changed here & listeners need to be notified
                if (!eventUpdated && this.currentState !== appStateData.app_state) {
                    this.currentState = appStateData.app_state;
                    // $FlowFixMe[incompatible-call]
                    emitter.emit('appStateDidChange', appStateData);
                }
            }, _logError.default);
        }
    }
    _create_class._(AppStateImpl, [
        {
            /**
   * Add a handler to AppState changes by listening to the `change` event type
   * and providing the handler.
   *
   * See https://reactnative.dev/docs/appstate#addeventlistener
   */ key: "addEventListener",
            value: function addEventListener(type, handler) {
                var emitter = this._emitter;
                if (emitter == null) {
                    throw new Error('Cannot use AppState when `isAvailable` is false.');
                }
                switch(type){
                    case 'change':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var changeHandler = handler;
                        return emitter.addListener('appStateDidChange', (appStateData)=>{
                            changeHandler(appStateData.app_state);
                        });
                    case 'memoryWarning':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var memoryWarningHandler = handler;
                        return emitter.addListener('memoryWarning', memoryWarningHandler);
                    case 'blur':
                    case 'focus':
                        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
                        var focusOrBlurHandler = handler;
                        return emitter.addListener('appStateFocusChange', (hasFocus)=>{
                            if (type === 'blur' && !hasFocus) {
                                focusOrBlurHandler();
                            }
                            if (type === 'focus' && hasFocus) {
                                focusOrBlurHandler();
                            }
                        });
                }
                throw new Error('Trying to subscribe to unknown event: ' + type);
            }
        }
    ]);
    return AppStateImpl;
}();
var AppState = new AppStateImpl();
var _default = AppState;


}),
63531: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var MessageQueue = (__webpack_require__(8867)/* ["default"] */["default"]);
var BatchedBridge = new MessageQueue();
// Wire up the batched bridge on the global object so that we can call into it.
// Ideally, this would be the inverse relationship. I.e. the native environment
// provides this global directly with its script embedded. Then this module
// would export it. A possible fix would be to trim the dependencies in
// MessageQueue to its minimal features and embed that in the native runtime.
Object.defineProperty(__webpack_require__.g, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
});
var _default = BatchedBridge;


}),
8867: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _to_consumable_array = __webpack_require__(92716);
var Systrace = __webpack_require__(725);
var deepFreezeAndThrowOnMutationInDev = (__webpack_require__(14702)/* ["default"] */["default"]);
var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
var warnOnce = (__webpack_require__(93473)/* ["default"] */["default"]);
var ErrorUtils = (__webpack_require__(78549)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
var TO_JS = 0;
var TO_NATIVE = 1;
var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
// eslint-disable-next-line no-bitwise
var TRACE_TAG_REACT_APPS = (/* unused pure expression or super */ null && (1 << 17));
var DEBUG_INFO_LIMIT = 32;
var MessageQueue = /*#__PURE__*/ function() {
    function MessageQueue() {
        _class_call_check._(this, MessageQueue);
        this._lazyCallableModules = {};
        this._queue = [
            [],
            [],
            [],
            0
        ];
        this._successCallbacks = new Map();
        this._failureCallbacks = new Map();
        this._callID = 0;
        this._lastFlush = 0;
        this._eventLoopStartTime = Date.now();
        this._reactNativeMicrotasksCallback = null;
        if (false) {}
        // $FlowFixMe[cannot-write]
        this.callFunctionReturnFlushedQueue = // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.callFunctionReturnFlushedQueue.bind(this);
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.flushedQueue = this.flushedQueue.bind(this);
        // $FlowFixMe[cannot-write]
        this.invokeCallbackAndReturnFlushedQueue = // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }
    _create_class._(MessageQueue, [
        {
            key: "callFunctionReturnFlushedQueue",
            value: function callFunctionReturnFlushedQueue(module, method, args) {
                this.__guard(()=>{
                    this.__callFunction(module, method, args);
                });
                return this.flushedQueue();
            }
        },
        {
            key: "invokeCallbackAndReturnFlushedQueue",
            value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
                this.__guard(()=>{
                    this.__invokeCallback(cbID, args);
                });
                return this.flushedQueue();
            }
        },
        {
            key: "flushedQueue",
            value: function flushedQueue() {
                this.__guard(()=>{
                    this.__callReactNativeMicrotasks();
                });
                var queue = this._queue;
                this._queue = [
                    [],
                    [],
                    [],
                    this._callID
                ];
                return queue[0].length ? queue : null;
            }
        },
        {
            key: "getEventLoopRunningTime",
            value: function getEventLoopRunningTime() {
                return Date.now() - this._eventLoopStartTime;
            }
        },
        {
            key: "registerCallableModule",
            value: function registerCallableModule(name, module) {
                this._lazyCallableModules[name] = ()=>module;
            }
        },
        {
            key: "registerLazyCallableModule",
            value: function registerLazyCallableModule(name, factory) {
                var module;
                var getValue = factory;
                this._lazyCallableModules[name] = ()=>{
                    if (getValue) {
                        module = getValue();
                        getValue = null;
                    }
                    /* $FlowFixMe[class-object-subtyping] added when improving typing for
       * this parameters */ return module;
                };
            }
        },
        {
            key: "getCallableModule",
            value: function getCallableModule(name) {
                var getValue = this._lazyCallableModules[name];
                return getValue ? getValue() : null;
            }
        },
        {
            key: "callNativeSyncHook",
            value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
                if (false) {}
                this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
                return __webpack_require__.g.nativeCallSyncHook(moduleID, methodID, params);
            }
        },
        {
            key: "processCallbacks",
            value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
                if (onFail || onSucc) {
                    if (false) { var info }
                    // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit
                    // to indicate fail (0) or success (1)
                    // eslint-disable-next-line no-bitwise
                    onFail && params.push(this._callID << 1);
                    // eslint-disable-next-line no-bitwise
                    onSucc && params.push(this._callID << 1 | 1);
                    this._successCallbacks.set(this._callID, onSucc);
                    this._failureCallbacks.set(this._callID, onFail);
                }
                if (false) {}
                this._callID++;
            }
        },
        {
            key: "enqueueNativeCall",
            value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
                this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
                this._queue[MODULE_IDS].push(moduleID);
                this._queue[METHOD_IDS].push(methodID);
                if (false) { var isValidArgument, replacer }
                this._queue[PARAMS].push(params);
                var now = Date.now();
                if (__webpack_require__.g.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
                    var queue = this._queue;
                    this._queue = [
                        [],
                        [],
                        [],
                        this._callID
                    ];
                    this._lastFlush = now;
                    __webpack_require__.g.nativeFlushQueueImmediate(queue);
                }
                Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
                if (false) {} else if (this.__spy) {
                    this.__spy({
                        type: TO_NATIVE,
                        module: moduleID + '',
                        method: methodID,
                        args: params
                    });
                }
            }
        },
        {
            key: "createDebugLookup",
            value: function createDebugLookup(moduleID, name, methods) {
                if (false) {}
            }
        },
        {
            // For JSTimers to register its callback. Otherwise a circular dependency
            // between modules is introduced. Note that only one callback may be
            // registered at a time.
            key: "setReactNativeMicrotasksCallback",
            value: function setReactNativeMicrotasksCallback(fn) {
                this._reactNativeMicrotasksCallback = fn;
            }
        },
        {
            /**
   * Private methods
   */ key: "__guard",
            value: function __guard(fn) {
                if (this.__shouldPauseOnThrow()) {
                    fn();
                } else {
                    try {
                        fn();
                    } catch (error) {
                        ErrorUtils.reportFatalError(error);
                    }
                }
            }
        },
        {
            // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior
            // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin
            // This makes stacktraces to be placed at MessageQueue rather than at where they were launched
            // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and
            // can be configured by the VM or any Inspector
            key: "__shouldPauseOnThrow",
            value: function __shouldPauseOnThrow() {
                return(// $FlowFixMe[cannot-resolve-name]
                typeof DebuggerInternal !== 'undefined' && // $FlowFixMe[cannot-resolve-name]
                DebuggerInternal.shouldPauseOnThrow === true);
            }
        },
        {
            key: "__callReactNativeMicrotasks",
            value: function __callReactNativeMicrotasks() {
                Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');
                try {
                    if (this._reactNativeMicrotasksCallback != null) {
                        this._reactNativeMicrotasksCallback();
                    }
                } finally{
                    Systrace.endEvent();
                }
            }
        },
        {
            key: "__callFunction",
            value: function __callFunction(module, method, args) {
                this._lastFlush = Date.now();
                this._eventLoopStartTime = this._lastFlush;
                if ( false || this.__spy) {
                    Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);
                } else {
                    Systrace.beginEvent(`${module}.${method}(...)`);
                }
                try {
                    if (this.__spy) {
                        this.__spy({
                            type: TO_JS,
                            module,
                            method,
                            args
                        });
                    }
                    var moduleMethods = this.getCallableModule(module);
                    if (!moduleMethods) {
                        var callableModuleNames = Object.keys(this._lazyCallableModules);
                        var n = callableModuleNames.length;
                        var callableModuleNameList = callableModuleNames.join(', ');
                        // TODO(T122225939): Remove after investigation: Why are we getting to this line in bridgeless mode?
                        var isBridgelessMode = __webpack_require__.g.RN$Bridgeless === true ? 'true' : 'false';
                        invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.
          A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);
                    }
                    // $FlowFixMe[invalid-computed-prop]
                    if (!moduleMethods[method]) {
                        invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`);
                    }
                    moduleMethods[method].apply(moduleMethods, args);
                } finally{
                    Systrace.endEvent();
                }
            }
        },
        {
            key: "__invokeCallback",
            value: function __invokeCallback(cbID, args) {
                this._lastFlush = Date.now();
                this._eventLoopStartTime = this._lastFlush;
                // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.
                // eslint-disable-next-line no-bitwise
                var callID = cbID >>> 1;
                // eslint-disable-next-line no-bitwise
                var isSuccess = cbID & 1;
                var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);
                if (false) { var method, module, debug, profileName }
                try {
                    if (!callback) {
                        return;
                    }
                    this._successCallbacks.delete(callID);
                    this._failureCallbacks.delete(callID);
                    callback.apply(void 0, _to_consumable_array._(args));
                } finally{
                    if (false) {}
                }
            }
        }
    ], [
        {
            key: "spy",
            value: /**
   * Public APIs
   */ function spy(spyOrToggle) {
                if (spyOrToggle === true) {
                    MessageQueue.prototype.__spy = (info)=>{
                        console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);
                    };
                } else if (spyOrToggle === false) {
                    MessageQueue.prototype.__spy = null;
                } else {
                    MessageQueue.prototype.__spy = spyOrToggle;
                }
            }
        }
    ]);
    return MessageQueue;
}();
var _default = MessageQueue;


}),
56540: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
/**
 * Opaque JS representation of some binary data in native.
 *
 * The API is modeled after the W3C Blob API, with one caveat
 * regarding explicit deallocation. Refer to the `close()`
 * method for further details.
 *
 * Example usage in a React component:
 *
 *   class WebSocketImage extends React.Component {
 *      state = {blob: null};
 *      componentDidMount() {
 *        let ws = this.ws = new WebSocket(...);
 *        ws.binaryType = 'blob';
 *        ws.onmessage = (event) => {
 *          if (this.state.blob) {
 *            this.state.blob.close();
 *          }
 *          this.setState({blob: event.data});
 *        };
 *      }
 *      componentUnmount() {
 *        if (this.state.blob) {
 *          this.state.blob.close();
 *        }
 *        this.ws.close();
 *      }
 *      render() {
 *        if (!this.state.blob) {
 *          return <View />;
 *        }
 *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
 *      }
 *   }
 *
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */ var Blob = /*#__PURE__*/ function() {
    function Blob(ref, options) {
        var parts = ref === void 0 ? [] : ref;
        _class_call_check._(this, Blob);
        var BlobManager = (__webpack_require__(28586)/* ["default"] */["default"]);
        this.data = BlobManager.createFromParts(parts, options).data;
    }
    _create_class._(Blob, [
        {
            key: "data",
            get: // $FlowFixMe[unsafe-getters-setters]
            function() {
                if (!this._data) {
                    throw new Error('Blob has been closed and is no longer available');
                }
                return this._data;
            },
            set: /*
   * This method is used to create a new Blob object containing
   * the data in the specified range of bytes of the source Blob.
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
   */ // $FlowFixMe[unsafe-getters-setters]
            function(data) {
                this._data = data;
            }
        },
        {
            key: "slice",
            value: function slice(start, end, ref) {
                var contentType = ref === void 0 ? '' : ref;
                var BlobManager = (__webpack_require__(28586)/* ["default"] */["default"]);
                var _this_data = this.data, offset = _this_data.offset, size = _this_data.size;
                if (typeof start === 'number') {
                    if (start > size) {
                        // $FlowFixMe[reassign-const]
                        start = size;
                    }
                    offset += start;
                    size -= start;
                    if (typeof end === 'number') {
                        if (end < 0) {
                            // $FlowFixMe[reassign-const]
                            end = this.size + end;
                        }
                        if (end > this.size) {
                            // $FlowFixMe[reassign-const]
                            end = this.size;
                        }
                        size = end - start;
                    }
                }
                return BlobManager.createFromOptions({
                    blobId: this.data.blobId,
                    offset,
                    size,
                    type: contentType,
                    /* Since `blob.slice()` creates a new view onto the same binary
       * data as the original blob, we should re-use the same collector
       * object so that the underlying resource gets deallocated when
       * the last view into the data is released, not the first.
       */ __collector: this.data.__collector
                });
            }
        },
        {
            /**
   * This method is in the standard, but not actually implemented by
   * any browsers at this point. It's important for how Blobs work in
   * React Native, however, since we cannot de-allocate resources automatically,
   * so consumers need to explicitly de-allocate them.
   *
   * Note that the semantics around Blobs created via `blob.slice()`
   * and `new Blob([blob])` are different. `blob.slice()` creates a
   * new *view* onto the same binary data, so calling `close()` on any
   * of those views is enough to deallocate the data, whereas
   * `new Blob([blob, ...])` actually copies the data in memory.
   */ key: "close",
            value: function close() {
                var BlobManager = (__webpack_require__(28586)/* ["default"] */["default"]);
                BlobManager.release(this.data.blobId);
                this.data = null;
            }
        },
        {
            key: "size",
            get: /**
   * Size of the data contained in the Blob object, in bytes.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.size;
            }
        },
        {
            key: "type",
            get: /*
   * String indicating the MIME type of the data contained in the Blob.
   * If the type is unknown, this string is empty.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.type || '';
            }
        }
    ]);
    return Blob;
}();
var _default = Blob;


}),
28586: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63903));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var Blob = (__webpack_require__(56540)/* ["default"] */["default"]);
var BlobRegistry = __webpack_require__(31719);
/*eslint-disable no-bitwise */ /*eslint-disable eqeqeq */ /**
 * Based on the rfc4122-compliant solution posted at
 * http://stackoverflow.com/questions/105034
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
// **Temporary workaround**
// TODO(#24654): Use turbomodules for the Blob module.
// Blob collector is a jsi::HostObject that is used by native to know
// when the a Blob instance is deallocated. This allows to free the
// underlying native resources. This is a hack to workaround the fact
// that the current bridge infra doesn't allow to track js objects
// deallocation. Ideally the whole Blob object should be a jsi::HostObject.
function createBlobCollector(blobId) {
    if (__webpack_require__.g.__blobCollectorProvider == null) {
        return null;
    } else {
        return __webpack_require__.g.__blobCollectorProvider(blobId);
    }
}
/**
 * Module to manage blobs. Wrapper around the native blob module.
 */ var BlobManager = /*#__PURE__*/ function() {
    "use strict";
    function BlobManager() {
        _class_call_check._(this, BlobManager);
    }
    _create_class._(BlobManager, null, [
        {
            key: "createFromParts",
            value: /**
   * Create blob from existing array of blobs.
   */ function createFromParts(parts, options) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                var blobId = uuidv4();
                var items = parts.map((part)=>{
                    if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
                        throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
                    }
                    if (part instanceof Blob) {
                        return {
                            data: part.data,
                            type: 'blob'
                        };
                    } else {
                        return {
                            data: String(part),
                            type: 'string'
                        };
                    }
                });
                var size = items.reduce((acc, curr)=>{
                    if (curr.type === 'string') {
                        return acc + __webpack_require__.g.unescape(encodeURI(curr.data)).length;
                    } else {
                        return acc + curr.data.size;
                    }
                }, 0);
                _NativeBlobModule.default.createFromParts(items, blobId);
                return BlobManager.createFromOptions({
                    blobId,
                    offset: 0,
                    size,
                    type: options ? options.type : '',
                    lastModified: options ? options.lastModified : Date.now()
                });
            }
        },
        {
            key: "createFromOptions",
            value: /**
   * Create blob instance from blob data from native.
   * Used internally by modules like XHR, WebSocket, etc.
   */ function createFromOptions(options) {
                BlobRegistry.register(options.blobId);
                // $FlowFixMe[prop-missing]
                return Object.assign(Object.create(Blob.prototype), {
                    data: // Reuse the collector instance when creating from an existing blob.
                    // This will make sure that the underlying resource is only deallocated
                    // when all blobs that refer to it are deallocated.
                    options.__collector == null ? _object_spread_props._(_object_spread._({}, options), {
                        __collector: createBlobCollector(options.blobId)
                    }) : options
                });
            }
        },
        {
            key: "release",
            value: /**
   * Deallocate resources for a blob.
   */ function release(blobId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                BlobRegistry.unregister(blobId);
                if (BlobRegistry.has(blobId)) {
                    return;
                }
                _NativeBlobModule.default.release(blobId);
            }
        },
        {
            key: "addNetworkingHandler",
            value: /**
   * Inject the blob content handler in the networking module to support blob
   * requests and responses.
   */ function addNetworkingHandler() {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addNetworkingHandler();
            }
        },
        {
            key: "addWebSocketHandler",
            value: /**
   * Indicate the websocket should return a blob for incoming binary
   * messages.
   */ function addWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addWebSocketHandler(socketId);
            }
        },
        {
            key: "removeWebSocketHandler",
            value: /**
   * Indicate the websocket should no longer return a blob for incoming
   * binary messages.
   */ function removeWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.removeWebSocketHandler(socketId);
            }
        },
        {
            key: "sendOverSocket",
            value: /**
   * Send a blob message to a websocket.
   */ function sendOverSocket(blob, socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
            }
        }
    ]);
    return BlobManager;
}();
/**
   * If the native blob module is available.
   */ BlobManager.isAvailable = !!_NativeBlobModule.default;
var _default = BlobManager;


}),
31719: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    has: function() {
        return has;
    },
    register: function() {
        return register;
    },
    unregister: function() {
        return unregister;
    }
});
var registry = new Map();
var register = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        registry.set(id, used + 1);
    } else {
        registry.set(id, 1);
    }
};
var unregister = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        if (used <= 1) {
            registry.delete(id);
        } else {
            registry.set(id, used - 1);
        }
    }
};
var has = (id)=>{
    return registry.get(id) || false;
};


}),
85403: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Blob = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56540));
var invariant = __webpack_require__(56481);
/**
 * The File interface provides information about files.
 */ var File = /*#__PURE__*/ function(Blob) {
    _inherits._(File, Blob);
    function File(parts, name, options) {
        _class_call_check._(this, File);
        var _this;
        invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
        _this = _call_super._(this, File, [
            parts,
            options
        ]);
        _this.data.name = name;
        return _this;
    }
    _create_class._(File, [
        {
            key: "name",
            get: /**
   * Name of the file.
   */ function() {
                invariant(this.data.name != null, 'Files must have a name set.');
                return this.data.name;
            }
        },
        {
            key: "lastModified",
            get: /*
   * Last modified time of the file.
   */ function() {
                return this.data.lastModified || 0;
            }
        }
    ]);
    return File;
}(_wrap_native_super._(_Blob.default));
var _default = File;


}),
98175: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ // Use a global instead of a flag from ReactNativeFeatureFlags because this will
// be read before apps have a chance to set overrides.
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _global_RN$useBuiltInEventTarget, _global;
var useBuiltInEventTarget = (_global_RN$useBuiltInEventTarget = (_global = __webpack_require__.g).RN$useBuiltInEventTarget) === null || _global_RN$useBuiltInEventTarget === void 0 ? void 0 : _global_RN$useBuiltInEventTarget.call(_global);
var _default = useBuiltInEventTarget ? (__webpack_require__(36612)/* ["default"] */["default"]) : (__webpack_require__(26298)/* ["default"] */["default"]);


}),
36612: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var _EventHandlerAttributes = __webpack_require__(85950);
var _EventTarget = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12020));
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88873));
var _base64js = __webpack_require__(25608);
// DONE
var EMPTY = 0;
var LOADING = 1;
var DONE = 2;
var FileReader = /*#__PURE__*/ function(EventTarget) {
    "use strict";
    _inherits._(FileReader, EventTarget);
    function FileReader() {
        _class_call_check._(this, FileReader);
        var _this;
        _this = _call_super._(this, FileReader), _this.EMPTY = EMPTY, _this.LOADING = LOADING, _this.DONE = DONE, _this._aborted = false;
        _this._reset();
        return _this;
    }
    _create_class._(FileReader, [
        {
            key: "_reset",
            value: function _reset() {
                this._readyState = EMPTY;
                this._error = null;
                this._result = null;
            }
        },
        {
            key: "_setReadyState",
            value: function _setReadyState(newState) {
                this._readyState = newState;
                this.dispatchEvent(new _Event.default('readystatechange'));
                if (newState === DONE) {
                    if (this._aborted) {
                        this.dispatchEvent(new _Event.default('abort'));
                    } else if (this._error) {
                        this.dispatchEvent(new _Event.default('error'));
                    } else {
                        this.dispatchEvent(new _Event.default('load'));
                    }
                    this.dispatchEvent(new _Event.default('loadend'));
                }
            }
        },
        {
            key: "readAsArrayBuffer",
            value: function readAsArrayBuffer(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    var base64 = text.split(',')[1];
                    var typedArray = (0, _base64js.toByteArray)(base64);
                    this._result = typedArray.buffer;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsDataURL",
            value: function readAsDataURL(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsText",
            value: function readAsText(blob, ref) {
                var encoding = ref === void 0 ? 'UTF-8' : ref;
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsText(blob.data, encoding).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                // only call onreadystatechange if there is something to abort, as per spec
                if (this._readyState !== EMPTY && this._readyState !== DONE) {
                    this._reset();
                    this._setReadyState(DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "readyState",
            get: function() {
                return this._readyState;
            }
        },
        {
            key: "error",
            get: function() {
                return this._error;
            }
        },
        {
            key: "result",
            get: function() {
                return this._result;
            }
        },
        {
            key: "onabort",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
            }
        },
        {
            key: "onerror",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
            }
        },
        {
            key: "onload",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
            }
        },
        {
            key: "onloadstart",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
            }
        },
        {
            key: "onloadend",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
            }
        },
        {
            key: "onprogress",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
            }
        }
    ]);
    return FileReader;
}(_wrap_native_super._(_EventTarget.default));
FileReader.EMPTY = EMPTY;
FileReader.LOADING = LOADING;
FileReader.DONE = DONE;
var _default = FileReader;


}),
26298: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88873));
var _base64js = __webpack_require__(25608);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
// DONE
var READER_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'loadend',
    'progress'
];
var EMPTY = 0;
var LOADING = 1;
var DONE = 2;
var FileReader = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(FileReader, _EventTarget);
    function FileReader() {
        _class_call_check._(this, FileReader);
        var _this;
        _this = _call_super._(this, FileReader), _this.EMPTY = EMPTY, _this.LOADING = LOADING, _this.DONE = DONE, _this._aborted = false;
        _this._reset();
        return _this;
    }
    _create_class._(FileReader, [
        {
            key: "_reset",
            value: function _reset() {
                this._readyState = EMPTY;
                this._error = null;
                this._result = null;
            }
        },
        {
            key: "_setReadyState",
            value: function _setReadyState(newState) {
                this._readyState = newState;
                this.dispatchEvent({
                    type: 'readystatechange'
                });
                if (newState === DONE) {
                    if (this._aborted) {
                        this.dispatchEvent({
                            type: 'abort'
                        });
                    } else if (this._error) {
                        this.dispatchEvent({
                            type: 'error'
                        });
                    } else {
                        this.dispatchEvent({
                            type: 'load'
                        });
                    }
                    this.dispatchEvent({
                        type: 'loadend'
                    });
                }
            }
        },
        {
            key: "readAsArrayBuffer",
            value: function readAsArrayBuffer(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    var base64 = text.split(',')[1];
                    var typedArray = (0, _base64js.toByteArray)(base64);
                    this._result = typedArray.buffer;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsDataURL",
            value: function readAsDataURL(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsText",
            value: function readAsText(blob, ref) {
                var encoding = ref === void 0 ? 'UTF-8' : ref;
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsText(blob.data, encoding).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                // only call onreadystatechange if there is something to abort, as per spec
                if (this._readyState !== EMPTY && this._readyState !== DONE) {
                    this._reset();
                    this._setReadyState(DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "readyState",
            get: function() {
                return this._readyState;
            }
        },
        {
            key: "error",
            get: function() {
                return this._error;
            }
        },
        {
            key: "result",
            get: function() {
                return this._result;
            }
        }
    ]);
    return FileReader;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(READER_EVENTS)));
FileReader.EMPTY = EMPTY;
FileReader.LOADING = LOADING;
FileReader.DONE = DONE;
var _default = FileReader;


}),
30787: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    URL: function() {
        return URL;
    },
    URLSearchParams: function() {
        return _URLSearchParams.URLSearchParams;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63903));
var _URLSearchParams = __webpack_require__(11363);
var BLOB_URL_PREFIX = null;
if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    // $FlowFixMe[incompatible-type] asserted above
    // $FlowFixMe[unsafe-addition]
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
        BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;
    }
}
function validateBaseUrl(url) {
    // from this MIT-licensed gist: https://gist.github.com/dperini/729294
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
}
var URL = /*#__PURE__*/ function() {
    "use strict";
    function URL(url, base) {
        _class_call_check._(this, URL);
        this._searchParamsInstance = null;
        var baseUrl = null;
        if (!base || validateBaseUrl(url)) {
            this._url = url;
            if (this._url.includes('#')) {
                var split = this._url.split('#');
                var beforeHash = split[0];
                var website = beforeHash.split('://')[1];
                if (!website.includes('/')) {
                    this._url = split.join('/#');
                }
            }
            if (!this._url.endsWith('/') && !(this._url.includes('?') || this._url.includes('#'))) {
                this._url += '/';
            }
        } else {
            if (typeof base === 'string') {
                baseUrl = base;
                if (!validateBaseUrl(baseUrl)) {
                    throw new TypeError(`Invalid base URL: ${baseUrl}`);
                }
            } else {
                baseUrl = base.toString();
            }
            if (baseUrl.endsWith('/')) {
                baseUrl = baseUrl.slice(0, baseUrl.length - 1);
            }
            if (!url.startsWith('/')) {
                url = `/${url}`;
            }
            if (baseUrl.endsWith(url)) {
                url = '';
            }
            this._url = `${baseUrl}${url}`;
        }
    }
    _create_class._(URL, [
        {
            key: "hash",
            get: function() {
                throw new Error('URL.hash is not implemented');
            }
        },
        {
            key: "host",
            get: function() {
                throw new Error('URL.host is not implemented');
            }
        },
        {
            key: "hostname",
            get: function() {
                throw new Error('URL.hostname is not implemented');
            }
        },
        {
            key: "href",
            get: function() {
                return this.toString();
            }
        },
        {
            key: "origin",
            get: function() {
                throw new Error('URL.origin is not implemented');
            }
        },
        {
            key: "password",
            get: function() {
                throw new Error('URL.password is not implemented');
            }
        },
        {
            key: "pathname",
            get: function() {
                throw new Error('URL.pathname not implemented');
            }
        },
        {
            key: "port",
            get: function() {
                throw new Error('URL.port is not implemented');
            }
        },
        {
            key: "protocol",
            get: function() {
                throw new Error('URL.protocol is not implemented');
            }
        },
        {
            key: "search",
            get: function() {
                throw new Error('URL.search is not implemented');
            }
        },
        {
            key: "searchParams",
            get: function() {
                if (this._searchParamsInstance == null) {
                    this._searchParamsInstance = new URLSearchParams();
                }
                return this._searchParamsInstance;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            key: "toString",
            value: function toString() {
                if (this._searchParamsInstance === null) {
                    return this._url;
                }
                // $FlowFixMe[incompatible-use]
                var instanceString = this._searchParamsInstance.toString();
                var separator = this._url.indexOf('?') > -1 ? '&' : '?';
                return this._url + separator + instanceString;
            }
        },
        {
            key: "username",
            get: function() {
                throw new Error('URL.username is not implemented');
            }
        }
    ], [
        {
            key: "createObjectURL",
            value: function createObjectURL(blob) {
                if (BLOB_URL_PREFIX === null) {
                    throw new Error('Cannot create URL for blob!');
                }
                return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;
            }
        },
        {
            key: "revokeObjectURL",
            value: function revokeObjectURL(url) {
            // Do nothing.
            }
        }
    ]);
    return URL;
}();


}),
11363: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Small subset from whatwg-url: https://github.com/jsdom/whatwg-url/tree/master/src
// The reference code bloat comes from Unicode issues with URLs, so those won't work here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "URLSearchParams", ({
    enumerable: true,
    get: function() {
        return URLSearchParams;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var URLSearchParams = /*#__PURE__*/ function() {
    "use strict";
    function URLSearchParams(params) {
        _class_call_check._(this, URLSearchParams);
        this._searchParams = [];
        if (typeof params === 'object') {
            Object.keys(params).forEach((key)=>this.append(key, params[key]));
        }
    }
    _create_class._(URLSearchParams, [
        {
            key: "append",
            value: function append(key, value) {
                this._searchParams.push([
                    key,
                    value
                ]);
            }
        },
        {
            key: "delete",
            value: function _delete(name) {
                throw new Error('URLSearchParams.delete is not implemented');
            }
        },
        {
            key: "get",
            value: function get(name) {
                throw new Error('URLSearchParams.get is not implemented');
            }
        },
        {
            key: "getAll",
            value: function getAll(name) {
                throw new Error('URLSearchParams.getAll is not implemented');
            }
        },
        {
            key: "has",
            value: function has(name) {
                throw new Error('URLSearchParams.has is not implemented');
            }
        },
        {
            key: "set",
            value: function set(name, value) {
                throw new Error('URLSearchParams.set is not implemented');
            }
        },
        {
            key: "sort",
            value: function sort() {
                throw new Error('URLSearchParams.sort is not implemented');
            }
        },
        {
            // $FlowFixMe[unsupported-syntax]
            key: Symbol.iterator,
            value: function() {
                return this._searchParams[Symbol.iterator]();
            }
        },
        {
            key: "toString",
            value: function toString() {
                if (this._searchParams.length === 0) {
                    return '';
                }
                var last = this._searchParams.length - 1;
                return this._searchParams.reduce((acc, curr, index)=>{
                    return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
                }, '');
            }
        }
    ]);
    return URLSearchParams;
}();


}),
47895: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57896));
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81683));
function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', ()=>(__webpack_require__(9094)/* ["default"] */["default"])());
}
/**
 * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
 * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
 * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
 * returned by `addSource` when they are unmounted.
 */ var BugReporting = /*#__PURE__*/ function() {
    "use strict";
    function BugReporting() {
        _class_call_check._(this, BugReporting);
    }
    _create_class._(BugReporting, null, [
        {
            key: "_maybeInit",
            value: function _maybeInit() {
                if (!BugReporting._subscription) {
                    BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                    defaultExtras();
                }
                if (!BugReporting._redboxSubscription) {
                    BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                }
            }
        },
        {
            key: "addSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addSource(key, callback) {
                return this._addSource(key, callback, BugReporting._extraSources);
            }
        },
        {
            key: "addFileSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addFileSource(key, callback) {
                return this._addSource(key, callback, BugReporting._fileSources);
            }
        },
        {
            key: "_addSource",
            value: function _addSource(key, callback, source) {
                BugReporting._maybeInit();
                if (source.has(key)) {
                    console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
                }
                source.set(key, callback);
                return {
                    remove: ()=>{
                        source.delete(key);
                    }
                };
            }
        },
        {
            key: "collectExtraData",
            value: /**
   * This can be called from a native bug reporting flow, or from JS code.
   *
   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
   * after collecting `extraData`.
   */ function collectExtraData() {
                var extraData = {};
                for (var ref of BugReporting._extraSources){
                    var _ref = _sliced_to_array._(ref, 2), key = _ref[0], callback = _ref[1];
                    extraData[key] = callback();
                }
                var fileData = {};
                for (var ref1 of BugReporting._fileSources){
                    var _ref1 = _sliced_to_array._(ref1, 2), key1 = _ref1[0], callback1 = _ref1[1];
                    fileData[key1] = callback1();
                }
                if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
                    _NativeBugReporting.default.setExtraData(extraData, fileData);
                }
                if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
                    _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
                }
                return {
                    extras: extraData,
                    files: fileData
                };
            }
        }
    ]);
    return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
var _default = BugReporting;


}),
9094: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/*
const getReactData = require('getReactData').default;

const INDENTATION_SIZE = 2;
const MAX_DEPTH = 2;
const MAX_STRING_LENGTH = 50;
*/ /**
 * Dump all React Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of React and will fail in future versions.
 */ function dumpReactTree() {
    try {
        return getReactTree();
    } catch (e) {
        return 'Failed to dump react tree: ' + e;
    }
}
function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
/*
  let output = '';
  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (const rootId of rootIds) {
    const instance = ReactNativeMount._instancesByContainerID[rootId];
    output += `============ Root ID: ${rootId} ============\n`;
    output += dumpNode(instance, 0);
    output += `============ End root ID: ${rootId} ============\n`;
  }
  return output;
*/ }
var _default = dumpReactTree;


}),
26132: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _RendererProxy = __webpack_require__(46513);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _legacySendAccessibilityEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63614));
var _NativeAccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97044));
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29502));
// Events that are only supported on Android.
// Events that are only supported on iOS.
// Mapping of public event names to platform-specific event names.
var EventNames = _Platform.default.OS === 'android' ? new Map([
    [
        'change',
        'touchExplorationDidChange'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionDidChange'
    ],
    [
        'highTextContrastChanged',
        'highTextContrastDidChange'
    ],
    [
        'screenReaderChanged',
        'touchExplorationDidChange'
    ],
    [
        'accessibilityServiceChanged',
        'accessibilityServiceDidChange'
    ],
    [
        'invertColorsChanged',
        'invertColorDidChange'
    ],
    [
        'grayscaleChanged',
        'grayscaleModeDidChange'
    ]
]) : new Map([
    [
        'announcementFinished',
        'announcementFinished'
    ],
    [
        'boldTextChanged',
        'boldTextChanged'
    ],
    [
        'change',
        'screenReaderChanged'
    ],
    [
        'grayscaleChanged',
        'grayscaleChanged'
    ],
    [
        'invertColorsChanged',
        'invertColorsChanged'
    ],
    [
        'reduceMotionChanged',
        'reduceMotionChanged'
    ],
    [
        'reduceTransparencyChanged',
        'reduceTransparencyChanged'
    ],
    [
        'screenReaderChanged',
        'screenReaderChanged'
    ],
    [
        'darkerSystemColorsChanged',
        'darkerSystemColorsChanged'
    ]
]);
/**
 * Sometimes it's useful to know whether or not the device has a screen reader
 * that is currently active. The `AccessibilityInfo` API is designed for this
 * purpose. You can use it to query the current state of the screen reader as
 * well as to register to be notified when the state of the screen reader
 * changes.
 *
 * See https://reactnative.dev/docs/accessibilityinfo
 */ var AccessibilityInfo = {
    /**
   * Query whether bold text is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when bold text is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled
   */ isBoldTextEnabled () {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether grayscale is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when grayscale is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled
   */ isGrayscaleEnabled () {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isGrayscaleEnabled) != null) {
                    _NativeAccessibilityInfo.default.isGrayscaleEnabled(resolve);
                } else {
                    reject(null);
                }
            });
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether inverted colors are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when invert color is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled
   */ isInvertColorsEnabled () {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isInvertColorsEnabled) != null) {
                    _NativeAccessibilityInfo.default.isInvertColorsEnabled(resolve);
                } else {
                    reject(null);
                }
            });
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether reduced motion is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce motion is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled
   */ isReduceMotionEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether high text contrast is currently enabled. Android only.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when high text contrast is enabled and `false` otherwise.
   */ isHighTextContrastEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if ((_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.isHighTextContrastEnabled) != null) {
                    _NativeAccessibilityInfo.default.isHighTextContrastEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                return Promise.resolve(false);
            }
        });
    },
    /**
   * Query whether dark system colors is currently enabled. iOS only.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when dark system colors is enabled and `false` otherwise.
   */ isDarkerSystemColorsEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                return Promise.resolve(false);
            } else {
                if ((_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.getCurrentDarkerSystemColorsState) != null) {
                    _NativeAccessibilityManager.default.getCurrentDarkerSystemColorsState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions
   */ prefersCrossFadeTransitions () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                return Promise.resolve(false);
            } else {
                if ((_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {
                    _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether reduced transparency is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a reduce transparency is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled
   */ isReduceTransparencyEnabled () {
        if (_Platform.default.OS === 'android') {
            return Promise.resolve(false);
        } else {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
                } else {
                    reject(null);
                }
            });
        }
    },
    /**
   * Query whether a screen reader is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when a screen reader is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled
   */ isScreenReaderEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null) {
                    _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                if (_NativeAccessibilityManager.default != null) {
                    _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
                } else {
                    reject(null);
                }
            }
        });
    },
    /**
   * Query whether Accessibility Service is currently enabled.
   *
   * Returns a promise which resolves to a boolean.
   * The result is `true` when any service is enabled and `false` otherwise.
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android
   */ isAccessibilityServiceEnabled () {
        return new Promise((resolve, reject)=>{
            if (_Platform.default.OS === 'android') {
                if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {
                    _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);
                } else {
                    reject(null);
                }
            } else {
                reject(null);
            }
        });
    },
    /**
   * Add an event handler. Supported events:
   *
   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce
   *   motion is enabled (or when "Transition Animation Scale" in "Developer options" is
   *   "Animation off") and `false` otherwise.
   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument
   *   to the event handler is a boolean. The boolean is `true` when a screen
   *   reader is enabled and `false` otherwise.
   *
   * These events are only supported on iOS:
   *
   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text
   *   is enabled and `false` otherwise.
   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.
   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale
   *   is enabled and `false` otherwise.
   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle
   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert
   *   colors is enabled and `false` otherwise.
   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency
   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`
   *   when a reduce transparency is enabled and `false` otherwise.
   * - `announcementFinished`: iOS-only event. Fires when the screen reader has
   *   finished making an announcement. The argument to the event handler is a
   *   dictionary with these keys:
   *     - `announcement`: The string announced by the screen reader.
   *     - `success`: A boolean indicating whether the announcement was
   *       successfully made.
   * - `darkerSystemColorsChanged`: iOS-only event. Fires when the state of the dark system colors
   *   toggle changes. The argument to the event handler is a boolean. The boolean is `true` when
   *   dark system colors is enabled and `false` otherwise.
   *
   * These events are only supported on Android:
   *
   * - `highTextContrastChanged`: Android-only event. Fires when the state of the high text contrast
   *   toggle changes. The argument to the event handler is a boolean. The boolean is `true` when
   *   high text contrast is enabled and `false` otherwise.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener
   */ addEventListener (eventName, // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)
    handler) {
        var deviceEventName = EventNames.get(eventName);
        return deviceEventName == null ? {
            remove () {}
        } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    /**
   * Set accessibility focus to a React component.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus
   */ setAccessibilityFocus (reactTag) {
        (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    /**
   * Send a named accessibility event to a HostComponent.
   */ sendAccessibilityEvent (handle, eventType) {
        // iOS only supports 'focus' event types
        if (_Platform.default.OS === 'ios' && eventType === 'click') {
            return;
        }
        // route through React renderer to distinguish between Fabric and non-Fabric handles
        (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);
    },
    /**
   * Post a string to be announced by the screen reader.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility
   */ announceForAccessibility (announcement) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
        }
    },
    /**
   * Post a string to be announced by the screen reader.
   * - `announcement`: The string announced by the screen reader.
   * - `options`: An object that configures the reading options.
   *   - `queue`: The announcement will be queued behind existing announcements. iOS only.
   */ announceForAccessibilityWithOptions (announcement, options) {
        if (_Platform.default.OS === 'android') {
            _NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
        } else {
            if (_NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {
                _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);
            } else {
                _NativeAccessibilityManager.default === null || _NativeAccessibilityManager.default === void 0 ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
            }
        }
    },
    /**
   * Get the recommended timeout for changes to the UI needed by this user.
   *
   * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis
   */ getRecommendedTimeoutMillis (originalTimeout) {
        if (_Platform.default.OS === 'android') {
            return new Promise((resolve, reject)=>{
                if (_NativeAccessibilityInfo.default === null || _NativeAccessibilityInfo.default === void 0 ? void 0 : _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {
                    _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);
                } else {
                    resolve(originalTimeout);
                }
            });
        } else {
            return Promise.resolve(originalTimeout);
        }
    }
};
var _default = AccessibilityInfo;


}),
63614: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
/**
 * This is a function exposed to the React Renderer that can be used by the
 * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
 */ function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewFocused);
    }
    if (eventType === 'click') {
        (0, _nullthrows.default)(_UIManager.default.sendAccessibilityEvent)(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewClicked);
    }
}
var _default = legacySendAccessibilityEvent;


}),
88058: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var PlatformActivityIndicator = _Platform.default.OS === 'android' ? (__webpack_require__(19107)/* ["default"] */["default"]) : (__webpack_require__(33217)/* ["default"] */["default"]);
var GRAY = '#999999';
var ActivityIndicator = (_param, forwardedRef)=>{
    var _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, _param_color = _param.color, color = _param_color === void 0 ? _Platform.default.OS === 'ios' ? GRAY : null : _param_color, _param_hidesWhenStopped = _param.hidesWhenStopped, hidesWhenStopped = _param_hidesWhenStopped === void 0 ? true : _param_hidesWhenStopped, onLayout = _param.onLayout, _param_size = _param.size, size = _param_size === void 0 ? 'small' : _param_size, style = _param.style, restProps = _object_without_properties._(_param, [
        "animating",
        "color",
        "hidesWhenStopped",
        "onLayout",
        "size",
        "style"
    ]);
    var sizeStyle;
    var sizeProp;
    switch(size){
        case 'small':
            sizeStyle = styles.sizeSmall;
            sizeProp = 'small';
            break;
        case 'large':
            sizeStyle = styles.sizeLarge;
            sizeProp = 'large';
            break;
        default:
            sizeStyle = {
                height: size,
                width: size
            };
            break;
    }
    var nativeProps = _object_spread_props._(_object_spread._({
        animating,
        color,
        hidesWhenStopped
    }, restProps), {
        ref: forwardedRef,
        style: sizeStyle,
        size: sizeProp
    });
    var androidProps = {
        styleAttr: 'Normal',
        indeterminate: true
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        onLayout: onLayout,
        style: _StyleSheet.default.compose(styles.container, style),
        children: _Platform.default.OS === 'android' ? // $FlowFixMe[prop-missing] Flow doesn't know when this is the android component
        /*#__PURE__*/ (0, _jsxruntime.jsx)(PlatformActivityIndicator, _object_spread._({}, nativeProps, androidProps)) : /* $FlowFixMe[incompatible-type] (>=0.106.0 site=react_native_android_fb) This comment
         * suppresses an error found when Flow v0.106 was deployed. To see the
         * error, delete this comment and run Flow. */ /*#__PURE__*/ (0, _jsxruntime.jsx)(PlatformActivityIndicator, _object_spread._({}, nativeProps))
    });
};
/**
  Displays a circular loading indicator.

  ```SnackPlayer name=ActivityIndicator%20Example
  import React from 'react';
  import {ActivityIndicator, StyleSheet, View} from 'react-native';

  const App = () => (
    <View style={[styles.container, styles.horizontal]}>
      <ActivityIndicator />
      <ActivityIndicator size="large" />
      <ActivityIndicator size="small" color="#0000ff" />
      <ActivityIndicator size="large" color="#00ff00" />
    </View>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
    },
    horizontal: {
      flexDirection: 'row',
      justifyContent: 'space-around',
      padding: 10,
    },
  });

  export default App;
```
*/ var ActivityIndicatorWithRef = /*#__PURE__*/ _react.forwardRef(ActivityIndicator);
ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
var styles = _StyleSheet.default.create({
    container: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    sizeSmall: {
        width: 20,
        height: 20
    },
    sizeLarge: {
        width: 36,
        height: 36
    }
});
var _default = ActivityIndicatorWithRef;


}),
91869: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _TouchableNativeFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25741));
var _TouchableOpacity = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90001));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
  A basic button component that should render nicely on any platform. Supports a
  minimal level of customization.

  If this button doesn't look right for your app, you can build your own button
  using [TouchableOpacity](touchableopacity) or
  [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at
  the [source code for this button component][button:source]. Or, take a look at
  the [wide variety of button components built by the community]
  [button:examples].

  [button:source]:
  https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js

  [button:examples]:
  https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button

  ```jsx
  <Button
    onPress={onPressLearnMore}
    title="Learn More"
    color="#841584"
    accessibilityLabel="Learn more about this purple button"
  />
  ```

  ```SnackPlayer name=Button%20Example
  import React from 'react';
  import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';

  const Separator = () => (
    <View style={styles.separator} />
  );

  const App = () => (
    <SafeAreaView style={styles.container}>
      <View>
        <Text style={styles.title}>
          The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.
        </Text>
        <Button
          title="Press me"
          onPress={() => Alert.alert('Simple Button pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.
        </Text>
        <Button
          title="Press me"
          color="#f194ff"
          onPress={() => Alert.alert('Button with adjusted color pressed')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          All interaction for the component are disabled.
        </Text>
        <Button
          title="Press me"
          disabled
          onPress={() => Alert.alert('Cannot press this one')}
        />
      </View>
      <Separator />
      <View>
        <Text style={styles.title}>
          This layout strategy lets the title define the width of the button.
        </Text>
        <View style={styles.fixToText}>
          <Button
            title="Left button"
            onPress={() => Alert.alert('Left button pressed')}
          />
          <Button
            title="Right button"
            onPress={() => Alert.alert('Right button pressed')}
          />
        </View>
      </View>
    </SafeAreaView>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      marginHorizontal: 16,
    },
    title: {
      textAlign: 'center',
      marginVertical: 8,
    },
    fixToText: {
      flexDirection: 'row',
      justifyContent: 'space-between',
    },
    separator: {
      marginVertical: 8,
      borderBottomColor: '#737373',
      borderBottomWidth: StyleSheet.hairlineWidth,
    },
  });

  export default App;
  ```
 */ var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;
var Button = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var accessibilityLabel = props.accessibilityLabel, accessibilityState = props.accessibilityState, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], importantForAccessibility = props.importantForAccessibility, color = props.color, onPress = props.onPress, touchSoundDisabled = props.touchSoundDisabled, title = props.title, hasTVPreferredFocus = props.hasTVPreferredFocus, nextFocusDown = props.nextFocusDown, nextFocusForward = props.nextFocusForward, nextFocusLeft = props.nextFocusLeft, nextFocusRight = props.nextFocusRight, nextFocusUp = props.nextFocusUp, testID = props.testID, accessible = props.accessible, accessibilityActions = props.accessibilityActions, accessibilityHint = props.accessibilityHint, accessibilityLanguage = props.accessibilityLanguage, onAccessibilityAction = props.onAccessibilityAction;
    var buttonStyles = [
        styles.button
    ];
    var textStyles = [
        styles.text
    ];
    if (color) {
        if (_Platform.default.OS === 'ios') {
            textStyles.push({
                color: color
            });
        } else {
            buttonStyles.push({
                backgroundColor: color
            });
        }
    }
    var _accessibilityState = {
        busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
        checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
        disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
        expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
        selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
    };
    var disabled = props.disabled != null ? props.disabled : _accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled;
    _accessibilityState = disabled !== (_accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled) ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
        disabled
    }) : _accessibilityState;
    if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
    }
    (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
    var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
    // If `no` is specified for `importantForAccessibility`, it will be changed to `no-hide-descendants` because the text inside should not be focused.
    var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Touchable, {
        accessible: accessible,
        accessibilityActions: accessibilityActions,
        onAccessibilityAction: onAccessibilityAction,
        accessibilityLabel: ariaLabel || accessibilityLabel,
        accessibilityHint: accessibilityHint,
        accessibilityLanguage: accessibilityLanguage,
        accessibilityRole: "button",
        accessibilityState: _accessibilityState,
        importantForAccessibility: _importantForAccessibility,
        hasTVPreferredFocus: hasTVPreferredFocus,
        nextFocusDown: nextFocusDown,
        nextFocusForward: nextFocusForward,
        nextFocusLeft: nextFocusLeft,
        nextFocusRight: nextFocusRight,
        nextFocusUp: nextFocusUp,
        testID: testID,
        disabled: disabled,
        onPress: onPress,
        touchSoundDisabled: touchSoundDisabled,
        // $FlowFixMe[incompatible-exact]
        // $FlowFixMe[prop-missing]
        // $FlowFixMe[incompatible-type-arg]
        ref: ref,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: buttonStyles,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: textStyles,
                disabled: disabled,
                children: formattedTitle
            })
        })
    });
});
Button.displayName = 'Button';
var styles = _StyleSheet.default.create({
    button: _Platform.default.select({
        ios: {},
        android: {
            elevation: 4,
            // Material design blue from https://material.google.com/style/color.html#color-color-palette
            backgroundColor: '#2196F3',
            borderRadius: 2
        }
    }),
    text: _object_spread._({
        textAlign: 'center',
        margin: 8
    }, _Platform.default.select({
        ios: {
            // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/
            color: '#007AFF',
            fontSize: 18
        },
        android: {
            color: 'white',
            fontWeight: '500'
        }
    })),
    buttonDisabled: _Platform.default.select({
        ios: {},
        android: {
            elevation: 0,
            backgroundColor: '#dfdfdf'
        }
    }),
    textDisabled: _Platform.default.select({
        ios: {
            color: '#cdcdcd'
        },
        android: {
            color: '#a1a1a1'
        }
    })
});
var _default = Button;


}),
8434: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeClipboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10305));
var _default = {
    /**
   * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content
   * ```javascript
   * async _getContent() {
   *   var content = await Clipboard.getString();
   * }
   * ```
   */ getString () {
        return _NativeClipboard.default.getString();
    },
    /**
   * Set content of string type. You can use following code to set clipboard content
   * ```javascript
   * _setContent() {
   *   Clipboard.setString('hello world');
   * }
   * ```
   * @param {string} content the content to be stored in the clipboard.
   */ setString (content) {
        _NativeClipboard.default.setString(content);
    }
};


}),
98615: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45215));
var _StatusBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22728));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _AndroidDrawerLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(47608));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var DRAWER_STATES = [
    'Idle',
    'Dragging',
    'Settling'
];
/**
 * React component that wraps the platform `DrawerLayout` (Android only). The
 * Drawer (typically used for navigation) is rendered with `renderNavigationView`
 * and direct children are the main view (where your content goes). The navigation
 * view is initially not visible on the screen, but can be pulled in from the
 * side of the window specified by the `drawerPosition` prop and its width can
 * be set by the `drawerWidth` prop.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var navigationView = (
 *     <View style={{flex: 1, backgroundColor: '#fff'}}>
 *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>
 *     </View>
 *   );
 *   return (
 *     <DrawerLayoutAndroid
 *       drawerWidth={300}
 *       drawerPosition="left"
 *       renderNavigationView={() => navigationView}>
 *       <View style={{flex: 1, alignItems: 'center'}}>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>
 *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>
 *       </View>
 *     </DrawerLayoutAndroid>
 *   );
 * },
 * ```
 */ var DrawerLayoutAndroid = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(DrawerLayoutAndroid, _React_Component);
    function DrawerLayoutAndroid() {
        _class_call_check._(this, DrawerLayoutAndroid);
        var _this;
        _this = _call_super._(this, DrawerLayoutAndroid, arguments), // $FlowFixMe[missing-local-annot]
        _this._nativeRef = /*#__PURE__*/ _react.createRef(), _this.state = {
            drawerOpened: false
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerSlide = (event)=>{
            if (_this.props.onDrawerSlide) {
                // $FlowFixMe[unused-promise]
                _this.props.onDrawerSlide(event);
            }
            if (_this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
        }, _this._onDrawerOpen = ()=>{
            _this.setState({
                drawerOpened: true
            });
            if (_this.props.onDrawerOpen) {
                _this.props.onDrawerOpen();
            }
        }, _this._onDrawerClose = ()=>{
            _this.setState({
                drawerOpened: false
            });
            if (_this.props.onDrawerClose) {
                _this.props.onDrawerClose();
            }
        }, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */ _this._onDrawerStateChanged = (event)=>{
            if (_this.props.onDrawerStateChanged) {
                _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
            }
        };
        return _this;
    }
    _create_class._(DrawerLayoutAndroid, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _this_props_drawerBackgroundColor = _this_props.drawerBackgroundColor, drawerBackgroundColor = _this_props_drawerBackgroundColor === void 0 ? 'white' : _this_props_drawerBackgroundColor, onDrawerStateChanged = _this_props.onDrawerStateChanged, renderNavigationView = _this_props.renderNavigationView, onDrawerOpen = _this_props.onDrawerOpen, onDrawerClose = _this_props.onDrawerClose, props = _object_without_properties._(_this_props, [
                    "drawerBackgroundColor",
                    "onDrawerStateChanged",
                    "renderNavigationView",
                    "onDrawerOpen",
                    "onDrawerClose"
                ]);
                var drawStatusBar = this.props.statusBarBackgroundColor != null;
                var drawerViewWrapper = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    style: [
                        styles.drawerSubview,
                        {
                            width: this.props.drawerWidth,
                            backgroundColor: drawerBackgroundColor
                        }
                    ],
                    pointerEvents: this.state.drawerOpened ? 'auto' : 'none',
                    collapsable: false,
                    children: [
                        renderNavigationView(),
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                            style: styles.drawerStatusBar
                        })
                    ]
                });
                var childrenWrapper = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    style: styles.mainSubview,
                    collapsable: false,
                    children: [
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_StatusBar.default, {
                            translucent: true,
                            backgroundColor: this.props.statusBarBackgroundColor
                        }),
                        drawStatusBar && /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                            style: [
                                styles.statusBar,
                                {
                                    backgroundColor: this.props.statusBarBackgroundColor
                                }
                            ]
                        }),
                        this.props.children
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_AndroidDrawerLayoutNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
                    ref: this._nativeRef,
                    drawerBackgroundColor: drawerBackgroundColor,
                    drawerWidth: this.props.drawerWidth,
                    drawerPosition: this.props.drawerPosition,
                    drawerLockMode: this.props.drawerLockMode,
                    style: [
                        styles.base,
                        this.props.style
                    ],
                    onDrawerSlide: this._onDrawerSlide,
                    onDrawerOpen: this._onDrawerOpen,
                    onDrawerClose: this._onDrawerClose,
                    onDrawerStateChanged: this._onDrawerStateChanged,
                    children: [
                        childrenWrapper,
                        drawerViewWrapper
                    ]
                }));
            }
        },
        {
            /**
   * Opens the drawer.
   */ key: "openDrawer",
            value: function openDrawer() {
                _AndroidDrawerLayoutNativeComponent.Commands.openDrawer((0, _nullthrows.default)(this._nativeRef.current));
            }
        },
        {
            /**
   * Closes the drawer.
   */ key: "closeDrawer",
            value: function closeDrawer() {
                _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer((0, _nullthrows.default)(this._nativeRef.current));
            }
        },
        {
            /**
   * Closing and opening example
   * Note: To access the drawer you have to give it a ref
   *
   * Class component:
   *
   * render () {
   *   this.openDrawer = () => {
   *     this.refs.DRAWER.openDrawer()
   *   }
   *   this.closeDrawer = () => {
   *     this.refs.DRAWER.closeDrawer()
   *   }
   *   return (
   *     <DrawerLayoutAndroid ref={'DRAWER'}>
   *      {children}
   *     </DrawerLayoutAndroid>
   *   )
   * }
   *
   * Function component:
   *
   * const drawerRef = useRef()
   * const openDrawer = () => {
   *   drawerRef.current.openDrawer()
   * }
   * const closeDrawer = () => {
   *   drawerRef.current.closeDrawer()
   * }
   * return (
   *   <DrawerLayoutAndroid ref={drawerRef}>
   *     {children}
   *   </DrawerLayoutAndroid>
   * )
   */ /**
   * Native methods
   */ key: "blur",
            value: function blur() {
                (0, _nullthrows.default)(this._nativeRef.current).blur();
            }
        },
        {
            key: "focus",
            value: function focus() {
                (0, _nullthrows.default)(this._nativeRef.current).focus();
            }
        },
        {
            key: "measure",
            value: function measure(callback) {
                (0, _nullthrows.default)(this._nativeRef.current).measure(callback);
            }
        },
        {
            key: "measureInWindow",
            value: function measureInWindow(callback) {
                (0, _nullthrows.default)(this._nativeRef.current).measureInWindow(callback);
            }
        },
        {
            key: "measureLayout",
            value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
                (0, _nullthrows.default)(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(nativeProps) {
                (0, _nullthrows.default)(this._nativeRef.current).setNativeProps(nativeProps);
            }
        }
    ], [
        {
            key: "positions",
            get: function() {
                console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"');
                return {
                    Left: 'left',
                    Right: 'right'
                };
            }
        }
    ]);
    return DrawerLayoutAndroid;
}(_react.Component);
var styles = _StyleSheet.default.create({
    base: {
        flex: 1,
        elevation: 16
    },
    mainSubview: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    },
    drawerSubview: {
        position: 'absolute',
        top: 0,
        bottom: 0
    },
    statusBar: {
        height: _StatusBar.default.currentHeight
    },
    drawerStatusBar: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: _StatusBar.default.currentHeight,
        backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
});
var _default = DrawerLayoutAndroid;


}),
59853: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22236));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45215));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeKeyboardObserver = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79006));
/**
 * `Keyboard` module to control keyboard events.
 *
 * ### Usage
 *
 * The Keyboard module allows you to listen for native events and react to them, as
 * well as make changes to the keyboard, like dismissing it.
 *
 *```
 * import React, { Component } from 'react';
 * import { Keyboard, TextInput } from 'react-native';
 *
 * class Example extends Component {
 *   componentWillMount () {
 *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
 *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
 *   }
 *
 *   componentWillUnmount () {
 *     this.keyboardDidShowListener.remove();
 *     this.keyboardDidHideListener.remove();
 *   }
 *
 *   _keyboardDidShow () {
 *     alert('Keyboard Shown');
 *   }
 *
 *   _keyboardDidHide () {
 *     alert('Keyboard Hidden');
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         onSubmitEditing={Keyboard.dismiss}
 *       />
 *     );
 *   }
 * }
 *```
 */ var Keyboard = /*#__PURE__*/ function() {
    "use strict";
    function Keyboard() {
        _class_call_check._(this, Keyboard);
        this._emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeKeyboardObserver.default);
        this.addListener('keyboardDidShow', (ev)=>{
            this._currentlyShowing = ev;
        });
        this.addListener('keyboardDidHide', (_ev)=>{
            this._currentlyShowing = null;
        });
    }
    _create_class._(Keyboard, [
        {
            /**
   * The `addListener` function connects a JavaScript function to an identified native
   * keyboard notification event.
   *
   * This function then returns the reference to the listener.
   *
   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This
   *can be any of the following:
   *
   * - `keyboardWillShow`
   * - `keyboardDidShow`
   * - `keyboardWillHide`
   * - `keyboardDidHide`
   * - `keyboardWillChangeFrame`
   * - `keyboardDidChangeFrame`
   *
   * Android versions prior to API 30 rely on observing layout changes when
   * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
   *
   * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is
   * no native corresponding event.
   *
   * @param {function} callback function to be called when the event fires.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                return this._emitter.addListener(eventType, listener);
            }
        },
        {
            /**
   * Removes all listeners for a specific event type.
   *
   * @param {string} eventType The native event string listeners are watching which will be removed.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                this._emitter.removeAllListeners(eventType);
            }
        },
        {
            /**
   * Dismisses the active keyboard and removes focus.
   */ key: "dismiss",
            value: function dismiss() {
                (0, _dismissKeyboard.default)();
            }
        },
        {
            /**
   * Whether the keyboard is last known to be visible.
   */ key: "isVisible",
            value: function isVisible() {
                return !!this._currentlyShowing;
            }
        },
        {
            /**
   * Return the metrics of the soft-keyboard if visible.
   */ key: "metrics",
            value: function metrics() {
                var _this__currentlyShowing;
                return (_this__currentlyShowing = this._currentlyShowing) === null || _this__currentlyShowing === void 0 ? void 0 : _this__currentlyShowing.endCoordinates;
            }
        },
        {
            /**
   * Useful for syncing TextInput (or other keyboard accessory view) size of
   * position changes with keyboard movements.
   */ key: "scheduleLayoutAnimation",
            value: function scheduleLayoutAnimation(event) {
                var duration = event.duration, easing = event.easing;
                if (duration != null && duration !== 0) {
                    _LayoutAnimation.default.configureNext({
                        duration: duration,
                        update: {
                            duration: duration,
                            type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
                        }
                    });
                }
            }
        }
    ]);
    return Keyboard;
}();
var _default = new Keyboard();


}),
61850: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _LayoutAnimation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22236));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _AccessibilityInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26132));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59853));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * View that moves out of the way when the keyboard appears by automatically
 * adjusting its height, position, or bottom padding.
 */ var KeyboardAvoidingView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(KeyboardAvoidingView, _React_Component);
    function KeyboardAvoidingView(props) {
        _class_call_check._(this, KeyboardAvoidingView);
        var _this;
        var _this1;
        _this = _call_super._(this, KeyboardAvoidingView, [
            props
        ]), _this1 = _this, _this._frame = null, _this._keyboardEvent = null, _this._subscriptions = [], _this._initialFrameHeight = 0, _this._bottom = 0, _this._onKeyboardChange = (event)=>{
            _this._keyboardEvent = event;
            // $FlowFixMe[unused-promise]
            _this._updateBottomIfNecessary();
        }, _this._onKeyboardHide = (event)=>{
            _this._keyboardEvent = null;
            // $FlowFixMe[unused-promise]
            _this._updateBottomIfNecessary();
        }, _this._onLayout = /*#__PURE__*/ function() {
            var _ref = _async_to_generator._(function*(event) {
                event.persist();
                var oldFrame = _this1._frame;
                _this1._frame = event.nativeEvent.layout;
                if (!_this1._initialFrameHeight) {
                    // save the initial frame height, before the keyboard is visible
                    _this1._initialFrameHeight = _this1._frame.height;
                }
                // update bottom height for the first time or when the height is changed
                if (!oldFrame || oldFrame.height !== _this1._frame.height) {
                    yield _this1._updateBottomIfNecessary();
                }
                if (_this1.props.onLayout) {
                    _this1.props.onLayout(event);
                }
            });
            return function(event) {
                return _ref.apply(this, arguments);
            };
        }(), // Avoid unnecessary renders if the KeyboardAvoidingView is disabled.
        _this._setBottom = (value)=>{
            var enabled = _this.props.enabled ?? true;
            _this._bottom = value;
            if (enabled) {
                _this.setState({
                    bottom: value
                });
            }
        }, _this._updateBottomIfNecessary = /*#__PURE__*/ _async_to_generator._(function*() {
            if (_this1._keyboardEvent == null) {
                _this1._setBottom(0);
                return;
            }
            var _this__keyboardEvent = _this1._keyboardEvent, duration = _this__keyboardEvent.duration, easing = _this__keyboardEvent.easing, endCoordinates = _this__keyboardEvent.endCoordinates;
            var height = yield _this1._relativeKeyboardHeight(endCoordinates);
            if (_this1._bottom === height) {
                return;
            }
            _this1._setBottom(height);
            var enabled = _this1.props.enabled ?? true;
            if (enabled && duration && easing) {
                _LayoutAnimation.default.configureNext({
                    // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m
                    duration: duration > 10 ? duration : 10,
                    update: {
                        duration: duration > 10 ? duration : 10,
                        type: _LayoutAnimation.default.Types[easing] || 'keyboard'
                    }
                });
            }
        });
        _this.state = {
            bottom: 0
        };
        _this.viewRef = /*#__PURE__*/ _react.createRef();
        return _this;
    }
    _create_class._(KeyboardAvoidingView, [
        {
            key: "_relativeKeyboardHeight",
            value: function _relativeKeyboardHeight(keyboardFrame) {
                var _this = this;
                return _async_to_generator._(function*() {
                    var frame = _this._frame;
                    if (!frame || !keyboardFrame) {
                        return 0;
                    }
                    // On iOS when Prefer Cross-Fade Transitions is enabled, the keyboard position
                    // & height is reported differently (0 instead of Y position value matching height of frame)
                    if (_Platform.default.OS === 'ios' && keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
                        return 0;
                    }
                    var keyboardY = keyboardFrame.screenY - (_this.props.keyboardVerticalOffset ?? 0);
                    if (_this.props.behavior === 'height') {
                        return Math.max(_this.state.bottom + frame.y + frame.height - keyboardY, 0);
                    }
                    // Calculate the displacement needed for the view such that it
                    // no longer overlaps with the keyboard
                    return Math.max(frame.y + frame.height - keyboardY, 0);
                })();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(_, prevState) {
                var enabled = this.props.enabled ?? true;
                if (enabled && this._bottom !== prevState.bottom) {
                    this.setState({
                        bottom: this._bottom
                    });
                }
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (!_Keyboard.default.isVisible()) {
                    this._keyboardEvent = null;
                    this._setBottom(0);
                }
                if (_Platform.default.OS === 'ios') {
                    this._subscriptions = [
                        // When undocked, split or floating, iOS will emit
                        // UIKeyboardWillHideNotification notification.
                        // UIKeyboardWillChangeFrameNotification will be emitted before
                        // UIKeyboardWillHideNotification, so we need to listen to
                        // keyboardWillHide and keyboardWillShow instead of
                        // keyboardWillChangeFrame.
                        _Keyboard.default.addListener('keyboardWillHide', this._onKeyboardHide),
                        _Keyboard.default.addListener('keyboardWillShow', this._onKeyboardChange)
                    ];
                } else {
                    this._subscriptions = [
                        _Keyboard.default.addListener('keyboardDidHide', this._onKeyboardChange),
                        _Keyboard.default.addListener('keyboardDidShow', this._onKeyboardChange)
                    ];
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this._subscriptions.forEach((subscription)=>{
                    subscription.remove();
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, behavior = _this_props.behavior, children = _this_props.children, contentContainerStyle = _this_props.contentContainerStyle, _this_props_enabled = _this_props.enabled, enabled = _this_props_enabled === void 0 ? true : _this_props_enabled, _this_props_keyboardVerticalOffset = _this_props.// eslint-disable-next-line no-unused-vars
                keyboardVerticalOffset, keyboardVerticalOffset = _this_props_keyboardVerticalOffset === void 0 ? 0 : _this_props_keyboardVerticalOffset, style = _this_props.style, onLayout = _this_props.onLayout, props = _object_without_properties._(_this_props, [
                    "behavior",
                    "children",
                    "contentContainerStyle",
                    "enabled",
                    "keyboardVerticalOffset",
                    "style",
                    "onLayout"
                ]);
                var bottomHeight = enabled === true ? this.state.bottom : 0;
                switch(behavior){
                    case 'height':
                        var heightStyle;
                        if (this._frame != null && this.state.bottom > 0) {
                            // Note that we only apply a height change when there is keyboard present,
                            // i.e. this.state.bottom is greater than 0. If we remove that condition,
                            // this.frame.height will never go back to its original value.
                            // When height changes, we need to disable flex.
                            heightStyle = {
                                height: this._initialFrameHeight - bottomHeight,
                                flex: 0
                            };
                        }
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: _StyleSheet.default.compose(style, heightStyle),
                            onLayout: this._onLayout
                        }, props), {
                            children: children
                        }));
                    case 'position':
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: style,
                            onLayout: this._onLayout
                        }, props), {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                                style: _StyleSheet.default.compose(contentContainerStyle, {
                                    bottom: bottomHeight
                                }),
                                children: children
                            })
                        }));
                    case 'padding':
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            style: _StyleSheet.default.compose(style, {
                                paddingBottom: bottomHeight
                            }),
                            onLayout: this._onLayout
                        }, props), {
                            children: children
                        }));
                    default:
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, _object_spread_props._(_object_spread._({
                            ref: this.viewRef,
                            onLayout: this._onLayout,
                            style: style
                        }, props), {
                            children: children
                        }));
                }
            }
        }
    ]);
    return KeyboardAvoidingView;
}(_react.Component);
var _default = KeyboardAvoidingView;


}),
95714: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _LayoutConformanceNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47278));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _global;
// We want a graceful fallback for apps using legacy arch, but need to know
// ahead of time whether the component is available, so we test for global.
// This does not correctly handle mixed arch apps (which is okay, since we just
// degrade the error experience).
var isFabricUIManagerInstalled = ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.nativeFabricUIManager) != null;
function LayoutConformance(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LayoutConformanceNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
        style: styles.container
    }));
}
function UnimplementedLayoutConformance(props) {
    if (false) { var warnOnce }
    return props.children;
}
var _default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
var styles = _StyleSheet.default.create({
    container: {
        display: 'contents'
    }
});


}),
37443: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _PressabilityDebug = __webpack_require__(51386);
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45178));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _useAndroidRippleForView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17625));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Component used to build display components that should respond to whether the
 * component is currently pressed or not.
 */ function Pressable(props, forwardedRef) {
    var _props_accessibilityValue, _props_accessibilityValue1, _props_accessibilityValue2, _props_accessibilityValue3;
    var accessible = props.accessible, accessibilityState = props.accessibilityState, ariaLive = props['aria-live'], android_disableSound = props.android_disableSound, android_ripple = props.android_ripple, ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaLabel = props['aria-label'], ariaSelected = props['aria-selected'], cancelable = props.cancelable, children = props.children, delayHoverIn = props.delayHoverIn, delayHoverOut = props.delayHoverOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, hitSlop = props.hitSlop, onHoverIn = props.onHoverIn, onHoverOut = props.onHoverOut, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, pressRetentionOffset = props.pressRetentionOffset, style = props.style, testOnly_pressed = props.testOnly_pressed, unstable_pressDelay = props.unstable_pressDelay, restProps = _object_without_properties._(props, [
        "accessible",
        "accessibilityState",
        'aria-live',
        "android_disableSound",
        "android_ripple",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "cancelable",
        "children",
        "delayHoverIn",
        "delayHoverOut",
        "delayLongPress",
        "disabled",
        "focusable",
        "hitSlop",
        "onHoverIn",
        "onHoverOut",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "pressRetentionOffset",
        "style",
        "testOnly_pressed",
        "unstable_pressDelay"
    ]);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = _sliced_to_array._(usePressState(testOnly_pressed === true), 2), pressed = _usePressState[0], setPressed = _usePressState[1];
    var shouldUpdatePressed = typeof children === 'function' || typeof style === 'function';
    var _accessibilityState = {
        busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
        checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
        disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
        expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
        selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
    };
    _accessibilityState = disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
        disabled
    }) : _accessibilityState;
    var accessibilityValue = {
        max: props['aria-valuemax'] ?? ((_props_accessibilityValue = props.accessibilityValue) === null || _props_accessibilityValue === void 0 ? void 0 : _props_accessibilityValue.max),
        min: props['aria-valuemin'] ?? ((_props_accessibilityValue1 = props.accessibilityValue) === null || _props_accessibilityValue1 === void 0 ? void 0 : _props_accessibilityValue1.min),
        now: props['aria-valuenow'] ?? ((_props_accessibilityValue2 = props.accessibilityValue) === null || _props_accessibilityValue2 === void 0 ? void 0 : _props_accessibilityValue2.now),
        text: props['aria-valuetext'] ?? ((_props_accessibilityValue3 = props.accessibilityValue) === null || _props_accessibilityValue3 === void 0 ? void 0 : _props_accessibilityValue3.text)
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel ?? props.accessibilityLabel;
    var restPropsWithDefaults = _object_spread_props._(_object_spread._({}, restProps, android_rippleConfig === null || android_rippleConfig === void 0 ? void 0 : android_rippleConfig.viewProps), {
        accessible: accessible !== false,
        accessibilityViewIsModal: restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,
        accessibilityLiveRegion,
        accessibilityLabel,
        accessibilityState: _accessibilityState,
        focusable: focusable !== false,
        accessibilityValue,
        hitSlop
    });
    var config = (0, _react.useMemo)(()=>({
            cancelable,
            disabled,
            hitSlop,
            pressRectOffset: pressRetentionOffset,
            android_disableSound,
            delayHoverIn,
            delayHoverOut,
            delayLongPress,
            delayPressIn: unstable_pressDelay,
            onHoverIn,
            onHoverOut,
            onLongPress,
            onPress,
            onPressIn (event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressIn(event);
                }
                shouldUpdatePressed && setPressed(true);
                if (onPressIn != null) {
                    onPressIn(event);
                }
            },
            onPressMove: android_rippleConfig === null || android_rippleConfig === void 0 ? void 0 : android_rippleConfig.onPressMove,
            onPressOut (event) {
                if (android_rippleConfig != null) {
                    android_rippleConfig.onPressOut(event);
                }
                shouldUpdatePressed && setPressed(false);
                if (onPressOut != null) {
                    onPressOut(event);
                }
            }
        }), [
        android_disableSound,
        android_rippleConfig,
        cancelable,
        delayHoverIn,
        delayHoverOut,
        delayLongPress,
        disabled,
        hitSlop,
        onHoverIn,
        onHoverOut,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        pressRetentionOffset,
        setPressed,
        shouldUpdatePressed,
        unstable_pressDelay
    ]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, _object_spread_props._(_object_spread._({}, restPropsWithDefaults, eventHandlers), {
        ref: mergedRef,
        style: typeof style === 'function' ? style({
            pressed
        }) : style,
        collapsable: false,
        children: [
            typeof children === 'function' ? children({
                pressed
            }) : children,
             false ? /*#__PURE__*/ 0 : null
        ]
    }));
}
function usePressState(forcePressed) {
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), pressed = _useState[0], setPressed = _useState[1];
    return [
        pressed || forcePressed,
        setPressed
    ];
}
var MemoedPressable = /*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(Pressable));
MemoedPressable.displayName = 'Pressable';
var _default = MemoedPressable;


}),
17625: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAndroidRippleForView;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _ViewNativeComponent = __webpack_require__(99318);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig ?? {}, color = _ref.color, borderless = _ref.borderless, radius = _ref.radius, foreground = _ref.foreground;
    return (0, _react.useMemo)(()=>{
        if (_Platform.default.OS === 'android' && (color != null || borderless != null || radius != null)) {
            var processedColor = (0, _processColor.default)(color);
            (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
            var nativeRippleValue = {
                type: 'RippleAndroid',
                color: processedColor,
                borderless: borderless === true,
                rippleRadius: radius
            };
            return {
                viewProps: foreground === true ? {
                    nativeForegroundAndroid: nativeRippleValue
                } : {
                    nativeBackgroundAndroid: nativeRippleValue
                },
                onPressIn (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.hotspotUpdate(view, event.nativeEvent.locationX ?? 0, event.nativeEvent.locationY ?? 0);
                        _ViewNativeComponent.Commands.setPressed(view, true);
                    }
                },
                onPressMove (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.hotspotUpdate(view, event.nativeEvent.locationX ?? 0, event.nativeEvent.locationY ?? 0);
                    }
                },
                onPressOut (event) {
                    var view = viewRef.current;
                    if (view != null) {
                        _ViewNativeComponent.Commands.setPressed(view, false);
                    }
                }
            };
        }
        return null;
    }, [
        borderless,
        color,
        foreground,
        radius,
        viewRef
    ]);
}


}),
19107: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _ProgressBarAndroidNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84102));
var React = __webpack_require__(4931);
/**
 * React component that wraps the Android-only `ProgressBar`. This component is
 * used to indicate that the app is loading or there is activity in the app.
 *
 * Example:
 *
 * ```
 * render: function() {
 *   var progressBar =
 *     <View style={styles.container}>
 *       <ProgressBar styleAttr="Inverse" />
 *     </View>;

 *   return (
 *     <MyLoadingComponent
 *       componentView={componentView}
 *       loadingView={progressBar}
 *       style={styles.loadingComponent}
 *     />
 *   );
 * },
 * ```
 */ var ProgressBarAndroidWithForwardedRef = React.forwardRef(function ProgressBarAndroid(_param, forwardedRef) {
    var _param_styleAttr = _param.// $FlowFixMe[incompatible-type]
    styleAttr, styleAttr = _param_styleAttr === void 0 ? 'Normal' : _param_styleAttr, _param_indeterminate = _param.indeterminate, indeterminate = _param_indeterminate === void 0 ? true : _param_indeterminate, _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, restProps = _object_without_properties._(_param, [
        "styleAttr",
        "indeterminate",
        "animating"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressBarAndroidNativeComponent.default, _object_spread_props._(_object_spread._({
        styleAttr: styleAttr,
        indeterminate: indeterminate,
        animating: animating
    }, restProps), {
        ref: forwardedRef
    }));
});
var _default = ProgressBarAndroidWithForwardedRef;


}),
88414: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _AndroidSwipeRefreshLayoutNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(62009));
var _PullToRefreshViewNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(37328));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
/**
 * This component is used inside a ScrollView or ListView to add pull to refresh
 * functionality. When the ScrollView is at `scrollY: 0`, swiping down
 * triggers an `onRefresh` event.
 *
 * ### Usage example
 *
 * ``` js
 * class RefreshableList extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       refreshing: false,
 *     };
 *   }
 *
 *   _onRefresh() {
 *     this.setState({refreshing: true});
 *     fetchData().then(() => {
 *       this.setState({refreshing: false});
 *     });
 *   }
 *
 *   render() {
 *     return (
 *       <ListView
 *         refreshControl={
 *           <RefreshControl
 *             refreshing={this.state.refreshing}
 *             onRefresh={this._onRefresh.bind(this)}
 *           />
 *         }
 *         ...
 *       >
 *       ...
 *       </ListView>
 *     );
 *   }
 *   ...
 * }
 * ```
 *
 * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true
 * in the `onRefresh` function otherwise the refresh indicator will stop immediately.
 */ var RefreshControl = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(RefreshControl, _React_Component);
    function RefreshControl() {
        _class_call_check._(this, RefreshControl);
        var _this;
        _this = _call_super._(this, RefreshControl, arguments), _this._lastNativeRefreshing = false, _this._onRefresh = ()=>{
            _this._lastNativeRefreshing = true;
            // $FlowFixMe[unused-promise]
            _this.props.onRefresh && _this.props.onRefresh();
            // The native component will start refreshing so force an update to
            // make sure it stays in sync with the js component.
            _this.forceUpdate();
        }, _this._setNativeRef = (ref)=>{
            _this._nativeRef = ref;
        };
        return _this;
    }
    _create_class._(RefreshControl, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._lastNativeRefreshing = this.props.refreshing;
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                // RefreshControl is a controlled component so if the native refreshing
                // value doesn't match the current js refreshing prop update it to
                // the js value.
                if (this.props.refreshing !== prevProps.refreshing) {
                    this._lastNativeRefreshing = this.props.refreshing;
                } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
                    if (Platform.OS === 'android') {
                        _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
                    } else {
                        _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
                    }
                    this._lastNativeRefreshing = this.props.refreshing;
                }
            }
        },
        {
            key: "render",
            value: function render() {
                if (Platform.OS === 'ios') {
                    var _this_props = this.props, enabled = _this_props.enabled, colors = _this_props.colors, progressBackgroundColor = _this_props.progressBackgroundColor, size = _this_props.size, props = _object_without_properties._(_this_props, [
                        "enabled",
                        "colors",
                        "progressBackgroundColor",
                        "size"
                    ]);
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PullToRefreshViewNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
                        ref: this._setNativeRef,
                        onRefresh: this._onRefresh
                    }));
                } else {
                    var _this_props1 = this.props, tintColor = _this_props1.tintColor, titleColor = _this_props1.titleColor, title = _this_props1.title, props1 = _object_without_properties._(_this_props1, [
                        "tintColor",
                        "titleColor",
                        "title"
                    ]);
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AndroidSwipeRefreshLayoutNativeComponent.default, _object_spread_props._(_object_spread._({}, props1), {
                        ref: this._setNativeRef,
                        onRefresh: this._onRefresh
                    }));
                }
            }
        }
    ]);
    return RefreshControl;
}(_react.default.Component);
var _default = RefreshControl;


}),
25530: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Renders nested content and automatically applies paddings reflect the portion
 * of the view that is not covered by navigation bars, tab bars, toolbars, and
 * other ancestor views.
 *
 * Moreover, and most importantly, Safe Area's paddings reflect physical
 * limitation of the screen, such as rounded corners or camera notches (aka
 * sensor housing area on iPhone X).
 */ var exported = _Platform.default.select({
    ios: (__webpack_require__(14138)/* ["default"] */["default"]),
    default: _View.default
});
var _default = exported;


}),
27864: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _HScrollViewNativeComponents = __webpack_require__(73432);
var _VScrollViewNativeComponents = __webpack_require__(34413);
var _AnimatedImplementation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90345));
var _FrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(85788));
var _RendererProxy = __webpack_require__(46513);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _splitLayoutProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89492));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6482));
var _dismissKeyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45215));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _Keyboard = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59853));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7273));
var _processDecelerationRate = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90921));
var _ScrollViewCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55581));
var _ScrollViewContext = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(1116));
var _ScrollViewStickyHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86034));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29068));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/*
 * iOS scroll event timing nuances:
 * ===============================
 *
 *
 * Scrolling without bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... physical touch starts ...
 * 2. `onTouchStartCapture`   (when you press down to stop the scroll)
 * 3. `onTouchStart`          (same, but bubble phase)
 * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)
 * 5. `onMomentumScrollEnd`
 *
 *
 * Scrolling with bouncing, if you touch down:
 * -------------------------------
 *
 * 1. `onMomentumScrollBegin` (when animation begins after letting up)
 *    ... bounce begins ...
 *    ... some time elapses ...
 *    ... physical touch during bounce ...
 * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)
 * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)
 * 4. `onTouchStart`          (same, but bubble phase)
 * 5. `onTouchEnd`            (You could hold the touch start for a long time)
 * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)
 *
 * So when we receive an `onTouchStart`, how can we tell if we are touching
 * *during* an animation (which then causes the animation to stop)? The only way
 * to tell is if the `touchStart` occurred immediately after the
 * `onMomentumScrollEnd`.
 *
 * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if
 * necessary
 *
 * `ScrollView` also includes logic for blurring a currently focused input
 * if one is focused while scrolling. This is a natural place
 * to put this logic since it can support not dismissing the keyboard while
 * scrolling, unless a recognized "tap"-like gesture has occurred.
 *
 * The public lifecycle API includes events for keyboard interaction, responder
 * interaction, and scrolling (among others). The keyboard callbacks
 * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll
 * responder's props so that you can guarantee that the scroll responder's
 * internal state has been updated accordingly (and deterministically) by
 * the time the props callbacks are invoke. Otherwise, you would always wonder
 * if the scroll responder is currently in a state where it recognizes new
 * keyboard positions etc. If coordinating scrolling with keyboard movement,
 * *always* use these hooks instead of listening to your own global keyboard
 * events.
 *
 * Public keyboard lifecycle API: (props callbacks)
 *
 * Standard Keyboard Appearance Sequence:
 *
 *   this.props.onKeyboardWillShow
 *   this.props.onKeyboardDidShow
 *
 * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate
 * tap inside the scroll responder's scrollable region was responsible
 * for the dismissal of the keyboard. There are other reasons why the
 * keyboard could be dismissed.
 *
 *   this.props.onScrollResponderKeyboardDismissed
 *
 * Standard Keyboard Hide Sequence:
 *
 *   this.props.onKeyboardWillHide
 *   this.props.onKeyboardDidHide
 */ // Public methods for ScrollView
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
/**
 * Component that wraps platform ScrollView while providing
 * integration with touch locking "responder" system.
 *
 * Keep in mind that ScrollViews must have a bounded height in order to work,
 * since they contain unbounded-height children into a bounded container (via
 * a scroll interaction). In order to bound the height of a ScrollView, either
 * set the height of the view directly (discouraged) or make sure all parent
 * views have bounded height. Forgetting to transfer `{flex: 1}` down the
 * view stack can lead to errors here, which the element inspector makes
 * easy to debug.
 *
 * Doesn't yet support other contained responders from blocking this scroll
 * view from becoming the responder.
 *
 *
 * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?
 *
 * `ScrollView` simply renders all its react child components at once. That
 * makes it very easy to understand and use.
 *
 * On the other hand, this has a performance downside. Imagine you have a very
 * long list of items you want to display, maybe several screens worth of
 * content. Creating JS components and native views for everything all at once,
 * much of which may not even be shown, will contribute to slow rendering and
 * increased memory usage.
 *
 * This is where `FlatList` comes into play. `FlatList` renders items lazily,
 * just when they are about to appear, and removes items that scroll way off
 * screen to save memory and processing time.
 *
 * `FlatList` is also handy if you want to render separators between your items,
 * multiple columns, infinite scroll loading, or any number of other features it
 * supports out of the box.
 */ var ScrollView = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ScrollView, _React_Component);
    function ScrollView(props) {
        _class_call_check._(this, ScrollView);
        var _this;
        var _this_props_contentOffset, _this_props_contentInset;
        _this = _call_super._(this, ScrollView, [
            props
        ]), _this._scrollAnimatedValueAttachment = null, _this._stickyHeaderRefs = new Map(), _this._headerLayoutYs = new Map(), _this._keyboardMetrics = null, _this._additionalScrollOffset = 0, _this._isTouching = false, _this._lastMomentumScrollBeginTime = 0, _this._lastMomentumScrollEndTime = 0, // Reset to false every time becomes responder. This is used to:
        // - Determine if the scroll view has been scrolled and therefore should
        // refuse to give up its responder lock.
        // - Determine if releasing should dismiss the keyboard when we are in
        // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').
        _this._observedScrollSinceBecomingResponder = false, _this._becameResponderWhileAnimating = false, _this._preventNegativeScrollOffset = null, _this._animated = null, _this._subscriptionKeyboardWillShow = null, _this._subscriptionKeyboardWillHide = null, _this._subscriptionKeyboardDidShow = null, _this._subscriptionKeyboardDidHide = null, _this.state = {
            layoutHeight: null
        }, /**
   * Returns a reference to the underlying scroll responder, which supports
   * operations like `scrollTo`. All ScrollView-like components should
   * implement this method so that they can be composed while providing access
   * to the underlying scroll responder's methods.
   */ _this.getScrollResponder = ()=>{
            // $FlowFixMe[unclear-type]
            return _this;
        }, _this.getScrollableNode = ()=>{
            return (0, _RendererProxy.findNodeHandle)(_this.getNativeScrollRef());
        }, _this.getInnerViewNode = ()=>{
            return (0, _RendererProxy.findNodeHandle)(_this._innerView.nativeInstance);
        }, _this.getInnerViewRef = ()=>{
            return _this._innerView.nativeInstance;
        }, _this.getNativeScrollRef = ()=>{
            return _this._scrollView.nativeInstance;
        }, /**
   * Scrolls to a given x, y offset, either immediately or with a smooth animation.
   *
   * Example:
   *
   * `scrollTo({x: 0, y: 0, animated: true})`
   *
   * Note: The weird function signature is due to the fact that, for historical reasons,
   * the function also accepts separate arguments as an alternative to the options object.
   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.
   */ _this.scrollTo = (options, deprecatedX, deprecatedAnimated)=>{
            var x, y, animated;
            if (typeof options === 'number') {
                console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
                y = options;
                x = deprecatedX;
                animated = deprecatedAnimated;
            } else if (options) {
                y = options.y;
                x = options.x;
                animated = options.animated;
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollTo(component, x || 0, y || 0, animated !== false);
        }, /**
   * If this is a vertical ScrollView scrolls to the bottom.
   * If this is a horizontal ScrollView scrolls to the right.
   *
   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,
   * `scrollToEnd({animated: false})` for immediate scrolling.
   * If no options are passed, `animated` defaults to true.
   */ _this.scrollToEnd = (options)=>{
            // Default to true
            var animated = (options && options.animated) !== false;
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.scrollToEnd(component, animated);
        }, /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ _this.flashScrollIndicators = ()=>{
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.flashScrollIndicators(component);
        }, /**
   * This method should be used as the callback to onFocus in a TextInputs'
   * parent view. Note that any module using this mixin needs to return
   * the parent view's ref in getScrollViewRef() in order to use this method.
   * @param {number} nodeHandle The TextInput node handle
   * @param {number} additionalOffset The scroll view's bottom "contentInset".
   *        Default is 0.
   * @param {bool} preventNegativeScrolling Whether to allow pulling the content
   *        down to make it meet the keyboard's top. Default is false.
   */ _this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset)=>{
            _this._additionalScrollOffset = additionalOffset || 0;
            _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
            if (_this._innerView.nativeInstance == null) {
                return;
            }
            if (typeof nodeHandle === 'number') {
                _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _RendererProxy.findNodeHandle)(_this)), // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
            } else {
                nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                _this._textInputFocusError);
            }
        }, /**
   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape
   * {x: number; y: number; width: number; height: number; animated: boolean = true}
   *
   * @platform ios
   */ _this.scrollResponderZoomTo = (rect, animated)=>{
            (0, _invariant.default)(_Platform.default.OS === 'ios', 'zoomToRect is not implemented');
            if ('animated' in rect) {
                _this._animated = rect.animated;
                delete rect.animated;
            } else if (typeof animated !== 'undefined') {
                console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
            }
            var component = _this.getNativeScrollRef();
            if (component == null) {
                return;
            }
            _ScrollViewCommands.default.zoomToRect(component, rect, animated !== false);
        }, /**
   * The calculations performed here assume the scroll view takes up the entire
   * screen - even if has some content inset. We then measure the offsets of the
   * keyboard, and compensate both for the scroll view's "contentInset".
   *
   * @param {number} left Position of input w.r.t. table view.
   * @param {number} top Position of input w.r.t. table view.
   * @param {number} width Width of the text input.
   * @param {number} height Height of the text input.
   */ _this._inputMeasureAndScrollToKeyboard = (left, top, width, height)=>{
            var keyboardScreenY = _Dimensions.default.get('window').height;
            var scrollTextInputIntoVisibleRect = ()=>{
                if (_this._keyboardMetrics != null) {
                    keyboardScreenY = _this._keyboardMetrics.screenY;
                }
                var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
                // By default, this can scroll with negative offset, pulling the content
                // down so that the target component's bottom meets the keyboard's top.
                // If requested otherwise, cap the offset at 0 minimum to avoid content
                // shifting down.
                if (_this._preventNegativeScrollOffset === true) {
                    scrollOffsetY = Math.max(0, scrollOffsetY);
                }
                _this.scrollTo({
                    x: 0,
                    y: scrollOffsetY,
                    animated: true
                });
                _this._additionalScrollOffset = 0;
                _this._preventNegativeScrollOffset = false;
            };
            if (_this._keyboardMetrics == null) {
                // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which
                // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.
                // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to
                // text input.
                setTimeout(()=>{
                    scrollTextInputIntoVisibleRect();
                }, 0);
            } else {
                scrollTextInputIntoVisibleRect();
            }
        }, _this._handleScroll = (e)=>{
            _this._observedScrollSinceBecomingResponder = true;
            _this.props.onScroll && _this.props.onScroll(e);
        }, _this._handleLayout = (e)=>{
            if (_this.props.invertStickyHeaders === true) {
                _this.setState({
                    layoutHeight: e.nativeEvent.layout.height
                });
            }
            if (_this.props.onLayout) {
                _this.props.onLayout(e);
            }
        }, _this._handleContentOnLayout = (e)=>{
            var _e_nativeEvent_layout = e.nativeEvent.layout, width = _e_nativeEvent_layout.width, height = _e_nativeEvent_layout.height;
            _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
        }, _this._innerView = createRefForwarder((instance)=>instance), _this._scrollView = createRefForwarder((nativeInstance)=>{
            // This is a hack. Ideally we would forwardRef  to the underlying
            // host component. However, since ScrollView has it's own methods that can be
            // called as well, if we used the standard forwardRef then these
            // methods wouldn't be accessible and thus be a breaking change.
            //
            // Therefore we edit ref to include ScrollView's public methods so that
            // they are callable from the ref.
            // $FlowFixMe[prop-missing] - Known issue with appending custom methods.
            var publicInstance = Object.assign(nativeInstance, {
                getScrollResponder: _this.getScrollResponder,
                getScrollableNode: _this.getScrollableNode,
                getInnerViewNode: _this.getInnerViewNode,
                getInnerViewRef: _this.getInnerViewRef,
                getNativeScrollRef: _this.getNativeScrollRef,
                scrollTo: _this.scrollTo,
                scrollToEnd: _this.scrollToEnd,
                flashScrollIndicators: _this.flashScrollIndicators,
                scrollResponderZoomTo: _this.scrollResponderZoomTo,
                scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
            });
            return publicInstance;
        }), /**
   * Warning, this may be called several times for a single keyboard opening.
   * It's best to store the information in this method and then take any action
   * at a later point (either in `keyboardDidShow` or other).
   *
   * Here's the order that events occur in:
   * - focus
   * - willShow {startCoordinates, endCoordinates} several times
   * - didShow several times
   * - blur
   * - willHide {startCoordinates, endCoordinates} several times
   * - didHide several times
   *
   * The `ScrollResponder` module callbacks for each of these events.
   * Even though any user could have easily listened to keyboard events
   * themselves, using these `props` callbacks ensures that ordering of events
   * is consistent - and not dependent on the order that the keyboard events are
   * subscribed to. This matters when telling the scroll view to scroll to where
   * the keyboard is headed - the scroll responder better have been notified of
   * the keyboard destination before being instructed to scroll to where the
   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything
   * will work.
   *
   * WARNING: These callbacks will fire even if a keyboard is displayed in a
   * different navigation pane. Filter out the events to determine if they are
   * relevant to you. (For example, only if you receive these callbacks after
   * you had explicitly focused a node etc).
   */ _this.scrollResponderKeyboardWillShow = (e)=>{
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
        }, _this.scrollResponderKeyboardWillHide = (e)=>{
            _this._keyboardMetrics = null;
            _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
        }, _this.scrollResponderKeyboardDidShow = (e)=>{
            _this._keyboardMetrics = e.endCoordinates;
            _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
        }, _this.scrollResponderKeyboardDidHide = (e)=>{
            _this._keyboardMetrics = null;
            _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
        }, /**
   * Invoke this from an `onMomentumScrollBegin` event.
   */ _this._handleMomentumScrollBegin = (e)=>{
            _this._lastMomentumScrollBeginTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
        }, /**
   * Invoke this from an `onMomentumScrollEnd` event.
   */ _this._handleMomentumScrollEnd = (e)=>{
            _FrameRateLogger.default.endScroll();
            _this._lastMomentumScrollEndTime = __webpack_require__.g.performance.now();
            _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        }, /**
   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll
   * animation, and there's not an easy way to distinguish a drag vs. stopping
   * momentum.
   *
   * Invoke this from an `onScrollBeginDrag` event.
   */ _this._handleScrollBeginDrag = (e)=>{
            _FrameRateLogger.default.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation
            if (_Platform.default.OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {
                (0, _dismissKeyboard.default)();
            }
            _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        }, /**
   * Invoke this from an `onScrollEndDrag` event.
   */ _this._handleScrollEndDrag = (e)=>{
            var velocity = e.nativeEvent.velocity;
            // - If we are animating, then this is a "drag" that is stopping the scrollview and momentum end
            //   will fire.
            // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or
            //   another drag starts and ends.
            // - If we don't get velocity, better to stop the interaction twice than not stop it.
            if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
                _FrameRateLogger.default.endScroll();
            }
            _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        }, /**
   * A helper function for this class that lets us quickly determine if the
   * view is currently animating. This is particularly useful to know when
   * a touch has just started or ended.
   */ _this._isAnimating = ()=>{
            var now = __webpack_require__.g.performance.now();
            var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
            var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
            return isAnimating;
        }, /**
   * Invoke this from an `onResponderGrant` event.
   */ _this._handleResponderGrant = (e)=>{
            _this._observedScrollSinceBecomingResponder = false;
            _this.props.onResponderGrant && _this.props.onResponderGrant(e);
            _this._becameResponderWhileAnimating = _this._isAnimating();
        }, /**
   * Invoke this from an `onResponderReject` event.
   *
   * Some other element is not yielding its role as responder. Normally, we'd
   * just disable the `UIScrollView`, but a touch has already began on it, the
   * `UIScrollView` will not accept being disabled after that. The easiest
   * solution for now is to accept the limitation of disallowing this
   * altogether. To improve this, find a way to disable the `UIScrollView` after
   * a touch has already started.
   */ _this._handleResponderReject = ()=>{}, /**
   * Invoke this from an `onResponderRelease` event.
   */ _this._handleResponderRelease = (e)=>{
            _this._isTouching = e.nativeEvent.touches.length !== 0;
            _this.props.onResponderRelease && _this.props.onResponderRelease(e);
            if (typeof e.target === 'number') {
                if (false) {}
                return;
            }
            // By default scroll views will unfocus a textField
            // if another touch occurs outside of it
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
        }, /**
   * We will allow the scroll view to give up its lock iff it acquired the lock
   * during an animation. This is a very useful default that happens to satisfy
   * many common user experiences.
   *
   * - Stop a scroll on the left edge, then turn that into an outer view's
   *   backswipe.
   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer
   *   view dismiss.
   * - However, without catching the scroll view mid-bounce (while it is
   *   motionless), if you drag far enough for the scroll view to become
   *   responder (and therefore drag the scroll view a bit), any backswipe
   *   navigation of a swipe gesture higher in the view hierarchy, should be
   *   rejected.
   */ _this._handleResponderTerminationRequest = ()=>{
            return !_this._observedScrollSinceBecomingResponder;
        }, /**
   * Invoke this from an `onScroll` event.
   */ _this._handleScrollShouldSetResponder = ()=>{
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            return _this._isTouching;
        }, /**
   * Merely touch starting is not sufficient for a scroll view to become the
   * responder. Being the "responder" means that the very next touch move/end
   * event will result in an action/movement.
   *
   * Invoke this from an `onStartShouldSetResponder` event.
   *
   * `onStartShouldSetResponder` is used when the next move/end will trigger
   * some UI movement/action, but when you want to yield priority to views
   * nested inside of the view.
   *
   * There may be some cases where scroll views actually should return `true`
   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap
   * that gives priority to nested views.
   *
   * - If a single tap on the scroll view triggers an action such as
   *   recentering a map style view yet wants to give priority to interaction
   *   views inside (such as dropped pins or labels), then we would return true
   *   from this method when there is a single touch.
   *
   * - Similar to the previous case, if a two finger "tap" should trigger a
   *   zoom, we would check the `touches` count, and if `>= 2`, we would return
   *   true.
   *
   */ _this._handleStartShouldSetResponder = (e)=>{
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
                return true;
            }
            return false;
        }, /**
   * There are times when the scroll view wants to become the responder
   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way
   * that *doesn't* give priority to nested views (hence the capture phase):
   *
   * - Currently animating.
   * - Tapping anywhere that is not a text input, while the keyboard is
   *   up (which should dismiss the keyboard).
   *
   * Invoke this from an `onStartShouldSetResponderCapture` event.
   */ _this._handleStartShouldSetResponderCapture = (e)=>{
            // The scroll view should receive taps instead of its descendants if:
            // * it is already animating/decelerating
            if (_this._isAnimating()) {
                return true;
            }
            // Allow any event touch pass through if the default pan responder is disabled
            if (_this.props.disableScrollViewPanResponder === true) {
                return false;
            }
            // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),
            // and a new touch starts with a non-textinput target (in which case the
            // first tap should be sent to the scroll view and dismiss the keyboard,
            // then the second tap goes to the actual interior view)
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            if (typeof e.target === 'number') {
                if (false) {}
                return false;
            }
            // Let presses through if the soft keyboard is detached from the viewport
            if (_this._softKeyboardIsDetached()) {
                return false;
            }
            if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && // $FlowFixMe[incompatible-type]
            !_TextInputState.default.isTextInput(e.target)) {
                return true;
            }
            return false;
        }, /**
   * Do we consider there to be a dismissible soft-keyboard open?
   */ _this._keyboardIsDismissible = ()=>{
            var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
            // We cannot dismiss the keyboard without an input to blur, even if a soft
            // keyboard is open (e.g. when keyboard is open due to a native component
            // not participating in TextInputState). It's also possible that the
            // currently focused input isn't a TextInput (such as by calling ref.focus
            // on a non-TextInput).
            var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);
            // Even if an input is focused, we may not have a keyboard to dismiss. E.g
            // when using a physical keyboard. Ensure we have an event for an opened
            // keyboard.
            var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
            return hasFocusedTextInput && softKeyboardMayBeOpen;
        }, /**
   * Whether an open soft keyboard is present which does not overlap the
   * viewport. E.g. for a VR soft-keyboard which is detached from the app
   * viewport.
   */ _this._softKeyboardIsDetached = ()=>{
            return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
        }, _this._keyboardEventsAreUnreliable = ()=>{
            // Android versions prior to API 30 rely on observing layout changes when
            // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
            return _Platform.default.OS === 'android' && _Platform.default.Version < 30;
        }, /**
   * Invoke this from an `onTouchEnd` event.
   *
   * @param {GestureResponderEvent} e Event.
   */ _this._handleTouchEnd = (e)=>{
            var nativeEvent = e.nativeEvent;
            _this._isTouching = nativeEvent.touches.length !== 0;
            var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
            var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
            // Dismiss the keyboard now if we didn't become responder in capture phase
            // to eat presses, but still want to dismiss on interaction.
            // Don't do anything if the target of the touch event is the current input.
            var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
            if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
                _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
            }
            _this.props.onTouchEnd && _this.props.onTouchEnd(e);
        }, /**
   * Invoke this from an `onTouchCancel` event.
   *
   * @param {GestureResponderEvent} e Event.
   */ _this._handleTouchCancel = (e)=>{
            _this._isTouching = false;
            _this.props.onTouchCancel && _this.props.onTouchCancel(e);
        }, /**
   * Invoke this from an `onTouchStart` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {GestureResponderEvent} e Touch Start event.
   */ _this._handleTouchStart = (e)=>{
            _this._isTouching = true;
            _this.props.onTouchStart && _this.props.onTouchStart(e);
        }, /**
   * Invoke this from an `onTouchMove` event.
   *
   * Since we know that the `SimpleEventPlugin` occurs later in the plugin
   * order, after `ResponderEventPlugin`, we can detect that we were *not*
   * permitted to be the responder (presumably because a contained view became
   * responder). The `onResponderReject` won't fire in that case - it only
   * fires when a *current* responder rejects our request.
   *
   * @param {GestureResponderEvent} e Touch Start event.
   */ _this._handleTouchMove = (e)=>{
            _this.props.onTouchMove && _this.props.onTouchMove(e);
        };
        _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value(((_this_props_contentOffset = _this.props.contentOffset) === null || _this_props_contentOffset === void 0 ? void 0 : _this_props_contentOffset.y) ?? 0);
        _this._scrollAnimatedValue.setOffset(((_this_props_contentInset = _this.props.contentInset) === null || _this_props_contentInset === void 0 ? void 0 : _this_props_contentInset.top) ?? 0);
        return _this;
    }
    _create_class._(ScrollView, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
                    console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}"' instead`);
                }
                this._keyboardMetrics = _Keyboard.default.metrics();
                this._additionalScrollOffset = 0;
                this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
                this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
                this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
                this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
                this._updateAnimatedNodeAttachment();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
                var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
                if (prevContentInsetTop !== newContentInsetTop) {
                    this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
                }
                this._updateAnimatedNodeAttachment();
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this._subscriptionKeyboardWillShow != null) {
                    this._subscriptionKeyboardWillShow.remove();
                }
                if (this._subscriptionKeyboardWillHide != null) {
                    this._subscriptionKeyboardWillHide.remove();
                }
                if (this._subscriptionKeyboardDidShow != null) {
                    this._subscriptionKeyboardDidShow.remove();
                }
                if (this._subscriptionKeyboardDidHide != null) {
                    this._subscriptionKeyboardDidHide.remove();
                }
                if (this._scrollAnimatedValueAttachment) {
                    this._scrollAnimatedValueAttachment.detach();
                }
            }
        },
        {
            key: "_textInputFocusError",
            value: function _textInputFocusError() {
                console.warn('Error measuring text field.');
            }
        },
        {
            key: "_getKeyForIndex",
            value: function _getKeyForIndex(index, // $FlowFixMe[unclear-type] - The children and its key is unknown.
            childArray) {
                var child = childArray[index];
                return child && child.key;
            }
        },
        {
            key: "_updateAnimatedNodeAttachment",
            value: function _updateAnimatedNodeAttachment() {
                if (this._scrollAnimatedValueAttachment) {
                    this._scrollAnimatedValueAttachment.detach();
                }
                if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
                    this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this.getNativeScrollRef(), 'onScroll', [
                        {
                            nativeEvent: {
                                contentOffset: {
                                    y: this._scrollAnimatedValue
                                }
                            }
                        }
                    ]);
                }
            }
        },
        {
            key: "_setStickyHeaderRef",
            value: function _setStickyHeaderRef(key, ref) {
                if (ref) {
                    this._stickyHeaderRefs.set(key, ref);
                } else {
                    this._stickyHeaderRefs.delete(key);
                }
            }
        },
        {
            key: "_onStickyHeaderLayout",
            value: function _onStickyHeaderLayout(index, event, key) {
                var stickyHeaderIndices = this.props.stickyHeaderIndices;
                if (!stickyHeaderIndices) {
                    return;
                }
                var childArray = _react.Children.toArray(this.props.children);
                if (key !== this._getKeyForIndex(index, childArray)) {
                    // ignore stale layout update
                    return;
                }
                var layoutY = event.nativeEvent.layout.y;
                this._headerLayoutYs.set(key, layoutY);
                var indexOfIndex = stickyHeaderIndices.indexOf(index);
                var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
                if (previousHeaderIndex != null) {
                    var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
                    previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var horizontal = this.props.horizontal === true;
                var NativeScrollView = horizontal ? _HScrollViewNativeComponents.HScrollViewNativeComponent : _VScrollViewNativeComponents.VScrollViewNativeComponent;
                var NativeScrollContentView = horizontal ? _HScrollViewNativeComponents.HScrollContentViewNativeComponent : _VScrollViewNativeComponents.VScrollContentViewNativeComponent;
                var contentContainerStyle = [
                    horizontal && styles.contentContainerHorizontal,
                    this.props.contentContainerStyle
                ];
                if (false) { var childLayoutProps, style }
                var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
                    onLayout: this._handleContentOnLayout
                };
                var stickyHeaderIndices = this.props.stickyHeaderIndices;
                var children = this.props.children;
                /**
     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.
     * https://react.dev/reference/react/Children#children-toarray-caveats
     */ children = _react.Children.toArray(children);
                if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
                    children = children.map((child, index)=>{
                        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
                        if (indexOfIndex > -1) {
                            var key = child.key;
                            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
                            var StickyHeaderComponent = this.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(StickyHeaderComponent, {
                                ref: (ref)=>this._setStickyHeaderRef(key, ref),
                                nextHeaderLayoutY: this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, children)),
                                onLayout: (event)=>this._onStickyHeaderLayout(index, event, key),
                                scrollAnimatedValue: this._scrollAnimatedValue,
                                inverted: this.props.invertStickyHeaders,
                                hiddenOnScroll: this.props.stickyHeaderHiddenOnScroll,
                                scrollViewHeight: this.state.layoutHeight,
                                children: child
                            }, key);
                        } else {
                            return child;
                        }
                    });
                }
                children = /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScrollViewContext.default.Provider, {
                    value: horizontal ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
                    children: children
                });
                var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
                // Some ScrollView native component behaviors rely on using the metrics
                // of mounted views for anchoring. Make sure not to flatten children if
                // this is the case.
                var preserveChildren = this.props.maintainVisibleContentPosition != null || _Platform.default.OS === 'android' && this.props.snapToAlignment != null;
                var contentContainer = /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollContentView, _object_spread_props._(_object_spread._({}, contentSizeChangeProps), {
                    ref: this._innerView.getForwardingRef(this.props.innerViewRef),
                    style: contentContainerStyle,
                    removeClippedSubviews: // Subview clipping causes issues with sticky headers on Android and
                    // would be hard to fix properly in a performant way.
                    _Platform.default.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
                    collapsable: false,
                    collapsableChildren: !preserveChildren,
                    children: children
                }));
                var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
                var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
                var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;
                var _this_props = this.props, experimental_endDraggingSensitivityMultiplier = _this_props.experimental_endDraggingSensitivityMultiplier, otherProps = _object_without_properties._(_this_props, [
                    "experimental_endDraggingSensitivityMultiplier"
                ]);
                var props = _object_spread_props._(_object_spread._({}, otherProps), {
                    alwaysBounceHorizontal,
                    alwaysBounceVertical,
                    style: _StyleSheet.default.compose(baseStyle, this.props.style),
                    // Override the onContentSizeChange from props, since this event can
                    // bubble up from TextInputs
                    onContentSizeChange: null,
                    onLayout: this._handleLayout,
                    onMomentumScrollBegin: this._handleMomentumScrollBegin,
                    onMomentumScrollEnd: this._handleMomentumScrollEnd,
                    onResponderGrant: this._handleResponderGrant,
                    onResponderReject: this._handleResponderReject,
                    onResponderRelease: this._handleResponderRelease,
                    onResponderTerminationRequest: this._handleResponderTerminationRequest,
                    onScrollBeginDrag: this._handleScrollBeginDrag,
                    onScrollEndDrag: this._handleScrollEndDrag,
                    onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
                    onStartShouldSetResponder: this._handleStartShouldSetResponder,
                    onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
                    onTouchEnd: this._handleTouchEnd,
                    onTouchMove: this._handleTouchMove,
                    onTouchStart: this._handleTouchStart,
                    onTouchCancel: this._handleTouchCancel,
                    onScroll: this._handleScroll,
                    endDraggingSensitivityMultiplier: experimental_endDraggingSensitivityMultiplier,
                    scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
                    sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
                    // default to true
                    snapToStart: this.props.snapToStart !== false,
                    // default to true
                    snapToEnd: this.props.snapToEnd !== false,
                    // pagingEnabled is overridden by snapToInterval / snapToOffsets
                    pagingEnabled: _Platform.default.select({
                        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work
                        ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
                        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work
                        android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
                    })
                });
                var decelerationRate = this.props.decelerationRate;
                if (decelerationRate != null) {
                    props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
                }
                var refreshControl = this.props.refreshControl;
                var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
                if (refreshControl != null) {
                    if (_Platform.default.OS === 'ios') {
                        // On iOS the RefreshControl is a child of the ScrollView.
                        return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                            ref: scrollViewRef,
                            children: [
                                refreshControl,
                                contentContainer
                            ]
                        })));
                    } else if (_Platform.default.OS === 'android') {
                        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.
                        // Since the ScrollView is wrapped add the style props to the
                        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.
                        // Note: we should split props.style on the inner and outer props
                        // however, the ScrollView still needs the baseStyle to be scrollable
                        var _splitLayoutProps1 = (0, _splitLayoutProps.default)((0, _flattenStyle.default)(props.style)), outer = _splitLayoutProps1.outer, inner = _splitLayoutProps1.inner;
                        // $FlowFixMe[incompatible-call]
                        return /*#__PURE__*/ _react.cloneElement(refreshControl, {
                            style: _StyleSheet.default.compose(baseStyle, outer)
                        }, /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                            style: _StyleSheet.default.compose(baseStyle, inner),
                            // $FlowFixMe[incompatible-type] - Flow only knows element refs.
                            ref: scrollViewRef,
                            children: contentContainer
                        })));
                    }
                }
                return(// $FlowFixMe[incompatible-type] - Flow only knows element refs.
                /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScrollView, _object_spread_props._(_object_spread._({}, props), {
                    ref: scrollViewRef,
                    children: contentContainer
                })));
            }
        }
    ]);
    return ScrollView;
}(_react.Component);
ScrollView.Context = _ScrollViewContext.default;
var styles = _StyleSheet.default.create({
    baseVertical: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'column',
        overflow: 'scroll'
    },
    baseHorizontal: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: 'row',
        overflow: 'scroll'
    },
    contentContainerHorizontal: {
        flexDirection: 'row'
    }
});
/**
 * Helper function that should be replaced with `useCallback` and `useMergeRefs`
 * once `ScrollView` is reimplemented as a functional component.
 */ function createRefForwarder(mutator) {
    var state = {
        getForwardingRef: (0, _memoizeone.default)((forwardedRef)=>{
            return (nativeInstance)=>{
                var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
                state.nativeInstance = nativeInstance;
                state.publicInstance = publicInstance;
                if (forwardedRef != null) {
                    if (typeof forwardedRef === 'function') {
                        forwardedRef(publicInstance);
                    } else {
                        forwardedRef.current = publicInstance;
                    }
                }
            };
        }),
        nativeInstance: null,
        publicInstance: null
    };
    return state;
}
// TODO: After upgrading to React 19, remove `forwardRef` from this component.
// NOTE: This wrapper component is necessary because `ScrollView` is a class
// component and we need to map `ref` to a differently named prop. This can be
// removed when `ScrollView` is a functional component.
var Wrapper = /*#__PURE__*/ _react.forwardRef(function Wrapper(props, ref) {
    return ref == null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, _object_spread._({}, props)) : /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, _object_spread_props._(_object_spread._({}, props), {
        scrollViewRef: ref
    }));
});
Wrapper.displayName = 'ScrollView';
// $FlowExpectedError[prop-missing]
Wrapper.Context = _ScrollViewContext.default;
var _default = Wrapper;


}),
55581: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _default = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'flashScrollIndicators',
        'scrollTo',
        'scrollToEnd',
        'zoomToRect'
    ]
});


}),
1116: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HORIZONTAL: function() {
        return HORIZONTAL;
    },
    VERTICAL: function() {
        return VERTICAL;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var ScrollViewContext = /*#__PURE__*/ _react.createContext(null);
if (false) {}
var _default = ScrollViewContext;
var HORIZONTAL = Object.freeze({
    horizontal: true
});
var VERTICAL = Object.freeze({
    horizontal: false
});


}),
86034: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22644));
var _ReactFabricPublicInstanceUtils = __webpack_require__(76866);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var ScrollViewStickyHeaderWithForwardedRef = /*#__PURE__*/ _react.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted, scrollViewHeight = props.scrollViewHeight, hiddenOnScroll = props.hiddenOnScroll, scrollAnimatedValue = props.scrollAnimatedValue, _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), measured = _useState[0], setMeasured = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)(0), 2), layoutY = _useState1[0], setLayoutY = _useState1[1];
    var _useState2 = _sliced_to_array._((0, _react.useState)(0), 2), layoutHeight = _useState2[0], setLayoutHeight = _useState2[1];
    var _useState3 = _sliced_to_array._((0, _react.useState)(null), 2), translateY = _useState3[0], setTranslateY = _useState3[1];
    var _useState4 = _sliced_to_array._((0, _react.useState)(_nextHeaderLayoutY), 2), nextHeaderLayoutY = _useState4[0], setNextHeaderLayoutY = _useState4[1];
    var _useState5 = _sliced_to_array._((0, _react.useState)(false), 2), isFabric = _useState5[0], setIsFabric = _useState5[1];
    var callbackRef = (0, _react.useCallback)((ref)=>{
        if (ref == null) {
            return;
        }
        // $FlowExpectedError[cannot-write]
        ref.setNextHeaderY = setNextHeaderLayoutY;
        setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
    }, []);
    var ref = // $FlowFixMe[prop-missing] - Instance is mutated to have `setNextHeaderY`.
    (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(()=>hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
            extrapolateLeft: 'clamp',
            inputRange: [
                layoutY,
                layoutY + 1
            ],
            outputRange: [
                0,
                1
            ]
        }).interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                0,
                -1
            ]
        }), -layoutHeight, 0) : null, [
        scrollAnimatedValue,
        layoutHeight,
        layoutY,
        hiddenOnScroll
    ]);
    var _useState6 = _sliced_to_array._((0, _react.useState)(()=>{
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        var initialTranslateY = scrollAnimatedValue.interpolate({
            inputRange,
            outputRange
        });
        if (offset != null) {
            return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
    }), 2), animatedTranslateY = _useState6[0], setAnimatedTranslateY = _useState6[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(()=>{
        if (translateY !== 0 && translateY != null) {
            haveReceivedInitialZeroTranslateY.current = false;
        }
    }, [
        translateY
    ]);
    // This is called whenever the (Interpolated) Animated Value
    // updates, which is several times per frame during scrolling.
    // To ensure that the Fabric ShadowTree has the most recent
    // translate style of this node, we debounce the value and then
    // pass it through to the underlying node during render.
    // This is:
    // 1. Only an issue in Fabric.
    // 2. Worse in Android than iOS. In Android, but not iOS, you
    //    can touch and move your finger slightly and still trigger
    //    a "tap" event. In iOS, moving will cancel the tap in
    //    both Fabric and non-Fabric. On Android when you move
    //    your finger, the hit-detection moves from the Android
    //    platform to JS, so we need the ShadowTree to have knowledge
    //    of the current position.
    var animatedValueListener = (0, _react.useCallback)((ref)=>{
        var value = ref.value;
        var debounceTimeout = _Platform.default.OS === 'android' ? 15 : 64;
        // When the AnimatedInterpolation is recreated, it always initializes
        // to a value of zero and emits a value change of 0 to its listeners.
        if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
            haveReceivedInitialZeroTranslateY.current = true;
            return;
        }
        if (translateYDebounceTimer.current != null) {
            clearTimeout(translateYDebounceTimer.current);
        }
        translateYDebounceTimer.current = setTimeout(()=>setTranslateY(value), debounceTimeout);
    }, []);
    (0, _react.useEffect)(()=>{
        var inputRange = [
            -1,
            0
        ];
        var outputRange = [
            0,
            0
        ];
        if (measured) {
            if (inverted === true) {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - `stickStartPoint` is the point at which the header will start sticking.
                //   It is calculated using the ScrollView viewport height so it is a the bottom.
                // - Headers that are in the initial viewport will never stick, `stickStartPoint`
                //   will be negative.
                // - From 0 to `stickStartPoint` no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                if (scrollViewHeight != null) {
                    var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
                    if (stickStartPoint > 0) {
                        inputRange.push(stickStartPoint);
                        outputRange.push(0);
                        inputRange.push(stickStartPoint + 1);
                        outputRange.push(1);
                        // If the next sticky header has not loaded yet (probably windowing) or is the last
                        // we can just keep it sticked forever.
                        var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
                        if (collisionPoint > stickStartPoint) {
                            inputRange.push(collisionPoint, collisionPoint + 1);
                            outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                        }
                    }
                }
            } else {
                // The interpolation looks like:
                // - Negative scroll: no translation
                // - From 0 to the y of the header: no translation. This will cause the header
                //   to scroll normally until it reaches the top of the scroll view.
                // - From header y to when the next header y hits the bottom edge of the header: translate
                //   equally to scroll. This will cause the header to stay at the top of the scroll view.
                // - Past the collision with the next header y: no more translation. This will cause the
                //   header to continue scrolling up and make room for the next sticky header.
                //   In the case that there is no next header just translate equally to
                //   scroll indefinitely.
                inputRange.push(layoutY);
                outputRange.push(0);
                // If the next sticky header has not loaded yet (probably windowing) or is the last
                // we can just keep it sticked forever.
                var collisionPoint1 = (nextHeaderLayoutY || 0) - layoutHeight;
                if (collisionPoint1 >= layoutY) {
                    inputRange.push(collisionPoint1, collisionPoint1 + 1);
                    outputRange.push(collisionPoint1 - layoutY, collisionPoint1 - layoutY);
                } else {
                    inputRange.push(layoutY + 1);
                    outputRange.push(1);
                }
            }
        }
        var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
            inputRange,
            outputRange
        });
        if (offset != null) {
            newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
        }
        // add the event listener
        var animatedListenerId;
        if (isFabric) {
            animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
        }
        setAnimatedTranslateY(newAnimatedTranslateY);
        // clean up the event listener and timer
        return ()=>{
            if (animatedListenerId) {
                newAnimatedTranslateY.removeListener(animatedListenerId);
            }
            if (translateYDebounceTimer.current != null) {
                clearTimeout(translateYDebounceTimer.current);
            }
        };
    }, [
        nextHeaderLayoutY,
        measured,
        layoutHeight,
        layoutY,
        scrollViewHeight,
        scrollAnimatedValue,
        inverted,
        offset,
        animatedValueListener,
        isFabric
    ]);
    var _onLayout = (event)=>{
        setLayoutY(event.nativeEvent.layout.y);
        setLayoutHeight(event.nativeEvent.layout.height);
        setMeasured(true);
        props.onLayout(event);
        var child = _react.Children.only(props.children);
        if (child.props.onLayout) {
            child.props.onLayout(event);
        }
    };
    var child = _react.Children.only(props.children);
    var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {
        style: {
            transform: [
                {
                    translateY: translateY
                }
            ]
        }
    } : null;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Animated.default.View, {
        collapsable: false,
        nativeID: props.nativeID,
        onLayout: _onLayout,
        /* $FlowFixMe[prop-missing] passthroughAnimatedPropExplicitValues isn't properly
         included in the Animated.View flow type. */ ref: ref,
        style: [
            child.props.style,
            styles.header,
            {
                transform: [
                    {
                        translateY: animatedTranslateY
                    }
                ]
            }
        ],
        passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,
        children: /*#__PURE__*/ _react.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
        })
    });
});
var styles = _StyleSheet.default.create({
    header: {
        zIndex: 10
    },
    fill: {
        flex: 1
    }
});
var _default = ScrollViewStickyHeaderWithForwardedRef;


}),
90921: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
        return _Platform.default.select({
            ios: 0.998,
            android: 0.985
        });
    } else if (decelerationRate === 'fast') {
        return _Platform.default.select({
            ios: 0.99,
            android: 0.9
        });
    }
    return decelerationRate;
}
var _default = processDecelerationRate;


}),
87771: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeSoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76197));
var SoundManager = {
    playTouchSound: function() {
        if (_NativeSoundManager.default) {
            _NativeSoundManager.default.playTouchSound();
        }
    }
};
var _default = SoundManager;


}),
22728: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeStatusBarManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4016));
var _NativeStatusBarManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65760));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Status bar style
 */ /**
 * Status bar animation
 */ /**
 * Merges the prop stack with the default values.
 */ function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce((prev, cur)=>{
        for(var prop in cur){
            if (cur[prop] != null) {
                prev[prop] = cur[prop];
            }
        }
        return prev;
    }, _object_spread._({}, defaultValues));
}
/**
 * Returns an object to insert in the props stack from the props
 * and the transition/animation info.
 */ function createStackEntry(props) {
    var animated = props.animated ?? false;
    var showHideTransition = props.showHideTransition ?? 'fade';
    return {
        backgroundColor: props.backgroundColor != null ? {
            value: props.backgroundColor,
            animated
        } : null,
        barStyle: props.barStyle != null ? {
            value: props.barStyle,
            animated
        } : null,
        translucent: props.translucent,
        hidden: props.hidden != null ? {
            value: props.hidden,
            animated,
            transition: showHideTransition
        } : null,
        networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
}
/**
 * Component to control the app status bar.
 *
 * It is possible to have multiple `StatusBar` components mounted at the same
 * time. The props will be merged in the order the `StatusBar` components were
 * mounted.
 *
 * ### Imperative API
 *
 * For cases where using a component is not ideal, there are static methods
 * to manipulate the `StatusBar` display stack. These methods have the same
 * behavior as mounting and unmounting a `StatusBar` component.
 *
 * For example, you can call `StatusBar.pushStackEntry` to update the status bar
 * before launching a third-party native UI component, and then call
 * `StatusBar.popStackEntry` when completed.
 *
 * ```
 * const openThirdPartyBugReporter = async () => {
 *   // The bug reporter has a dark background, so we push a new status bar style.
 *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});
 *
 *   // `open` returns a promise that resolves when the UI is dismissed.
 *   await BugReporter.open();
 *
 *   // Don't forget to call `popStackEntry` when you're done.
 *   StatusBar.popStackEntry(stackEntry);
 * };
 * ```
 *
 * There is a legacy imperative API that enables you to manually update the
 * status bar styles. However, the legacy API does not update the internal
 * `StatusBar` display stack, which means that any changes will be overridden
 * whenever a `StatusBar` component is mounted or unmounted.
 *
 * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or
 * `replaceStackEntry` instead of the static methods beginning with `set`.
 *
 * ### Constants
 *
 * `currentHeight` (Android only) The height of the status bar.
 */ var StatusBar = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(StatusBar, _React_Component);
    function StatusBar() {
        _class_call_check._(this, StatusBar);
        var _this;
        _this = _call_super._(this, StatusBar, arguments), _this._stackEntry = null;
        return _this;
    }
    _create_class._(StatusBar, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                // Every time a StatusBar component is mounted, we push it's prop to a stack
                // and always update the native status bar with the props from the top of then
                // stack. This allows having multiple StatusBar components and the one that is
                // added last or is deeper in the view hierarchy will have priority.
                this._stackEntry = StatusBar.pushStackEntry(this.props);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                // When a StatusBar is unmounted, remove itself from the stack and update
                // the native bar with the next props.
                if (this._stackEntry != null) {
                    StatusBar.popStackEntry(this._stackEntry);
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
                if (this._stackEntry != null) {
                    this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                return null;
            }
        }
    ], [
        {
            key: "setHidden",
            value: // Provide an imperative API as static functions of the component.
            // See the corresponding prop for more detail.
            /**
   * Show or hide the status bar
   * @param hidden Hide the status bar.
   * @param animation Optional animation when
   *    changing the status bar hidden property.
   */ function setHidden(hidden, animation) {
                animation = animation || 'none';
                StatusBar._defaultProps.hidden.value = hidden;
                if (_Platform.default.OS === 'ios') {
                    _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
                } else if (_Platform.default.OS === 'android') {
                    _NativeStatusBarManagerAndroid.default.setHidden(hidden);
                }
            }
        },
        {
            key: "setBarStyle",
            value: /**
   * Set the status bar style
   * @param style Status bar style to set
   * @param animated Animate the style change.
   */ function setBarStyle(style, animated) {
                animated = animated || false;
                StatusBar._defaultProps.barStyle.value = style;
                if (_Platform.default.OS === 'ios') {
                    _NativeStatusBarManagerIOS.default.setStyle(style, animated);
                } else if (_Platform.default.OS === 'android') {
                    _NativeStatusBarManagerAndroid.default.setStyle(style);
                }
            }
        },
        {
            key: "setNetworkActivityIndicatorVisible",
            value: /**
   * DEPRECATED - The status bar network activity indicator is not supported in iOS 13 and later. This will be removed in a future release.
   * @param visible Show the indicator.
   *
   * @deprecated
   */ function setNetworkActivityIndicatorVisible(visible) {
                if (_Platform.default.OS !== 'ios') {
                    console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
                    return;
                }
                StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
                _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
            }
        },
        {
            key: "setBackgroundColor",
            value: /**
   * Set the background color for the status bar
   * @param color Background color.
   * @param animated Animate the style change.
   */ function setBackgroundColor(color, animated) {
                if (_Platform.default.OS !== 'android') {
                    console.warn('`setBackgroundColor` is only available on Android');
                    return;
                }
                animated = animated || false;
                StatusBar._defaultProps.backgroundColor.value = color;
                var processedColor = (0, _processColor.default)(color);
                if (processedColor == null) {
                    console.warn(`\`StatusBar.setBackgroundColor\`: Color ${String(color)} parsed to null or undefined`);
                    return;
                }
                (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
                _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
            }
        },
        {
            key: "setTranslucent",
            value: /**
   * Control the translucency of the status bar
   * @param translucent Set as translucent.
   */ function setTranslucent(translucent) {
                if (_Platform.default.OS !== 'android') {
                    console.warn('`setTranslucent` is only available on Android');
                    return;
                }
                StatusBar._defaultProps.translucent = translucent;
                _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
            }
        },
        {
            key: "pushStackEntry",
            value: /**
   * Push a StatusBar entry onto the stack.
   * The return value should be passed to `popStackEntry` when complete.
   *
   * @param props Object containing the StatusBar props to use in the stack entry.
   */ function pushStackEntry(props) {
                var entry = createStackEntry(props);
                StatusBar._propsStack.push(entry);
                StatusBar._updatePropsStack();
                return entry;
            }
        },
        {
            key: "popStackEntry",
            value: /**
   * Pop a StatusBar entry from the stack.
   *
   * @param entry Entry returned from `pushStackEntry`.
   */ function popStackEntry(entry) {
                var index = StatusBar._propsStack.indexOf(entry);
                if (index !== -1) {
                    StatusBar._propsStack.splice(index, 1);
                }
                StatusBar._updatePropsStack();
            }
        },
        {
            key: "replaceStackEntry",
            value: /**
   * Replace an existing StatusBar stack entry with new props.
   *
   * @param entry Entry returned from `pushStackEntry` to replace.
   * @param props Object containing the StatusBar props to use in the replacement stack entry.
   */ function replaceStackEntry(entry, props) {
                var newEntry = createStackEntry(props);
                var index = StatusBar._propsStack.indexOf(entry);
                if (index !== -1) {
                    StatusBar._propsStack[index] = newEntry;
                }
                StatusBar._updatePropsStack();
                return newEntry;
            }
        }
    ]);
    return StatusBar;
}(_react.Component);
StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
    backgroundColor: _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR ?? 'black' : 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
});
// Timer for updating the native module values at the end of the frame.
StatusBar._updateImmediate = null;
// The current merged values from the props stack.
StatusBar._currentValues = null;
// TODO(janic): Provide a real API to deal with status bar height. See the
// discussion in #6195.
/**
   * The current height of the status bar on the device.
   *
   * @platform android
   */ StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
/**
   * Updates the native status bar with the props from the stack.
   */ StatusBar._updatePropsStack = ()=>{
    // Send the update to the native module only once at the end of the frame.
    clearImmediate(StatusBar._updateImmediate);
    StatusBar._updateImmediate = setImmediate(()=>{
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
        // Update the props that have changed using the merged values from the props stack.
        if (_Platform.default.OS === 'ios') {
            var _oldProps_barStyle, _oldProps_hidden;
            if (!oldProps || ((_oldProps_barStyle = oldProps.barStyle) === null || _oldProps_barStyle === void 0 ? void 0 : _oldProps_barStyle.value) !== mergedProps.barStyle.value) {
                _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
            }
            if (!oldProps || ((_oldProps_hidden = oldProps.hidden) === null || _oldProps_hidden === void 0 ? void 0 : _oldProps_hidden.value) !== mergedProps.hidden.value) {
                _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }
            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
                _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
        } else if (_Platform.default.OS === 'android') {
            var _oldProps_hidden1;
            //todo(T60684787): Add back optimization to only update bar style and
            //background color if the new value is different from the old value.
            _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
            var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
            if (processedColor == null) {
                console.warn(`\`StatusBar._updatePropsStack\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);
            } else {
                (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
                _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
            }
            if (!oldProps || ((_oldProps_hidden1 = oldProps.hidden) === null || _oldProps_hidden1 === void 0 ? void 0 : _oldProps_hidden1.value) !== mergedProps.hidden.value) {
                _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
            }
            // Activities are not translucent by default, so always set if true.
            if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
                _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
            }
        }
        // Update the current prop values.
        StatusBar._currentValues = mergedProps;
    });
};
var _default = StatusBar;


}),
6353: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _AndroidSwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(47312));
var _SwitchNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(54287));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var returnsFalse = ()=>false;
var returnsTrue = ()=>true;
/**
  Renders a boolean input.

  This is a controlled component that requires an `onValueChange`
  callback that updates the `value` prop in order for the component to
  reflect user actions. If the `value` prop is not updated, the
  component will continue to render the supplied `value` prop instead of
  the expected result of any user actions.

  ```SnackPlayer name=Switch
  import React, { useState } from "react";
  import { View, Switch, StyleSheet } from "react-native";

  const App = () => {
    const [isEnabled, setIsEnabled] = useState(false);
    const toggleSwitch = () => setIsEnabled(previousState => !previousState);

    return (
      <View style={styles.container}>
        <Switch
          trackColor={{ false: "#767577", true: "#81b0ff" }}
          thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
          ios_backgroundColor="#3e3e3e"
          onValueChange={toggleSwitch}
          value={isEnabled}
        />
      </View>
    );
  }

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: "center",
      justifyContent: "center"
    }
  });

  export default App;
  ```
 */ var Switch = /*#__PURE__*/ _react.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled, ios_backgroundColor = props.ios_backgroundColor, onChange = props.onChange, onValueChange = props.onValueChange, style = props.style, thumbColor = props.thumbColor, trackColor = props.trackColor, value = props.value, restProps = _object_without_properties._(props, [
        "disabled",
        "ios_backgroundColor",
        "onChange",
        "onValueChange",
        "style",
        "thumbColor",
        "trackColor",
        "value"
    ]);
    var trackColorForFalse = trackColor === null || trackColor === void 0 ? void 0 : trackColor.false;
    var trackColorForTrue = trackColor === null || trackColor === void 0 ? void 0 : trackColor.true;
    var nativeSwitchRef = _react.useRef(null);
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React_useState = _sliced_to_array._(_react.useState({
        value: null
    }), 2), native = _React_useState[0], setNative = _React_useState[1];
    var handleChange = (event)=>{
        // $FlowFixMe[unused-promise]
        onChange === null || onChange === void 0 ? void 0 : onChange(event);
        // $FlowFixMe[unused-promise]
        onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(event.nativeEvent.value);
        setNative({
            value: event.nativeEvent.value
        });
    };
    _react.useLayoutEffect(()=>{
        var // $FlowIssue[method-unbinding]
        _nativeSwitchRef_current;
        // This is necessary in case native updates the switch and JS decides
        // that the update should be ignored and we should stick with the value
        // that we have in JS.
        var jsValue = value === true;
        var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
        if (shouldUpdateNativeSwitch && ((_nativeSwitchRef_current = nativeSwitchRef.current) === null || _nativeSwitchRef_current === void 0 ? void 0 : _nativeSwitchRef_current.setNativeProps) != null) {
            if (_Platform.default.OS === 'android') {
                _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);
            } else {
                _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
            }
        }
    }, [
        value,
        native
    ]);
    if (_Platform.default.OS === 'android') {
        var onTintColor = restProps.onTintColor, tintColor = restProps.tintColor, androidProps = _object_without_properties._(restProps, [
            "onTintColor",
            "tintColor"
        ]);
        var accessibilityState = androidProps.accessibilityState;
        var _disabled = disabled != null ? disabled : accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled;
        var _accessibilityState = _disabled !== (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled) ? _object_spread_props._(_object_spread._({}, accessibilityState), {
            disabled: _disabled
        }) : accessibilityState;
        var platformProps = {
            accessibilityState: _accessibilityState,
            enabled: _disabled !== true,
            on: value === true,
            style,
            thumbTintColor: thumbColor,
            trackColorForFalse: trackColorForFalse,
            trackColorForTrue: trackColorForTrue,
            trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AndroidSwitchNativeComponent.default, _object_spread_props._(_object_spread._({}, androidProps, platformProps), {
            accessibilityRole: props.accessibilityRole ?? 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    } else {
        var platformProps1 = {
            disabled,
            onTintColor: trackColorForTrue,
            style: _StyleSheet.default.compose({
                height: 31,
                width: 51
            }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
                backgroundColor: ios_backgroundColor,
                borderRadius: 16
            })),
            thumbTintColor: thumbColor,
            tintColor: trackColorForFalse,
            value: value === true
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_SwitchNativeComponent.default, _object_spread_props._(_object_spread._({}, restProps, platformProps1), {
            accessibilityRole: props.accessibilityRole ?? 'switch',
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref
        }));
    }
});
var _default = Switch;


}),
57646: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _SafeAreaView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25530));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _useWindowDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70420));
var _RCTInputAccessoryViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69873));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Note: iOS only
 *
 * A component which enables customization of the keyboard input accessory view.
 * The input accessory view is displayed above the keyboard whenever a TextInput
 * has focus. This component can be used to create custom toolbars.
 *
 * To use this component wrap your custom toolbar with the
 * InputAccessoryView component, and set a nativeID. Then, pass that nativeID
 * as the inputAccessoryViewID of whatever TextInput you desire. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {text: 'Placeholder Text'};
 *   }
 *
 *   render() {
 *     const inputAccessoryViewID = "uniqueID";
 *     return (
 *       <View>
 *         <ScrollView keyboardDismissMode="interactive">
 *           <TextInput
 *             style={{
 *               padding: 10,
 *               paddingTop: 50,
 *             }}
 *             inputAccessoryViewID=inputAccessoryViewID
 *             onChangeText={text => this.setState({text})}
 *             value={this.state.text}
 *           />
 *         </ScrollView>
 *         <InputAccessoryView nativeID=inputAccessoryViewID>
 *           <Button
 *             onPress={() => this.setState({text: 'Placeholder Text'})}
 *             title="Reset Text"
 *           />
 *         </InputAccessoryView>
 *       </View>
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * This component can also be used to create sticky text inputs (text inputs
 * which are anchored to the top of the keyboard). To do this, wrap a
 * TextInput with the InputAccessoryView component, and don't set a nativeID.
 * For an example, look at InputAccessoryViewExample.js in RNTester.
 */ var InputAccessoryView = (props)=>{
    var width = (0, _useWindowDimensions.default)().width;
    if (_Platform.default.OS === 'ios') {
        if (_react.Children.count(props.children) === 0) {
            return null;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
            style: [
                props.style,
                styles.container
            ],
            nativeID: props.nativeID,
            backgroundColor: props.backgroundColor,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SafeAreaView.default, {
                style: [
                    styles.safeAreaView,
                    {
                        width
                    }
                ],
                children: props.children
            })
        });
    } else {
        console.warn('<InputAccessoryView> is only supported on iOS.');
        return null;
    }
};
var styles = _StyleSheet.default.create({
    container: {
        position: 'absolute'
    },
    safeAreaView: {
        flex: 1
    }
});
var _default = InputAccessoryView;


}),
25297: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _ViewConfigIgnore = __webpack_require__(72291);
var RCTTextInputViewConfig = {
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topChange: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        },
        topTouchCancel: {
            phasedRegistrationNames: {
                bubbled: 'onTouchCancel',
                captured: 'onTouchCancelCapture'
            }
        },
        topTouchEnd: {
            phasedRegistrationNames: {
                bubbled: 'onTouchEnd',
                captured: 'onTouchEndCapture'
            }
        },
        topTouchMove: {
            phasedRegistrationNames: {
                bubbled: 'onTouchMove',
                captured: 'onTouchMoveCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        },
        topSelectionChange: {
            registrationName: 'onSelectionChange'
        },
        topContentSizeChange: {
            registrationName: 'onContentSizeChange'
        },
        topChangeSync: {
            registrationName: 'onChangeSync'
        },
        topKeyPressSync: {
            registrationName: 'onKeyPressSync'
        }
    },
    validAttributes: _object_spread_props._(_object_spread._({
        dynamicTypeRamp: true,
        fontSize: true,
        fontWeight: true,
        fontVariant: true,
        // flowlint-next-line untyped-import:off
        textShadowOffset: {
            diff: (__webpack_require__(24395)/* ["default"] */["default"])
        },
        allowFontScaling: true,
        fontStyle: true,
        textTransform: true,
        textAlign: true,
        fontFamily: true,
        lineHeight: true,
        isHighlighted: true,
        writingDirection: true,
        textDecorationLine: true,
        textShadowRadius: true,
        letterSpacing: true,
        textDecorationStyle: true,
        textDecorationColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        color: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        maxFontSizeMultiplier: true,
        textShadowColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        editable: true,
        inputAccessoryViewID: true,
        inputAccessoryViewButtonLabel: true,
        caretHidden: true,
        enablesReturnKeyAutomatically: true,
        placeholderTextColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        clearButtonMode: true,
        keyboardType: true,
        selection: true,
        returnKeyType: true,
        submitBehavior: true,
        mostRecentEventCount: true,
        scrollEnabled: true,
        selectionColor: {
            process: (__webpack_require__(23865)/* ["default"] */["default"])
        },
        contextMenuHidden: true,
        secureTextEntry: true,
        placeholder: true,
        autoCorrect: true,
        multiline: true,
        numberOfLines: true,
        textContentType: true,
        maxLength: true,
        autoCapitalize: true,
        keyboardAppearance: true,
        passwordRules: true,
        spellCheck: true,
        selectTextOnFocus: true,
        text: true,
        clearTextOnFocus: true,
        showSoftInputOnFocus: true,
        autoFocus: true,
        lineBreakStrategyIOS: true,
        lineBreakModeIOS: true,
        smartInsertDelete: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true,
        onChangeSync: true,
        onKeyPressSync: true
    })), {
        disableKeyboardShortcuts: true
    })
};
var _default = RCTTextInputViewConfig;


}),
92756: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45178));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86981));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7273));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var AndroidTextInput;
var AndroidTextInputCommands;
var RCTSinglelineTextInputView;
var RCTSinglelineTextInputNativeCommands;
var RCTMultilineTextInputView;
var RCTMultilineTextInputNativeCommands;
if (_Platform.default.OS === 'android') {
    AndroidTextInput = (__webpack_require__(23907)/* ["default"] */["default"]);
    AndroidTextInputCommands = (__webpack_require__(23907)/* .Commands */.Commands);
} else if (_Platform.default.OS === 'ios') {
    RCTSinglelineTextInputView = (__webpack_require__(51023)/* ["default"] */["default"]);
    RCTSinglelineTextInputNativeCommands = (__webpack_require__(51023)/* .Commands */.Commands);
    RCTMultilineTextInputView = (__webpack_require__(4045)/* ["default"] */["default"]);
    RCTMultilineTextInputNativeCommands = (__webpack_require__(4045)/* .Commands */.Commands);
}
var emptyFunctionThatReturnsTrue = ()=>true;
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_STATE(ref) {
    var props = ref.props, mostRecentEventCount = ref.mostRecentEventCount, selection = ref.selection, inputRef = ref.inputRef, text = ref.text, viewCommands = ref.viewCommands;
    var _useState = _sliced_to_array._((0, _react.useState)(props.value), 2), lastNativeText = _useState[0], setLastNativeText = _useState[1];
    var _useState1 = _sliced_to_array._((0, _react.useState)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    }), 2), lastNativeSelectionState = _useState1[0], setLastNativeSelection = _useState1[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(()=>{
        var nativeUpdate = {};
        if (lastNativeText !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            setLastNativeText(props.value);
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            setLastNativeSelection({
                selection,
                mostRecentEventCount
            });
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (selection === null || selection === void 0 ? void 0 : selection.start) ?? -1, (selection === null || selection === void 0 ? void 0 : selection.end) ?? -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        lastNativeText,
        selection,
        lastNativeSelection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText,
        setLastNativeSelection
    };
}
/**
 * This hook handles the synchronization between the state of the text input
 * in native and in JavaScript. This is necessary due to the asynchronous nature
 * of text input events.
 */ function useTextInputStateSynchronization_REFS(ref) {
    var props = ref.props, mostRecentEventCount = ref.mostRecentEventCount, selection = ref.selection, inputRef = ref.inputRef, text = ref.text, viewCommands = ref.viewCommands;
    var lastNativeTextRef = (0, _react.useRef)(props.value);
    var lastNativeSelectionRef = (0, _react.useRef)({
        selection: {
            start: -1,
            end: -1
        },
        mostRecentEventCount: mostRecentEventCount
    });
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(()=>{
        var nativeUpdate = {};
        var lastNativeSelection = lastNativeSelectionRef.current.selection;
        if (lastNativeTextRef.current !== props.value && typeof props.value === 'string') {
            nativeUpdate.text = props.value;
            lastNativeTextRef.current = props.value;
        }
        if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
            nativeUpdate.selection = selection;
            lastNativeSelectionRef.current = {
                selection,
                mostRecentEventCount
            };
        }
        if (Object.keys(nativeUpdate).length === 0) {
            return;
        }
        if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (selection === null || selection === void 0 ? void 0 : selection.start) ?? -1, (selection === null || selection === void 0 ? void 0 : selection.end) ?? -1);
        }
    }, [
        mostRecentEventCount,
        inputRef,
        props.value,
        props.defaultValue,
        selection,
        text,
        viewCommands
    ]);
    return {
        setLastNativeText: (lastNativeText)=>{
            lastNativeTextRef.current = lastNativeText;
        },
        setLastNativeSelection: (lastNativeSelection)=>{
            lastNativeSelectionRef.current = lastNativeSelection;
        }
    };
}
/**
 * A foundational component for inputting text into the app via a
 * keyboard. Props provide configurability for several features, such as
 * auto-correction, auto-capitalization, placeholder text, and different keyboard
 * types, such as a numeric keypad.
 *
 * The simplest use case is to plop down a `TextInput` and subscribe to the
 * `onChangeText` events to read the user input. There are also other events,
 * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = { text: 'Useless Placeholder' };
 *   }
 *
 *   render() {
 *     return (
 *       <TextInput
 *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}
 *         onChangeText={(text) => this.setState({text})}
 *         value={this.state.text}
 *       />
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * Two methods exposed via the native element are .focus() and .blur() that
 * will focus or blur the TextInput programmatically.
 *
 * Note that some props are only available with `multiline={true/false}`.
 * Additionally, border styles that apply to only one side of the element
 * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if
 * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`
 * in a `View`:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, TextInput } from 'react-native';
 *
 * class UselessTextInput extends Component {
 *   render() {
 *     return (
 *       <TextInput
 *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below
 *         editable={true}
 *         maxLength={40}
 *       />
 *     );
 *   }
 * }
 *
 * export default class UselessTextInputMultiline extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {
 *       text: 'Useless Multiline Placeholder',
 *     };
 *   }
 *
 *   // If you type something in the text box that is a color, the background will change to that
 *   // color.
 *   render() {
 *     return (
 *      <View style={{
 *        backgroundColor: this.state.text,
 *        borderBottomColor: '#000000',
 *        borderBottomWidth: 1 }}
 *      >
 *        <UselessTextInput
 *          multiline={true}
 *          numberOfLines={4}
 *          onChangeText={(text) => this.setState({text})}
 *          value={this.state.text}
 *        />
 *      </View>
 *     );
 *   }
 * }
 *
 * // skip these lines if using Create React Native App
 * AppRegistry.registerComponent(
 *  'AwesomeProject',
 *  () => UselessTextInputMultiline
 * );
 * ```
 *
 * `TextInput` has by default a border at the bottom of its view. This border
 * has its padding set by the background image provided by the system, and it
 * cannot be changed. Solutions to avoid this is to either not set height
 * explicitly, case in which the system will take care of displaying the border
 * in the correct position, or to not display the border by setting
 * `underlineColorAndroid` to transparent.
 *
 * Note that on Android performing text selection in input can change
 * app's activity `windowSoftInputMode` param to `adjustResize`.
 * This may cause issues with components that have position: 'absolute'
 * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`
 * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )
 * or control this param programmatically with native code.
 *
 */ function InternalTextInput(props) {
    var ariaBusy = props['aria-busy'], ariaChecked = props['aria-checked'], ariaDisabled = props['aria-disabled'], ariaExpanded = props['aria-expanded'], ariaSelected = props['aria-selected'], accessibilityState = props.accessibilityState, id = props.id, tabIndex = props.tabIndex, propsSelection = props.selection, selectionColor = props.selectionColor, selectionHandleColor = props.selectionHandleColor, cursorColor = props.cursorColor, otherProps = _object_without_properties._(props, [
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-selected',
        "accessibilityState",
        "id",
        "tabIndex",
        "selection",
        "selectionColor",
        "selectionHandleColor",
        "cursorColor"
    ]);
    var inputRef = (0, _react.useRef)(null);
    var selection = propsSelection == null ? null : {
        start: propsSelection.start,
        end: propsSelection.end ?? propsSelection.start
    };
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : undefined;
    var viewCommands = AndroidTextInputCommands || (props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands);
    var _useState = _sliced_to_array._((0, _react.useState)(0), 2), mostRecentEventCount = _useState[0], setMostRecentEventCount = _useState[1];
    var useTextInputStateSynchronization = _ReactNativeFeatureFlags.useRefsForTextInputState() ? useTextInputStateSynchronization_REFS : useTextInputStateSynchronization_STATE;
    var _useTextInputStateSynchronization = useTextInputStateSynchronization({
        props,
        inputRef,
        mostRecentEventCount,
        selection,
        text,
        viewCommands
    }), setLastNativeText = _useTextInputStateSynchronization.setLastNativeText, setLastNativeSelection = _useTextInputStateSynchronization.setLastNativeSelection;
    (0, _react.useLayoutEffect)(()=>{
        var inputRefValue = inputRef.current;
        if (inputRefValue != null) {
            _TextInputState.default.registerInput(inputRefValue);
            return ()=>{
                _TextInputState.default.unregisterInput(inputRefValue);
                if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
                    (0, _nullthrows.default)(inputRefValue).blur();
                }
            };
        }
    }, []);
    var setLocalRef = (0, _react.useCallback)((instance)=>{
        // $FlowExpectedError[incompatible-type]
        inputRef.current = instance;
        /*
      Hi reader from the future. I'm sorry for this.

      This is a hack. Ideally we would forwardRef to the underlying
      host component. However, since TextInput has it's own methods that can be
      called as well, if we used the standard forwardRef then these
      methods wouldn't be accessible and thus be a breaking change.

      We have a couple of options of how to handle this:
      - Return a new ref with everything we methods from both. This is problematic
        because we need React to also know it is a host component which requires
        internals of the class implementation of the ref.
      - Break the API and have some other way to call one set of the methods or
        the other. This is our long term approach as we want to eventually
        get the methods on host components off the ref. So instead of calling
        ref.measure() you might call ReactNative.measure(ref). This would hopefully
        let the ref for TextInput then have the methods like `.clear`. Or we do it
        the other way and make it TextInput.clear(textInputRef) which would be fine
        too. Either way though is a breaking change that is longer term.
      - Mutate this ref. :( Gross, but accomplishes what we need in the meantime
        before we can get to the long term breaking change.
      */ if (instance != null) {
            // $FlowFixMe[prop-missing] - See the explanation above.
            Object.assign(instance, {
                clear () {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
                    }
                },
                // TODO: Fix this returning true on null === null, when no input is focused
                isFocused () {
                    return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
                },
                getNativeRef () {
                    return inputRef.current;
                },
                setSelection (start, end) {
                    if (inputRef.current != null) {
                        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
                    }
                }
            });
        }
    }, [
        mostRecentEventCount,
        viewCommands
    ]);
    // $FlowExpectedError[incompatible-call]
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = (event)=>{
        var currentText = event.nativeEvent.text;
        props.onChange && props.onChange(event);
        props.onChangeText && props.onChangeText(currentText);
        if (inputRef.current == null) {
            // calling `props.onChange` or `props.onChangeText`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeText(currentText);
        // This must happen last, after we call setLastNativeText.
        // Different ordering can cause bugs when editing AndroidTextInputs
        // with multiple Fragments.
        // We must update this so that controlled input updates work.
        setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = (event)=>{
        props.onSelectionChange && props.onSelectionChange(event);
        if (inputRef.current == null) {
            // calling `props.onSelectionChange`
            // may clean up the input itself. Exits here.
            return;
        }
        setLastNativeSelection({
            selection: event.nativeEvent.selection,
            mostRecentEventCount
        });
    };
    var _onFocus = (event)=>{
        _TextInputState.default.focusInput(inputRef.current);
        if (props.onFocus) {
            props.onFocus(event);
        }
    };
    var _onBlur = (event)=>{
        _TextInputState.default.blurInput(inputRef.current);
        if (props.onBlur) {
            props.onBlur(event);
        }
    };
    var _onScroll = (event)=>{
        props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var multiline = props.multiline ?? false;
    var submitBehavior;
    if (props.submitBehavior != null) {
        // `submitBehavior` is set explicitly
        if (!multiline && props.submitBehavior === 'newline') {
            // For single line text inputs, `'newline'` is not a valid option
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = props.submitBehavior;
        }
    } else if (multiline) {
        if (props.blurOnSubmit === true) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'newline';
        }
    } else {
        // Single line
        if (props.blurOnSubmit !== false) {
            submitBehavior = 'blurAndSubmit';
        } else {
            submitBehavior = 'submit';
        }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var editable = props.editable, hitSlop = props.hitSlop, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination;
    var config = _react.useMemo(()=>({
            hitSlop,
            onPress: (event)=>{
                onPress === null || onPress === void 0 ? void 0 : onPress(event);
                if (editable !== false) {
                    if (inputRef.current != null) {
                        inputRef.current.focus();
                    }
                }
            },
            onPressIn: onPressIn,
            onPressOut: onPressOut,
            cancelable: _Platform.default.OS === 'ios' ? !rejectResponderTermination : null
        }), [
        editable,
        hitSlop,
        onPress,
        onPressIn,
        onPressOut,
        rejectResponderTermination
    ]);
    // Hide caret during test runs due to a flashing caret
    // makes screenshot tests flakey
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
        caretHidden = true;
    }
    // TextInput handles onBlur and onFocus events
    // so omitting onBlur and onFocus pressability handlers here.
    var _usePressability1 = (0, _usePressability.default)(config), onBlur = _usePressability1.onBlur, onFocus = _usePressability1.onFocus, eventHandlers = _object_without_properties._(_usePressability1, [
        "onBlur",
        "onFocus"
    ]);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
            checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
            disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
            selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
        };
    }
    // Keep the original (potentially nested) style when possible, as React can diff these more efficiently
    var _style = props.style;
    var flattenedStyle = (0, _flattenStyle.default)(props.style);
    if (flattenedStyle != null) {
        var overrides = null;
        if (typeof (flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.fontWeight) === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            flattenedStyle.fontWeight.toString();
        }
        if (flattenedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    if (_Platform.default.OS === 'ios') {
        var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
        var useMultilineDefaultStyle = props.multiline === true && (flattenedStyle == null || flattenedStyle.padding == null && flattenedStyle.paddingVertical == null && flattenedStyle.paddingTop == null);
        textInput = /*#__PURE__*/ (0, _jsxruntime.jsx)(RCTTextInputView, _object_spread_props._(_object_spread._({
            // Figure out imperative + forward refs.
            ref: ref
        }, otherProps, eventHandlers), {
            accessibilityState: _accessibilityState,
            accessible: accessible,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            dataDetectorTypes: props.dataDetectorTypes,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id ?? props.nativeID,
            numberOfLines: props.rows ?? props.numberOfLines,
            onBlur: _onBlur,
            onChange: _onChange,
            onContentSizeChange: props.onContentSizeChange,
            onFocus: _onFocus,
            onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
            selection: selection,
            selectionColor: selectionColor,
            style: _StyleSheet.default.compose(useMultilineDefaultStyle ? styles.multilineDefault : null, _style),
            text: text
        }));
    } else if (_Platform.default.OS === 'android') {
        var autoCapitalize = props.autoCapitalize || 'sentences';
        var _accessibilityLabelledBy = (props === null || props === void 0 ? void 0 : props['aria-labelledby']) ?? (props === null || props === void 0 ? void 0 : props.accessibilityLabelledBy);
        var placeholder = props.placeholder ?? '';
        var children = props.children;
        var childCount = _react.Children.count(children);
        (0, _invariant.default)(!(props.value != null && childCount), 'Cannot specify both value and children.');
        if (childCount > 1) {
            children = /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                children: children
            });
        }
        // For consistency with iOS set cursor/selectionHandle color as selectionColor
        var colorProps = {
            selectionColor,
            selectionHandleColor: selectionHandleColor === undefined ? selectionColor : selectionHandleColor,
            cursorColor: cursorColor === undefined ? selectionColor : cursorColor
        };
        textInput = /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match up
       * exactly with the props for TextInput. This will need to get fixed */ /* $FlowFixMe[incompatible-type] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */ /*#__PURE__*/ (0, _jsxruntime.jsx)(AndroidTextInput, _object_spread_props._(_object_spread._({
            // Figure out imperative + forward refs.
            ref: ref
        }, otherProps, colorProps, eventHandlers), {
            accessibilityState: _accessibilityState,
            accessibilityLabelledBy: _accessibilityLabelledBy,
            accessible: accessible,
            autoCapitalize: autoCapitalize,
            submitBehavior: submitBehavior,
            caretHidden: caretHidden,
            children: children,
            disableFullscreenUI: props.disableFullscreenUI,
            focusable: tabIndex !== undefined ? !tabIndex : focusable,
            mostRecentEventCount: mostRecentEventCount,
            nativeID: id ?? props.nativeID,
            numberOfLines: props.rows ?? props.numberOfLines,
            onBlur: _onBlur,
            onChange: _onChange,
            onFocus: _onFocus,
            /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match
         * up exactly with the props for TextInput. This will need to get fixed
         */ /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput
         * don't match up exactly with the props for TextInput. This will need
         * to get fixed */ onScroll: _onScroll,
            onSelectionChange: _onSelectionChange,
            placeholder: placeholder,
            style: _style,
            text: text,
            textBreakStrategy: props.textBreakStrategy
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
        value: true,
        children: textInput
    });
}
var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
};
var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: _Platform.default.OS === 'ios' ? 'web-search' : 'default',
    email: 'email-address',
    url: 'url'
};
// Map HTML autocomplete values to Android autoComplete values
var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
};
// Map HTML autocomplete values to iOS textContentType values
var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
};
var ExportedForwardRef = /*#__PURE__*/ _react.forwardRef(function TextInput(_param, forwardedRef) {
    var _param_allowFontScaling = _param.allowFontScaling, allowFontScaling = _param_allowFontScaling === void 0 ? true : _param_allowFontScaling, _param_rejectResponderTermination = _param.rejectResponderTermination, rejectResponderTermination = _param_rejectResponderTermination === void 0 ? true : _param_rejectResponderTermination, _param_underlineColorAndroid = _param.underlineColorAndroid, underlineColorAndroid = _param_underlineColorAndroid === void 0 ? 'transparent' : _param_underlineColorAndroid, autoComplete = _param.autoComplete, textContentType = _param.textContentType, readOnly = _param.readOnly, editable = _param.editable, enterKeyHint = _param.enterKeyHint, returnKeyType = _param.returnKeyType, inputMode = _param.inputMode, showSoftInputOnFocus = _param.showSoftInputOnFocus, keyboardType = _param.keyboardType, restProps = _object_without_properties._(_param, [
        "allowFontScaling",
        "rejectResponderTermination",
        "underlineColorAndroid",
        "autoComplete",
        "textContentType",
        "readOnly",
        "editable",
        "enterKeyHint",
        "returnKeyType",
        "inputMode",
        "showSoftInputOnFocus",
        "keyboardType"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(InternalTextInput, _object_spread_props._(_object_spread._({
        allowFontScaling: allowFontScaling,
        rejectResponderTermination: rejectResponderTermination,
        underlineColorAndroid: underlineColorAndroid,
        editable: readOnly !== undefined ? !readOnly : editable,
        returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
        keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
        showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
        autoComplete: _Platform.default.OS === 'android' ? // $FlowFixMe[prop-missing]
        autoCompleteWebToAutoCompleteAndroidMap[autoComplete] ?? autoComplete : undefined,
        textContentType: textContentType != null ? textContentType : _Platform.default.OS === 'ios' && autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? // $FlowFixMe[prop-missing]
        autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType
    }, restProps), {
        forwardedRef: forwardedRef
    }));
});
ExportedForwardRef.displayName = 'TextInput';
// $FlowFixMe[prop-missing]
ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
};
var styles = _StyleSheet.default.create({
    multilineDefault: {
        // This default top inset makes RCTMultilineTextInputView seem as close as possible
        // to single-line RCTSinglelineTextInputView defaults, using the system defaults
        // of font size 17 and a height of 31 points.
        paddingTop: 5
    }
});
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
var _default = ExportedForwardRef;


}),
7273: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // This class is responsible for coordinating the "focused" state for
// TextInputs. All calls relating to the keyboard should be funneled
// through here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _AndroidTextInputNativeComponent = __webpack_require__(23907);
var _RCTSingelineTextInputNativeComponent = __webpack_require__(51023);
var findNodeHandle = (__webpack_require__(46513)/* .findNodeHandle */.findNodeHandle);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var currentlyFocusedInputRef = null;
var inputs = new Set();
function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
}
/**
 * Returns the ID of the currently focused text field, if one exists
 * If no text field is focused it returns null
 */ function currentlyFocusedField() {
    if (false) {}
    return findNodeHandle(currentlyFocusedInputRef);
}
function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
        currentlyFocusedInputRef = textField;
    }
}
function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
        currentlyFocusedInputRef = null;
    }
}
function focusField(textFieldID) {
    if (false) {}
    return;
}
function blurField(textFieldID) {
    if (false) {}
    return;
}
/**
 * @param {number} TextInputID id of the text field to focus
 * Focuses the specified text field
 * noop if the text field was already focused or if the field is not editable
 */ function focusTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (textField != null) {
        var // $FlowFixMe - `currentProps` is missing in `NativeMethods`
        _textField_currentProps;
        var fieldCanBeFocused = currentlyFocusedInputRef !== textField && ((_textField_currentProps = textField.currentProps) === null || _textField_currentProps === void 0 ? void 0 : _textField_currentProps.editable) !== false;
        if (!fieldCanBeFocused) {
            return;
        }
        focusInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.focus(textField);
        }
    }
}
/**
 * @param {number} textFieldID id of the text field to unfocus
 * Unfocuses the specified text field
 * noop if it wasn't focused
 */ function blurTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
        blurInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.blur(textField);
        }
    }
}
function registerInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.add(textField);
}
function unregisterInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.delete(textField);
}
function isTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return false;
    }
    return inputs.has(textField);
}
var TextInputState = {
    currentlyFocusedInput,
    focusInput,
    blurInput,
    currentlyFocusedField,
    focusField,
    blurField,
    focusTextInput,
    blurTextInput,
    registerInput,
    unregisterInput,
    isTextInput
};
var _default = TextInputState;


}),
43327: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeToastAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80174));
/**
 * This exposes the native ToastAndroid module as a JS module. This has a function 'show'
 * which takes the following parameters:
 *
 * 1. String message: A string with the text to toast
 * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG
 *
 * There is also a function `showWithGravity` to specify the layout gravity. May be
 * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.
 *
 * The 'showWithGravityAndOffset' function adds on the ability to specify offset
 * These offset values will translate to pixels.
 *
 * Basic usage:
 * ```javascript
 * ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
 * ToastAndroid.showWithGravity('All Your Base Are Belong To Us', ToastAndroid.SHORT, ToastAndroid.CENTER);
 * ToastAndroid.showWithGravityAndOffset('A wild toast appeared!', ToastAndroid.LONG, ToastAndroid.BOTTOM, 25, 50);
 * ```
 */ var ToastAndroidConstants = _NativeToastAndroid.default.getConstants();
var ToastAndroid = {
    // Toast duration constants
    SHORT: ToastAndroidConstants.SHORT,
    LONG: ToastAndroidConstants.LONG,
    // Toast gravity constants
    TOP: ToastAndroidConstants.TOP,
    BOTTOM: ToastAndroidConstants.BOTTOM,
    CENTER: ToastAndroidConstants.CENTER,
    show: function(message, duration) {
        _NativeToastAndroid.default.show(message, duration);
    },
    showWithGravity: function(message, duration, gravity) {
        _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function(message, duration, gravity, xOffset, yOffset) {
        _NativeToastAndroid.default.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
};
var _default = ToastAndroid;


}),
99977: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(30469));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * PooledClass representing the bounding rectangle of a region.
 *
 * @param {number} width Width of bounding rectangle.
 * @param {number} height Height of bounding rectangle.
 * @constructor BoundingDimensions
 */ // $FlowFixMe[missing-this-annot]
function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
}
// $FlowFixMe[prop-missing]
// $FlowFixMe[missing-this-annot]
BoundingDimensions.prototype.destructor = function() {
    this.width = null;
    this.height = null;
};
/**
 * @param {HTMLElement} element Element to return `BoundingDimensions` for.
 * @return {BoundingDimensions} Bounding dimensions of `element`.
 */ BoundingDimensions.getPooledFromElement = function(element) {
    // $FlowFixMe[prop-missing]
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};
_PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
var _default = BoundingDimensions;


}),
30469: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var oneArgumentPooler = function(copyFieldsFrom) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, copyFieldsFrom);
        return instance;
    } else {
        return new Klass(copyFieldsFrom);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var twoArgumentPooler = function(a1, a2) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2);
        return instance;
    } else {
        return new Klass(a1, a2);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var threeArgumentPooler = function(a1, a2, a3) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3);
        return instance;
    } else {
        return new Klass(a1, a2, a3);
    }
};
/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var fourArgumentPooler = function(a1, a2, a3, a4) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4);
        return instance;
    } else {
        return new Klass(a1, a2, a3, a4);
    }
};
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
 * Flow's LTI update could not be added via codemod */ var standardReleaser = function(instance) {
    var Klass = this; // eslint-disable-line consistent-this
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
    }
};
var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;
/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */ var addPoolingTo = function(CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
};
var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
};
var _default = PooledClass;


}),
90549: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _PooledClass = /*#__PURE__*/ _interop_require_default._(__webpack_require__(30469));
var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
/**
 * Position does not expose methods for construction via an `HTMLDOMElement`,
 * because it isn't meaningful to construct such a thing without first defining
 * a frame of reference.
 *
 * @param {number} windowStartKey Key that window starts at.
 * @param {number} windowEndKey Key that window ends at.
 */ // $FlowFixMe[missing-this-annot]
function Position(left, top) {
    this.left = left;
    this.top = top;
}
// $FlowFixMe[prop-missing]
// $FlowFixMe[missing-this-annot]
Position.prototype.destructor = function() {
    this.left = null;
    this.top = null;
};
_PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
var _default = Position;


}),
44263: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _PressabilityDebug = __webpack_require__(51386);
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87771));
var _BoundingDimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99977));
var _Position = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90549));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var extractSingleTouch = (nativeEvent)=>{
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
};
/**
 * `Touchable`: Taps done right.
 *
 * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`
 * will measure time/geometry and tells you when to give feedback to the user.
 *
 * ====================== Touchable Tutorial ===============================
 * The `Touchable` mixin helps you handle the "press" interaction. It analyzes
 * the geometry of elements, and observes when another responder (scroll view
 * etc) has stolen the touch lock. It notifies your component when it should
 * give feedback to the user. (bouncing/highlighting/unhighlighting).
 *
 * - When a touch was activated (typically you highlight)
 * - When a touch was deactivated (typically you unhighlight)
 * - When a touch was "pressed" - a touch ended while still within the geometry
 *   of the element, and no other element (like scroller) has "stolen" touch
 *   lock ("responder") (Typically you bounce the element).
 *
 * A good tap interaction isn't as simple as you might think. There should be a
 * slight delay before showing a highlight when starting a touch. If a
 * subsequent touch move exceeds the boundary of the element, it should
 * unhighlight, but if that same touch is brought back within the boundary, it
 * should rehighlight again. A touch can move in and out of that boundary
 * several times, each time toggling highlighting, but a "press" is only
 * triggered if that touch ends while within the element's boundary and no
 * scroller (or anything else) has stolen the lock on touches.
 *
 * To create a new type of component that handles interaction using the
 * `Touchable` mixin, do the following:
 *
 * - Initialize the `Touchable` state.
 *
 *   getInitialState: function() {
 *     return merge(this.touchableGetInitialState(), yourComponentState);
 *   }
 *
 * - Choose the rendered component who's touches should start the interactive
 *   sequence. On that rendered node, forward all `Touchable` responder
 *   handlers. You can choose any rendered node you like. Choose a node whose
 *   hit target you'd like to instigate the interaction sequence:
 *
 *   // In render function:
 *   return (
 *     <View
 *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}
 *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}
 *       onResponderGrant={this.touchableHandleResponderGrant}
 *       onResponderMove={this.touchableHandleResponderMove}
 *       onResponderRelease={this.touchableHandleResponderRelease}
 *       onResponderTerminate={this.touchableHandleResponderTerminate}>
 *       <View>
 *         Even though the hit detection/interactions are triggered by the
 *         wrapping (typically larger) node, we usually end up implementing
 *         custom logic that highlights this inner one.
 *       </View>
 *     </View>
 *   );
 *
 * - You may set up your own handlers for each of these events, so long as you
 *   also invoke the `touchable*` handlers inside of your custom handler.
 *
 * - Implement the handlers on your component class in order to provide
 *   feedback to the user. See documentation for each of these class methods
 *   that you should implement.
 *
 *   touchableHandlePress: function() {
 *      this.performBounceAnimation();  // or whatever you want to do.
 *   },
 *   touchableHandleActivePressIn: function() {
 *     this.beginHighlighting(...);  // Whatever you like to convey activation
 *   },
 *   touchableHandleActivePressOut: function() {
 *     this.endHighlighting(...);  // Whatever you like to convey deactivation
 *   },
 *
 * - There are more advanced methods you can implement (see documentation below):
 *   touchableGetHighlightDelayMS: function() {
 *     return 20;
 *   }
 *   // In practice, *always* use a predeclared constant (conserve memory).
 *   touchableGetPressRectOffset: function() {
 *     return {top: 20, left: 20, right: 20, bottom: 100};
 *   }
 */ /**
 * Touchable states.
 */ var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    ERROR: 'ERROR'
};
/*
 * Quick lookup map for states that are considered to be "active"
 */ var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
};
var IsActive = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
});
/**
 * Quick lookup for states that are considered to be "pressing" and are
 * therefore eligible to result in a "selection" if the press stops.
 */ var IsPressingIn = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var IsLongPressingIn = _object_spread_props._(_object_spread._({}, baseStatesConditions), {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
/**
 * Inputs to the state machine.
 */ var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
};
/**
 * Mapping from States x Signals => States
 */ var Transitions = {
    NOT_RESPONDER: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.ERROR,
        RESPONDER_TERMINATED: States.ERROR,
        ENTER_PRESS_RECT: States.ERROR,
        LEAVE_PRESS_RECT: States.ERROR,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
        DELAY: States.NOT_RESPONDER,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.NOT_RESPONDER,
        LEAVE_PRESS_RECT: States.NOT_RESPONDER,
        LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
};
// ==== Typical Constants for integrating into UI components ====
// var HIT_EXPAND_PX = 20;
// var HIT_VERT_OFFSET_PX = 10;
var HIGHLIGHT_DELAY_MS = 130;
var PRESS_EXPAND_PX = 20;
var LONG_PRESS_THRESHOLD = 500;
var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
var LONG_PRESS_ALLOWED_MOVEMENT = 10;
// Default amount "active" region protrudes beyond box
/**
 * By convention, methods prefixed with underscores are meant to be @private,
 * and not @protected. Mixers shouldn't access them - not even to provide them
 * as callback handlers.
 *
 *
 * ========== Geometry =========
 * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`
 * is an abstract box that is extended beyond the `HitRect`.
 *
 *  +--------------------------+
 *  |                          | - "Start" events in `HitRect` cause `HitRect`
 *  |  +--------------------+  |   to become the responder.
 *  |  |  +--------------+  |  | - `HitRect` is typically expanded around
 *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.
 *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,
 *  |  |  |              |  |  |   and before letting up, the Visual React
 *  |  |  +--------------+  |  |   will become "active". This makes it eligible
 *  |  |     HitRect        |  |   for being highlighted (so long as the
 *  |  +--------------------+  |   press remains in the `PressRect`).
 *  |        PressRect     o   |
 *  +----------------------|---+
 *           Out Region    |
 *                         +-----+ This gap between the `HitRect` and
 *                                 `PressRect` allows a touch to move far away
 *                                 from the original hit rect, and remain
 *                                 highlighted, and eligible for a "Press".
 *                                 Customize this via
 *                                 `touchableGetPressRectOffset()`.
 *
 *
 *
 * ======= State Machine =======
 *
 * +-------------+ <---+ RESPONDER_RELEASE
 * |NOT_RESPONDER|
 * +-------------+ <---+ RESPONDER_TERMINATED
 *     +
 *     | RESPONDER_GRANT (HitRect)
 *     v
 * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+
 * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|
 * +---------------------------+          +-------------------------+                +------------------------------+
 *     +            ^                         +           ^                                 +           ^
 *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_
 *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT
 *     |            |                         |           |                                 |           |
 *     v            +                         v           +                                 v           +
 * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+
 * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|
 * +----------------------------+         +--------------------------+               +-------------------------------+
 *
 * T + DELAY => LONG_PRESS_DELAY_MS + DELAY
 *
 * Not drawn are the side effects of each transition. The most important side
 * effect is the `touchableHandlePress` abstract method invocation that occurs
 * when a responder is released while in either of the "Press" states.
 *
 * The other important side effects are the highlight abstract method
 * invocations (internal callbacks) to be implemented by the mixer.
 *
 *
 * @lends Touchable.prototype
 */ var TouchableMixinImpl = {
    componentDidMount: function() {
        if (!_Platform.default.isTV) {
            return;
        }
    },
    /**
   * Clear all timeouts on unmount
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ componentWillUnmount: function() {
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    /**
   * It's prefer that mixins determine state in this way, having the class
   * explicitly mix the state in the one and only `getInitialState` method.
   *
   * @return {object} State object to be placed inside of
   * `this.state.touchable`.
   */ touchableGetInitialState: function() {
        return {
            touchable: {
                touchState: undefined,
                responderID: null
            }
        };
    },
    // ==== Hooks to Gesture Responder system ====
    /**
   * Must return true if embedded in a native platform scroll view.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminationRequest: function() {
        return !this.props.rejectResponderTermination;
    },
    /**
   * Must return true to start the process of `Touchable`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleStartShouldSetResponder: function() {
        return !this.props.disabled;
    },
    /**
   * Return true to cancel press on long press.
   */ touchableLongPressCancelsPress: function() {
        return true;
    },
    /**
   * Place as callback for a DOM element's `onResponderGrant` event.
   * @param {NativeSyntheticEvent} e Synthetic event from event system.
   *
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderGrant: function(e) {
        var dispatchID = e.currentTarget;
        // Since e is used in a callback invoked on another event loop
        // (as in setTimeout etc), we need to call e.persist() on the
        // event to make sure it doesn't get reused in the event object pool.
        e.persist();
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
        this.pressOutDelayTimeout = null;
        this.state.touchable.touchState = States.NOT_RESPONDER;
        this.state.touchable.responderID = dispatchID;
        this._receiveSignal(Signals.RESPONDER_GRANT, e);
        var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
        delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
        if (delayMS !== 0) {
            this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
        } else {
            this._handleDelay(e);
        }
        var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
        longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
        this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    /**
   * Place as callback for a DOM element's `onResponderRelease` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderRelease: function(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderTerminate` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderTerminate: function(e) {
        this.pressInLocation = null;
        this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    /**
   * Place as callback for a DOM element's `onResponderMove` event.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleResponderMove: function(e) {
        // Measurement may not have returned yet.
        if (!this.state.touchable.positionOnActivate) {
            return;
        }
        var positionOnActivate = this.state.touchable.positionOnActivate;
        var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
        var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
            left: PRESS_EXPAND_PX,
            right: PRESS_EXPAND_PX,
            top: PRESS_EXPAND_PX,
            bottom: PRESS_EXPAND_PX
        };
        var pressExpandLeft = pressRectOffset.left;
        var pressExpandTop = pressRectOffset.top;
        var pressExpandRight = pressRectOffset.right;
        var pressExpandBottom = pressRectOffset.bottom;
        var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
        if (hitSlop) {
            pressExpandLeft += hitSlop.left || 0;
            pressExpandTop += hitSlop.top || 0;
            pressExpandRight += hitSlop.right || 0;
            pressExpandBottom += hitSlop.bottom || 0;
        }
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        if (this.pressInLocation) {
            var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
            if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
                this._cancelLongPressDelayTimeout();
            }
        }
        var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
        if (isTouchWithinActive) {
            var prevState = this.state.touchable.touchState;
            this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
            var curState = this.state.touchable.touchState;
            if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
                // fix for t7967420
                this._cancelLongPressDelayTimeout();
            }
        } else {
            this._cancelLongPressDelayTimeout();
            this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
        }
    },
    /**
   * Invoked when the item receives focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * currently has the focus. Most platforms only support a single element being
   * focused at a time, in which case there may have been a previously focused
   * element that was blurred just prior to this. This can be overridden when
   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleFocus: function(e) {
        this.props.onFocus && this.props.onFocus(e);
    },
    /**
   * Invoked when the item loses focus. Mixers might override this to
   * visually distinguish the `VisualRect` so that the user knows that it
   * no longer has focus. Most platforms only support a single element being
   * focused at a time, in which case the focus may have moved to another.
   * This can be overridden when using
   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ touchableHandleBlur: function(e) {
        this.props.onBlur && this.props.onBlur(e);
    },
    // ==== Abstract Application Callbacks ====
    /**
   * Invoked when the item should be highlighted. Mixers should implement this
   * to visually distinguish the `VisualRect` so that the user knows that
   * releasing a touch will result in a "selection" (analog to click).
   *
   * @abstract
   * touchableHandleActivePressIn: function,
   */ /**
   * Invoked when the item is "active" (in that it is still eligible to become
   * a "select") but the touch has left the `PressRect`. Usually the mixer will
   * want to unhighlight the `VisualRect`. If the user (while pressing) moves
   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked
   * again and the mixer should probably highlight the `VisualRect` again. This
   * event will not fire on an `touchEnd/mouseUp` event, only move events while
   * the user is depressing the mouse/touch.
   *
   * @abstract
   * touchableHandleActivePressOut: function
   */ /**
   * Invoked when the item is "selected" - meaning the interaction ended by
   * letting up while the item was either in the state
   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.
   *
   * @abstract
   * touchableHandlePress: function
   */ /**
   * Invoked when the item is long pressed - meaning the interaction ended by
   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If
   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will
   * be called as it normally is. If `touchableHandleLongPress` is provided, by
   * default any `touchableHandlePress` callback will not be invoked. To
   * override this default behavior, override `touchableLongPressCancelsPress`
   * to return false. As a result, `touchableHandlePress` will be called when
   * lifting up, even if `touchableHandleLongPress` has also been called.
   *
   * @abstract
   * touchableHandleLongPress: function
   */ /**
   * Returns the number of millis to wait before triggering a highlight.
   *
   * @abstract
   * touchableGetHighlightDelayMS: function
   */ /**
   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive
   * numbers mean the size expands outwards.
   *
   * @abstract
   * touchableGetPressRectOffset: function
   */ // ==== Internal Logic ====
    /**
   * Measures the `HitRect` node on activation. The Bounding rectangle is with
   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`
   * should result in points that are in the same coordinate system as an
   * event's `globalX/globalY` data values.
   *
   * - Consider caching this for the lifetime of the component, or possibly
   *   being able to share this cache between any `ScrollMap` view.
   *
   * @sideeffects
   * @private
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _remeasureMetricsOnActivation: function() {
        var responderID = this.state.touchable.responderID;
        if (responderID == null) {
            return;
        }
        if (typeof responderID === 'number') {
            _UIManager.default.measure(responderID, this._handleQueryLayout);
        } else {
            responderID.measure(this._handleQueryLayout);
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleQueryLayout: function(l, t, w, h, globalX, globalY) {
        //don't do anything UIManager failed to measure node
        if (!l && !t && !w && !h && !globalX && !globalY) {
            return;
        }
        this.state.touchable.positionOnActivate && // $FlowFixMe[prop-missing]
        _Position.default.release(this.state.touchable.positionOnActivate);
        this.state.touchable.dimensionsOnActivate && // $FlowFixMe[prop-missing]
        _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
        // $FlowFixMe[prop-missing]
        this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
        // $FlowFixMe[prop-missing]
        this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleDelay: function(e) {
        this.touchableDelayTimeout = null;
        this._receiveSignal(Signals.DELAY, e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _handleLongDelay: function(e) {
        this.longPressDelayTimeout = null;
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
            this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
        }
    },
    /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   *
   * @param {Signals} signal State machine signal.
   * @throws Error if invalid state transition or unrecognized signal.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _receiveSignal: function(signal, e) {
        var responderID = this.state.touchable.responderID;
        var curState = this.state.touchable.touchState;
        var nextState = Transitions[curState] && Transitions[curState][signal];
        if (!responderID && signal === Signals.RESPONDER_RELEASE) {
            return;
        }
        if (!nextState) {
            throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');
        }
        if (nextState === States.ERROR) {
            throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
        }
        if (curState !== nextState) {
            this._performSideEffectsForTransition(curState, nextState, signal, e);
            this.state.touchable.touchState = nextState;
        }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _cancelLongPressDelayTimeout: function() {
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.longPressDelayTimeout = null;
    },
    _isHighlight: function(state) {
        return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _savePressInLocation: function(e) {
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        var locationX = touch && touch.locationX;
        var locationY = touch && touch.locationY;
        this.pressInLocation = {
            pageX,
            pageY,
            locationX,
            locationY
        };
    },
    _getDistanceBetweenPoints: function(aX, aY, bX, bY) {
        var deltaX = aX - bX;
        var deltaY = aY - bY;
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    /**
   * Will perform a transition between touchable states, and identify any
   * highlighting or unhighlighting that must be performed for this particular
   * transition.
   *
   * @param {States} curState Current Touchable state.
   * @param {States} nextState Next Touchable state.
   * @param {Signal} signal Signal that triggered the transition.
   * @param {Event} e Native event.
   * @sideeffects
   */ /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _performSideEffectsForTransition: function(curState, nextState, signal, e) {
        var curIsHighlight = this._isHighlight(curState);
        var newIsHighlight = this._isHighlight(nextState);
        var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
        if (isFinalSignal) {
            this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
        var isActiveTransition = !IsActive[curState] && IsActive[nextState];
        if (isInitialTransition || isActiveTransition) {
            this._remeasureMetricsOnActivation();
        }
        if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
            this.touchableHandleLongPress && this.touchableHandleLongPress(e);
        }
        if (newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
        } else if (!newIsHighlight && curIsHighlight) {
            this._endHighlight(e);
        }
        if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
            var hasLongPressHandler = !!this.props.onLongPress;
            var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler
            (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.
            var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
            if (shouldInvokePress && this.touchableHandlePress) {
                if (!newIsHighlight && !curIsHighlight) {
                    // we never highlighted because of delay, but we should highlight now
                    this._startHighlight(e);
                    this._endHighlight(e);
                }
                if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
                    _SoundManager.default.playTouchSound();
                }
                this.touchableHandlePress(e);
            }
        }
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.touchableDelayTimeout = null;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _startHighlight: function(e) {
        this._savePressInLocation(e);
        this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ _endHighlight: function(e) {
        if (this.touchableHandleActivePressOut) {
            if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
                this.pressOutDelayTimeout = setTimeout(()=>{
                    this.touchableHandleActivePressOut(e);
                }, this.touchableGetPressOutDelayMS());
            } else {
                this.touchableHandleActivePressOut(e);
            }
        }
    },
    withoutDefaultFocusAndBlur: {}
};
/**
 * Provide an optional version of the mixin where `touchableHandleFocus` and
 * `touchableHandleBlur` can be overridden. This allows appropriate defaults to
 * be set on TV platforms, without breaking existing implementations of
 * `Touchable`.
 */ var touchableHandleFocus = TouchableMixinImpl.touchableHandleFocus, touchableHandleBlur = TouchableMixinImpl.touchableHandleBlur, TouchableMixinWithoutDefaultFocusAndBlur = _object_without_properties._(TouchableMixinImpl, [
    "touchableHandleFocus",
    "touchableHandleBlur"
]);
TouchableMixinImpl.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
var TouchableImpl = {
    Mixin: TouchableMixinImpl,
    /**
   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).
   */ renderDebugView: (ref)=>{
        var color = ref.color, hitSlop = ref.hitSlop;
        if (false) {}
        return null;
    }
};
var _default = TouchableImpl;


}),
89974: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31040));
var _PressabilityDebug = __webpack_require__(51386);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, which allows
 * the underlay color to show through, darkening or tinting the view.
 *
 * The underlay comes from wrapping the child in a new View, which can affect
 * layout, and sometimes cause unwanted visual artifacts if not used correctly,
 * for example if the backgroundColor of the wrapped view isn't explicitly set
 * to an opaque color.
 *
 * TouchableHighlight must have one child (not zero or more than one).
 * If you wish to have several child components, wrap them in a View.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableHighlight onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableHighlight>
 *   );
 * },
 * ```
 *
 *
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableHighlight,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   constructor(props) {
 *     super(props)
 *     this.state = { count: 0 }
 *   }
 *
 *   onPress = () => {
 *     this.setState({
 *       count: this.state.count+1
 *     })
 *   }
 *
 *  render() {
 *     return (
 *       <View style={styles.container}>
 *         <TouchableHighlight
 *          style={styles.button}
 *          onPress={this.onPress}
 *         >
 *          <Text> Touch Here </Text>
 *         </TouchableHighlight>
 *         <View style={[styles.countContainer]}>
 *           <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableHighlightImpl = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableHighlightImpl, _React_Component);
    function TouchableHighlightImpl() {
        _class_call_check._(this, TouchableHighlightImpl);
        var _this;
        _this = _call_super._(this, TouchableHighlightImpl, arguments), _this._isMounted = false, _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig()),
            extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
        };
        return _this;
    }
    _create_class._(TouchableHighlightImpl, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled != null ? this.props.disabled : (_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled,
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    android_disableSound: this.props.touchSoundDisabled,
                    onBlur: (event)=>{
                        if (_Platform.default.isTV) {
                            this._hideUnderlay();
                        }
                        if (this.props.onBlur != null) {
                            this.props.onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        if (_Platform.default.isTV) {
                            this._showUnderlay();
                        }
                        if (this.props.onFocus != null) {
                            this.props.onFocus(event);
                        }
                    },
                    onLongPress: this.props.onLongPress,
                    onPress: (event)=>{
                        if (this._hideTimeout != null) {
                            clearTimeout(this._hideTimeout);
                        }
                        if (!_Platform.default.isTV) {
                            this._showUnderlay();
                            this._hideTimeout = setTimeout(()=>{
                                this._hideUnderlay();
                            }, this.props.delayPressOut ?? 0);
                        }
                        if (this.props.onPress != null) {
                            this.props.onPress(event);
                        }
                    },
                    onPressIn: (event)=>{
                        if (this._hideTimeout != null) {
                            clearTimeout(this._hideTimeout);
                            this._hideTimeout = null;
                        }
                        this._showUnderlay();
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressOut: (event)=>{
                        if (this._hideTimeout == null) {
                            this._hideUnderlay();
                        }
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            key: "_createExtraStyles",
            value: function _createExtraStyles() {
                return {
                    child: {
                        opacity: this.props.activeOpacity ?? 0.85
                    },
                    underlay: {
                        backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
                    }
                };
            }
        },
        {
            key: "_showUnderlay",
            value: function _showUnderlay() {
                if (!this._isMounted || !this._hasPressHandler()) {
                    return;
                }
                this.setState({
                    extraStyles: this._createExtraStyles()
                });
                if (this.props.onShowUnderlay != null) {
                    this.props.onShowUnderlay();
                }
            }
        },
        {
            key: "_hideUnderlay",
            value: function _hideUnderlay() {
                if (this._hideTimeout != null) {
                    clearTimeout(this._hideTimeout);
                    this._hideTimeout = null;
                }
                if (this.props.testOnly_pressed === true) {
                    return;
                }
                if (this._hasPressHandler()) {
                    this.setState({
                        extraStyles: null
                    });
                    if (this.props.onHideUnderlay != null) {
                        this.props.onHideUnderlay();
                    }
                }
            }
        },
        {
            key: "_hasPressHandler",
            value: function _hasPressHandler() {
                return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3, _this_state_extraStyles, _this_state_extraStyles1;
                var child = _react.Children.only(this.props.children);
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, this.props.accessibilityState), {
                    disabled: this.props.disabled
                }) : this.props.accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, _object_spread_props._(_object_spread._({
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityLanguage: this.props.accessibilityLanguage,
                    accessibilityRole: this.props.accessibilityRole,
                    accessibilityState: accessibilityState,
                    accessibilityValue: accessibilityValue,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                    accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                    accessibilityLiveRegion: accessibilityLiveRegion,
                    accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                    style: _StyleSheet.default.compose(this.props.style, (_this_state_extraStyles = this.state.extraStyles) === null || _this_state_extraStyles === void 0 ? void 0 : _this_state_extraStyles.underlay),
                    onLayout: this.props.onLayout,
                    hitSlop: this.props.hitSlop,
                    hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                    nextFocusDown: this.props.nextFocusDown,
                    nextFocusForward: this.props.nextFocusForward,
                    nextFocusLeft: this.props.nextFocusLeft,
                    nextFocusRight: this.props.nextFocusRight,
                    nextFocusUp: this.props.nextFocusUp,
                    focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                    nativeID: this.props.id ?? this.props.nativeID,
                    testID: this.props.testID,
                    ref: this.props.hostRef
                }, eventHandlersWithoutBlurAndFocus), {
                    children: [
                        /*#__PURE__*/ _react.cloneElement(child, {
                            style: _StyleSheet.default.compose(child.props.style, (_this_state_extraStyles1 = this.state.extraStyles) === null || _this_state_extraStyles1 === void 0 ? void 0 : _this_state_extraStyles1.child)
                        }),
                         false ? /*#__PURE__*/ 0 : null
                    ]
                }));
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._isMounted = true;
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this._isMounted = false;
                if (this._hideTimeout != null) {
                    clearTimeout(this._hideTimeout);
                }
                this.state.pressability.reset();
            }
        }
    ]);
    return TouchableHighlightImpl;
}(_react.Component);
var TouchableHighlight = /*#__PURE__*/ _react.forwardRef((props, hostRef)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableHighlightImpl, _object_spread_props._(_object_spread._({}, props), {
        hostRef: hostRef
    })));
TouchableHighlight.displayName = 'TouchableHighlight';
var _default = TouchableHighlight;


}),
25741: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31040));
var _PressabilityDebug = __webpack_require__(51386);
var _RendererProxy = __webpack_require__(46513);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _ViewNativeComponent = __webpack_require__(99318);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * A wrapper for making views respond properly to touches (Android only).
 * On Android this component uses native state drawable to display touch feedback.
 * At the moment it only supports having a single View instance as a child node,
 * as it's implemented by replacing that View with another instance of RCTView node with some additional properties set.
 *
 * Background drawable of native feedback touchable can be customized with background property.
 *
 * @see https://reactnative.dev/docs/touchablenativefeedback#content
 */ var TouchableNativeFeedback = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableNativeFeedback, _React_Component);
    function TouchableNativeFeedback() {
        _class_call_check._(this, TouchableNativeFeedback);
        var _this;
        _this = _call_super._(this, TouchableNativeFeedback, arguments), _this.state = {
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    _create_class._(TouchableNativeFeedback, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                var accessibilityStateDisabled = this.props['aria-disabled'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled);
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    android_disableSound: this.props.touchSoundDisabled,
                    onLongPress: this.props.onLongPress,
                    onPress: this.props.onPress,
                    onPressIn: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchHotspotUpdate(event);
                            this._dispatchPressedStateChange(true);
                        }
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressMove: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchHotspotUpdate(event);
                        }
                    },
                    onPressOut: (event)=>{
                        if (_Platform.default.OS === 'android') {
                            this._dispatchPressedStateChange(false);
                        }
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            key: "_dispatchPressedStateChange",
            value: function _dispatchPressedStateChange(pressed) {
                if (_Platform.default.OS === 'android') {
                    var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
                    if (hostComponentRef == null) {
                        console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
                    } else {
                        _ViewNativeComponent.Commands.setPressed(hostComponentRef, pressed);
                    }
                }
            }
        },
        {
            key: "_dispatchHotspotUpdate",
            value: function _dispatchHotspotUpdate(event) {
                if (_Platform.default.OS === 'android') {
                    var _event_nativeEvent = event.nativeEvent, locationX = _event_nativeEvent.locationX, locationY = _event_nativeEvent.locationY;
                    var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
                    if (hostComponentRef == null) {
                        console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
                    } else {
                        _ViewNativeComponent.Commands.hotspotUpdate(hostComponentRef, locationX ?? 0, locationY ?? 0);
                    }
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var /*#__PURE__*/ _React;
                var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
                var element = _react.Children.only(this.props.children);
                var children = [
                    element.props.children
                ];
                if (false) {}
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var _accessibilityState = {
                    busy: this.props['aria-busy'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.busy),
                    checked: this.props['aria-checked'] ?? ((_this_props_accessibilityState1 = this.props.accessibilityState) === null || _this_props_accessibilityState1 === void 0 ? void 0 : _this_props_accessibilityState1.checked),
                    disabled: this.props['aria-disabled'] ?? ((_this_props_accessibilityState2 = this.props.accessibilityState) === null || _this_props_accessibilityState2 === void 0 ? void 0 : _this_props_accessibilityState2.disabled),
                    expanded: this.props['aria-expanded'] ?? ((_this_props_accessibilityState3 = this.props.accessibilityState) === null || _this_props_accessibilityState3 === void 0 ? void 0 : _this_props_accessibilityState3.expanded),
                    selected: this.props['aria-selected'] ?? ((_this_props_accessibilityState4 = this.props.accessibilityState) === null || _this_props_accessibilityState4 === void 0 ? void 0 : _this_props_accessibilityState4.selected)
                };
                _accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
                    disabled: this.props.disabled
                }) : _accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return (_React = _react).cloneElement.apply(_React, [
                    element,
                    _object_spread_props._(_object_spread._({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true)), {
                        accessible: this.props.accessible !== false,
                        accessibilityHint: this.props.accessibilityHint,
                        accessibilityLanguage: this.props.accessibilityLanguage,
                        accessibilityLabel: accessibilityLabel,
                        accessibilityRole: this.props.accessibilityRole,
                        accessibilityState: _accessibilityState,
                        accessibilityActions: this.props.accessibilityActions,
                        onAccessibilityAction: this.props.onAccessibilityAction,
                        accessibilityValue: accessibilityValue,
                        importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                        accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                        accessibilityLiveRegion: accessibilityLiveRegion,
                        accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                        hitSlop: this.props.hitSlop,
                        focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                        nativeID: this.props.id ?? this.props.nativeID,
                        nextFocusDown: this.props.nextFocusDown,
                        nextFocusForward: this.props.nextFocusForward,
                        nextFocusLeft: this.props.nextFocusLeft,
                        nextFocusRight: this.props.nextFocusRight,
                        nextFocusUp: this.props.nextFocusUp,
                        onLayout: this.props.onLayout,
                        testID: this.props.testID
                    })
                ].concat(_to_consumable_array._(children)));
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.state.pressability.reset();
            }
        }
    ]);
    return TouchableNativeFeedback;
}(_react.Component);
/**
   * Creates an object that represents android theme's default background for
   * selectable elements (?android:attr/selectableItemBackground).
   *
   * @param rippleRadius The radius of ripple effect
   */ TouchableNativeFeedback.SelectableBackground = (rippleRadius)=>({
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackground',
        rippleRadius
    });
/**
   * Creates an object that represent android theme's default background for borderless
   * selectable elements (?android:attr/selectableItemBackgroundBorderless).
   * Available on android API level 21+.
   *
   * @param rippleRadius The radius of ripple effect
   */ TouchableNativeFeedback.SelectableBackgroundBorderless = (rippleRadius)=>({
        type: 'ThemeAttrAndroid',
        attribute: 'selectableItemBackgroundBorderless',
        rippleRadius
    });
/**
   * Creates an object that represents ripple drawable with specified color (as a
   * string). If property `borderless` evaluates to true the ripple will
   * render outside of the view bounds (see native actionbar buttons as an
   * example of that behavior). This background type is available on Android
   * API level 21+.
   *
   * @param color The ripple color
   * @param borderless If the ripple can render outside it's bounds
   * @param rippleRadius The radius of ripple effect
   */ TouchableNativeFeedback.Ripple = (color, borderless, rippleRadius)=>{
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
        type: 'RippleAndroid',
        // $FlowFixMe[incompatible-type]
        color: processedColor,
        borderless,
        rippleRadius
    };
};
/**
   * Whether `useForeground` is supported.
   */ TouchableNativeFeedback.canUseNativeForeground = ()=>_Platform.default.OS === 'android';
var getBackgroundProp = _Platform.default.OS === 'android' ? /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ (background, useForeground)=>useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
        nativeForegroundAndroid: background
    } : {
        nativeBackgroundAndroid: background
    } : /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ (background, useForeground)=>null;
TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
var _default = TouchableNativeFeedback;


}),
90001: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _Animated = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22644));
var _Easing = /*#__PURE__*/ _interop_require_default._(__webpack_require__(72466));
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31040));
var _PressabilityDebug = __webpack_require__(51386);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * A wrapper for making views respond properly to touches.
 * On press down, the opacity of the wrapped view is decreased, dimming it.
 *
 * Opacity is controlled by wrapping the children in an Animated.View, which is
 * added to the view hierarchy.  Be aware that this can affect layout.
 *
 * Example:
 *
 * ```
 * renderButton: function() {
 *   return (
 *     <TouchableOpacity onPress={this._onPressButton}>
 *       <Image
 *         style={styles.button}
 *         source={require('./myButton.png')}
 *       />
 *     </TouchableOpacity>
 *   );
 * },
 * ```
 * ### Example
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react'
 * import {
 *   AppRegistry,
 *   StyleSheet,
 *   TouchableOpacity,
 *   Text,
 *   View,
 * } from 'react-native'
 *
 * class App extends Component {
 *   state = { count: 0 }
 *
 *   onPress = () => {
 *     this.setState(state => ({
 *       count: state.count + 1
 *     }));
 *   };
 *
 *  render() {
 *    return (
 *      <View style={styles.container}>
 *        <TouchableOpacity
 *          style={styles.button}
 *          onPress={this.onPress}>
 *          <Text> Touch Here </Text>
 *        </TouchableOpacity>
 *        <View style={[styles.countContainer]}>
 *          <Text style={[styles.countText]}>
 *             { this.state.count !== 0 ? this.state.count: null}
 *           </Text>
 *         </View>
 *       </View>
 *     )
 *   }
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     paddingHorizontal: 10
 *   },
 *   button: {
 *     alignItems: 'center',
 *     backgroundColor: '#DDDDDD',
 *     padding: 10
 *   },
 *   countContainer: {
 *     alignItems: 'center',
 *     padding: 10
 *   },
 *   countText: {
 *     color: '#FF00FF'
 *   }
 * })
 *
 * AppRegistry.registerComponent('App', () => App)
 * ```
 *
 */ var TouchableOpacity = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(TouchableOpacity, _React_Component);
    function TouchableOpacity() {
        _class_call_check._(this, TouchableOpacity);
        var _this;
        _this = _call_super._(this, TouchableOpacity, arguments), _this.state = {
            anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
            pressability: new _Pressability.default(_this._createPressabilityConfig())
        };
        return _this;
    }
    _create_class._(TouchableOpacity, [
        {
            key: "_createPressabilityConfig",
            value: function _createPressabilityConfig() {
                var _this_props_accessibilityState;
                return {
                    cancelable: !this.props.rejectResponderTermination,
                    disabled: this.props.disabled ?? this.props['aria-disabled'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.disabled),
                    hitSlop: this.props.hitSlop,
                    delayLongPress: this.props.delayLongPress,
                    delayPressIn: this.props.delayPressIn,
                    delayPressOut: this.props.delayPressOut,
                    minPressDuration: 0,
                    pressRectOffset: this.props.pressRetentionOffset,
                    onBlur: (event)=>{
                        if (_Platform.default.isTV) {
                            this._opacityInactive(250);
                        }
                        if (this.props.onBlur != null) {
                            this.props.onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        if (_Platform.default.isTV) {
                            this._opacityActive(150);
                        }
                        if (this.props.onFocus != null) {
                            this.props.onFocus(event);
                        }
                    },
                    onLongPress: this.props.onLongPress,
                    onPress: this.props.onPress,
                    onPressIn: (event)=>{
                        this._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
                        if (this.props.onPressIn != null) {
                            this.props.onPressIn(event);
                        }
                    },
                    onPressOut: (event)=>{
                        this._opacityInactive(250);
                        if (this.props.onPressOut != null) {
                            this.props.onPressOut(event);
                        }
                    }
                };
            }
        },
        {
            /**
   * Animate the touchable to a new opacity.
   */ key: "_setOpacityTo",
            value: function _setOpacityTo(toValue, duration) {
                _Animated.default.timing(this.state.anim, {
                    toValue,
                    duration,
                    easing: _Easing.default.inOut(_Easing.default.quad),
                    useNativeDriver: true
                }).start();
            }
        },
        {
            key: "_opacityActive",
            value: function _opacityActive(duration) {
                this._setOpacityTo(this.props.activeOpacity ?? 0.2, duration);
            }
        },
        {
            key: "_opacityInactive",
            value: function _opacityInactive(duration) {
                this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
            }
        },
        {
            key: "_getChildStyleOpacityWithDefault",
            value: function _getChildStyleOpacityWithDefault() {
                var _flattenStyle1;
                // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                var opacity = (_flattenStyle1 = (0, _flattenStyle.default)(this.props.style)) === null || _flattenStyle1 === void 0 ? void 0 : _flattenStyle1.opacity;
                return typeof opacity === 'number' ? opacity : 1;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props_accessibilityState, _this_props_accessibilityState1, _this_props_accessibilityState2, _this_props_accessibilityState3, _this_props_accessibilityState4, _this_props_accessibilityValue, _this_props_accessibilityValue1, _this_props_accessibilityValue2, _this_props_accessibilityValue3;
                // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
                // adopting `Pressability`, so preserve that behavior.
                var _this_state_pressability_getEventHandlers = this.state.pressability.getEventHandlers(), onBlur = _this_state_pressability_getEventHandlers.onBlur, onFocus = _this_state_pressability_getEventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(_this_state_pressability_getEventHandlers, [
                    "onBlur",
                    "onFocus"
                ]);
                var _accessibilityState = {
                    busy: this.props['aria-busy'] ?? ((_this_props_accessibilityState = this.props.accessibilityState) === null || _this_props_accessibilityState === void 0 ? void 0 : _this_props_accessibilityState.busy),
                    checked: this.props['aria-checked'] ?? ((_this_props_accessibilityState1 = this.props.accessibilityState) === null || _this_props_accessibilityState1 === void 0 ? void 0 : _this_props_accessibilityState1.checked),
                    disabled: this.props['aria-disabled'] ?? ((_this_props_accessibilityState2 = this.props.accessibilityState) === null || _this_props_accessibilityState2 === void 0 ? void 0 : _this_props_accessibilityState2.disabled),
                    expanded: this.props['aria-expanded'] ?? ((_this_props_accessibilityState3 = this.props.accessibilityState) === null || _this_props_accessibilityState3 === void 0 ? void 0 : _this_props_accessibilityState3.expanded),
                    selected: this.props['aria-selected'] ?? ((_this_props_accessibilityState4 = this.props.accessibilityState) === null || _this_props_accessibilityState4 === void 0 ? void 0 : _this_props_accessibilityState4.selected)
                };
                _accessibilityState = this.props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
                    disabled: this.props.disabled
                }) : _accessibilityState;
                var accessibilityValue = {
                    max: this.props['aria-valuemax'] ?? ((_this_props_accessibilityValue = this.props.accessibilityValue) === null || _this_props_accessibilityValue === void 0 ? void 0 : _this_props_accessibilityValue.max),
                    min: this.props['aria-valuemin'] ?? ((_this_props_accessibilityValue1 = this.props.accessibilityValue) === null || _this_props_accessibilityValue1 === void 0 ? void 0 : _this_props_accessibilityValue1.min),
                    now: this.props['aria-valuenow'] ?? ((_this_props_accessibilityValue2 = this.props.accessibilityValue) === null || _this_props_accessibilityValue2 === void 0 ? void 0 : _this_props_accessibilityValue2.now),
                    text: this.props['aria-valuetext'] ?? ((_this_props_accessibilityValue3 = this.props.accessibilityValue) === null || _this_props_accessibilityValue3 === void 0 ? void 0 : _this_props_accessibilityValue3.text)
                };
                var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
                var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Animated.default.View, _object_spread_props._(_object_spread._({
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityLanguage: this.props.accessibilityLanguage,
                    accessibilityRole: this.props.accessibilityRole,
                    accessibilityState: _accessibilityState,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    accessibilityValue: accessibilityValue,
                    importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
                    accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
                    accessibilityLiveRegion: accessibilityLiveRegion,
                    accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
                    style: [
                        this.props.style,
                        {
                            opacity: this.state.anim
                        }
                    ],
                    nativeID: this.props.id ?? this.props.nativeID,
                    testID: this.props.testID,
                    onLayout: this.props.onLayout,
                    nextFocusDown: this.props.nextFocusDown,
                    nextFocusForward: this.props.nextFocusForward,
                    nextFocusLeft: this.props.nextFocusLeft,
                    nextFocusRight: this.props.nextFocusRight,
                    nextFocusUp: this.props.nextFocusUp,
                    hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                    hitSlop: this.props.hitSlop,
                    focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
                    // $FlowFixMe[prop-missing]
                    ref: this.props.hostRef
                }, eventHandlersWithoutBlurAndFocus), {
                    children: [
                        this.props.children,
                         false ? /*#__PURE__*/ 0 : null
                    ]
                }));
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState) {
                var // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                _flattenStyle1, // $FlowFixMe[underconstrained-implicit-instantiation]
                // $FlowFixMe[prop-missing]
                _flattenStyle2;
                this.state.pressability.configure(this._createPressabilityConfig());
                if (this.props.disabled !== prevProps.disabled || ((_flattenStyle1 = (0, _flattenStyle.default)(prevProps.style)) === null || _flattenStyle1 === void 0 ? void 0 : _flattenStyle1.opacity) !== ((_flattenStyle2 = (0, _flattenStyle.default)(this.props.style)) === null || _flattenStyle2 === void 0 ? void 0 : _flattenStyle2.opacity)) {
                    this._opacityInactive(250);
                }
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.state.pressability.configure(this._createPressabilityConfig());
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.state.pressability.reset();
                this.state.anim.resetAnimation();
            }
        }
    ]);
    return TouchableOpacity;
}(_react.Component);
var Touchable = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TouchableOpacity, _object_spread_props._(_object_spread._({}, props), {
        hostRef: ref
    })));
Touchable.displayName = 'TouchableOpacity';
var _default = Touchable;


}),
99032: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TouchableWithoutFeedback;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _PressabilityDebug = __webpack_require__(51386);
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45178));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var PASSTHROUGH_PROPS = [
    'accessibilityActions',
    'accessibilityElementsHidden',
    'accessibilityHint',
    'accessibilityLanguage',
    'accessibilityIgnoresInvertColors',
    'accessibilityLabel',
    'accessibilityLiveRegion',
    'accessibilityRole',
    'accessibilityValue',
    'aria-valuemax',
    'aria-valuemin',
    'aria-valuenow',
    'aria-valuetext',
    'accessibilityViewIsModal',
    'aria-modal',
    'hitSlop',
    'importantForAccessibility',
    'nativeID',
    'onAccessibilityAction',
    'onBlur',
    'onFocus',
    'onLayout',
    'testID'
];
function TouchableWithoutFeedback(props) {
    var /*#__PURE__*/ _React;
    var _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var disabled = props.disabled, rejectResponderTermination = props.rejectResponderTermination, ariaDisabled = props['aria-disabled'], accessibilityState = props.accessibilityState, hitSlop = props.hitSlop, delayLongPress = props.delayLongPress, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, pressRetentionOffset = props.pressRetentionOffset, touchSoundDisabled = props.touchSoundDisabled, _onBlur = props.onBlur, _onFocus = props.onFocus, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut;
    var pressabilityConfig = (0, _react.useMemo)(()=>({
            cancelable: !rejectResponderTermination,
            disabled: disabled !== null ? disabled : ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            hitSlop: hitSlop,
            delayLongPress: delayLongPress,
            delayPressIn: delayPressIn,
            delayPressOut: delayPressOut,
            minPressDuration: 0,
            pressRectOffset: pressRetentionOffset,
            android_disableSound: touchSoundDisabled,
            onBlur: _onBlur,
            onFocus: _onFocus,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: onPressIn,
            onPressOut: onPressOut
        }), [
        rejectResponderTermination,
        disabled,
        ariaDisabled,
        accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled,
        hitSlop,
        delayLongPress,
        delayPressIn,
        delayPressOut,
        pressRetentionOffset,
        touchSoundDisabled,
        _onBlur,
        _onFocus,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut
    ]);
    var eventHandlers = (0, _usePressability.default)(pressabilityConfig);
    var element = _react.Children.only(props.children);
    var children = [
        element.props.children
    ];
    var ariaLive = props['aria-live'];
    if (false) {}
    var _accessibilityState = {
        busy: props['aria-busy'] ?? ((_props_accessibilityState = props.accessibilityState) === null || _props_accessibilityState === void 0 ? void 0 : _props_accessibilityState.busy),
        checked: props['aria-checked'] ?? ((_props_accessibilityState1 = props.accessibilityState) === null || _props_accessibilityState1 === void 0 ? void 0 : _props_accessibilityState1.checked),
        disabled: props['aria-disabled'] ?? ((_props_accessibilityState2 = props.accessibilityState) === null || _props_accessibilityState2 === void 0 ? void 0 : _props_accessibilityState2.disabled),
        expanded: props['aria-expanded'] ?? ((_props_accessibilityState3 = props.accessibilityState) === null || _props_accessibilityState3 === void 0 ? void 0 : _props_accessibilityState3.expanded),
        selected: props['aria-selected'] ?? ((_props_accessibilityState4 = props.accessibilityState) === null || _props_accessibilityState4 === void 0 ? void 0 : _props_accessibilityState4.selected)
    };
    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
    // adopting `Pressability`, so preserve that behavior.
    var onBlur = eventHandlers.onBlur, onFocus = eventHandlers.onFocus, eventHandlersWithoutBlurAndFocus = _object_without_properties._(eventHandlers, [
        "onBlur",
        "onFocus"
    ]);
    var elementProps = _object_spread_props._(_object_spread._({}, eventHandlersWithoutBlurAndFocus), {
        accessible: props.accessible !== false,
        accessibilityState: props.disabled != null ? _object_spread_props._(_object_spread._({}, _accessibilityState), {
            disabled: props.disabled
        }) : _accessibilityState,
        focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,
        accessibilityElementsHidden: props['aria-hidden'] ?? props.accessibilityElementsHidden,
        importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion,
        nativeID: props.id ?? props.nativeID
    });
    for (var prop of PASSTHROUGH_PROPS){
        if (props[prop] !== undefined) {
            elementProps[prop] = props[prop];
        }
    }
    // $FlowFixMe[incompatible-call]
    return (_React = _react).cloneElement.apply(_React, [
        element,
        elementProps
    ].concat(_to_consumable_array._(children)));
}


}),
34650: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var _processAspectRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5304));
var _processBackgroundImage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33518));
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _processFilter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62354));
var _processFontVariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45989));
var _processTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88823));
var _processTransformOrigin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91166));
var _sizesDiffer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24395));
var colorAttributes = {
    process: _processColor.default
};
var ReactNativeStyleAttributes = {
    /**
   * Layout
   */ alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
        process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    boxSizing: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    /**
   * Shadow
   */ elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
        diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    /**
   * Transform
   */ transform: {
        process: _processTransform.default
    },
    transformOrigin: {
        process: _processTransformOrigin.default
    },
    /**
   * Filter
   */ filter: _NativeReactNativeFeatureFlags.default != null && _ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
        process: _processFilter.default
    },
    /**
   * MixBlendMode
   */ mixBlendMode: true,
    /**
   * Isolation
   */ isolation: true,
    /*
   * BoxShadow
   */ boxShadow: _NativeReactNativeFeatureFlags.default != null && _ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
        process: _processBoxShadow.default
    },
    /**
   * Linear Gradient
   */ experimental_backgroundImage: {
        process: _processBackgroundImage.default
    },
    /**
   * View
   */ backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    cursor: true,
    opacity: true,
    outlineColor: colorAttributes,
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    pointerEvents: true,
    /**
   * Text
   */ color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
        process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    /**
   * Image
   */ overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
};
var _default = ReactNativeStyleAttributes;


}),
87847: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86981));
var _ViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99318));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * The most fundamental component for building a UI, View is a container that
 * supports layout with flexbox, style, some touch handling, and accessibility
 * controls.
 *
 * @see https://reactnative.dev/docs/view
 */ var View = /*#__PURE__*/ _react.forwardRef((_param, forwardedRef)=>{
    var accessibilityElementsHidden = _param.accessibilityElementsHidden, accessibilityLabel = _param.accessibilityLabel, accessibilityLabelledBy = _param.accessibilityLabelledBy, accessibilityLiveRegion = _param.accessibilityLiveRegion, accessibilityState = _param.accessibilityState, accessibilityValue = _param.accessibilityValue, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaHidden = _param['aria-hidden'], ariaLabel = _param['aria-label'], ariaLabelledBy = _param['aria-labelledby'], ariaLive = _param['aria-live'], ariaSelected = _param['aria-selected'], ariaValueMax = _param['aria-valuemax'], ariaValueMin = _param['aria-valuemin'], ariaValueNow = _param['aria-valuenow'], ariaValueText = _param['aria-valuetext'], focusable = _param.focusable, id = _param.id, importantForAccessibility = _param.importantForAccessibility, nativeID = _param.nativeID, tabIndex = _param.tabIndex, otherProps = _object_without_properties._(_param, [
        "accessibilityElementsHidden",
        "accessibilityLabel",
        "accessibilityLabelledBy",
        "accessibilityLiveRegion",
        "accessibilityState",
        "accessibilityValue",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-hidden',
        'aria-label',
        'aria-labelledby',
        'aria-live',
        'aria-selected',
        'aria-valuemax',
        'aria-valuemin',
        'aria-valuenow',
        'aria-valuetext',
        "focusable",
        "id",
        "importantForAccessibility",
        "nativeID",
        "tabIndex"
    ]);
    var hasTextAncestor = _react.useContext(_TextAncestor.default);
    var _accessibilityLabelledBy = (ariaLabelledBy === null || ariaLabelledBy === void 0 ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) ?? accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
            checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
            disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
            selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
        };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
        _accessibilityValue = {
            max: ariaValueMax ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.max),
            min: ariaValueMin ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.min),
            now: ariaValueNow ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.now),
            text: ariaValueText ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.text)
        };
    }
    var actualView = /*#__PURE__*/ (0, _jsxruntime.jsx)(_ViewNativeComponent.default, _object_spread_props._(_object_spread._({}, otherProps), {
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? accessibilityLiveRegion,
        accessibilityLabel: ariaLabel ?? accessibilityLabel,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        accessibilityState: _accessibilityState,
        accessibilityElementsHidden: ariaHidden ?? accessibilityElementsHidden,
        accessibilityLabelledBy: _accessibilityLabelledBy,
        accessibilityValue: _accessibilityValue,
        importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
        nativeID: id ?? nativeID,
        ref: forwardedRef
    }));
    if (hasTextAncestor) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
            value: false,
            children: actualView
        });
    }
    return actualView;
});
View.displayName = 'View';
var _default = View;


}),
55079: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getDevServer;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84925));
var _cachedDevServerURL;
var _cachedFullBundleURL;
var FALLBACK = 'http://localhost:8081/';
function getDevServer() {
    if (_cachedDevServerURL === undefined) {
        var scriptUrl = _NativeSourceCode.default.getConstants().scriptURL;
        var match = scriptUrl.match(/^https?:\/\/.*?\//);
        _cachedDevServerURL = match ? match[0] : null;
        _cachedFullBundleURL = match ? scriptUrl : null;
    }
    return {
        url: _cachedDevServerURL ?? FALLBACK,
        fullBundleUrl: _cachedFullBundleURL,
        bundleLoadedFromServer: _cachedDevServerURL !== null
    };
}


}),
41115: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return openURLInBrowser;
    }
}));
var getDevServer = (__webpack_require__(55079)/* ["default"] */["default"]);
function openURLInBrowser(url) {
    // $FlowFixMe[unused-promise]
    fetch(getDevServer().url + 'open-url', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            url
        })
    });
}


}),
20042: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return parseErrorStack;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var parseHermesStack = (__webpack_require__(26290)/* ["default"] */["default"]);
function convertHermesStack(stack) {
    var frames = [];
    for (var entry of stack.entries){
        if (entry.type !== 'FRAME') {
            continue;
        }
        var location = entry.location, functionName = entry.functionName;
        if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
            continue;
        }
        frames.push({
            methodName: functionName,
            file: location.sourceUrl,
            lineNumber: location.line1Based,
            column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
        });
    }
    return frames;
}
function parseErrorStack(errorStack) {
    if (errorStack == null) {
        return [];
    }
    var stacktraceParser = __webpack_require__(18881);
    var parsedStack = Array.isArray(errorStack) ? errorStack : __webpack_require__.g.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map((frame)=>_object_spread_props._(_object_spread._({}, frame), {
            column: frame.column != null ? frame.column - 1 : null
        }));
    return parsedStack;
}


}),
26290: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return parseHermesStack;
    }
}));
// Capturing groups:
// 1. function name
// 2. is this a native stack frame?
// 3. is this a bytecode address or a source location?
// 4. source URL (filename)
// 5. line number (1 based)
// 6. column number (1 based) or virtual offset (0 based)
var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
// Capturing groups:
// 1. count of skipped frames
var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
var RE_COMPONENT_NO_STACK = /^ {4}at .*$/;
function isInternalBytecodeSourceUrl(sourceUrl) {
    // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100
    return sourceUrl === 'InternalBytecode.js';
}
function parseLine(line) {
    var asFrame = line.match(RE_FRAME);
    if (asFrame) {
        return {
            type: 'FRAME',
            functionName: asFrame[1],
            location: asFrame[2] === 'native' ? {
                type: 'NATIVE'
            } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
                type: 'INTERNAL_BYTECODE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                virtualOffset0Based: Number.parseInt(asFrame[6], 10)
            } : {
                type: 'BYTECODE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                virtualOffset0Based: Number.parseInt(asFrame[6], 10)
            } : {
                type: 'SOURCE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                column1Based: Number.parseInt(asFrame[6], 10)
            }
        };
    }
    var asSkipped = line.match(RE_SKIPPED);
    if (asSkipped) {
        return {
            type: 'SKIPPED',
            count: Number.parseInt(asSkipped[1], 10)
        };
    }
}
function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;
    for(var i = 0; i < lines.length; ++i){
        var line = lines[i];
        if (!line) {
            continue;
        }
        var entry = parseLine(line);
        if (entry) {
            entries.push(entry);
            continue;
        }
        if (RE_COMPONENT_NO_STACK.test(line)) {
            continue;
        }
        // No match - we're still in the message
        lastMessageLine = i;
        entries = [];
    }
    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
        message,
        entries
    };
}


}),
48065: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SyntheticError: function() {
        return SyntheticError;
    },
    default: function() {
        return _default;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _to_consumable_array = __webpack_require__(92716);
var _wrap_native_super = __webpack_require__(30753);
var SyntheticError = /*#__PURE__*/ function(Error1) {
    _inherits._(SyntheticError, Error1);
    function SyntheticError() {
        _class_call_check._(this, SyntheticError);
        var _this;
        _this = _call_super._(this, SyntheticError, arguments), _this.name = '';
        return _this;
    }
    return SyntheticError;
}(_wrap_native_super._(Error));
var userExceptionDecorator;
var inUserExceptionDecorator = false;
// This string is used to decorate an ExtendedError with extra data in select usecases.
// Note that data passed using this method should be strictly contained,
// as data that's not serializable/too large may cause issues with passing the error to the native code.
// TODO(T204185517): We should use a Symbol for this, but jsi through jsc doesn't support it yet.
var decoratedExtraDataKey = 'RN$ErrorExtraDataKey';
/**
 * Allows the app to add information to the exception report before it is sent
 * to native. This API is not final.
 */ function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
}
function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
        inUserExceptionDecorator = true;
        try {
            return userExceptionDecorator(data);
        } catch  {
        // Fall through
        } finally{
            inUserExceptionDecorator = false;
        }
    }
    return data;
}
/**
 * Handles the developer-visible aspect of errors and exceptions
 */ var exceptionID = 0;
function reportException(e, isFatal, reportToConsole) {
    var parseErrorStack = (__webpack_require__(20042)/* ["default"] */["default"]);
    var stack = parseErrorStack(e === null || e === void 0 ? void 0 : e.stack);
    var currentExceptionID = ++exceptionID;
    var originalMessage = e.message || '';
    var message = originalMessage;
    if (e.componentStack != null) {
        message += `\n\nThis error is located at:${e.componentStack}`;
    }
    var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
    if (!message.startsWith(namePrefix)) {
        message = namePrefix + message;
    }
    message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
    // $FlowFixMe[unclear-type]
    var extraData = _object_spread_props._(_object_spread._({}, e[decoratedExtraDataKey]), {
        jsEngine: e.jsEngine,
        rawStack: e.stack
    });
    if (e.cause != null && typeof e.cause === 'object') {
        extraData.stackSymbols = e.cause.stackSymbols;
        extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
        extraData.stackElements = e.cause.stackElements;
    }
    var data = preprocessException({
        message,
        originalMessage: message === originalMessage ? null : originalMessage,
        name: e.name == null || e.name === '' ? null : e.name,
        componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
        stack,
        id: currentExceptionID,
        isFatal,
        extraData
    });
    if (reportToConsole) {
        // we feed back into console.error, to make sure any methods that are
        // monkey patched on top of console.error are called when coming from
        // handleException
        console.error(data.message);
    }
    if (false) { var LogBox } else if (isFatal || e.type !== 'warn') {
        var NativeExceptionsManager = (__webpack_require__(83822)/* ["default"] */["default"]);
        if (NativeExceptionsManager) {
            if (isFatal) {
                var _global_RN$hasHandledFatalException, _global, _global_RN$notifyOfFatalException, _global1;
                if ((_global_RN$hasHandledFatalException = (_global = __webpack_require__.g).RN$hasHandledFatalException) === null || _global_RN$hasHandledFatalException === void 0 ? void 0 : _global_RN$hasHandledFatalException.call(_global)) {
                    return;
                }
                (_global_RN$notifyOfFatalException = (_global1 = __webpack_require__.g).RN$notifyOfFatalException) === null || _global_RN$notifyOfFatalException === void 0 ? void 0 : _global_RN$notifyOfFatalException.call(_global1);
            }
            NativeExceptionsManager.reportException(data);
        }
    }
}
// If we trigger console.error _from_ handleException,
// we do want to make sure that console.error doesn't trigger error reporting again
var inExceptionHandler = false;
/**
 * Logs exceptions to the (native) console and displays them
 */ function handleException(e, isFatal) {
    // TODO(T196834299): We should really use a c++ turbomodule for this
    var reportToConsole = true;
    if (!__webpack_require__.g.RN$handleException || !__webpack_require__.g.RN$handleException(e, isFatal, reportToConsole)) {
        var error;
        if (e instanceof Error) {
            error = e;
        } else {
            // Workaround for reporting errors caused by `throw 'some string'`
            // Unfortunately there is no way to figure out the stacktrace in this
            // case, so if you ended up here trying to trace an error, look for
            // `throw '<error message>'` somewhere in your codebase.
            error = new SyntheticError(e);
        }
        try {
            inExceptionHandler = true;
            /* $FlowFixMe[class-object-subtyping] added when improving typing for this
       * parameters */ // $FlowFixMe[incompatible-call]
            reportException(error, isFatal, reportToConsole);
        } finally{
            inExceptionHandler = false;
        }
    }
}
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ function reactConsoleErrorHandler(...args) {
    var // bubble up to any original handlers
    _console;
    var _global_RN$inExceptionHandler, _global;
    (_console = console)._errorOriginal.apply(_console, _to_consumable_array._(args));
    if (!console.reportErrorsAsExceptions) {
        return;
    }
    if (inExceptionHandler || ((_global_RN$inExceptionHandler = (_global = __webpack_require__.g).RN$inExceptionHandler) === null || _global_RN$inExceptionHandler === void 0 ? void 0 : _global_RN$inExceptionHandler.call(_global))) {
        // The fundamental trick here is that are multiple entry point to logging errors:
        // (see D19743075 for more background)
        //
        // 1. An uncaught exception being caught by the global handler
        // 2. An error being logged throw console.error
        //
        // However, console.error is monkey patched multiple times: by this module, and by the
        // DevTools setup that sends messages to Metro.
        // The patching order cannot be relied upon.
        //
        // So, some scenarios that are handled by this flag:
        //
        // Logging an error:
        // 1. console.error called from user code
        // 2. (possibly) arrives _first_ at DevTool handler, send to Metro
        // 3. Bubbles to here
        // 4. goes into report Exception.
        // 5. should not trigger console.error again, to avoid looping / logging twice
        // 6. should still bubble up to original console
        //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)
        //
        // Throwing an uncaught exception:
        // 1. exception thrown
        // 2. picked up by handleException
        // 3. should be sent to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)
        // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here
        //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)
        // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)
        return;
    }
    var error;
    var firstArg = args[0];
    if (firstArg === null || firstArg === void 0 ? void 0 : firstArg.stack) {
        // reportException will console.error this with high enough fidelity.
        error = firstArg;
    } else {
        var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
        if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
            // React warnings use console.error so that a stack trace is shown, but
            // we don't (currently) want these to show a redbox
            // (Note: Logic duplicated in polyfills/console.js.)
            return;
        }
        var message = args.map((arg)=>typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
        error = new SyntheticError(message);
        error.name = 'console.error';
    }
    var isFatal = false;
    var reportToConsole = false;
    if (!__webpack_require__.g.RN$handleException || !__webpack_require__.g.RN$handleException(error, isFatal, reportToConsole)) {
        reportException(/* $FlowFixMe[class-object-subtyping] added when improving typing for this
       * parameters */ // $FlowFixMe[incompatible-call]
        error, isFatal, reportToConsole);
    }
}
/**
 * Shows a redbox with stacktrace for all console.error messages.  Disable by
 * setting `console.reportErrorsAsExceptions = false;` in your app.
 */ function installConsoleErrorReporter() {
    // Enable reportErrorsAsExceptions
    if (console._errorOriginal) {
        return; // already installed
    }
    // Flow doesn't like it when you set arbitrary values on a global object
    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;
    if (console.reportErrorsAsExceptions === undefined) {
        // Individual apps can disable this
        // Flow doesn't like it when you set arbitrary values on a global object
        console.reportErrorsAsExceptions = true;
    }
}
var ExceptionsManager = {
    decoratedExtraDataKey,
    handleException,
    installConsoleErrorReporter,
    SyntheticError,
    unstable_setExceptionDecorator
};
var _default = ExceptionsManager;


}),
61890: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 'use client';
/**
 * Sets up global variables typical in most JavaScript environments.
 *
 *   1. Global timers (via `setTimeout` etc).
 *   2. Global console object.
 *   3. Hooks for printing stack traces with source maps.
 *
 * Leaves enough room in the environment for implementing your own:
 *
 *   1. Require system.
 *   2. Bridged modules.
 *
 */ 'use strict';
var start = Date.now();
__webpack_require__(29968);
(__webpack_require__(38213)/* ["default"] */["default"])();
__webpack_require__(38078);
__webpack_require__(26087);
__webpack_require__(44339);
if (false) {}
__webpack_require__(46898);
__webpack_require__(20553);
__webpack_require__(5453);
__webpack_require__(13503);
__webpack_require__(9871);
__webpack_require__(48714);
__webpack_require__(75636);
if (false) {}
__webpack_require__(80037);
var GlobalPerformanceLogger = (__webpack_require__(27160)/* ["default"] */["default"]);
// We could just call GlobalPerformanceLogger.markPoint at the top of the file,
// but then we'd be excluding the time it took to require the logger.
// Instead, we just use Date.now and backdate the timestamp.
GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
GlobalPerformanceLogger.markPoint('initializeCore_end');


}),
50029: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var RawEventEmitter = new _EventEmitter.default();
var _default = RawEventEmitter;


}),
74051: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _ExceptionsManager = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(48065));
var ReactFiberErrorDialog = {
    /**
   * Intercept lifecycle errors and ensure they are shown with the correct stack
   * trace within the native redbox component.
   */ showErrorDialog (ref) {
        var componentStack = ref.componentStack, errorValue = ref.error;
        var error;
        // Typically, `errorValue` should be an error. However, other values such as
        // strings (or even null) are sometimes thrown.
        if (errorValue instanceof Error) {
            /* $FlowFixMe[class-object-subtyping] added when improving typing for
       * this parameters */ // $FlowFixMe[incompatible-cast]
            error = errorValue;
        } else if (typeof errorValue === 'string') {
            /* $FlowFixMe[class-object-subtyping] added when improving typing for
       * this parameters */ // $FlowFixMe[incompatible-cast]
            error = new _ExceptionsManager.SyntheticError(errorValue);
        } else {
            /* $FlowFixMe[class-object-subtyping] added when improving typing for
       * this parameters */ // $FlowFixMe[incompatible-cast]
            error = new _ExceptionsManager.SyntheticError('Unspecified error');
        }
        try {
            error.componentStack = componentStack;
            error.isComponentError = true;
        } catch  {
        // Ignored.
        }
        _ExceptionsManager.default.handleException(error, false);
        // Return false here to prevent ReactFiberErrorLogger default behavior of
        // logging error details to console.error. Calls to console.error are
        // automatically routed to the native redbox controller, which we've already
        // done above by calling ExceptionsManager.
        return false;
    }
};
var _default = ReactFiberErrorDialog;


}),
69136: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90399));
var BatchedBridge = (__webpack_require__(63531)/* ["default"] */["default"]);
var Systrace = __webpack_require__(725);
var invariant = __webpack_require__(56481);
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ // These timing constants should be kept in sync with the ones in native ios and
// android `RCTTiming` module.
var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;
// Parallel arrays
var callbacks = [];
var types = [];
var timerIDs = [];
var freeIdxs = [];
var reactNativeMicrotasks = [];
var requestIdleCallbacks = [];
var requestIdleCallbackTimeouts = {};
var GUID = 1;
var errors = [];
var hasEmittedTimeDriftWarning = false;
// Returns a free index if one is available, and the next consecutive index otherwise.
function _getFreeIndex() {
    var freeIdx = freeIdxs.pop();
    if (freeIdx === undefined) {
        return timerIDs.length;
    }
    return freeIdx;
}
function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
}
/**
 * Calls the callback associated with the ID. Also unregister that callback
 * if it was a one time timer (setTimeout), and not unregister it if it was
 * recurring (setInterval).
 */ function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
        console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }
    // timerIndex of -1 means that no timer with that ID exists. There are
    // two situations when this happens, when a garbage timer ID was given
    // and when a previously existing timer was deleted before this callback
    // fired. In both cases we want to ignore the timer id, but in the former
    // case we warn as well.
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
        return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
        console.error('No callback found for timerID ' + timerID);
        return;
    }
    if (false) {}
    // Clear the metadata
    if (type !== 'setInterval') {
        _clearIndex(timerIndex);
    }
    try {
        if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
            callback();
        } else if (type === 'requestAnimationFrame') {
            callback(__webpack_require__.g.performance.now());
        } else if (type === 'requestIdleCallback') {
            callback({
                timeRemaining: function() {
                    // TODO: Optimisation: allow running for longer than one frame if
                    // there are no pending JS calls on the bridge from native. This
                    // would require a way to check the bridge queue synchronously.
                    return Math.max(0, FRAME_DURATION - (__webpack_require__.g.performance.now() - frameTime));
                },
                didTimeout: !!didTimeout
            });
        } else {
            console.error('Tried to call a callback with invalid type: ' + type);
        }
    } catch (e) {
        // Don't rethrow so that we can run all timers.
        errors.push(e);
    }
    if (false) {}
}
/**
 * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether
 * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).
 */ function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
        return false;
    }
    if (false) {}
    // The main reason to extract a single pass is so that we can track
    // in the system trace
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];
    // Use for loop rather than forEach as per @vjeux's advice
    // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051
    for(var i = 0; i < passReactNativeMicrotasks.length; ++i){
        _callTimer(passReactNativeMicrotasks[i], 0);
    }
    if (false) {}
    return reactNativeMicrotasks.length > 0;
}
function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    freeIdxs.push(i);
}
function _freeCallback(timerID) {
    // timerIDs contains nulls after timers have been removed;
    // ignore nulls upfront so indexOf doesn't find them
    if (timerID == null) {
        return;
    }
    var index = timerIDs.indexOf(timerID);
    // See corresponding comment in `callTimers` for reasoning behind this
    if (index !== -1) {
        var type = types[index];
        _clearIndex(index);
        if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
            deleteTimer(timerID);
        }
    }
}
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ var JSTimers = {
    /**
   * @param {function} func Callback to be invoked after `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setTimeout: function(func, duration, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'setTimeout');
        createTimer(id, duration || 0, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setInterval: function(func, duration, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'setInterval');
        createTimer(id, duration || 0, Date.now(), /* recurring */ true);
        return id;
    },
    /**
   * The React Native microtask mechanism is used to back public APIs e.g.
   * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by
   * the Promise polyfill) when the JSVM microtask mechanism is not used.
   *
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */ queueReactNativeMicrotask: function(func, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'queueReactNativeMicrotask');
        reactNativeMicrotasks.push(id);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame.
   */ requestAnimationFrame: function(func) {
        var id = _allocateCallback(func, 'requestAnimationFrame');
        createTimer(id, 1, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame and provided
   * with time remaining in frame.
   * @param {?object} options
   */ requestIdleCallback: function(func, options) {
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(true);
        }
        var timeout = options && options.timeout;
        var id = _allocateCallback(timeout != null ? (deadline)=>{
            var timeoutId = requestIdleCallbackTimeouts[id];
            if (timeoutId) {
                JSTimers.clearTimeout(timeoutId);
                delete requestIdleCallbackTimeouts[id];
            }
            return func(deadline);
        } : func, 'requestIdleCallback');
        requestIdleCallbacks.push(id);
        if (timeout != null) {
            var timeoutId = JSTimers.setTimeout(()=>{
                var index = requestIdleCallbacks.indexOf(id);
                if (index > -1) {
                    requestIdleCallbacks.splice(index, 1);
                    _callTimer(id, __webpack_require__.g.performance.now(), true);
                }
                delete requestIdleCallbackTimeouts[id];
                if (requestIdleCallbacks.length === 0) {
                    setSendIdleEvents(false);
                }
            }, timeout);
            requestIdleCallbackTimeouts[id] = timeoutId;
        }
        return id;
    },
    cancelIdleCallback: function(timerID) {
        _freeCallback(timerID);
        var index = requestIdleCallbacks.indexOf(timerID);
        if (index !== -1) {
            requestIdleCallbacks.splice(index, 1);
        }
        var timeoutId = requestIdleCallbackTimeouts[timerID];
        if (timeoutId) {
            JSTimers.clearTimeout(timeoutId);
            delete requestIdleCallbackTimeouts[timerID];
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
    },
    clearTimeout: function(timerID) {
        _freeCallback(timerID);
    },
    clearInterval: function(timerID) {
        _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function(timerID) {
        _freeCallback(timerID);
        var index = reactNativeMicrotasks.indexOf(timerID);
        if (index !== -1) {
            reactNativeMicrotasks.splice(index, 1);
        }
    },
    cancelAnimationFrame: function(timerID) {
        _freeCallback(timerID);
    },
    /**
   * This is called from the native side. We are passed an array of timerIDs,
   * and
   */ callTimers: function(timersToCall) {
        invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
        errors.length = 0;
        for(var i = 0; i < timersToCall.length; i++){
            _callTimer(timersToCall[i], 0);
        }
        var errorCount = errors.length;
        if (errorCount > 0) {
            if (errorCount > 1) {
                // Throw all the other errors in a setTimeout, which will throw each
                // error one at a time
                for(var ii = 1; ii < errorCount; ii++){
                    JSTimers.setTimeout(((error)=>{
                        throw error;
                    }).bind(null, errors[ii]), 0);
                }
            }
            throw errors[0];
        }
    },
    callIdleCallbacks: function(frameTime) {
        if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
            return;
        }
        errors.length = 0;
        if (requestIdleCallbacks.length > 0) {
            var passIdleCallbacks = requestIdleCallbacks;
            requestIdleCallbacks = [];
            for(var i = 0; i < passIdleCallbacks.length; ++i){
                _callTimer(passIdleCallbacks[i], frameTime);
            }
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
        errors.forEach((error)=>JSTimers.setTimeout(()=>{
                throw error;
            }, 0));
    },
    /**
   * This is called after we execute any command we receive from native but
   * before we hand control back to native.
   */ callReactNativeMicrotasks () {
        errors.length = 0;
        while(_callReactNativeMicrotasksPass()){}
        errors.forEach((error)=>JSTimers.setTimeout(()=>{
                throw error;
            }, 0));
    },
    /**
   * Called from native (in development) when environment times are out-of-sync.
   */ emitTimeDriftWarning (warningMessage) {
        if (hasEmittedTimeDriftWarning) {
            return;
        }
        hasEmittedTimeDriftWarning = true;
        console.warn(warningMessage);
    }
};
function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
}
function deleteTimer(timerID) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
}
function setSendIdleEvents(sendIdleEvents) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
}
var ExportedJSTimers;
if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    // $FlowFixMe[prop-missing] : we can assume timers are generally available
    ExportedJSTimers = {
        callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
        queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
} else {
    ExportedJSTimers = JSTimers;
}
BatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
var _default = ExportedJSTimers;


}),
76869: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearImmediate: function() {
        return clearImmediate;
    },
    setImmediate: function() {
        return setImmediate;
    }
});
// Globally Unique Immediate ID.
var GUIID = 1;
// A global set of the currently cleared immediates.
var clearedImmediates = new Set();
function setImmediate(callback, ...args) {
    if (arguments.length < 1) {
        throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    // This is an edgey case in which the sequentially assigned ID has been
    // "guessed" and "cleared" ahead of time, so we need to clear it up first.
    if (clearedImmediates.has(id)) {
        clearedImmediates.delete(id);
    }
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(()=>{
        if (!clearedImmediates.has(id)) {
            callback.apply(undefined, args);
        } else {
            // Free up the Set entry.
            clearedImmediates.delete(id);
        }
    });
    return id;
}
function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
}


}),
73370: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return queueMicrotask;
    }
}));
var resolvedPromise;
function queueMicrotask(callback) {
    if (arguments.length < 1) {
        throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The argument to queueMicrotask must be a function.');
    }
    // Try to reuse a lazily allocated resolved promise from closure.
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch((error)=>// Report the exception until the next tick.
        setTimeout(()=>{
            throw error;
        }, 0));
}


}),
26087: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var _global_HermesInternal_hasPromise, _global_HermesInternal, _global;
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up Promise. The native Promise implementation throws the following error:
 * ERROR: Event loop not supported.
 *
 * If you don't need these polyfills, don't use InitializeCore; just directly
 * require the modules you need from InitializeCore for setup.
 */ // If global.Promise is provided by Hermes, we are confident that it can provide
// all the methods needed by React Native, so we can directly use it.
if ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : (_global_HermesInternal = _global.HermesInternal) === null || _global_HermesInternal === void 0 ? void 0 : (_global_HermesInternal_hasPromise = _global_HermesInternal.hasPromise) === null || _global_HermesInternal_hasPromise === void 0 ? void 0 : _global_HermesInternal_hasPromise.call(_global_HermesInternal)) {
    var HermesPromise = __webpack_require__.g.Promise;
    if (false) { var _global_HermesInternal_enablePromiseRejectionTracker, _global_HermesInternal1 }
} else {
    polyfillGlobal('Promise', ()=>(__webpack_require__(68717)/* ["default"] */["default"]));
}


}),
23882: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var registerCallableModule = function() {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        return (name, moduleOrFactory)=>{
            if (typeof moduleOrFactory === 'function') {
                __webpack_require__.g.RN$registerCallableModule(name, moduleOrFactory);
                return;
            }
            __webpack_require__.g.RN$registerCallableModule(name, ()=>moduleOrFactory);
        };
    }
    var BatchedBridge = (__webpack_require__(63531)/* ["default"] */["default"]);
    return (name, moduleOrFactory)=>{
        if (typeof moduleOrFactory === 'function') {
            BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
            return;
        }
        BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
}();
var _default = registerCallableModule;


}),
13503: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up alert().
 * You can use this module directly, or just require InitializeCore.
 */ if (!__webpack_require__.g.alert) {
    __webpack_require__.g.alert = function(text) {
        // Require Alert on demand. Requiring it too early can lead to issues
        // with things like Platform not being fully initialized.
        (__webpack_require__(8306)/* ["default"].alert */["default"].alert)('Alert', '' + text);
    };
}


}),
48714: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23882));
(0, _registerCallableModule.default)('Systrace', ()=>__webpack_require__(725));
if (!(__webpack_require__.g.RN$Bridgeless === true)) {
    (0, _registerCallableModule.default)('JSTimers', ()=>(__webpack_require__(69136)/* ["default"] */["default"]));
}
(0, _registerCallableModule.default)('RCTLog', ()=>(__webpack_require__(86053)/* ["default"] */["default"]));
(0, _registerCallableModule.default)('RCTDeviceEventEmitter', ()=>(__webpack_require__(75296)/* ["default"] */["default"]));
(0, _registerCallableModule.default)('RCTNativeAppEventEmitter', ()=>(__webpack_require__(61971)/* ["default"] */["default"]));
(0, _registerCallableModule.default)('GlobalPerformanceLogger', ()=>(__webpack_require__(27160)/* ["default"] */["default"]));
if (false) {} else {
    (0, _registerCallableModule.default)('HMRClient', ()=>(__webpack_require__(49646)/* ["default"] */["default"]));
}


}),
46898: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
if (__webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling !== true) {
    /**
   * Sets up the console and exception handling (redbox) for React Native.
   * You can use this module directly, or just require InitializeCore.
   */ var ExceptionsManager = (__webpack_require__(48065)/* ["default"] */["default"]);
    ExceptionsManager.installConsoleErrorReporter();
    // Set up error handler
    if (!__webpack_require__.g.__fbDisableExceptionsManager) {
        var handleError = (e, isFatal)=>{
            try {
                ExceptionsManager.handleException(e, isFatal);
            } catch (ee) {
                console.log('Failed to print error: ', ee.message);
                throw e;
            }
        };
        var ErrorUtils = (__webpack_require__(78549)/* ["default"] */["default"]);
        ErrorUtils.setGlobalHandler(handleError);
    }
}


}),
29968: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 'use client';
'use strict';
/**
 * Sets up global variables for React Native.
 * You can use this module directly, or just require InitializeCore.
 */ if (__webpack_require__.g.window === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.window = __webpack_require__.g;
}
if (__webpack_require__.g.self === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.self = __webpack_require__.g;
}
// Set up process
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process = __webpack_require__.g.process || {};
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process.env = __webpack_require__.g.process.env || {};
if (!__webpack_require__.g.process.env.NODE_ENV) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.process.env.NODE_ENV =  false ? 0 : 'production';
}


}),
9871: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var polyfillObjectProperty = (__webpack_require__(23223)/* .polyfillObjectProperty */.polyfillObjectProperty);
var navigator = __webpack_require__.g.navigator;
if (navigator === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.navigator = {
        product: 'ReactNative'
    };
} else {
    // see https://github.com/facebook/react-native/issues/10881
    polyfillObjectProperty(navigator, 'product', ()=>'ReactNative');
}


}),
38078: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _Performance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2453));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
// In case if the native implementation of the Performance API is available, use it,
// otherwise fall back to the legacy/default one, which only defines 'Performance.now()'
if (_NativePerformance.default) {
    // $FlowExpectedError[cannot-write]
    __webpack_require__.g.performance = new _Performance.default();
} else {
    if (!__webpack_require__.g.performance) {
        // $FlowExpectedError[cannot-write]
        __webpack_require__.g.performance = {
            mark: ()=>{},
            measure: ()=>{},
            now: ()=>{
                var performanceNow = __webpack_require__.g.nativePerformanceNow || Date.now;
                return performanceNow();
            }
        };
    }
}


}),
20553: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var hasNativeConstructor = (__webpack_require__(65410)/* .hasNativeConstructor */.hasNativeConstructor);
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up regenerator.
 * You can use this module directly, or just require InitializeCore.
 */ var hasNativeGenerator;
try {
    // If this function was lowered by regenerator-transform, it will try to
    // access `global.regeneratorRuntime` which doesn't exist yet and will throw.
    hasNativeGenerator = hasNativeConstructor(function*() {}, 'GeneratorFunction');
} catch  {
    // In this case, we know generators are not provided natively.
    hasNativeGenerator = false;
}
// If generators are provided natively, which suggests that there was no
// regenerator-transform, then there is no need to set up the runtime.
if (!hasNativeGenerator) {
    polyfillGlobal('regeneratorRuntime', ()=>{
        // The require just sets up the global, so make sure when we first
        // invoke it the global does not exist
        delete __webpack_require__.g.regeneratorRuntime;
        // regenerator-runtime/runtime exports the regeneratorRuntime object, so we
        // can return it safely.
        return __webpack_require__(74655); // flowlint-line untyped-import:off
    });
}


}),
75636: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up SegmentFetcher.
 * You can use this module directly, or just require InitializeCore.
 */ function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = (__webpack_require__(64978)/* ["default"] */["default"]);
    SegmentFetcher.fetchSegment(segmentId, options, (errorObject)=>{
        if (errorObject) {
            var error = new Error(errorObject.message);
            error.code = errorObject.code; // flowlint-line unclear-type: off
            callback(error);
            return;
        }
        callback(null);
    });
}
__webpack_require__.g.__fetchSegment = __fetchSegment;


}),
44339: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
if (false) {}
// In bridgeless mode, timers are host functions installed from cpp.
if (__webpack_require__.g.RN$Bridgeless === true) {
    // This is the flag that tells React to use `queueMicrotask` to batch state
    // updates, instead of using the scheduler to schedule a regular task.
    // We use a global variable because we don't currently have any other
    // mechanism to pass feature flags from RN to React in OSS.
    __webpack_require__.g.RN$enableMicrotasksInReact = true;
    polyfillGlobal('queueMicrotask', ()=>(__webpack_require__(24887)/* ["default"].queueMicrotask */["default"].queueMicrotask));
    // We shim the immediate APIs via `queueMicrotask` to maintain the backward
    // compatibility.
    polyfillGlobal('setImmediate', ()=>(__webpack_require__(76869)/* .setImmediate */.setImmediate));
    polyfillGlobal('clearImmediate', ()=>(__webpack_require__(76869)/* .clearImmediate */.clearImmediate));
    polyfillGlobal('requestIdleCallback', ()=>(__webpack_require__(10792)/* ["default"].requestIdleCallback */["default"].requestIdleCallback));
    polyfillGlobal('cancelIdleCallback', ()=>(__webpack_require__(10792)/* ["default"].cancelIdleCallback */["default"].cancelIdleCallback));
} else {
    /**
   * Set up timers.
   * You can use this module directly, or just require InitializeCore.
   */ var defineLazyTimer = (name)=>{
        polyfillGlobal(name, ()=>(__webpack_require__(69136)/* ["default"] */["default"])[name]);
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
    // Polyfill it with promise (regardless it's polyfilled or native) otherwise.
    polyfillGlobal('queueMicrotask', ()=>(__webpack_require__(73370)/* ["default"] */["default"]));
    // When promise was polyfilled hence is queued to the RN microtask queue,
    // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.
    // Note that in bridgeless mode, immediate APIs are installed from cpp.
    polyfillGlobal('setImmediate', ()=>(__webpack_require__(69136)/* ["default"].queueReactNativeMicrotask */["default"].queueReactNativeMicrotask));
    polyfillGlobal('clearImmediate', ()=>(__webpack_require__(69136)/* ["default"].clearReactNativeMicrotask */["default"].clearReactNativeMicrotask));
}


}),
5453: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up XMLHttpRequest. The native XMLHttpRequest in Chrome dev tools is CORS
 * aware and won't let you fetch anything from the internet.
 *
 * You can use this module directly, or just require InitializeCore.
 */ polyfillGlobal('XMLHttpRequest', ()=>(__webpack_require__(47644)/* ["default"] */["default"]));
polyfillGlobal('FormData', ()=>(__webpack_require__(38834)/* ["default"] */["default"]));
polyfillGlobal('fetch', ()=>(__webpack_require__(67006)/* .fetch */.fetch));
polyfillGlobal('Headers', ()=>(__webpack_require__(67006)/* .Headers */.Headers));
polyfillGlobal('Request', ()=>(__webpack_require__(67006)/* .Request */.Request));
polyfillGlobal('Response', ()=>(__webpack_require__(67006)/* .Response */.Response));
polyfillGlobal('WebSocket', ()=>(__webpack_require__(9188)/* ["default"] */["default"]));
polyfillGlobal('Blob', ()=>(__webpack_require__(56540)/* ["default"] */["default"]));
polyfillGlobal('File', ()=>(__webpack_require__(85403)/* ["default"] */["default"]));
polyfillGlobal('FileReader', ()=>(__webpack_require__(98175)/* ["default"] */["default"]));
polyfillGlobal('URL', ()=>(__webpack_require__(30787)/* .URL */.URL));
polyfillGlobal('URLSearchParams', ()=>(__webpack_require__(30787)/* .URLSearchParams */.URLSearchParams));
polyfillGlobal('AbortController', ()=>(__webpack_require__(33352)/* .AbortController */.AbortController));
polyfillGlobal('AbortSignal', ()=>(__webpack_require__(33352)/* .AbortSignal */.AbortSignal));


}),
75296: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _Systrace = __webpack_require__(725);
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
// FIXME: use typed events
/* $FlowFixMe[unclear-type] unclear type of events */ /**
 * Global EventEmitter used by the native platform to emit events to JavaScript.
 * Events are identified by globally unique event names.
 *
 * NativeModules that emit events should instead subclass `NativeEventEmitter`.
 */ var RCTDeviceEventEmitterImpl = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(RCTDeviceEventEmitterImpl, EventEmitter);
    function RCTDeviceEventEmitterImpl() {
        _class_call_check._(this, RCTDeviceEventEmitterImpl);
        return _call_super._(this, RCTDeviceEventEmitterImpl, arguments);
    }
    _create_class._(RCTDeviceEventEmitterImpl, [
        {
            // Add systrace to RCTDeviceEventEmitter.emit method for debugging
            key: "emit",
            value: function emit(eventType, ...args) {
                var _$_get;
                (0, _Systrace.beginEvent)(()=>`RCTDeviceEventEmitter.emit#${eventType}`);
                (_$_get = _get._(_get_prototype_of._(RCTDeviceEventEmitterImpl.prototype), "emit", this)).call.apply(_$_get, [
                    this,
                    eventType
                ].concat(_to_consumable_array._(args)));
                (0, _Systrace.endEvent)();
            }
        }
    ]);
    return RCTDeviceEventEmitterImpl;
}(_EventEmitter.default);
var RCTDeviceEventEmitter = new RCTDeviceEventEmitterImpl();
Object.defineProperty(__webpack_require__.g, '__rctDeviceEventEmitter', {
    configurable: true,
    value: RCTDeviceEventEmitter
});
var _default = RCTDeviceEventEmitter;


}),
85307: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23882));
var RCTEventEmitter = {
    register (eventEmitter) {
        (0, _registerCallableModule.default)('RCTEventEmitter', eventEmitter);
    }
};
var _default = RCTEventEmitter;


}),
61971: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
/**
 * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
 * adding all event listeners directly to RCTNativeAppEventEmitter.
 */ var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
var _default = RCTNativeAppEventEmitter;


}),
63948: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Make sure global Event is defined
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _EventPolyfill = /*#__PURE__*/ _interop_require_default._(__webpack_require__(71447));
var CustomEvent = /*#__PURE__*/ function(EventPolyfill) {
    "use strict";
    _inherits._(CustomEvent, EventPolyfill);
    function CustomEvent(typeArg, options) {
        _class_call_check._(this, CustomEvent);
        var _this;
        var bubbles = options.bubbles, cancelable = options.cancelable, composed = options.composed;
        _this = _call_super._(this, CustomEvent, [
            typeArg,
            {
                bubbles,
                cancelable,
                composed
            }
        ]);
        _this.detail = options.detail; // this would correspond to `NativeEvent` in NativeSyntheticEvent
        return _this;
    }
    return CustomEvent;
}(_EventPolyfill.default);
var _default = CustomEvent;


}),
71447: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // https://dom.spec.whatwg.org/#dictdef-eventinit
/**
 * This is a copy of the Event interface defined in Flow:
 * https://github.com/facebook/flow/blob/741104e69c43057ebd32804dd6bcc1b5e97548ea/lib/dom.js
 * which is itself a faithful interface of the W3 spec:
 * https://dom.spec.whatwg.org/#interface-event
 *
 * Since Flow assumes that Event is provided and is on the global object,
 * we must provide an implementation of Event for CustomEvent (and future
 * alignment of React Native's event system with the W3 spec).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var EventPolyfill = /*#__PURE__*/ function() {
    "use strict";
    function EventPolyfill(type, eventInitDict) {
        _class_call_check._(this, EventPolyfill);
        this.type = type;
        this.bubbles = !!((eventInitDict === null || eventInitDict === void 0 ? void 0 : eventInitDict.bubbles) || false);
        this.cancelable = !!((eventInitDict === null || eventInitDict === void 0 ? void 0 : eventInitDict.cancelable) || false);
        this.composed = !!((eventInitDict === null || eventInitDict === void 0 ? void 0 : eventInitDict.composed) || false);
        this.scoped = !!((eventInitDict === null || eventInitDict === void 0 ? void 0 : eventInitDict.scoped) || false);
        // TODO: somehow guarantee that only "private" instantiations of Event
        // can set this to true
        this.isTrusted = false;
        // TODO: in the future we'll want to make sure this has the same
        // time-basis as events originating from native
        this.timeStamp = Date.now();
        this.defaultPrevented = false;
        // https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase
        this.NONE = 0;
        this.AT_TARGET = 1;
        this.BUBBLING_PHASE = 2;
        this.CAPTURING_PHASE = 3;
        this.eventPhase = this.NONE;
        // $FlowFixMe
        this.currentTarget = null;
        // $FlowFixMe
        this.target = null;
        // $FlowFixMe
        this.srcElement = null;
    }
    _create_class._(EventPolyfill, [
        {
            key: "composedPath",
            value: function composedPath() {
                throw new Error('TODO: not yet implemented');
            }
        },
        {
            key: "preventDefault",
            value: function preventDefault() {
                this.defaultPrevented = true;
                if (this._syntheticEvent != null) {
                    // $FlowFixMe
                    this._syntheticEvent.preventDefault();
                }
            }
        },
        {
            key: "initEvent",
            value: function initEvent(type, bubbles, cancelable) {
                throw new Error('TODO: not yet implemented. This method is also deprecated.');
            }
        },
        {
            key: "stopImmediatePropagation",
            value: function stopImmediatePropagation() {
                throw new Error('TODO: not yet implemented');
            }
        },
        {
            key: "stopPropagation",
            value: function stopPropagation() {
                if (this._syntheticEvent != null) {
                    // $FlowFixMe
                    this._syntheticEvent.stopPropagation();
                }
            }
        },
        {
            key: "setSyntheticEvent",
            value: function setSyntheticEvent(value) {
                this._syntheticEvent = value;
            }
        }
    ]);
    return EventPolyfill;
}();
// Assertion magic for polyfill follows.
// eslint-disable-line no-unused-vars
/*::
// This can be a strict mode error at runtime so put it in a Flow comment.
(checkEvent: IEvent);
*/ __webpack_require__.g.Event = EventPolyfill;
var _default = EventPolyfill;


}),
84669: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var AssetRegistry = __webpack_require__(9582);
module.exports = AssetRegistry;


}),
77127: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var PixelRatio = (__webpack_require__(52712)/* ["default"] */["default"]);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var _require = __webpack_require__(95846), getAndroidResourceFolderName = _require.getAndroidResourceFolderName, getAndroidResourceIdentifier = _require.getAndroidResourceIdentifier, getBasePath = _require.getBasePath;
var invariant = __webpack_require__(56481);
/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */ function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */ function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
}
/**
 * Returns true if the asset can be loaded over the network.
 *
 * This prevents an issue loading XML assets on Android. XML asset types like
 * vector drawables can only be loaded from precompiled source. Android does
 * not support loading these over the network, and AAPT precompiles data by
 * breaking path data and resource information apart into multiple files,
 * stuffing it all into the resource table. As a result, we should only attempt
 * to load resources as we would in release builds: by the resource name.
 *
 * For more information, see:
 * https://issuetracker.google.com/issues/62435069
 * https://issuetracker.google.com/issues/68293189
 */ function assetSupportsNetworkLoads(asset) {
    return !(asset.type === 'xml' && Platform.OS === 'android');
}
var AssetSourceResolver = /*#__PURE__*/ function() {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        _class_call_check._(this, AssetSourceResolver);
        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
    }
    _create_class._(AssetSourceResolver, [
        {
            key: "isLoadedFromServer",
            value: function isLoadedFromServer() {
                return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
            }
        },
        {
            key: "isLoadedFromFileSystem",
            value: function isLoadedFromFileSystem() {
                var _this_jsbundleUrl;
                return this.jsbundleUrl != null && ((_this_jsbundleUrl = this.jsbundleUrl) === null || _this_jsbundleUrl === void 0 ? void 0 : _this_jsbundleUrl.startsWith('file://'));
            }
        },
        {
            key: "defaultAsset",
            value: function defaultAsset() {
                if (this.isLoadedFromServer()) {
                    return this.assetServerURL();
                }
                if (this.asset.resolver != null) {
                    return this.getAssetUsingResolver(this.asset.resolver);
                }
                if (Platform.OS === 'android') {
                    return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                } else {
                    return this.scaledAssetURLNearBundle();
                }
            }
        },
        {
            key: "getAssetUsingResolver",
            value: function getAssetUsingResolver(resolver) {
                switch(resolver){
                    case 'android':
                        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                    case 'generic':
                        return this.scaledAssetURLNearBundle();
                    default:
                        throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify([
                            'android',
                            'generic'
                        ], null, '\t'));
                }
            }
        },
        {
            /**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */ key: "assetServerURL",
            value: function assetServerURL() {
                invariant(this.serverUrl != null, 'need server to load from');
                return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
            }
        },
        {
            /**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetPath",
            value: function scaledAssetPath() {
                return this.fromSource(getScaledAssetPath(this.asset));
            }
        },
        {
            /**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetURLNearBundle",
            value: function scaledAssetURLNearBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(// Assets can have relative paths outside of the project root.
                // When bundling them we replace `../` with `_` to make sure they
                // don't end up outside of the expected assets directory.
                path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
            }
        },
        {
            /**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */ key: "resourceIdentifierWithoutScale",
            value: function resourceIdentifierWithoutScale() {
                invariant(Platform.OS === 'android', 'resource identifiers work on Android');
                return this.fromSource(getAndroidResourceIdentifier(this.asset));
            }
        },
        {
            /**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */ key: "drawableFolderInBundle",
            value: function drawableFolderInBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
            }
        },
        {
            key: "fromSource",
            value: function fromSource(source) {
                return {
                    __packager_asset: true,
                    width: this.asset.width,
                    height: this.asset.height,
                    uri: source,
                    scale: pickScale(this.asset.scales, PixelRatio.get())
                };
            }
        }
    ]);
    return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
var _default = AssetSourceResolver;


}),
93421: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getUrlCacheBreaker: function() {
        return getUrlCacheBreaker;
    },
    pickScale: function() {
        return pickScale;
    },
    setUrlCacheBreaker: function() {
        return setUrlCacheBreaker;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _PixelRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(52712));
var cacheBreaker;
var warnIfCacheBreakerUnset = true;
function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale ?? _PixelRatio.default.get();
    // Packager guarantees that `scales` array is sorted
    for(var i = 0; i < scales.length; i++){
        if (scales[i] >= requiredDeviceScale) {
            return scales[i];
        }
    }
    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
}
function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
}
function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
        if (false) {}
        return '';
    }
    return cacheBreaker;
}


}),
24451: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86981));
var _ImageAnalyticsTagContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80398));
var _ImageInjection = __webpack_require__(18746);
var _ImageSourceUtils = __webpack_require__(70701);
var _ImageUtils = __webpack_require__(56634);
var _ImageViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61965));
var _NativeImageLoaderAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12687));
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63980));
var _TextInlineImageNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(71834));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ function getSize(url, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSize(url);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then((sizes)=>success(sizes.width, sizes.height)).catch(failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ function getSizeWithHeaders(url, headers, success, failure) {
    var promise = _NativeImageLoaderAndroid.default.getSizeWithHeaders(url, headers);
    if (typeof success !== 'function') {
        return promise;
    }
    promise.then((sizes)=>success(sizes.width, sizes.height)).catch(failure || function() {
        console.warn('Failed to get size for image: ' + url);
    });
}
function prefetchWithMetadata(url, queryRootName, rootTag, callback) {
    // TODO: T79192300 Log queryRootName and rootTag
    return prefetch(url, callback);
}
function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
}
function abortPrefetch(requestId) {
    _NativeImageLoaderAndroid.default.abortRequest(requestId);
}
function queryCache(urls) {
    return _queryCache.apply(this, arguments);
}
function _queryCache() {
    _queryCache = /**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ _async_to_generator._(function*(urls) {
        return _NativeImageLoaderAndroid.default.queryCache(urls);
    });
    return _queryCache.apply(this, arguments);
}
/**
 * A React component for displaying different types of images,
 * including network images, static resources, temporary local images, and
 * images from local disk, such as the camera roll.
 *
 * See https://reactnative.dev/docs/image
 */ var BaseImage = /*#__PURE__*/ _react.forwardRef((props, forwardedRef)=>{
    var _source_, _props_accessibilityState, _props_accessibilityState1, _props_accessibilityState2, _props_accessibilityState3, _props_accessibilityState4;
    var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
        uri: undefined,
        width: undefined,
        height: undefined
    };
    var defaultSource = (0, _resolveAssetSource.default)(props.defaultSource);
    var loadingIndicatorSource = (0, _resolveAssetSource.default)(props.loadingIndicatorSource);
    if (props.children != null) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    if (props.defaultSource != null && props.loadingIndicatorSource != null) {
        throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }
    var style;
    var sources;
    if (Array.isArray(source)) {
        style = [
            styles.base,
            props.style
        ];
        sources = source;
    } else {
        var uri = source.uri;
        if (uri === '') {
            console.warn('source.uri should not be an empty string');
        }
        var width = source.width ?? props.width;
        var height = source.height ?? props.height;
        style = [
            {
                width,
                height
            },
            styles.base,
            props.style
        ];
        sources = [
            source
        ];
    }
    var onLoadStart = props.onLoadStart, onLoad = props.onLoad, onLoadEnd = props.onLoadEnd, onError = props.onError;
    var nativeProps = _object_spread_props._(_object_spread._({}, props), {
        style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        // Both iOS and C++ sides expect to have "source" prop, whereas on Android it's "src"
        // (for historical reasons). So in the latter case we populate both "src" and "source",
        // in order to have a better alignment between platforms in the future.
        src: sources,
        source: sources,
        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
       * when making Flow check .android.js files. */ headers: (source === null || source === void 0 ? void 0 : (_source_ = source[0]) === null || _source_ === void 0 ? void 0 : _source_.headers) || (source === null || source === void 0 ? void 0 : source.headers),
        defaultSource: defaultSource ? defaultSource.uri : null,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
        accessibilityLabel: props['aria-label'] ?? props.accessibilityLabel ?? props.alt,
        accessibilityLabelledBy: (props === null || props === void 0 ? void 0 : props['aria-labelledby']) ?? (props === null || props === void 0 ? void 0 : props.accessibilityLabelledBy),
        accessible: props.alt !== undefined ? true : props.accessible,
        accessibilityState: {
            busy: props['aria-busy'] ?? ((_props_accessibilityState = props.accessibilityState) === null || _props_accessibilityState === void 0 ? void 0 : _props_accessibilityState.busy),
            checked: props['aria-checked'] ?? ((_props_accessibilityState1 = props.accessibilityState) === null || _props_accessibilityState1 === void 0 ? void 0 : _props_accessibilityState1.checked),
            disabled: props['aria-disabled'] ?? ((_props_accessibilityState2 = props.accessibilityState) === null || _props_accessibilityState2 === void 0 ? void 0 : _props_accessibilityState2.disabled),
            expanded: props['aria-expanded'] ?? ((_props_accessibilityState3 = props.accessibilityState) === null || _props_accessibilityState3 === void 0 ? void 0 : _props_accessibilityState3.expanded),
            selected: props['aria-selected'] ?? ((_props_accessibilityState4 = props.accessibilityState) === null || _props_accessibilityState4 === void 0 ? void 0 : _props_accessibilityState4.selected)
        }
    });
    var flattenedStyle = (0, _flattenStyle.default)(style);
    var objectFit = (0, _ImageUtils.convertObjectFitToResizeMode)(flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.objectFit);
    var resizeMode = objectFit || props.resizeMode || (flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.resizeMode) || 'cover';
    var actualRef = (0, _ImageInjection.useWrapRefWithImageAttachedCallbacks)(forwardedRef);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
        children: (analyticTag)=>{
            var nativePropsWithAnalytics = analyticTag !== null ? _object_spread_props._(_object_spread._({}, nativeProps), {
                internal_analyticTag: analyticTag
            }) : nativeProps;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Consumer, {
                children: (hasTextAncestor)=>{
                    if (hasTextAncestor) {
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInlineImageNativeComponent.default, {
                            // $FlowFixMe[incompatible-type]
                            style: style,
                            resizeMode: resizeMode,
                            headers: nativeProps.headers,
                            src: sources,
                            ref: actualRef
                        });
                    }
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImageViewNativeComponent.default, _object_spread_props._(_object_spread._({}, nativePropsWithAnalytics), {
                        resizeMode: resizeMode,
                        ref: actualRef
                    }));
                }
            });
        }
    });
});
var imageComponentDecorator = (0, _ImageInjection.unstable_getImageComponentDecorator)();
if (imageComponentDecorator != null) {
    BaseImage = imageComponentDecorator(BaseImage);
}
// $FlowExpectedError[incompatible-type] Eventually we need to move these functions from statics of the component to exports in the module.
var Image = BaseImage;
Image.displayName = 'Image';
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 *
 * See https://reactnative.dev/docs/image#getsize
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSize = getSize;
/**
 * Retrieve the width and height (in pixels) of an image prior to displaying it
 * with the ability to provide the headers for the request
 *
 * See https://reactnative.dev/docs/image#getsizewithheaders
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.getSizeWithHeaders = getSizeWithHeaders;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetch = prefetch;
/**
 * Prefetches a remote image for later use by downloading it to the disk
 * cache, and adds metadata for queryRootName and rootTag.
 *
 * See https://reactnative.dev/docs/image#prefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.prefetchWithMetadata = prefetchWithMetadata;
/**
 * Abort prefetch request.
 *
 * See https://reactnative.dev/docs/image#abortprefetch
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.abortPrefetch = abortPrefetch;
/**
 * Perform cache interrogation.
 *
 * See https://reactnative.dev/docs/image#querycache
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.queryCache = queryCache;
/**
 * Resolves an asset reference into an object.
 *
 * See https://reactnative.dev/docs/image#resolveassetsource
 */ // $FlowFixMe[incompatible-use] This property isn't writable but we're actually defining it here for the first time.
Image.resolveAssetSource = _resolveAssetSource.default;
var styles = _StyleSheet.default.create({
    base: {
        overflow: 'hidden'
    }
});
var _default = Image;


}),
80398: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var Context = /*#__PURE__*/ _react.createContext(null);
if (false) {}
var _default = Context;


}),
62029: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Image = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24451));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Very simple drop-in replacement for <Image> which supports nesting views.
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, ImageBackground, Text } from 'react-native';
 *
 * class DisplayAnImageBackground extends Component {
 *   render() {
 *     return (
 *       <ImageBackground
 *         style={{width: 50, height: 50}}
 *         source={{uri: 'https://reactnative.dev/img/opengraph.png'}}
 *       >
 *         <Text>React</Text>
 *       </ImageBackground>
 *     );
 *   }
 * }
 *
 * // App registration and rendering
 * AppRegistry.registerComponent('DisplayAnImageBackground', () => DisplayAnImageBackground);
 * ```
 */ var ImageBackground = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ImageBackground, _React_Component);
    function ImageBackground() {
        _class_call_check._(this, ImageBackground);
        var _this;
        _this = _call_super._(this, ImageBackground, arguments), _this._viewRef = null, _this._captureRef = (ref)=>{
            _this._viewRef = ref;
        };
        return _this;
    }
    _create_class._(ImageBackground, [
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                // Work-around flow
                var viewRef = this._viewRef;
                if (viewRef) {
                    viewRef.setNativeProps(props);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, children = _this_props.children, style = _this_props.style, imageStyle = _this_props.imageStyle, imageRef = _this_props.imageRef, importantForAccessibility = _this_props.importantForAccessibility, props = _object_without_properties._(_this_props, [
                    "children",
                    "style",
                    "imageStyle",
                    "imageRef",
                    "importantForAccessibility"
                ]);
                // $FlowFixMe[underconstrained-implicit-instantiation]
                var flattenedStyle = (0, _flattenStyle.default)(style);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_View.default, {
                    accessibilityIgnoresInvertColors: true,
                    importantForAccessibility: importantForAccessibility,
                    style: style,
                    ref: this._captureRef,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Image.default, _object_spread_props._(_object_spread._({}, props), {
                            importantForAccessibility: importantForAccessibility,
                            style: [
                                _StyleSheet.default.absoluteFill,
                                {
                                    // Temporary Workaround:
                                    // Current (imperfect yet) implementation of <Image> overwrites width and height styles
                                    // (which is not quite correct), and these styles conflict with explicitly set styles
                                    // of <ImageBackground> and with our internal layout model here.
                                    // So, we have to proxy/reapply these styles explicitly for actual <Image> component.
                                    // This workaround should be removed after implementing proper support of
                                    // intrinsic content size of the <Image>.
                                    // $FlowFixMe[prop-missing]
                                    width: flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.width,
                                    // $FlowFixMe[prop-missing]
                                    height: flattenedStyle === null || flattenedStyle === void 0 ? void 0 : flattenedStyle.height
                                },
                                imageStyle
                            ],
                            ref: imageRef
                        })),
                        children
                    ]
                });
            }
        }
    ]);
    return ImageBackground;
}(_react.Component);
var _default = ImageBackground;


}),
18746: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    unstable_getImageComponentDecorator: function() {
        return unstable_getImageComponentDecorator;
    },
    unstable_registerImageAttachedCallback: function() {
        return unstable_registerImageAttachedCallback;
    },
    unstable_setImageComponentDecorator: function() {
        return unstable_setImageComponentDecorator;
    },
    unstable_unregisterImageAttachedCallback: function() {
        return unstable_unregisterImageAttachedCallback;
    },
    useWrapRefWithImageAttachedCallbacks: function() {
        return useWrapRefWithImageAttachedCallbacks;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _useMergeRefs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49143));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var injectedImageComponentDecorator;
function unstable_setImageComponentDecorator(imageComponentDecorator) {
    injectedImageComponentDecorator = imageComponentDecorator;
}
function unstable_getImageComponentDecorator() {
    return injectedImageComponentDecorator;
}
var imageAttachedCallbacks = new Set();
function unstable_registerImageAttachedCallback(callback) {
    imageAttachedCallbacks.add(callback);
}
function unstable_unregisterImageAttachedCallback(callback) {
    imageAttachedCallbacks.delete(callback);
}
function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
    var pendingCleanupCallbacks = (0, _react.useRef)([]);
    var imageAttachedCallbacksRef = (0, _react.useRef)(null);
    if (imageAttachedCallbacksRef.current == null) {
        imageAttachedCallbacksRef.current = (node)=>{
            if (node == null) {
                if (pendingCleanupCallbacks.current.length > 0) {
                    pendingCleanupCallbacks.current.forEach((cb)=>cb());
                    pendingCleanupCallbacks.current = [];
                }
            } else {
                imageAttachedCallbacks.forEach((imageAttachedCallback)=>{
                    var maybeCleanupCallback = imageAttachedCallback(node);
                    if (maybeCleanupCallback != null) {
                        pendingCleanupCallbacks.current.push(maybeCleanupCallback);
                    }
                });
            }
        };
    }
    // `useMergeRefs` returns a stable ref if its arguments don't change.
    return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
}


}),
70701: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getImageSourcesFromImageProps", ({
    enumerable: true,
    get: function() {
        return getImageSourcesFromImageProps;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _resolveAssetSource = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63980));
function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin, referrerPolicy = imageProps.referrerPolicy, src = imageProps.src, srcSet = imageProps.srcSet, width = imageProps.width, height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
        headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
        headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
        var sourceList = [];
        var srcSetList = srcSet.split(', ');
        // `src` prop should be used with default scale if `srcSet` does not have 1x scale.
        var shouldUseSrcForDefaultScale = true;
        srcSetList.forEach((imageSrc)=>{
            var _imageSrc_split = _sliced_to_array._(imageSrc.split(' '), 2), uri = _imageSrc_split[0], tmp = _imageSrc_split[1], xScale = tmp === void 0 ? '1x' : tmp;
            if (!xScale.endsWith('x')) {
                console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
            } else {
                var scale = parseInt(xScale.split('x')[0], 10);
                if (!isNaN(scale)) {
                    // 1x scale is provided in `srcSet` prop so ignore the `src` prop if provided.
                    shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
                    sourceList.push({
                        headers: headers,
                        scale,
                        uri,
                        width,
                        height
                    });
                }
            }
        });
        if (shouldUseSrcForDefaultScale && src != null) {
            sourceList.push({
                headers: headers,
                scale: 1,
                uri: src,
                width,
                height
            });
        }
        if (sourceList.length === 0) {
            console.warn('The provided value for srcSet is not valid.');
        }
        sources = sourceList;
    } else if (src != null) {
        sources = [
            {
                uri: src,
                headers: headers,
                width,
                height
            }
        ];
    } else {
        sources = source;
    }
    return sources;
}


}),
56634: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "convertObjectFitToResizeMode", ({
    enumerable: true,
    get: function() {
        return convertObjectFitToResizeMode;
    }
}));
var objectFitMap = {
    contain: 'contain',
    cover: 'cover',
    fill: 'stretch',
    'scale-down': 'contain',
    none: 'none'
};
function convertObjectFitToResizeMode(objectFit) {
    return objectFit != null ? objectFitMap[objectFit] : undefined;
}


}),
63980: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Utilities for resolving an asset into a `source` for e.g. `Image`
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84925));
var AssetSourceResolver = (__webpack_require__(77127)/* ["default"] */["default"]);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var AssetRegistry = __webpack_require__(9582);
var _customSourceTransformers = [];
var _serverURL;
var _scriptURL;
var _sourceCodeScriptURL;
function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL != null) {
        return _sourceCodeScriptURL;
    }
    _sourceCodeScriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    return _sourceCodeScriptURL;
}
function getDevServerURL() {
    if (_serverURL === undefined) {
        var sourceCodeScriptURL = getSourceCodeScriptURL();
        var match = sourceCodeScriptURL === null || sourceCodeScriptURL === void 0 ? void 0 : sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
        if (match) {
            // jsBundle was loaded from network
            _serverURL = match[0];
        } else {
            // jsBundle was loaded from file
            _serverURL = null;
        }
    }
    return _serverURL;
}
function _coerceLocalScriptURL(scriptURL) {
    var normalizedScriptURL = scriptURL;
    if (normalizedScriptURL != null) {
        if (normalizedScriptURL.startsWith('assets://')) {
            // android: running from within assets, no offline path to use
            return null;
        }
        normalizedScriptURL = normalizedScriptURL.substring(0, normalizedScriptURL.lastIndexOf('/') + 1);
        if (!normalizedScriptURL.includes('://')) {
            // Add file protocol in case we have an absolute file path and not a URL.
            // This shouldn't really be necessary. scriptURL should be a URL.
            normalizedScriptURL = 'file://' + normalizedScriptURL;
        }
    }
    return normalizedScriptURL;
}
function getScriptURL() {
    if (_scriptURL === undefined) {
        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
}
/**
 * `transformer` can optionally be used to apply a custom transformation when
 * resolving an asset source. This methods overrides all other custom transformers
 * that may have been previously registered.
 */ function setCustomSourceTransformer(transformer) {
    _customSourceTransformers = [
        transformer
    ];
}
/**
 * Adds a `transformer` into the chain of custom source transformers, which will
 * be applied in the order registered, until one returns a non-null value.
 */ function addCustomSourceTransformer(transformer) {
    _customSourceTransformers.push(transformer);
}
/**
 * `source` is either a number (opaque type returned by require('./foo.png'))
 * or an `ImageSource` like { uri: '<http location || file path>' }
 */ function resolveAssetSource(source) {
    if (source == null || typeof source === 'object') {
        // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`
        // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`
        return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
        return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    // Apply (chained) custom source transformers, if any
    if (_customSourceTransformers) {
        for (var customSourceTransformer of _customSourceTransformers){
            var transformedSource = customSourceTransformer(resolver);
            if (transformedSource != null) {
                return transformedSource;
            }
        }
    }
    return resolver.defaultAsset();
}
resolveAssetSource.pickScale = pickScale;
resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
resolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;
var _default = resolveAssetSource;


}),
85788: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeFrameRateLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(39447));
var invariant = __webpack_require__(56481);
/**
 * Flow API for native FrameRateLogger module. If the native module is not installed, function calls
 * are just no-ops.
 *
 * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a
 * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the
 * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the
 * native module gathers up all it's frame drop data and reports it via an analytics pipeline for
 * analysis.
 *
 * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a
 * bug, but the native module should be robust to that.
 *
 * In the future we may add support for tracking frame drops in other types of interactions beyond
 * scrolling.
 */ var FrameRateLogger = {
    /**
   * Enable `debug` to see local logs of what's going on.
   */ setGlobalOptions: function(options) {
        if (options.debug !== undefined) {
            invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
        }
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.setGlobalOptions({
            debug: !!options.debug
        });
    },
    /**
   * Must call `setContext` before any events can be properly tracked, which is done automatically
   * in `AppRegistry`, but navigation is also a common place to hook in.
   */ setContext: function(context) {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.setContext(context);
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ beginScroll () {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.beginScroll();
    },
    /**
   * Called in `ScrollResponder` so any component that uses that module will handle this
   * automatically.
   */ endScroll () {
        _NativeFrameRateLogger.default === null || _NativeFrameRateLogger.default === void 0 ? void 0 : _NativeFrameRateLogger.default.endScroll();
    }
};
var _default = FrameRateLogger;


}),
9990: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var BatchedBridge = (__webpack_require__(63531)/* ["default"] */["default"]);
var infoLog = (__webpack_require__(63649)/* ["default"] */["default"]);
var TaskQueue = (__webpack_require__(46186)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
var _emitter = new _EventEmitter.default();
var DEBUG_DELAY = 0;
var DEBUG = false;
/**
 * InteractionManager allows long-running work to be scheduled after any
 * interactions/animations have completed. In particular, this allows JavaScript
 * animations to run smoothly.
 *
 * Applications can schedule tasks to run after interactions with the following:
 *
 * ```
 * InteractionManager.runAfterInteractions(() => {
 *   // ...long-running synchronous task...
 * });
 * ```
 *
 * Compare this to other scheduling alternatives:
 *
 * - requestAnimationFrame(): for code that animates a view over time.
 * - setImmediate/setTimeout(): run code later, note this may delay animations.
 * - runAfterInteractions(): run code later, without delaying active animations.
 *
 * The touch handling system considers one or more active touches to be an
 * 'interaction' and will delay `runAfterInteractions()` callbacks until all
 * touches have ended or been cancelled.
 *
 * InteractionManager also allows applications to register animations by
 * creating an interaction 'handle' on animation start, and clearing it upon
 * completion:
 *
 * ```
 * var handle = InteractionManager.createInteractionHandle();
 * // run animation... (`runAfterInteractions` tasks are queued)
 * // later, on animation completion:
 * InteractionManager.clearInteractionHandle(handle);
 * // queued tasks run if all handles were cleared
 * ```
 *
 * `runAfterInteractions` takes either a plain callback function, or a
 * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
 * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
 * dependencies that also schedule more tasks via `runAfterInteractions`) before
 * starting on the next task that might have been queued up synchronously
 * earlier.
 *
 * By default, queued tasks are executed together in a loop in one
 * `setImmediate` batch. If `setDeadline` is called with a positive number, then
 * tasks will only be executed until the deadline (in terms of js event loop run
 * time) approaches, at which point execution will yield via setTimeout,
 * allowing events such as touches to start interactions and block queued tasks
 * from executing, making apps more responsive.
 */ var InteractionManagerImpl = {
    Events: {
        interactionStart: 'interactionStart',
        interactionComplete: 'interactionComplete'
    },
    /**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   */ runAfterInteractions (task) {
        var tasks = [];
        var promise = new Promise((resolve)=>{
            _scheduleUpdate();
            if (task) {
                tasks.push(task);
            }
            tasks.push({
                run: resolve,
                name: 'resolve ' + (task && task.name || '?')
            });
            _taskQueue.enqueueTasks(tasks);
        });
        return {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            then: promise.then.bind(promise),
            cancel: function() {
                _taskQueue.cancelTasks(tasks);
            }
        };
    },
    /**
   * Notify manager that an interaction has started.
   */ createInteractionHandle () {
        DEBUG && infoLog('InteractionManager: create interaction handle');
        _scheduleUpdate();
        var handle = ++_inc;
        _addInteractionSet.add(handle);
        return handle;
    },
    /**
   * Notify manager that an interaction has completed.
   */ clearInteractionHandle (handle) {
        DEBUG && infoLog('InteractionManager: clear interaction handle');
        invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
        _scheduleUpdate();
        _addInteractionSet.delete(handle);
        _deleteInteractionSet.add(handle);
    },
    // $FlowFixMe[unclear-type] unclear type of _emitter
    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
    addListener: _emitter.addListener.bind(_emitter),
    /**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   */ setDeadline (deadline) {
        _deadline = deadline;
    }
};
var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
});
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;
/**
 * Schedule an asynchronous update to the interaction state.
 */ function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
        if (_deadline > 0) {
            _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
        } else {
            _nextUpdateHandle = setImmediate(_processUpdate);
        }
    }
}
/**
 * Notify listeners, process queue, etc
 */ function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach((handle)=>_interactionSet.add(handle));
    _deleteInteractionSet.forEach((handle)=>_interactionSet.delete(handle));
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
        // transition from 1+ --> 0 interactions
        _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
        // transition from 0 --> 1+ interactions
        _emitter.emit(InteractionManager.Events.interactionStart);
    }
    // process the queue regardless of a transition
    if (nextInteractionCount === 0) {
        while(_taskQueue.hasTasksToProcess()){
            _taskQueue.processNext();
            if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
                // Hit deadline before processing all tasks, so process more later.
                _scheduleUpdate();
                break;
            }
        }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
}
var InteractionManager = _ReactNativeFeatureFlags.disableInteractionManager() ? (__webpack_require__(67186)/* ["default"] */["default"]) : InteractionManagerImpl;
var _default = InteractionManager;


}),
67186: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var invariant = __webpack_require__(56481);
// NOTE: The original implementation of `InteractionManager` never rejected
// the returned promise. This preserves that behavior in the stub.
function reject(error) {
    setTimeout(()=>{
        throw error;
    }, 0);
}
/**
 * InteractionManager allows long-running work to be scheduled after any
 * interactions/animations have completed. In particular, this allows JavaScript
 * animations to run smoothly.
 *
 * Applications can schedule tasks to run after interactions with the following:
 *
 * ```
 * InteractionManager.runAfterInteractions(() => {
 *   // ...long-running synchronous task...
 * });
 * ```
 *
 * Compare this to other scheduling alternatives:
 *
 * - requestAnimationFrame(): for code that animates a view over time.
 * - setImmediate/setTimeout(): run code later, note this may delay animations.
 * - runAfterInteractions(): run code later, without delaying active animations.
 *
 * The touch handling system considers one or more active touches to be an
 * 'interaction' and will delay `runAfterInteractions()` callbacks until all
 * touches have ended or been cancelled.
 *
 * InteractionManager also allows applications to register animations by
 * creating an interaction 'handle' on animation start, and clearing it upon
 * completion:
 *
 * ```
 * var handle = InteractionManager.createInteractionHandle();
 * // run animation... (`runAfterInteractions` tasks are queued)
 * // later, on animation completion:
 * InteractionManager.clearInteractionHandle(handle);
 * // queued tasks run if all handles were cleared
 * ```
 *
 * `runAfterInteractions` takes either a plain callback function, or a
 * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
 * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
 * dependencies that also schedule more tasks via `runAfterInteractions`) before
 * starting on the next task that might have been queued up synchronously
 * earlier.
 *
 * By default, queued tasks are executed together in a loop in one
 * `setImmediate` batch. If `setDeadline` is called with a positive number, then
 * tasks will only be executed until the deadline (in terms of js event loop run
 * time) approaches, at which point execution will yield via setTimeout,
 * allowing events such as touches to start interactions and block queued tasks
 * from executing, making apps more responsive.
 *
 * @deprecated
 */ var InteractionManagerStub = {
    Events: {
        interactionStart: 'interactionStart',
        interactionComplete: 'interactionComplete'
    },
    /**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   *
   * @deprecated
   */ runAfterInteractions (task) {
        var immediateID;
        var promise = new Promise((resolve)=>{
            immediateID = setImmediate(()=>{
                if (typeof task === 'object' && task !== null) {
                    if (typeof task.gen === 'function') {
                        task.gen().then(resolve, reject);
                    } else if (typeof task.run === 'function') {
                        try {
                            task.run();
                            resolve();
                        } catch (error) {
                            reject(error);
                        }
                    } else {
                        reject(new TypeError(`Task "${task.name}" missing gen or run.`));
                    }
                } else if (typeof task === 'function') {
                    try {
                        task();
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new TypeError('Invalid task of type: ' + typeof task));
                }
            });
        });
        return {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            then: promise.then.bind(promise),
            cancel () {
                clearImmediate(immediateID);
            }
        };
    },
    /**
   * Notify manager that an interaction has started.
   *
   * @deprecated
   */ createInteractionHandle () {
        return -1;
    },
    /**
   * Notify manager that an interaction has completed.
   *
   * @deprecated
   */ clearInteractionHandle (handle) {
        invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
    },
    /**
   * @deprecated
   */ addListener () {
        return {
            remove () {}
        };
    },
    /**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   *
   * @deprecated
   */ setDeadline (deadline) {
    // Do nothing.
    }
};
var _default = InteractionManagerStub;


}),
93062: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var InteractionManager = (__webpack_require__(9990)/* ["default"] */["default"]);
var TouchHistoryMath = (__webpack_require__(95253)/* ["default"] */["default"]);
var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;
/**
 * `PanResponder` reconciles several touches into a single gesture. It makes
 * single-touch gestures resilient to extra touches, and can be used to
 * recognize simple multi-touch gestures.
 *
 * By default, `PanResponder` holds an `InteractionManager` handle to block
 * long-running JS events from interrupting active gestures.
 *
 * It provides a predictable wrapper of the responder handlers provided by the
 * [gesture responder system](docs/gesture-responder-system.html).
 * For each handler, it provides a new `gestureState` object alongside the
 * native event object:
 *
 * ```
 * onPanResponderMove: (event, gestureState) => {}
 * ```
 *
 * A native event is a synthetic touch event with the following form:
 *
 *  - `nativeEvent`
 *      + `changedTouches` - Array of all touch events that have changed since the last event
 *      + `identifier` - The ID of the touch
 *      + `locationX` - The X position of the touch, relative to the element
 *      + `locationY` - The Y position of the touch, relative to the element
 *      + `pageX` - The X position of the touch, relative to the root element
 *      + `pageY` - The Y position of the touch, relative to the root element
 *      + `target` - The node id of the element receiving the touch event
 *      + `timestamp` - A time identifier for the touch, useful for velocity calculation
 *      + `touches` - Array of all current touches on the screen
 *
 * A `gestureState` object has the following:
 *
 *  - `stateID` - ID of the gestureState- persisted as long as there at least
 *     one touch on screen
 *  - `moveX` - the latest screen coordinates of the recently-moved touch
 *  - `moveY` - the latest screen coordinates of the recently-moved touch
 *  - `x0` - the screen coordinates of the responder grant
 *  - `y0` - the screen coordinates of the responder grant
 *  - `dx` - accumulated distance of the gesture since the touch started
 *  - `dy` - accumulated distance of the gesture since the touch started
 *  - `vx` - current velocity of the gesture
 *  - `vy` - current velocity of the gesture
 *  - `numberActiveTouches` - Number of touches currently on screen
 *
 * ### Basic Usage
 *
 * ```
 *   componentWillMount: function() {
 *     this._panResponder = PanResponder.create({
 *       // Ask to be the responder:
 *       onStartShouldSetPanResponder: (evt, gestureState) => true,
 *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponder: (evt, gestureState) => true,
 *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
 *
 *       onPanResponderGrant: (evt, gestureState) => {
 *         // The gesture has started. Show visual feedback so the user knows
 *         // what is happening!
 *
 *         // gestureState.d{x,y} will be set to zero now
 *       },
 *       onPanResponderMove: (evt, gestureState) => {
 *         // The most recent move distance is gestureState.move{X,Y}
 *
 *         // The accumulated gesture distance since becoming responder is
 *         // gestureState.d{x,y}
 *       },
 *       onPanResponderTerminationRequest: (evt, gestureState) => true,
 *       onPanResponderRelease: (evt, gestureState) => {
 *         // The user has released all touches while this view is the
 *         // responder. This typically means a gesture has succeeded
 *       },
 *       onPanResponderTerminate: (evt, gestureState) => {
 *         // Another component has become the responder, so this gesture
 *         // should be cancelled
 *       },
 *       onShouldBlockNativeResponder: (evt, gestureState) => {
 *         // Returns whether this component should block native components from becoming the JS
 *         // responder. Returns true by default. Is currently only supported on android.
 *         return true;
 *       },
 *     });
 *   },
 *
 *   render: function() {
 *     return (
 *       <View {...this._panResponder.panHandlers} />
 *     );
 *   },
 *
 * ```
 *
 * ### Working Example
 *
 * To see it in action, try the
 * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)
 */ var PanResponder = {
    /**
   *
   * A graphical explanation of the touch data flow:
   *
   * +----------------------------+             +--------------------------------+
   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |
   * +----------------------------+             +----------+---------------------+
   * |Global store of touchHistory|             |Allocation-less math util       |
   * |including activeness, start |             |on touch history (centroids     |
   * |position, prev/cur position.|             |and multitouch movement etc)    |
   * |                            |             |                                |
   * +----^-----------------------+             +----^---------------------------+
   *      |                                          |
   *      | (records relevant history                |
   *      |  of touches relevant for                 |
   *      |  implementing higher level               |
   *      |  gestures)                               |
   *      |                                          |
   * +----+-----------------------+             +----|---------------------------+
   * | ResponderEventPlugin       |             |    |   Your App/Component      |
   * +----------------------------+             +----|---------------------------+
   * |Negotiates which view gets  | Low level   |    |             High level    |
   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |
   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |
   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|
   * +----------------------------+ attached to |  |         |     distance and  |
   *                                 each event |  +---------+     velocity.     |
   *                                            |                                |
   *                                            |                                |
   *                                            +--------------------------------+
   *
   *
   *
   * Gesture that calculates cumulative movement over time in a way that just
   * "does the right thing" for multiple touches. The "right thing" is very
   * nuanced. When moving two touches in opposite directions, the cumulative
   * distance is zero in each dimension. When two touches move in parallel five
   * pixels in the same direction, the cumulative distance is five, not ten. If
   * two touches start, one moves five in a direction, then stops and the other
   * touch moves fives in the same direction, the cumulative distance is ten.
   *
   * This logic requires a kind of processing of time "clusters" of touch events
   * so that two touch moves that essentially occur in parallel but move every
   * other frame respectively, are considered part of the same movement.
   *
   * Explanation of some of the non-obvious fields:
   *
   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is
   *   invalid. If a move event has been observed, `(moveX, moveY)` is the
   *   centroid of the most recently moved "cluster" of active touches.
   *   (Currently all move have the same timeStamp, but later we should add some
   *   threshold for what is considered to be "moving"). If a palm is
   *   accidentally counted as a touch, but a finger is moving greatly, the palm
   *   will move slightly, but we only want to count the single moving touch.
   * - x0/y0: Centroid location (non-cumulative) at the time of becoming
   *   responder.
   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch
   *   distance. Accounts for touch moves that are clustered together in time,
   *   moving the same direction. Only valid when currently responder (otherwise,
   *   it only represents the drag distance below the threshold).
   * - vx/vy: Velocity.
   */ _initializeGestureState (gestureState) {
        gestureState.moveX = 0;
        gestureState.moveY = 0;
        gestureState.x0 = 0;
        gestureState.y0 = 0;
        gestureState.dx = 0;
        gestureState.dy = 0;
        gestureState.vx = 0;
        gestureState.vy = 0;
        gestureState.numberActiveTouches = 0;
        // All `gestureState` accounts for timeStamps up until:
        gestureState._accountsForMovesUpTo = 0;
    },
    /**
   * This is nuanced and is necessary. It is incorrect to continuously take all
   * active *and* recently moved touches, find the centroid, and track how that
   * result changes over time. Instead, we must take all recently moved
   * touches, and calculate how the centroid has changed just for those
   * recently moved touches, and append that change to an accumulator. This is
   * to (at least) handle the case where the user is moving three fingers, and
   * then one of the fingers stops but the other two continue.
   *
   * This is very different than taking all of the recently moved touches and
   * storing their centroid as `dx/dy`. For correctness, we must *accumulate
   * changes* in the centroid of recently moved touches.
   *
   * There is also some nuance with how we handle multiple moved touches in a
   * single event. With the way `ReactNativeEventEmitter` dispatches touches as
   * individual events, multiple touches generate two 'move' events, each of
   * them triggering `onResponderMove`. But with the way `PanResponder` works,
   * all of the gesture inference is performed on the first dispatch, since it
   * looks at all of the touches (even the ones for which there hasn't been a
   * native dispatch yet). Therefore, `PanResponder` does not call
   * `onResponderMove` passed the first dispatch. This diverges from the
   * typical responder callback pattern (without using `PanResponder`), but
   * avoids more dispatches than necessary.
   */ _updateGestureStateOnMove (gestureState, touchHistory) {
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
        var movedAfter = gestureState._accountsForMovesUpTo;
        var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var nextDX = gestureState.dx + (x - prevX);
        var nextDY = gestureState.dy + (y - prevY);
        // TODO: This must be filtered intelligently.
        var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
        gestureState.vx = (nextDX - gestureState.dx) / dt;
        gestureState.vy = (nextDY - gestureState.dy) / dt;
        gestureState.dx = nextDX;
        gestureState.dy = nextDY;
        gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    /**
   * @param {object} config Enhanced versions of all of the responder callbacks
   * that provide not only the typical `ResponderSyntheticEvent`, but also the
   * `PanResponder` gesture state.  Simply replace the word `Responder` with
   * `PanResponder` in each of the typical `onResponder*` callbacks. For
   * example, the `config` object would look like:
   *
   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`
   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`
   *  - `onPanResponderReject: (e, gestureState) => {...}`
   *  - `onPanResponderGrant: (e, gestureState) => {...}`
   *  - `onPanResponderStart: (e, gestureState) => {...}`
   *  - `onPanResponderEnd: (e, gestureState) => {...}`
   *  - `onPanResponderRelease: (e, gestureState) => {...}`
   *  - `onPanResponderMove: (e, gestureState) => {...}`
   *  - `onPanResponderTerminate: (e, gestureState) => {...}`
   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`
   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`
   *
   *  In general, for events that have capture equivalents, we update the
   *  gestureState once in the capture phase and can use it in the bubble phase
   *  as well.
   *
   *  Be careful with onStartShould* callbacks. They only reflect updated
   *  `gestureState` for start/end events that bubble/capture to the Node.
   *  Once the node is the responder, you can rely on every start/end event
   *  being processed by the gesture and `gestureState` being updated
   *  accordingly. (numberActiveTouches) may not be totally accurate unless you
   *  are the responder.
   */ create (config) {
        var interactionState = {
            handle: null
        };
        var gestureState = {
            // Useful for debugging
            stateID: Math.random(),
            moveX: 0,
            moveY: 0,
            x0: 0,
            y0: 0,
            dx: 0,
            dy: 0,
            vx: 0,
            vy: 0,
            numberActiveTouches: 0,
            _accountsForMovesUpTo: 0
        };
        var panHandlers = {
            onStartShouldSetResponder (event) {
                return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
            },
            onMoveShouldSetResponder (event) {
                return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
            },
            onStartShouldSetResponderCapture (event) {
                // TODO: Actually, we should reinitialize the state any time
                // touches.length increases from 0 active to > 0 active.
                if (event.nativeEvent.touches.length === 1) {
                    PanResponder._initializeGestureState(gestureState);
                }
                gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
                return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onMoveShouldSetResponderCapture (event) {
                var touchHistory = event.touchHistory;
                // Responder system incorrectly dispatches should* to current responder
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return false;
                }
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
            },
            onResponderGrant (event) {
                if (!interactionState.handle) {
                    interactionState.handle = InteractionManager.createInteractionHandle();
                }
                gestureState.x0 = currentCentroidX(event.touchHistory);
                gestureState.y0 = currentCentroidY(event.touchHistory);
                gestureState.dx = 0;
                gestureState.dy = 0;
                if (config.onPanResponderGrant) {
                    config.onPanResponderGrant(event, gestureState);
                }
                // TODO: t7467124 investigate if this can be removed
                return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
            },
            onResponderReject (event) {
                clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
            },
            onResponderRelease (event) {
                clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderStart (event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                if (config.onPanResponderStart) {
                    config.onPanResponderStart(event, gestureState);
                }
            },
            onResponderMove (event) {
                var touchHistory = event.touchHistory;
                // Guard against the dispatch of two touch moves when there are two
                // simultaneously changed touches.
                if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                    return;
                }
                // Filter out any touch moves past the first one - we would have
                // already processed multi-touch geometry during the first event.
                PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                if (config.onPanResponderMove) {
                    config.onPanResponderMove(event, gestureState);
                }
            },
            onResponderEnd (event) {
                var touchHistory = event.touchHistory;
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
            },
            onResponderTerminate (event) {
                clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
                PanResponder._initializeGestureState(gestureState);
            },
            onResponderTerminationRequest (event) {
                return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
            }
        };
        return {
            panHandlers,
            getInteractionHandle () {
                return interactionState.handle;
            }
        };
    }
};
function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
        InteractionManager.clearInteractionHandle(interactionState.handle);
        interactionState.handle = null;
    }
    if (callback) {
        callback(event, gestureState);
    }
}
var _default = PanResponder;


}),
46186: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var infoLog = (__webpack_require__(63649)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
var DEBUG = false;
/**
 * TaskQueue - A system for queueing and executing a mix of simple callbacks and
 * trees of dependent tasks based on Promises. No tasks are executed unless
 * `processNext` is called.
 *
 * `enqueue` takes a Task object with either a simple `run` callback, or a
 * `gen` function that returns a `Promise` and puts it in the queue.  If a gen
 * function is supplied, then the promise it returns will block execution of
 * tasks already in the queue until it resolves. This can be used to make sure
 * the first task is fully resolved (including asynchronous dependencies that
 * also schedule more tasks via `enqueue`) before starting on the next task.
 * The `onMoreTasks` constructor argument is used to inform the owner that an
 * async task has resolved and that the queue should be processed again.
 *
 * Note: Tasks are only actually executed with explicit calls to `processNext`.
 */ var TaskQueue = /*#__PURE__*/ function() {
    function TaskQueue(ref) {
        var onMoreTasks = ref.onMoreTasks;
        _class_call_check._(this, TaskQueue);
        this._onMoreTasks = onMoreTasks;
        this._queueStack = [
            {
                tasks: [],
                popable: false
            }
        ];
    }
    _create_class._(TaskQueue, [
        {
            /**
   * Add a task to the queue.  It is recommended to name your tasks for easier
   * async debugging. Tasks will not be executed until `processNext` is called
   * explicitly.
   */ key: "enqueue",
            value: function enqueue(task) {
                this._getCurrentQueue().push(task);
            }
        },
        {
            key: "enqueueTasks",
            value: function enqueueTasks(tasks) {
                tasks.forEach((task)=>this.enqueue(task));
            }
        },
        {
            key: "cancelTasks",
            value: function cancelTasks(tasksToCancel) {
                // search through all tasks and remove them.
                this._queueStack = this._queueStack.map((queue)=>_object_spread_props._(_object_spread._({}, queue), {
                        tasks: queue.tasks.filter((task)=>tasksToCancel.indexOf(task) === -1)
                    })).filter((queue, idx)=>queue.tasks.length > 0 || idx === 0);
            }
        },
        {
            /**
   * Check to see if `processNext` should be called.
   *
   * @returns {boolean} Returns true if there are tasks that are ready to be
   * processed with `processNext`, or returns false if there are no more tasks
   * to be processed right now, although there may be tasks in the queue that
   * are blocked by earlier `PromiseTask`s that haven't resolved yet.
   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are
   * tasks ready to run at that point.
   */ key: "hasTasksToProcess",
            value: function hasTasksToProcess() {
                return this._getCurrentQueue().length > 0;
            }
        },
        {
            /**
   * Executes the next task in the queue.
   */ key: "processNext",
            value: function processNext() {
                var queue = this._getCurrentQueue();
                if (queue.length) {
                    var task = queue.shift();
                    try {
                        if (typeof task === 'object' && task.gen) {
                            DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);
                            this._genPromise(task);
                        } else if (typeof task === 'object' && task.run) {
                            DEBUG && infoLog('TaskQueue: run task ' + task.name);
                            task.run();
                        } else {
                            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
                            DEBUG && infoLog('TaskQueue: run anonymous task');
                            task();
                        }
                    } catch (e) {
                        e.message = // $FlowFixMe[incompatible-type]
                        'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
                        throw e;
                    }
                }
            }
        },
        {
            key: "_getCurrentQueue",
            value: function _getCurrentQueue() {
                var stackIdx = this._queueStack.length - 1;
                var queue = this._queueStack[stackIdx];
                if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
                    this._queueStack.pop();
                    DEBUG && infoLog('TaskQueue: popped queue: ', {
                        stackIdx,
                        queueStackSize: this._queueStack.length
                    });
                    return this._getCurrentQueue();
                } else {
                    return queue.tasks;
                }
            }
        },
        {
            key: "_genPromise",
            value: function _genPromise(task) {
                // Each async task pushes it's own queue onto the queue stack. This
                // effectively defers execution of previously queued tasks until the promise
                // resolves, at which point we allow the new queue to be popped, which
                // happens once it is fully processed.
                this._queueStack.push({
                    tasks: [],
                    popable: false
                });
                var stackIdx = this._queueStack.length - 1;
                var stackItem = this._queueStack[stackIdx];
                DEBUG && infoLog('TaskQueue: push new queue: ', {
                    stackIdx
                });
                DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);
                task.gen().then(()=>{
                    DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {
                        stackIdx,
                        queueStackSize: this._queueStack.length
                    });
                    stackItem.popable = true;
                    this.hasTasksToProcess() && this._onMoreTasks();
                }).catch((ex)=>{
                    setTimeout(()=>{
                        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;
                        throw ex;
                    }, 0);
                });
            }
        }
    ]);
    return TaskQueue;
}();
var _default = TaskQueue;


}),
95253: (function (__unused_webpack_module, exports) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // $FlowFixMe[definition-cycle]
// $FlowFixMe[recursive-definition]
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var TouchHistoryMath = {
    /**
   * This code is optimized and not intended to look beautiful. This allows
   * computing of touch centroids that have moved after `touchesChangedAfter`
   * timeStamp. You can compute the current centroid involving all touches
   * moves after `touchesChangedAfter`, or you can compute the previous
   * centroid of all touches that were moved after `touchesChangedAfter`.
   *
   * @param {TouchHistoryMath} touchHistory Standard Responder touch track
   * data.
   * @param {number} touchesChangedAfter timeStamp after which moved touches
   * are considered "actively moving" - not just "active".
   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
   * @param {boolean} ofCurrent Compute current centroid for actively moving
   * touches vs. previous centroid of now actively moving touches.
   * @return {number} value of centroid in specified dimension.
   */ centroidDimension: function(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank;
        var total = 0;
        var count = 0;
        var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
                total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
                count = 1;
            }
        } else {
            for(var i = 0; i < touchBank.length; i++){
                var touchTrack = touchBank[i];
                if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                    var toAdd = void 0; // Yuck, program temporarily in invalid state.
                    if (ofCurrent && isXAxis) {
                        toAdd = touchTrack.currentPageX;
                    } else if (ofCurrent && !isXAxis) {
                        toAdd = touchTrack.currentPageY;
                    } else if (!ofCurrent && isXAxis) {
                        toAdd = touchTrack.previousPageX;
                    } else {
                        toAdd = touchTrack.previousPageY;
                    }
                    total += toAdd;
                    count++;
                }
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
};
var _default = TouchHistoryMath;


}),
22236: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _FabricUIManager = __webpack_require__(4697);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var UIManager = (__webpack_require__(74853)/* ["default"] */["default"]);
// Reexport type
var isLayoutAnimationEnabled = _ReactNativeFeatureFlags.isLayoutAnimationEnabled();
function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
}
/**
 * Configures the next commit to be animated.
 *
 * onAnimationDidEnd is guaranteed to be called when the animation completes.
 * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,
 * and never has been. In the new renderer (Fabric) it is called only if configuration
 * parsing fails.
 */ function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    if (_Platform.default.isDisableAnimations) {
        return;
    }
    if (!isLayoutAnimationEnabled) {
        return;
    }
    // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),
    // or Android (non-Fabric) we race a setTimeout with animation completion,
    // in case onComplete is never called
    // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can
    // delete this mechanism at least in the Fabric branch.
    var animationCompletionHasRun = false;
    var onAnimationComplete = ()=>{
        if (animationCompletionHasRun) {
            return;
        }
        animationCompletionHasRun = true;
        clearTimeout(raceWithAnimationId);
        onAnimationDidEnd === null || onAnimationDidEnd === void 0 ? void 0 : onAnimationDidEnd();
    };
    var raceWithAnimationId = setTimeout(onAnimationComplete, (config.duration ?? 0) + 17 /* one frame + 1ms */ );
    // In Fabric, LayoutAnimations are unconditionally enabled for Android, and
    // conditionally enabled on iOS (pending fully shipping; this is a temporary state).
    var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
    if (FabricUIManager === null || FabricUIManager === void 0 ? void 0 : FabricUIManager.configureNextLayoutAnimation) {
        var _global_nativeFabricUIManager, _global;
        (_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : (_global_nativeFabricUIManager = _global.nativeFabricUIManager) === null || _global_nativeFabricUIManager === void 0 ? void 0 : _global_nativeFabricUIManager.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail ?? function() {} /* this will only be called if configuration parsing fails */ );
        return;
    }
    // This will only run if Fabric is *not* installed.
    // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations
    // will not work.
    if (UIManager === null || UIManager === void 0 ? void 0 : UIManager.configureNextLayoutAnimation) {
        UIManager.configureNextLayoutAnimation(config, onAnimationComplete ?? function() {}, onAnimationDidFail ?? function() {} /* this should never be called in Non-Fabric */ );
    }
}
function create(duration, type, property) {
    return {
        duration,
        create: {
            type,
            property
        },
        update: {
            type
        },
        delete: {
            type,
            property
        }
    };
}
var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
        duration: 700,
        create: {
            type: 'linear',
            property: 'opacity'
        },
        update: {
            type: 'spring',
            springDamping: 0.4
        },
        delete: {
            type: 'linear',
            property: 'opacity'
        }
    }
};
/**
 * Automatically animates views to their new positions when the
 * next layout happens.
 *
 * A common way to use this API is to call it before calling `setState`.
 *
 * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:
 *
 *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
 */ var LayoutAnimation = {
    /**
   * Schedules an animation to happen on the next layout.
   *
   * @param config Specifies animation properties:
   *
   *   - `duration` in milliseconds
   *   - `create`, `AnimationConfig` for animating in new views
   *   - `update`, `AnimationConfig` for animating views that have been updated
   *
   * @param onAnimationDidEnd Called when the animation finished.
   * Only supported on iOS.
   * @param onError Called on error. Only supported on iOS.
   */ configureNext,
    /**
   * Helper for creating a config for `configureNext`.
   */ create,
    Types: Object.freeze({
        spring: 'spring',
        linear: 'linear',
        easeInEaseOut: 'easeInEaseOut',
        easeIn: 'easeIn',
        easeOut: 'easeOut',
        keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
        opacity: 'opacity',
        scaleX: 'scaleX',
        scaleY: 'scaleY',
        scaleXY: 'scaleXY'
    }),
    checkConfig (...args) {
        console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled
};
var _default = LayoutAnimation;


}),
66023: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeIntentAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41872));
var _NativeLinkingManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2485));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var LinkingImpl = /*#__PURE__*/ function(NativeEventEmitter) {
    "use strict";
    _inherits._(LinkingImpl, NativeEventEmitter);
    function LinkingImpl() {
        _class_call_check._(this, LinkingImpl);
        return _call_super._(this, LinkingImpl, [
            _Platform.default.OS === 'ios' ? (0, _nullthrows.default)(_NativeLinkingManager.default) : undefined
        ]);
    }
    _create_class._(LinkingImpl, [
        {
            /**
   * Add a handler to Linking changes by listening to the `url` event type
   * and providing the handler
   *
   * See https://reactnative.dev/docs/linking#addeventlistener
   */ key: "addEventListener",
            value: function addEventListener(eventType, listener) {
                return this.addListener(eventType, listener);
            }
        },
        {
            /**
   * Try to open the given `url` with any of the installed apps.
   *
   * See https://reactnative.dev/docs/linking#openurl
   */ key: "openURL",
            value: function openURL(url) {
                this._validateURL(url);
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).openURL(url);
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
                }
            }
        },
        {
            /**
   * Determine whether or not an installed app can handle a given URL.
   *
   * See https://reactnative.dev/docs/linking#canopenurl
   */ key: "canOpenURL",
            value: function canOpenURL(url) {
                this._validateURL(url);
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).canOpenURL(url);
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
                }
            }
        },
        {
            /**
   * Open app settings.
   *
   * See https://reactnative.dev/docs/linking#opensettings
   */ key: "openSettings",
            value: function openSettings() {
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).openSettings();
                } else {
                    return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
                }
            }
        },
        {
            /**
   * If the app launch was triggered by an app link,
   * it will give the link url, otherwise it will give `null`
   *
   * See https://reactnative.dev/docs/linking#getinitialurl
   */ key: "getInitialURL",
            value: function getInitialURL() {
                return _Platform.default.OS === 'android' ? (0, _nullthrows.default)(_NativeIntentAndroid.default).getInitialURL() : (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
            }
        },
        {
            /*
   * Launch an Android intent with extras (optional)
   *
   * @platform android
   *
   * See https://reactnative.dev/docs/linking#sendintent
   */ key: "sendIntent",
            value: function sendIntent(action, extras) {
                if (_Platform.default.OS === 'android') {
                    return (0, _nullthrows.default)(_NativeIntentAndroid.default).sendIntent(action, extras);
                } else {
                    return new Promise((resolve, reject)=>reject(new Error('Unsupported')));
                }
            }
        },
        {
            key: "_validateURL",
            value: function _validateURL(url) {
                (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
                (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
            }
        }
    ]);
    return LinkingImpl;
}(_NativeEventEmitter.default);
var Linking = new LinkingImpl();
var _default = Linking;


}),
99130: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _jsxruntime = __webpack_require__(70095);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _virtualizedlists = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60155));
var _memoizeone = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29068));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var StyleSheet = (__webpack_require__(5938)/* ["default"] */["default"]);
var deepDiffer = (__webpack_require__(5914)/* ["default"] */["default"]);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
var VirtualizedList = _virtualizedlists.default.VirtualizedList;
var defaultKeyExtractor = _virtualizedlists.default.keyExtractor;
/**
 * Default Props Helper Functions
 * Use the following helper functions for default values
 */ // removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)
function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    if (_ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {
        return removeClippedSubviews ?? true;
    } else {
        return removeClippedSubviews ?? Platform.OS === 'android';
    }
}
// numColumnsOrDefault(this.props.numColumns)
function numColumnsOrDefault(numColumns) {
    return numColumns ?? 1;
}
function isArrayLike(data) {
    // $FlowExpectedError[incompatible-use]
    return typeof Object(data).length === 'number';
}
/**
 * A performant interface for rendering simple, flat lists, supporting the most handy features:
 *
 *  - Fully cross-platform.
 *  - Optional horizontal mode.
 *  - Configurable viewability callbacks.
 *  - Header support.
 *  - Footer support.
 *  - Separator support.
 *  - Pull to Refresh.
 *  - Scroll loading.
 *  - ScrollToIndex support.
 *
 * If you need section support, use [`<SectionList>`](docs/sectionlist.html).
 *
 * Minimal Example:
 *
 *     <FlatList
 *       data={[{key: 'a'}, {key: 'b'}]}
 *       renderItem={({item}) => <Text>{item.key}</Text>}
 *     />
 *
 * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.
 *
 * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will
 *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even
 *   if the components rendered in `MyListItem` did not have such optimizations.
 * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render
 *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it
 *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will
 *   not show any changes.
 * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.
 *
 *
 *     class MyListItem extends React.PureComponent {
 *       _onPress = () => {
 *         this.props.onPressItem(this.props.id);
 *       };
 *
 *       render() {
 *         const textColor = this.props.selected ? "red" : "black";
 *         return (
 *           <TouchableOpacity onPress={this._onPress}>
 *             <View>
 *               <Text style={{ color: textColor }}>
 *                 {this.props.title}
 *               </Text>
 *             </View>
 *           </TouchableOpacity>
 *         );
 *       }
 *     }
 *
 *     class MultiSelectList extends React.PureComponent {
 *       state = {selected: (new Map(): Map<string, boolean>)};
 *
 *       _keyExtractor = (item, index) => item.id;
 *
 *       _onPressItem = (id: string) => {
 *         // updater functions are preferred for transactional updates
 *         this.setState((state) => {
 *           // copy the map rather than modifying state.
 *           const selected = new Map(state.selected);
 *           selected.set(id, !selected.get(id)); // toggle
 *           return {selected};
 *         });
 *       };
 *
 *       _renderItem = ({item}) => (
 *         <MyListItem
 *           id={item.id}
 *           onPressItem={this._onPressItem}
 *           selected={!!this.state.selected.get(item.id)}
 *           title={item.title}
 *         />
 *       );
 *
 *       render() {
 *         return (
 *           <FlatList
 *             data={this.props.data}
 *             extraData={this.state}
 *             keyExtractor={this._keyExtractor}
 *             renderItem={this._renderItem}
 *           />
 *         );
 *       }
 *     }
 *
 * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
 * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed
 * here, along with the following caveats:
 *
 * - Internal state is not preserved when content scrolls out of the render window. Make sure all
 *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
 * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
 *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
 *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
 *   changes. This includes the `data` prop and parent component state.
 * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
 *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
 *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
 *   and we are working on improving it behind the scenes.
 * - By default, the list looks for a `key` prop on each item and uses that for the React key.
 *   Alternatively, you can provide a custom `keyExtractor` prop.
 *
 * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.
 */ var FlatList = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(FlatList, _React_PureComponent);
    function FlatList(props) {
        _class_call_check._(this, FlatList);
        var _this;
        _this = _call_super._(this, FlatList, [
            props
        ]), _this._virtualizedListPairs = [], _this._captureRef = (ref)=>{
            _this._listRef = ref;
        }, _this._getItem = (data, index)=>{
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            if (numColumns > 1) {
                var ret = [];
                for(var kk = 0; kk < numColumns; kk++){
                    var itemIndex = index * numColumns + kk;
                    if (itemIndex < data.length) {
                        var item = data[itemIndex];
                        ret.push(item);
                    }
                }
                return ret;
            } else {
                return data[index];
            }
        }, _this._getItemCount = (data)=>{
            // Legacy behavior of FlatList was to forward "undefined" length if invalid
            // data like a non-arraylike object is passed. VirtualizedList would then
            // coerce this, and the math would work out to no-op. For compatibility, if
            // invalid data is passed, we tell VirtualizedList there are zero items
            // available to prevent it from trying to read from the invalid data
            // (without propagating invalidly typed data).
            if (data != null && isArrayLike(data)) {
                var numColumns = numColumnsOrDefault(_this.props.numColumns);
                return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
            } else {
                return 0;
            }
        }, _this._keyExtractor = (items, index)=>{
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            var keyExtractor = _this.props.keyExtractor ?? defaultKeyExtractor;
            if (numColumns > 1) {
                invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
                return items.map((item, kk)=>keyExtractor(item, index * numColumns + kk)).join(':');
            }
            // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array
            return keyExtractor(items, index);
        }, _this._renderer = (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData)=>{
            var cols = numColumnsOrDefault(numColumns);
            var render = (props)=>{
                if (ListItemComponent) {
                    // $FlowFixMe[not-a-component] Component isn't valid
                    // $FlowFixMe[incompatible-type-arg] Component isn't valid
                    // $FlowFixMe[incompatible-return] Component isn't valid
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ListItemComponent, _object_spread._({}, props));
                } else if (renderItem) {
                    // $FlowFixMe[incompatible-call]
                    return renderItem(props);
                } else {
                    return null;
                }
            };
            var renderProp = (info)=>{
                if (cols > 1) {
                    var item = info.item, index = info.index;
                    invariant(Array.isArray(item), 'Expected array of items with numColumns > 1');
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                        style: StyleSheet.compose(styles.row, columnWrapperStyle),
                        children: item.map((it, kk)=>{
                            var element = render({
                                // $FlowFixMe[incompatible-call]
                                item: it,
                                index: index * cols + kk,
                                separators: info.separators
                            });
                            return element != null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.default.Fragment, {
                                children: element
                            }, kk) : null;
                        })
                    });
                } else {
                    return render(info);
                }
            };
            return ListItemComponent ? {
                ListItemComponent: renderProp
            } : {
                renderItem: renderProp
            };
        }, _this._memoizedRenderer = (0, _memoizeone.default)(_this._renderer);
        _this._checkProps(_this.props);
        if (_this.props.viewabilityConfigCallbackPairs) {
            _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map((pair)=>({
                    viewabilityConfig: pair.viewabilityConfig,
                    onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
                }));
        } else if (_this.props.onViewableItemsChanged) {
            _this._virtualizedListPairs.push({
                /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.63 was deployed. To
         * see the error delete this comment and run Flow. */ viewabilityConfig: _this.props.viewabilityConfig,
                onViewableItemsChanged: _this._createOnViewableItemsChanged(// NOTE: we use a wrapper function to allow the actual callback to change
                // while still keeping the function provided to native to be stable
                (...args)=>{
                    var _this_props;
                    invariant(_this.props.onViewableItemsChanged, 'Changing the nullability of onViewableItemsChanged is not supported. ' + 'Once a function or null is supplied that cannot be changed.');
                    return (_this_props = _this.props).onViewableItemsChanged.apply(_this_props, _to_consumable_array._(args));
                })
            });
        }
        return _this;
    }
    _create_class._(FlatList, [
        {
            /**
   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.
   */ key: "scrollToEnd",
            value: function scrollToEnd(params) {
                if (this._listRef) {
                    this._listRef.scrollToEnd(params);
                }
            }
        },
        {
            /**
   * Scrolls to the item at the specified index such that it is positioned in the viewable area
   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the
   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToIndex",
            value: function scrollToIndex(params) {
                if (this._listRef) {
                    this._listRef.scrollToIndex(params);
                }
            }
        },
        {
            /**
   * Requires linear scan through data - use `scrollToIndex` instead if possible.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToItem",
            value: function scrollToItem(params) {
                if (this._listRef) {
                    this._listRef.scrollToItem(params);
                }
            }
        },
        {
            /**
   * Scroll to a specific content pixel offset in the list.
   *
   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList
   */ key: "scrollToOffset",
            value: function scrollToOffset(params) {
                if (this._listRef) {
                    this._listRef.scrollToOffset(params);
                }
            }
        },
        {
            /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ key: "recordInteraction",
            value: function recordInteraction() {
                if (this._listRef) {
                    this._listRef.recordInteraction();
                }
            }
        },
        {
            /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
                if (this._listRef) {
                    this._listRef.flashScrollIndicators();
                }
            }
        },
        {
            /**
   * Provides a handle to the underlying scroll responder.
   */ key: "getScrollResponder",
            value: function getScrollResponder() {
                if (this._listRef) {
                    return this._listRef.getScrollResponder();
                }
            }
        },
        {
            /**
   * Provides a reference to the underlying host component
   */ key: "getNativeScrollRef",
            value: function getNativeScrollRef() {
                if (this._listRef) {
                    /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing
       * TextInput typing */ return this._listRef.getScrollRef();
                }
            }
        },
        {
            key: "getScrollableNode",
            value: function getScrollableNode() {
                if (this._listRef) {
                    return this._listRef.getScrollableNode();
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                if (this._listRef) {
                    this._listRef.setNativeProps(props);
                }
            }
        },
        {
            // $FlowFixMe[missing-local-annot]
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
                invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
                invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
                invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
                this._checkProps(this.props);
            }
        },
        {
            // $FlowFixMe[missing-local-annot]
            key: "_checkProps",
            value: function _checkProps(props) {
                var // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
                getItem = props.getItem, // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant
                getItemCount = props.getItemCount, horizontal = props.horizontal, columnWrapperStyle = props.columnWrapperStyle, onViewableItemsChanged = props.onViewableItemsChanged, viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
                var numColumns = numColumnsOrDefault(this.props.numColumns);
                invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
                if (numColumns > 1) {
                    invariant(!horizontal, 'numColumns does not support horizontal.');
                } else {
                    invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
                }
                invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
            }
        },
        {
            key: "_pushMultiColumnViewable",
            value: function _pushMultiColumnViewable(arr, v) {
                var numColumns = numColumnsOrDefault(this.props.numColumns);
                var keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;
                v.item.forEach((item, ii)=>{
                    invariant(v.index != null, 'Missing index!');
                    var index = v.index * numColumns + ii;
                    arr.push(_object_spread_props._(_object_spread._({}, v), {
                        item,
                        key: keyExtractor(item, index),
                        index
                    }));
                });
            }
        },
        {
            key: "_createOnViewableItemsChanged",
            value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
                return (info)=>{
                    var numColumns = numColumnsOrDefault(this.props.numColumns);
                    if (onViewableItemsChanged) {
                        if (numColumns > 1) {
                            var changed = [];
                            var viewableItems = [];
                            info.viewableItems.forEach((v)=>this._pushMultiColumnViewable(viewableItems, v));
                            info.changed.forEach((v)=>this._pushMultiColumnViewable(changed, v));
                            onViewableItemsChanged({
                                viewableItems,
                                changed
                            });
                        } else {
                            onViewableItemsChanged(info);
                        }
                    }
                };
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, numColumns = _this_props.numColumns, columnWrapperStyle = _this_props.columnWrapperStyle, _removeClippedSubviews = _this_props.removeClippedSubviews, _this_props_strictMode = _this_props.strictMode, strictMode = _this_props_strictMode === void 0 ? false : _this_props_strictMode, restProps = _object_without_properties._(_this_props, [
                    "numColumns",
                    "columnWrapperStyle",
                    "removeClippedSubviews",
                    "strictMode"
                ]);
                var renderer = strictMode ? this._memoizedRenderer : this._renderer;
                return(// $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.
                /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedList, _object_spread._(_object_spread_props._(_object_spread._({}, restProps), {
                    getItem: this._getItem,
                    getItemCount: this._getItemCount,
                    keyExtractor: this._keyExtractor,
                    ref: this._captureRef,
                    viewabilityConfigCallbackPairs: this._virtualizedListPairs,
                    removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)
                }), renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData))));
            }
        }
    ]);
    return FlatList;
}(_react.default.PureComponent);
var styles = StyleSheet.create({
    row: {
        flexDirection: 'row'
    }
});
var _default = FlatList;


}),
82231: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SectionList;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _virtualizedlists = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60155));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var VirtualizedSectionList = _virtualizedlists.default.VirtualizedSectionList;
var SectionList = /*#__PURE__*/ function(_React_PureComponent) {
    _inherits._(SectionList, _React_PureComponent);
    function SectionList() {
        _class_call_check._(this, SectionList);
        var _this;
        _this = _call_super._(this, SectionList, arguments), _this._captureRef = (ref)=>{
            _this._wrapperListRef = ref;
        };
        return _this;
    }
    _create_class._(SectionList, [
        {
            /**
   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)
   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be
   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a
   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky
   * headers.
   *
   * Note: cannot scroll to locations outside the render window without specifying the
   * `getItemLayout` prop.
   */ key: "scrollToLocation",
            value: function scrollToLocation(params) {
                if (this._wrapperListRef != null) {
                    this._wrapperListRef.scrollToLocation(params);
                }
            }
        },
        {
            /**
   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
   * taps on items or by navigation actions.
   */ key: "recordInteraction",
            value: function recordInteraction() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                listRef && listRef.recordInteraction();
            }
        },
        {
            /**
   * Displays the scroll indicators momentarily.
   *
   * @platform ios
   */ key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                listRef && listRef.flashScrollIndicators();
            }
        },
        {
            /**
   * Provides a handle to the underlying scroll responder.
   */ key: "getScrollResponder",
            value: function getScrollResponder() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    return listRef.getScrollResponder();
                }
            }
        },
        {
            key: "getScrollableNode",
            value: function getScrollableNode() {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    return listRef.getScrollableNode();
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
                if (listRef) {
                    listRef.setNativeProps(props);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _stickySectionHeadersEnabled = _this_props.stickySectionHeadersEnabled, restProps = _object_without_properties._(_this_props, [
                    "stickySectionHeadersEnabled"
                ]);
                var stickySectionHeadersEnabled = _stickySectionHeadersEnabled ?? _Platform.default.OS === 'ios';
                return(/* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /* $FlowFixMe[incompatible-type] Error revealed after improved builtin
       * React utility types */ /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedSectionList, _object_spread_props._(_object_spread._({}, restProps), {
                    stickySectionHeadersEnabled: stickySectionHeadersEnabled,
                    ref: this._captureRef,
                    // $FlowFixMe[missing-local-annot]
                    getItemCount: (items)=>items.length,
                    // $FlowFixMe[missing-local-annot]
                    getItem: (items, index)=>items[index]
                })));
            }
        }
    ]);
    return SectionList;
}(_react.PureComponent);


}),
54509: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _virtualizedlists = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60155));
var VirtualizedList = _virtualizedlists.default.VirtualizedList;
var _default = VirtualizedList;


}),
42722: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _virtualizedlists = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60155));
var VirtualizedSectionList = _virtualizedlists.default.VirtualizedSectionList;
var _default = VirtualizedSectionList;


}),
20659: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasComponentStack: function() {
        return hasComponentStack;
    },
    parseComponentStack: function() {
        return parseComponentStack;
    },
    parseInterpolation: function() {
        return parseInterpolation;
    },
    parseLogBoxException: function() {
        return parseLogBoxException;
    },
    parseLogBoxLog: function() {
        return parseLogBoxLog;
    },
    withoutANSIColorStyles: function() {
        return withoutANSIColorStyles;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _parseErrorStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20042));
var _UTFSequence = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89872));
var _stringifySafe = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47264));
var _ansiregex = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1531));
var ANSI_REGEX = (0, _ansiregex.default)().source;
var RE_TRANSFORM_ERROR = /^TransformError /;
var RE_COMPONENT_STACK_LINE = /\n {4}(in|at) /;
var RE_COMPONENT_STACK_LINE_GLOBAL = /\n {4}(in|at) /g;
var RE_COMPONENT_STACK_LINE_OLD = / {4}in/;
var RE_COMPONENT_STACK_LINE_NEW = / {4}at/;
var RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\n/;
// "TransformError " (Optional) and either "SyntaxError: " or "ReferenceError: "
// Capturing groups:
// 1: error message
// 2: file path
// 3: line number
// 4: column number
// \n\n
// 5: code frame
var RE_BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
// Capturing groups:
// 1: component name
// "at"
// 2: file path including extension
// 3: line number
var RE_COMPONENT_STACK_WITH_SOURCE = /(.*) \(at (.*\.(?:js|jsx|ts|tsx)):([\d]+)\)/;
// Capturing groups:
// 1: component name
// "at"
// 2: parent component name
var RE_COMPONENT_STACK_NO_SOURCE = /(.*) \(created by .*\)/;
// Capturing groups:
// - non-capturing "TransformError " (optional)
// - non-capturing Error message
// 1: file path
// 2: file name
// 3: error message
// 4: code frame, which includes code snippet indicators or terminal escape sequences for formatting.
var RE_BABEL_CODE_FRAME_ERROR_FORMAT = // eslint-disable-next-line no-control-regex
RegExp("^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)", "u");
// Capturing groups:
// - non-capturing "InternalError Metro has encountered an error:"
// 1: error title
// 2: error message
// 3: file path
// 4: line number
// 5: column number
// 6: code frame, which includes code snippet indicators or terminal escape sequences for formatting.
var RE_METRO_ERROR_FORMAT = RegExp("^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)", "u");
// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184
var RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp([
    // Beginning of a line (per 'm' flag)
    '^',
    // Optional ANSI escapes for colors
    `(?:${ANSI_REGEX})*`,
    // Marker
    '>',
    // Optional ANSI escapes for colors
    `(?:${ANSI_REGEX})*`,
    // Left padding for line number
    ' +',
    // Line number
    '[0-9]+',
    // Gutter
    ' \\|'
].join(''), 'm');
function hasComponentStack(args) {
    for (var arg of args){
        if (typeof arg === 'string' && isComponentStack(arg)) {
            return true;
        }
    }
    return false;
}
var SUBSTITUTION = _UTFSequence.default.BOM + '%s';
function parseInterpolation(args) {
    var _categoryParts, _contentParts;
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = _to_consumable_array._(args);
    if (typeof remaining[0] === 'string') {
        var formatString = String(remaining.shift());
        var formatStringParts = formatString.split('%s');
        var substitutionCount = formatStringParts.length - 1;
        var substitutions = remaining.splice(0, substitutionCount);
        var categoryString = '';
        var contentString = '';
        var substitutionIndex = 0;
        for (var formatStringPart of formatStringParts){
            categoryString += formatStringPart;
            contentString += formatStringPart;
            if (substitutionIndex < substitutionCount) {
                if (substitutionIndex < substitutions.length) {
                    // Don't stringify a string type.
                    // It adds quotation mark wrappers around the string,
                    // which causes the LogBox to look odd.
                    var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
                    substitutionOffsets.push({
                        length: substitution.length,
                        offset: contentString.length
                    });
                    categoryString += SUBSTITUTION;
                    contentString += substitution;
                } else {
                    substitutionOffsets.push({
                        length: 2,
                        offset: contentString.length
                    });
                    categoryString += '%s';
                    contentString += '%s';
                }
                substitutionIndex++;
            }
        }
        categoryParts.push(categoryString);
        contentParts.push(contentString);
    }
    var remainingArgs = remaining.map((arg)=>{
        // Don't stringify a string type.
        // It adds quotation mark wrappers around the string,
        // which causes the LogBox to look odd.
        return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
    });
    (_categoryParts = categoryParts).push.apply(_categoryParts, _to_consumable_array._(remainingArgs));
    (_contentParts = contentParts).push.apply(_contentParts, _to_consumable_array._(remainingArgs));
    return {
        category: categoryParts.join(' '),
        message: {
            content: contentParts.join(' '),
            substitutions: substitutionOffsets
        }
    };
}
function isComponentStack(consoleArgument) {
    var isOldComponentStackFormat = RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);
    var isNewComponentStackFormat = RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);
    var isNewJSCComponentStackFormat = RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);
    return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;
}
function parseComponentStack(message) {
    // In newer versions of React, the component stack is formatted as a call stack frame.
    // First try to parse the component stack as a call stack frame, and if that doesn't
    // work then we'll fallback to the old custom component stack format parsing.
    var stack = (0, _parseErrorStack.default)(message);
    if (stack && stack.length > 0) {
        return {
            type: 'stack',
            stack: stack.map((frame)=>({
                    content: frame.methodName,
                    collapse: frame.collapse || false,
                    fileName: frame.file == null ? 'unknown' : frame.file,
                    location: {
                        column: frame.column == null ? -1 : frame.column,
                        row: frame.lineNumber == null ? -1 : frame.lineNumber
                    }
                }))
        };
    }
    var legacyStack = message.split(RE_COMPONENT_STACK_LINE_GLOBAL).map((s)=>{
        if (!s) {
            return null;
        }
        var match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);
        if (match) {
            var _match_slice = _sliced_to_array._(match.slice(1), 3), content = _match_slice[0], fileName = _match_slice[1], row = _match_slice[2];
            return {
                content,
                fileName,
                location: {
                    column: -1,
                    row: parseInt(row, 10)
                }
            };
        }
        // In some cases, the component stack doesn't have a source.
        var matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);
        if (matchWithoutSource) {
            return {
                content: matchWithoutSource[1],
                fileName: '',
                location: null
            };
        }
        return null;
    }).filter(Boolean);
    return {
        type: 'legacy',
        stack: legacyStack
    };
}
function parseLogBoxException(error) {
    var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
    var metroInternalError = message.match(RE_METRO_ERROR_FORMAT);
    if (metroInternalError) {
        var _metroInternalError_slice = _sliced_to_array._(metroInternalError.slice(1), 5), content = _metroInternalError_slice[0], fileName = _metroInternalError_slice[1], row = _metroInternalError_slice[2], column = _metroInternalError_slice[3], codeFrame = _metroInternalError_slice[4];
        return {
            level: 'fatal',
            type: 'Metro Error',
            stack: [],
            isComponentError: false,
            componentStackType: 'legacy',
            componentStack: [],
            codeFrame: {
                fileName,
                location: {
                    row: parseInt(row, 10),
                    column: parseInt(column, 10)
                },
                content: codeFrame
            },
            message: {
                content,
                substitutions: []
            },
            category: `${fileName}-${row}-${column}`,
            extraData: error.extraData
        };
    }
    var babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);
    if (babelTransformError) {
        // Transform errors are thrown from inside the Babel transformer.
        var _babelTransformError_slice = _sliced_to_array._(babelTransformError.slice(1), 5), fileName1 = _babelTransformError_slice[0], content1 = _babelTransformError_slice[1], row1 = _babelTransformError_slice[2], column1 = _babelTransformError_slice[3], codeFrame1 = _babelTransformError_slice[4];
        return {
            level: 'syntax',
            stack: [],
            isComponentError: false,
            componentStackType: 'legacy',
            componentStack: [],
            codeFrame: {
                fileName: fileName1,
                location: {
                    row: parseInt(row1, 10),
                    column: parseInt(column1, 10)
                },
                content: codeFrame1
            },
            message: {
                content: content1,
                substitutions: []
            },
            category: `${fileName1}-${row1}-${column1}`,
            extraData: error.extraData
        };
    }
    // Perform a cheap match first before trying to parse the full message, which
    // can get expensive for arbitrary input.
    if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {
        var babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);
        if (babelCodeFrameError) {
            // Codeframe errors are thrown from any use of buildCodeFrameError.
            var _babelCodeFrameError_slice = _sliced_to_array._(babelCodeFrameError.slice(1), 3), fileName2 = _babelCodeFrameError_slice[0], content2 = _babelCodeFrameError_slice[1], codeFrame2 = _babelCodeFrameError_slice[2];
            return {
                level: 'syntax',
                stack: [],
                isComponentError: false,
                componentStackType: 'legacy',
                componentStack: [],
                codeFrame: {
                    fileName: fileName2,
                    location: null,
                    content: codeFrame2
                },
                message: {
                    content: content2,
                    substitutions: []
                },
                category: `${fileName2}-${1}-${1}`,
                extraData: error.extraData
            };
        }
    }
    if (message.match(RE_TRANSFORM_ERROR)) {
        return {
            level: 'syntax',
            stack: error.stack,
            isComponentError: error.isComponentError,
            componentStackType: 'legacy',
            componentStack: [],
            message: {
                content: message,
                substitutions: []
            },
            category: message,
            extraData: error.extraData
        };
    }
    var componentStack = error.componentStack;
    if (error.isFatal || error.isComponentError) {
        if (componentStack != null) {
            var _parseComponentStack = parseComponentStack(componentStack), type = _parseComponentStack.type, stack = _parseComponentStack.stack;
            return _object_spread._({
                level: 'fatal',
                stack: error.stack,
                isComponentError: error.isComponentError,
                componentStackType: type,
                componentStack: stack,
                extraData: error.extraData
            }, parseInterpolation([
                message
            ]));
        } else {
            return _object_spread._({
                level: 'fatal',
                stack: error.stack,
                isComponentError: error.isComponentError,
                componentStackType: 'legacy',
                componentStack: [],
                extraData: error.extraData
            }, parseInterpolation([
                message
            ]));
        }
    }
    if (componentStack != null) {
        // It is possible that console errors have a componentStack.
        var _parseComponentStack1 = parseComponentStack(componentStack), type1 = _parseComponentStack1.type, stack1 = _parseComponentStack1.stack;
        return _object_spread._({
            level: 'error',
            stack: error.stack,
            isComponentError: error.isComponentError,
            componentStackType: type1,
            componentStack: stack1,
            extraData: error.extraData
        }, parseInterpolation([
            message
        ]));
    }
    // Most `console.error` calls won't have a componentStack. We parse them like
    // regular logs which have the component stack buried in the message.
    return _object_spread._({
        level: 'error',
        stack: error.stack,
        isComponentError: error.isComponentError,
        extraData: error.extraData
    }, parseLogBoxLog([
        message
    ]));
}
function withoutANSIColorStyles(message) {
    if (typeof message !== 'string') {
        return message;
    }
    return message.replace(// eslint-disable-next-line no-control-regex
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
function parseLogBoxLog(args) {
    var message = withoutANSIColorStyles(args[0]);
    var argsWithoutComponentStack = [];
    var componentStack = [];
    var componentStackType = 'legacy';
    // Extract component stack from warnings like "Some warning%s".
    if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
        var lastArg = args[args.length - 1];
        if (typeof lastArg === 'string' && isComponentStack(lastArg)) {
            argsWithoutComponentStack = args.slice(0, -1);
            argsWithoutComponentStack[0] = message.slice(0, -2);
            var _parseComponentStack = parseComponentStack(lastArg), type = _parseComponentStack.type, stack = _parseComponentStack.stack;
            componentStack = stack;
            componentStackType = type;
        }
    }
    if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {
        // Try finding the component stack elsewhere.
        for (var arg of args){
            if (typeof arg === 'string' && isComponentStack(arg)) {
                // Strip out any messages before the component stack.
                var messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);
                if (messageEndIndex < 0) {
                    // Handle JSC component stacks.
                    messageEndIndex = arg.search(/\n/);
                }
                if (messageEndIndex > 0) {
                    argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
                }
                var _parseComponentStack1 = parseComponentStack(arg), type1 = _parseComponentStack1.type, stack1 = _parseComponentStack1.stack;
                componentStack = stack1;
                componentStackType = type1;
            } else {
                argsWithoutComponentStack.push(arg);
            }
        }
    }
    return _object_spread_props._(_object_spread._({}, parseInterpolation(argsWithoutComponentStack)), {
        componentStack,
        componentStackType
    });
}


}),
72780: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _to_consumable_array = __webpack_require__(92716);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _RCTLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86053));
var _parseLogBoxLog = __webpack_require__(20659);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var LogBox;
/**
 * LogBox displays logs in the app.
 */ if (false) { var addException, _require, registerWarning, isRCTLogAdviceWarning, isLogBoxInstalled, consoleErrorImpl, registerError, consoleWarnImpl, originalConsoleError, parseLogBoxLog, isWarningModuleWarning, originalConsoleWarn, parseInterpolation, LogBoxData } else {
    LogBox = {
        install () {
        // Do nothing.
        },
        uninstall () {
        // Do nothing.
        },
        isInstalled () {
            return false;
        },
        ignoreLogs (patterns) {
        // Do nothing.
        },
        ignoreAllLogs (value) {
        // Do nothing.
        },
        clearAllLogs () {
        // Do nothing.
        },
        addLog (log) {
        // Do nothing.
        },
        addException (error) {
        // Do nothing.
        }
    };
}
var _default = LogBox;


}),
97982: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _ModalInjection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89913));
var _NativeModalManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29349));
var _RCTModalHostViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33307));
var _virtualizedlists = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60155));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var ScrollView = (__webpack_require__(27864)/* ["default"] */["default"]);
var View = (__webpack_require__(87847)/* ["default"] */["default"]);
var AppContainer = (__webpack_require__(68710)/* ["default"] */["default"]);
var I18nManager = (__webpack_require__(38722)/* ["default"] */["default"]);
var RootTagContext = (__webpack_require__(90839)/* .RootTagContext */.RootTagContext);
var StyleSheet = (__webpack_require__(5938)/* ["default"] */["default"]);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var VirtualizedListContextResetter = _virtualizedlists.default.VirtualizedListContextResetter;
var ModalEventEmitter = Platform.OS === 'ios' && _NativeModalManager.default != null ? new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
Platform.OS !== 'ios' ? null : _NativeModalManager.default) : null;
/**
 * The Modal component is a simple way to present content above an enclosing view.
 *
 * See https://reactnative.dev/docs/modal
 */ // In order to route onDismiss callbacks, we need to uniquely identifier each
// <Modal> on screen. There can be different ones, either nested or as siblings.
// We cannot pass the onDismiss callback to native as the view will be
// destroyed before the callback is fired.
var uniqueModalIdentifier = 0;
function confirmProps(props) {
    if (false) {}
}
// Create a state to track whether the Modal is rendering or not.
// This is the only prop that controls whether the modal is rendered or not.
var Modal = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Modal, _React_Component);
    function Modal(props) {
        _class_call_check._(this, Modal);
        var _this;
        _this = _call_super._(this, Modal, [
            props
        ]);
        if (false) {}
        _this._identifier = uniqueModalIdentifier++;
        _this.state = {
            isRendered: props.visible === true
        };
        return _this;
    }
    _create_class._(Modal, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                // 'modalDismissed' is for the old renderer in iOS only
                if (ModalEventEmitter) {
                    this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', (event)=>{
                        this.setState({
                            isRendered: false
                        }, ()=>{
                            if (event.modalID === this._identifier && this.props.onDismiss) {
                                this.props.onDismiss();
                            }
                        });
                    });
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (Platform.OS === 'ios') {
                    this.setState({
                        isRendered: false
                    });
                }
                if (this._eventSubscription) {
                    this._eventSubscription.remove();
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                if (prevProps.visible === false && this.props.visible === true) {
                    this.setState({
                        isRendered: true
                    });
                }
                if (false) {}
            }
        },
        {
            // Helper function to encapsulate platform specific logic to show or not the Modal.
            key: "_shouldShowModal",
            value: function _shouldShowModal() {
                if (Platform.OS === 'ios') {
                    return this.props.visible === true || this.state.isRendered === true;
                }
                return this.props.visible === true;
            }
        },
        {
            key: "render",
            value: function render() {
                if (!this._shouldShowModal()) {
                    return null;
                }
                var containerStyles = {
                    backgroundColor: this.props.transparent === true ? 'transparent' : this.props.backdropColor ?? 'white'
                };
                var animationType = this.props.animationType || 'none';
                var presentationStyle = this.props.presentationStyle;
                if (!presentationStyle) {
                    presentationStyle = 'fullScreen';
                    if (this.props.transparent === true) {
                        presentationStyle = 'overFullScreen';
                    }
                }
                var innerChildren =  false ? /*#__PURE__*/ 0 : this.props.children;
                var onDismiss = ()=>{
                    // OnDismiss is implemented on iOS only.
                    if (Platform.OS === 'ios') {
                        this.setState({
                            isRendered: false
                        }, ()=>{
                            if (this.props.onDismiss) {
                                this.props.onDismiss();
                            }
                        });
                    }
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RCTModalHostViewNativeComponent.default, {
                    animationType: animationType,
                    presentationStyle: presentationStyle,
                    transparent: this.props.transparent,
                    hardwareAccelerated: this.props.hardwareAccelerated,
                    onRequestClose: this.props.onRequestClose,
                    onShow: this.props.onShow,
                    onDismiss: onDismiss,
                    visible: this.props.visible,
                    statusBarTranslucent: this.props.statusBarTranslucent,
                    navigationBarTranslucent: this.props.navigationBarTranslucent,
                    identifier: this._identifier,
                    style: styles.modal,
                    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    onStartShouldSetResponder: this._shouldSetResponder,
                    supportedOrientations: this.props.supportedOrientations,
                    onOrientationChange: this.props.onOrientationChange,
                    testID: this.props.testID,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedListContextResetter, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView.Context.Provider, {
                            value: null,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(View, {
                                // $FlowFixMe[incompatible-type]
                                style: [
                                    styles.container,
                                    containerStyles
                                ],
                                collapsable: false,
                                children: innerChildren
                            })
                        })
                    })
                });
            }
        },
        {
            // We don't want any responder events bubbling out of the modal.
            key: "_shouldSetResponder",
            value: function _shouldSetResponder() {
                return true;
            }
        }
    ]);
    return Modal;
}(_react.default.Component);
Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
};
Modal.contextType = RootTagContext;
var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
    modal: {
        position: 'absolute'
    },
    container: {
        /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This
     * comment suppresses an error found when Flow v0.111 was deployed. To see
     * the error, delete this comment and run Flow. */ // $FlowFixMe[incompatible-call]
        [side]: 0,
        top: 0,
        flex: 1
    }
});
var ExportedModal = _ModalInjection.default.unstable_Modal ?? Modal;
var _default = ExportedModal;


}),
89913: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _default = {
    unstable_Modal: null
};


}),
9806: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34650));
var _ViewConfigIgnore = __webpack_require__(72291);
var bubblingEventTypes = {
    // Bubbling events from UIManagerModuleConstants.java
    topChange: {
        phasedRegistrationNames: {
            captured: 'onChangeCapture',
            bubbled: 'onChange'
        }
    },
    topSelect: {
        phasedRegistrationNames: {
            captured: 'onSelectCapture',
            bubbled: 'onSelect'
        }
    },
    topTouchEnd: {
        phasedRegistrationNames: {
            captured: 'onTouchEndCapture',
            bubbled: 'onTouchEnd'
        }
    },
    topTouchCancel: {
        phasedRegistrationNames: {
            captured: 'onTouchCancelCapture',
            bubbled: 'onTouchCancel'
        }
    },
    topTouchStart: {
        phasedRegistrationNames: {
            captured: 'onTouchStartCapture',
            bubbled: 'onTouchStart'
        }
    },
    topTouchMove: {
        phasedRegistrationNames: {
            captured: 'onTouchMoveCapture',
            bubbled: 'onTouchMove'
        }
    },
    // Experimental/Work in Progress Pointer Events (not yet ready for use)
    topPointerCancel: {
        phasedRegistrationNames: {
            captured: 'onPointerCancelCapture',
            bubbled: 'onPointerCancel'
        }
    },
    topPointerDown: {
        phasedRegistrationNames: {
            captured: 'onPointerDownCapture',
            bubbled: 'onPointerDown'
        }
    },
    topPointerEnter: {
        phasedRegistrationNames: {
            captured: 'onPointerEnterCapture',
            bubbled: 'onPointerEnter',
            skipBubbling: true
        }
    },
    topPointerLeave: {
        phasedRegistrationNames: {
            captured: 'onPointerLeaveCapture',
            bubbled: 'onPointerLeave',
            skipBubbling: true
        }
    },
    topPointerMove: {
        phasedRegistrationNames: {
            captured: 'onPointerMoveCapture',
            bubbled: 'onPointerMove'
        }
    },
    topPointerUp: {
        phasedRegistrationNames: {
            captured: 'onPointerUpCapture',
            bubbled: 'onPointerUp'
        }
    },
    topPointerOut: {
        phasedRegistrationNames: {
            captured: 'onPointerOutCapture',
            bubbled: 'onPointerOut'
        }
    },
    topPointerOver: {
        phasedRegistrationNames: {
            captured: 'onPointerOverCapture',
            bubbled: 'onPointerOver'
        }
    },
    topClick: {
        phasedRegistrationNames: {
            captured: 'onClickCapture',
            bubbled: 'onClick'
        }
    }
};
var directEventTypes = {
    topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerStateChange'
    }),
    // Direct events from UIManagerModuleConstants.java
    topContentSizeChange: {
        registrationName: 'onContentSizeChange'
    },
    topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
    },
    topMessage: {
        registrationName: 'onMessage'
    },
    topSelectionChange: {
        registrationName: 'onSelectionChange'
    },
    topLoadingFinish: {
        registrationName: 'onLoadingFinish'
    },
    topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
    },
    topLoadingStart: {
        registrationName: 'onLoadingStart'
    },
    topLoadingError: {
        registrationName: 'onLoadingError'
    },
    topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
    },
    topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
    },
    topScroll: {
        registrationName: 'onScroll'
    },
    topLayout: {
        registrationName: 'onLayout'
    }
};
var validAttributesForNonEventProps = {
    // @ReactProps from BaseViewManager
    backgroundColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    transform: true,
    transformOrigin: true,
    experimental_backgroundImage: {
        process: (__webpack_require__(33518)/* ["default"] */["default"])
    },
    boxShadow: _NativeReactNativeFeatureFlags.default != null && _ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
        process: (__webpack_require__(47204)/* ["default"] */["default"])
    },
    filter: _NativeReactNativeFeatureFlags.default != null && _ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
        process: (__webpack_require__(62354)/* ["default"] */["default"])
    },
    mixBlendMode: true,
    isolation: true,
    opacity: true,
    elevation: true,
    shadowColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    zIndex: true,
    renderToHardwareTextureAndroid: true,
    testID: true,
    nativeID: true,
    accessibilityLabelledBy: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityRole: true,
    accessibilityCollection: true,
    accessibilityCollectionItem: true,
    accessibilityState: true,
    accessibilityActions: true,
    accessibilityValue: true,
    importantForAccessibility: true,
    role: true,
    rotation: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true,
    accessibilityLiveRegion: true,
    // @ReactProps from LayoutShadowNode
    width: true,
    minWidth: true,
    collapsable: true,
    collapsableChildren: true,
    maxWidth: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    aspectRatio: true,
    flexDirection: true,
    flexWrap: true,
    alignSelf: true,
    alignItems: true,
    alignContent: true,
    justifyContent: true,
    overflow: true,
    display: true,
    boxSizing: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    borderWidth: true,
    borderStartWidth: true,
    borderEndWidth: true,
    borderTopWidth: true,
    borderBottomWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    outlineColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    start: true,
    end: true,
    left: true,
    right: true,
    top: true,
    bottom: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    position: true,
    style: _ReactNativeStyleAttributes.default,
    // ReactClippingViewManager @ReactProps
    removeClippedSubviews: true,
    // ReactViewManager @ReactProps
    accessible: true,
    hasTVPreferredFocus: true,
    nextFocusDown: true,
    nextFocusForward: true,
    nextFocusLeft: true,
    nextFocusRight: true,
    nextFocusUp: true,
    borderRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderBottomRightRadius: true,
    borderBottomLeftRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    hitSlop: true,
    pointerEvents: true,
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true,
    needsOffscreenAlphaCompositing: true,
    borderColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderLeftColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderRightColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderTopColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBottomColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    focusable: true,
    backfaceVisibility: true
};
// Props for bubbling and direct events
var validAttributesForEventProps = {
    onLayout: true,
    // PanResponder handlers
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    // Touch events
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    // Pointer events
    onClick: true,
    onClickCapture: true,
    onPointerEnter: true,
    onPointerEnterCapture: true,
    onPointerLeave: true,
    onPointerLeaveCapture: true,
    onPointerMove: true,
    onPointerMoveCapture: true,
    onPointerOut: true,
    onPointerOutCapture: true,
    onPointerOver: true,
    onPointerOverCapture: true
};
/**
 * On Android, Props are derived from a ViewManager and its ShadowNode.
 *
 * Where did we find these base platform props from?
 * - Nearly all component ViewManagers descend from BaseViewManager,
 * - and BaseViewManagers' ShadowNodes descend from LayoutShadowNode.
 * - Also, all components inherit ViewConfigs from UIManagerModuleConstants.java.
 *
 * So, these ViewConfigs are generated from LayoutShadowNode and BaseViewManager.
 */ var PlatformBaseViewConfigAndroid = {
    directEventTypes,
    bubblingEventTypes,
    validAttributes: _object_spread._({}, validAttributesForNonEventProps, validAttributesForEventProps)
};
var _default = PlatformBaseViewConfigAndroid;


}),
21622: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _BaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9806));
var PlatformBaseViewConfig = _BaseViewConfig.default;
var _default = PlatformBaseViewConfig;


}),
65181: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    stringifyValidationResult: function() {
        return stringifyValidationResult;
    },
    validate: function() {
        return validate;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _to_consumable_array = __webpack_require__(92716);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
        bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
        directEventTypes: nativeViewConfig.directEventTypes,
        uiViewClassName: nativeViewConfig.uiViewClassName,
        validAttributes: nativeViewConfig.validAttributes
    }, {
        bubblingEventTypes: staticViewConfig.bubblingEventTypes,
        directEventTypes: staticViewConfig.directEventTypes,
        uiViewClassName: staticViewConfig.uiViewClassName,
        validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
        return {
            type: 'valid'
        };
    }
    return {
        type: 'invalid',
        differences
    };
}
function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [
        `StaticViewConfigValidator: Invalid static view config for '${name}'.`,
        ''
    ].concat(_to_consumable_array._(differences.map((difference)=>{
        var type = difference.type, path = difference.path;
        switch(type){
            case 'missing':
                return `- '${path.join('.')}' is missing.`;
            case 'unequal':
                return `- '${path.join('.')}' is the wrong value.`;
        }
    })), [
        ''
    ]).join('\n');
}
function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for(var nativeKey in nativeObject){
        // $FlowFixMe[invalid-computed-prop]
        var nativeValue = nativeObject[nativeKey];
        if (!staticObject.hasOwnProperty(nativeKey)) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'missing',
                nativeValue
            });
            continue;
        }
        // $FlowFixMe[invalid-computed-prop]
        var staticValue = staticObject[nativeKey];
        var nativeValueIfObject = ifObject(nativeValue);
        if (nativeValueIfObject != null) {
            var staticValueIfObject = ifObject(staticValue);
            if (staticValueIfObject != null) {
                path.push(nativeKey);
                accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
                path.pop();
                continue;
            }
        }
        if (nativeValue !== staticValue && !_ReactNativeFeatureFlags.enableNativeCSSParsing()) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'unequal',
                nativeValue,
                staticValue
            });
        }
    }
}
function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
}


}),
20764: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createViewConfig", ({
    enumerable: true,
    get: function() {
        return createViewConfig;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _PlatformBaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21622));
function createViewConfig(partialViewConfig) {
    return {
        uiViewClassName: partialViewConfig.uiViewClassName,
        Commands: {},
        bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
        directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
        // $FlowFixMe[incompatible-return]
        validAttributes: composeIndexers(// $FlowFixMe[incompatible-call] `style` property confuses Flow.
        _PlatformBaseViewConfig.default.validAttributes, // $FlowFixMe[incompatible-call] `style` property confuses Flow.
        partialViewConfig.validAttributes)
    };
}
function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : _object_spread._({}, maybeA, maybeB);
}


}),
72291: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConditionallyIgnoredEventHandlers: function() {
        return ConditionallyIgnoredEventHandlers;
    },
    DynamicallyInjectedByGestureHandler: function() {
        return DynamicallyInjectedByGestureHandler;
    },
    isIgnored: function() {
        return isIgnored;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var ignoredViewConfigProps = new WeakSet();
function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
}
function ConditionallyIgnoredEventHandlers(value) {
    if (_Platform.default.OS === 'ios') {
        return value;
    }
    return undefined;
}
function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
        return ignoredViewConfigProps.has(value);
    }
    return false;
}


}),
38834: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
/**
 * Encode a FormData filename compliant with RFC 2183
 *
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#directives
 */ function encodeFilename(filename) {
    return encodeURIComponent(filename.replace(/\//g, '_'));
}
/**
 * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
 * with mixed data (string, native files) to be submitted via XMLHttpRequest.
 *
 * Example:
 *
 *   var photo = {
 *     uri: uriFromCameraRoll,
 *     type: 'image/jpeg',
 *     name: 'photo.jpg',
 *   };
 *
 *   var body = new FormData();
 *   body.append('authToken', 'secret');
 *   body.append('photo', photo);
 *   body.append('title', 'A beautiful photo!');
 *
 *   xhr.open('POST', serverURL);
 *   xhr.send(body);
 */ var FormData = /*#__PURE__*/ function() {
    function FormData() {
        _class_call_check._(this, FormData);
        this._parts = [];
    }
    _create_class._(FormData, [
        {
            key: "append",
            value: function append(key, value) {
                // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
                // MDN says that any new values should be appended to existing values.
                // In any case, major browsers allow duplicate keys, so that's what we'll do
                // too. They'll simply get appended as additional form data parts in the
                // request body, leaving the server to deal with them.
                this._parts.push([
                    key,
                    value
                ]);
            }
        },
        {
            key: "getAll",
            value: function getAll(key) {
                return this._parts.filter((ref)=>{
                    var _ref = _sliced_to_array._(ref, 1), name = _ref[0];
                    return name === key;
                }).map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), value = _ref[1];
                    return value;
                });
            }
        },
        {
            key: "getParts",
            value: function getParts() {
                return this._parts.map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), name = _ref[0], value = _ref[1];
                    var contentDisposition = 'form-data; name="' + name + '"';
                    var headers = {
                        'content-disposition': contentDisposition
                    };
                    // The body part is a "blob", which in React Native just means
                    // an object with a `uri` attribute. Optionally, it can also
                    // have a `name` and `type` attribute to specify filename and
                    // content type (cf. web Blob interface.)
                    if (typeof value === 'object' && !Array.isArray(value) && value) {
                        if (typeof value.name === 'string') {
                            headers['content-disposition'] += `; filename="${encodeFilename(value.name)}"`;
                        }
                        if (typeof value.type === 'string') {
                            headers['content-type'] = value.type;
                        }
                        return _object_spread_props._(_object_spread._({}, value), {
                            headers,
                            fieldName: name
                        });
                    }
                    // Convert non-object values to strings as per FormData.append() spec
                    return {
                        string: String(value),
                        headers,
                        fieldName: name
                    };
                });
            }
        }
    ]);
    return FormData;
}();
var _default = FormData;


}),
32478: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Do not require the native RCTNetworking module directly! Use this wrapper module instead.
// It will add the necessary requestId, so that you don't have to generate it yourself.
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _convertRequestBody = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99394));
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33291));
// Convert FormData headers to arrays, which are easier to consume in
// native on Android.
function convertHeadersMapToArray(headers) {
    var headerArray = [];
    for(var name in headers){
        headerArray.push([
            name,
            headers[name]
        ]);
    }
    return headerArray;
}
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
var emitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
_Platform.default.OS !== 'ios' ? null : _NativeNetworkingAndroid.default);
/**
 * This object is a wrapper around the native RCTNetworking module. It adds a necessary unique
 * requestId to each network request that can be used to abort that request later on.
 */ var RCTNetworking = {
    addListener (eventType, listener, context) {
        // $FlowFixMe[incompatible-call]
        return emitter.addListener(eventType, listener, context);
    },
    sendRequest (method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        if (body && body.formData) {
            body.formData = body.formData.map((part)=>_object_spread_props._(_object_spread._({}, part), {
                    headers: convertHeadersMapToArray(part.headers)
                }));
        }
        var requestId = generateRequestId();
        _NativeNetworkingAndroid.default.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _object_spread_props._(_object_spread._({}, body), {
            trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
    },
    abortRequest (requestId) {
        _NativeNetworkingAndroid.default.abortRequest(requestId);
    },
    clearCookies (callback) {
        _NativeNetworkingAndroid.default.clearCookies(callback);
    }
};
var _default = RCTNetworking;


}),
47644: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Use a global instead of a flag from ReactNativeFeatureFlags because this will
// be read before apps have a chance to set overrides.
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _global_RN$useBuiltInEventTarget, _global;
var useBuiltInEventTarget = (_global_RN$useBuiltInEventTarget = (_global = __webpack_require__.g).RN$useBuiltInEventTarget) === null || _global_RN$useBuiltInEventTarget === void 0 ? void 0 : _global_RN$useBuiltInEventTarget.call(_global);
var _default = useBuiltInEventTarget ? (__webpack_require__(33204)/* ["default"] */["default"]) : (__webpack_require__(74791)/* ["default"] */["default"]);


}),
33204: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var _EventHandlerAttributes = __webpack_require__(85950);
var _EventTarget = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12020));
var _EventTargetInternals = __webpack_require__(33315);
var _ProgressEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29294));
var BlobManager = (__webpack_require__(28586)/* ["default"] */["default"]);
var GlobalPerformanceLogger = (__webpack_require__(27160)/* ["default"] */["default"]);
var RCTNetworking = (__webpack_require__(32478)/* ["default"] */["default"]);
var base64 = __webpack_require__(25608);
var invariant = __webpack_require__(56481);
var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging
var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
// The native blob module is optional so inject it here if available.
if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
}
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;
var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof __webpack_require__.g.ArrayBuffer === 'function',
    blob: typeof __webpack_require__.g.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
};
var XMLHttpRequestEventTarget = /*#__PURE__*/ function(EventTarget) {
    _inherits._(XMLHttpRequestEventTarget, EventTarget);
    function XMLHttpRequestEventTarget() {
        _class_call_check._(this, XMLHttpRequestEventTarget);
        return _call_super._(this, XMLHttpRequestEventTarget, arguments);
    }
    _create_class._(XMLHttpRequestEventTarget, [
        {
            key: "onload",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
            }
        },
        {
            key: "onloadstart",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
            }
        },
        {
            key: "onprogress",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
            }
        },
        {
            key: "ontimeout",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'timeout');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'timeout', listener);
            }
        },
        {
            key: "onerror",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
            }
        },
        {
            key: "onabort",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
            }
        },
        {
            key: "onloadend",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
            }
        }
    ]);
    return XMLHttpRequestEventTarget;
}(_wrap_native_super._(_EventTarget.default));
/**
 * Shared base for platform-specific XMLHttpRequest implementations.
 */ var XMLHttpRequest = /*#__PURE__*/ function(EventTarget) {
    _inherits._(XMLHttpRequest, EventTarget);
    function XMLHttpRequest() {
        _class_call_check._(this, XMLHttpRequest);
        var _this;
        _this = _call_super._(this, XMLHttpRequest), _this.UNSENT = UNSENT, _this.OPENED = OPENED, _this.HEADERS_RECEIVED = HEADERS_RECEIVED, _this.LOADING = LOADING, _this.DONE = DONE, _this.readyState = UNSENT, _this.status = 0, _this.timeout = 0, _this.withCredentials = true, _this.upload = new XMLHttpRequestEventTarget(), _this._aborted = false, _this._hasError = false, _this._method = null, _this._perfKey = null, _this._response = '', _this._url = null, _this._timedOut = false, _this._trackingName = null, _this._incrementalEvents = false, _this._startTime = null, _this._performanceLogger = GlobalPerformanceLogger;
        _this._reset();
        return _this;
    }
    _create_class._(XMLHttpRequest, [
        {
            key: "_reset",
            value: function _reset() {
                this.readyState = this.UNSENT;
                this.responseHeaders = undefined;
                this.status = 0;
                delete this.responseURL;
                this._requestId = null;
                this._cachedResponse = undefined;
                this._hasError = false;
                this._headers = {};
                this._response = '';
                this._responseType = '';
                this._sent = false;
                this._lowerCaseResponseHeaders = {};
                this._clearSubscriptions();
                this._timedOut = false;
            }
        },
        {
            key: "responseType",
            get: function() {
                return this._responseType;
            },
            set: function(responseType) {
                if (this._sent) {
                    throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
                }
                if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                    console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
                    return;
                }
                // redboxes early, e.g. for 'arraybuffer' on ios 7
                invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
                if (responseType === 'blob') {
                    invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
                }
                this._responseType = responseType;
            }
        },
        {
            key: "responseText",
            get: function() {
                if (this._responseType !== '' && this._responseType !== 'text') {
                    throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
                }
                if (this.readyState < LOADING) {
                    return '';
                }
                return this._response;
            }
        },
        {
            key: "response",
            get: function() {
                var responseType = this.responseType;
                if (responseType === '' || responseType === 'text') {
                    return this.readyState < LOADING || this._hasError ? '' : this._response;
                }
                if (this.readyState !== DONE) {
                    return null;
                }
                if (this._cachedResponse !== undefined) {
                    return this._cachedResponse;
                }
                switch(responseType){
                    case 'document':
                        this._cachedResponse = null;
                        break;
                    case 'arraybuffer':
                        this._cachedResponse = base64.toByteArray(this._response).buffer;
                        break;
                    case 'blob':
                        if (typeof this._response === 'object' && this._response) {
                            this._cachedResponse = BlobManager.createFromOptions(this._response);
                        } else if (this._response === '') {
                            this._cachedResponse = BlobManager.createFromParts([]);
                        } else {
                            throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
                        }
                        break;
                    case 'json':
                        try {
                            this._cachedResponse = JSON.parse(this._response);
                        } catch (_) {
                            this._cachedResponse = null;
                        }
                        break;
                    default:
                        this._cachedResponse = null;
                }
                return this._cachedResponse;
            }
        },
        {
            // exposed for testing
            key: "__didCreateRequest",
            value: function __didCreateRequest(requestId) {
                this._requestId = requestId;
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
            }
        },
        {
            // exposed for testing
            key: "__didUploadProgress",
            value: function __didUploadProgress(requestId, progress, total) {
                if (requestId === this._requestId) {
                    (0, _EventTargetInternals.dispatchTrustedEvent)(this.upload, new _ProgressEvent.default('progress', {
                        lengthComputable: true,
                        loaded: progress,
                        total
                    }));
                }
            }
        },
        {
            key: "__didReceiveResponse",
            value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
                if (requestId === this._requestId) {
                    this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
                    this.status = status;
                    this.setResponseHeaders(responseHeaders);
                    this.setReadyState(this.HEADERS_RECEIVED);
                    if (responseURL || responseURL === '') {
                        this.responseURL = responseURL;
                    } else {
                        delete this.responseURL;
                    }
                    XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
                }
            }
        },
        {
            key: "__didReceiveData",
            value: function __didReceiveData(requestId, response) {
                if (requestId !== this._requestId) {
                    return;
                }
                this._response = response;
                this._cachedResponse = undefined; // force lazy recomputation
                this.setReadyState(this.LOADING);
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
            }
        },
        {
            key: "__didReceiveIncrementalData",
            value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                if (!this._response) {
                    this._response = responseText;
                } else {
                    this._response += responseText;
                }
                if (XMLHttpRequest._profiling) {
                    performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
                }
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
                this.setReadyState(this.LOADING);
                this.__didReceiveDataProgress(requestId, progress, total);
            }
        },
        {
            key: "__didReceiveDataProgress",
            value: function __didReceiveDataProgress(requestId, loaded, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _ProgressEvent.default('progress', {
                    lengthComputable: total >= 0,
                    loaded,
                    total
                }));
            }
        },
        {
            // exposed for testing
            key: "__didCompleteResponse",
            value: function __didCompleteResponse(requestId, error, timeOutError) {
                if (requestId === this._requestId) {
                    if (error) {
                        if (this._responseType === '' || this._responseType === 'text') {
                            this._response = error;
                        }
                        this._hasError = true;
                        if (timeOutError) {
                            this._timedOut = true;
                        }
                    }
                    this._clearSubscriptions();
                    this._requestId = null;
                    this.setReadyState(this.DONE);
                    if (XMLHttpRequest._profiling && this._startTime != null) {
                        var start = this._startTime;
                        performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
                            start,
                            end: performance.now()
                        });
                    }
                    if (error) {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
                    } else {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
                    }
                }
            }
        },
        {
            key: "_clearSubscriptions",
            value: function _clearSubscriptions() {
                (this._subscriptions || []).forEach((sub)=>{
                    if (sub) {
                        sub.remove();
                    }
                });
                this._subscriptions = [];
            }
        },
        {
            key: "getAllResponseHeaders",
            value: function getAllResponseHeaders() {
                if (!this.responseHeaders) {
                    // according to the spec, return null if no response has been received
                    return null;
                }
                // Assign to non-nullable local variable.
                var responseHeaders = this.responseHeaders;
                var unsortedHeaders = new Map();
                for (var rawHeaderName of Object.keys(responseHeaders)){
                    var headerValue = responseHeaders[rawHeaderName];
                    var lowerHeaderName = rawHeaderName.toLowerCase();
                    var header = unsortedHeaders.get(lowerHeaderName);
                    if (header) {
                        header.headerValue += ', ' + headerValue;
                        unsortedHeaders.set(lowerHeaderName, header);
                    } else {
                        unsortedHeaders.set(lowerHeaderName, {
                            lowerHeaderName,
                            upperHeaderName: rawHeaderName.toUpperCase(),
                            headerValue
                        });
                    }
                }
                // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
                var sortedHeaders = _to_consumable_array._(unsortedHeaders.values()).sort((a, b)=>{
                    if (a.upperHeaderName < b.upperHeaderName) {
                        return -1;
                    }
                    if (a.upperHeaderName > b.upperHeaderName) {
                        return 1;
                    }
                    return 0;
                });
                // Combine into single text response.
                return sortedHeaders.map((header)=>{
                    return header.lowerHeaderName + ': ' + header.headerValue;
                }).join('\r\n') + '\r\n';
            }
        },
        {
            key: "getResponseHeader",
            value: function getResponseHeader(header) {
                var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
                return value !== undefined ? value : null;
            }
        },
        {
            key: "setRequestHeader",
            value: function setRequestHeader(header, value) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                this._headers[header.toLowerCase()] = String(value);
            }
        },
        {
            /**
   * Custom extension for tracking origins of request.
   */ key: "setTrackingName",
            value: function setTrackingName(trackingName) {
                this._trackingName = trackingName;
                return this;
            }
        },
        {
            /**
   * Custom extension for setting a custom performance logger
   */ key: "setPerformanceLogger",
            value: function setPerformanceLogger(performanceLogger) {
                this._performanceLogger = performanceLogger;
                return this;
            }
        },
        {
            key: "open",
            value: function open(method, url, async) {
                /* Other optional arguments are not supported yet */ if (this.readyState !== this.UNSENT) {
                    throw new Error('Cannot open, already sending');
                }
                if (async !== undefined && !async) {
                    // async is default
                    throw new Error('Synchronous http requests are not supported');
                }
                if (!url) {
                    throw new Error('Cannot load an empty url');
                }
                this._method = method.toUpperCase();
                this._url = url;
                this._aborted = false;
                this.setReadyState(this.OPENED);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                if (this._sent) {
                    throw new Error('Request has already been sent');
                }
                this._sent = true;
                var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
                this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', (args)=>this.__didUploadProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', (args)=>this.__didReceiveResponse.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', (args)=>this.__didReceiveData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', (args)=>this.__didReceiveIncrementalData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', (args)=>this.__didReceiveDataProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', (args)=>this.__didCompleteResponse.apply(this, _to_consumable_array._(args))));
                var nativeResponseType = 'text';
                if (this._responseType === 'arraybuffer') {
                    nativeResponseType = 'base64';
                }
                if (this._responseType === 'blob') {
                    nativeResponseType = 'blob';
                }
                var doSend = ()=>{
                    var friendlyName = this._trackingName ?? this._url;
                    this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
                    this._performanceLogger.startTimespan(this._perfKey);
                    this._startTime = performance.now();
                    invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
                    invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
                    RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
         * when making Flow check .android.js files. */ nativeResponseType, incrementalEvents, this.timeout, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this.__didCreateRequest.bind(this), this.withCredentials);
                };
                if (DEBUG_NETWORK_SEND_DELAY) {
                    setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
                } else {
                    doSend();
                }
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                if (this._requestId) {
                    RCTNetworking.abortRequest(this._requestId);
                }
                // only call onreadystatechange if there is something to abort,
                // below logic is per spec
                if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
                    this._reset();
                    this.setReadyState(this.DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "setResponseHeaders",
            value: function setResponseHeaders(responseHeaders) {
                this.responseHeaders = responseHeaders || null;
                var headers = responseHeaders || {};
                this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName)=>{
                    // $FlowFixMe[invalid-computed-prop]
                    lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
                    return lcaseHeaders;
                }, {});
            }
        },
        {
            key: "setReadyState",
            value: function setReadyState(newState) {
                this.readyState = newState;
                (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('readystatechange'));
                if (newState === this.DONE) {
                    if (this._aborted) {
                        (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('abort'));
                    } else if (this._hasError) {
                        if (this._timedOut) {
                            (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('timeout'));
                        } else {
                            (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('error'));
                        }
                    } else {
                        (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('load'));
                    }
                    (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('loadend'));
                }
            }
        },
        {
            key: "addEventListener",
            value: function addEventListener(type, listener) {
                // If we dont' have a 'readystatechange' event handler, we don't
                // have to send repeated LOADING events with incremental updates
                // to responseText, which will avoid a bunch of native -> JS
                // bridge traffic.
                if (type === 'readystatechange' || type === 'progress') {
                    this._incrementalEvents = true;
                }
                _get._(_get_prototype_of._(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
            }
        },
        {
            key: "_getMeasureURL",
            value: function _getMeasureURL() {
                return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
            }
        },
        {
            key: "onabort",
            get: /*
   * `on<event>` event handling (without JS prototype magic).
   */ function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
            }
        },
        {
            key: "onerror",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
            }
        },
        {
            key: "onload",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
            }
        },
        {
            key: "onloadstart",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
            }
        },
        {
            key: "onprogress",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
            }
        },
        {
            key: "ontimeout",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'timeout');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'timeout', listener);
            }
        },
        {
            key: "onloadend",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
            }
        },
        {
            key: "onreadystatechange",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'readystatechange');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'readystatechange', listener);
            }
        }
    ], [
        {
            key: "__setInterceptor_DO_NOT_USE",
            value: function __setInterceptor_DO_NOT_USE(interceptor) {
                XMLHttpRequest._interceptor = interceptor;
            }
        },
        {
            key: "enableProfiling",
            value: function enableProfiling(enableProfiling) {
                XMLHttpRequest._profiling = enableProfiling;
            }
        }
    ]);
    return XMLHttpRequest;
}(_wrap_native_super._(_EventTarget.default));
XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;
XMLHttpRequest._profiling = false;
var _default = XMLHttpRequest;


}),
74791: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
var BlobManager = (__webpack_require__(28586)/* ["default"] */["default"]);
var GlobalPerformanceLogger = (__webpack_require__(27160)/* ["default"] */["default"]);
var RCTNetworking = (__webpack_require__(32478)/* ["default"] */["default"]);
var base64 = __webpack_require__(25608);
var invariant = __webpack_require__(56481);
var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging
var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
// The native blob module is optional so inject it here if available.
if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
}
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;
var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof __webpack_require__.g.ArrayBuffer === 'function',
    blob: typeof __webpack_require__.g.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
};
var REQUEST_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'progress',
    'timeout',
    'loadend'
];
var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
var XMLHttpRequestEventTarget = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequestEventTarget, _EventTarget);
    function XMLHttpRequestEventTarget() {
        _class_call_check._(this, XMLHttpRequestEventTarget);
        return _call_super._(this, XMLHttpRequestEventTarget, arguments);
    }
    return XMLHttpRequestEventTarget;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(REQUEST_EVENTS)));
/**
 * Shared base for platform-specific XMLHttpRequest implementations.
 */ var XMLHttpRequest = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequest, _EventTarget);
    function XMLHttpRequest() {
        _class_call_check._(this, XMLHttpRequest);
        var _this;
        _this = _call_super._(this, XMLHttpRequest), _this.UNSENT = UNSENT, _this.OPENED = OPENED, _this.HEADERS_RECEIVED = HEADERS_RECEIVED, _this.LOADING = LOADING, _this.DONE = DONE, _this.readyState = UNSENT, _this.status = 0, _this.timeout = 0, _this.withCredentials = true, _this.upload = new XMLHttpRequestEventTarget(), _this._aborted = false, _this._hasError = false, _this._method = null, _this._perfKey = null, _this._response = '', _this._url = null, _this._timedOut = false, _this._trackingName = null, _this._incrementalEvents = false, _this._startTime = null, _this._performanceLogger = GlobalPerformanceLogger;
        _this._reset();
        return _this;
    }
    _create_class._(XMLHttpRequest, [
        {
            key: "_reset",
            value: function _reset() {
                this.readyState = this.UNSENT;
                this.responseHeaders = undefined;
                this.status = 0;
                delete this.responseURL;
                this._requestId = null;
                this._cachedResponse = undefined;
                this._hasError = false;
                this._headers = {};
                this._response = '';
                this._responseType = '';
                this._sent = false;
                this._lowerCaseResponseHeaders = {};
                this._clearSubscriptions();
                this._timedOut = false;
            }
        },
        {
            key: "responseType",
            get: function() {
                return this._responseType;
            },
            set: function(responseType) {
                if (this._sent) {
                    throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
                }
                if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                    console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
                    return;
                }
                // redboxes early, e.g. for 'arraybuffer' on ios 7
                invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
                if (responseType === 'blob') {
                    invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
                }
                this._responseType = responseType;
            }
        },
        {
            key: "responseText",
            get: function() {
                if (this._responseType !== '' && this._responseType !== 'text') {
                    throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
                }
                if (this.readyState < LOADING) {
                    return '';
                }
                return this._response;
            }
        },
        {
            key: "response",
            get: function() {
                var responseType = this.responseType;
                if (responseType === '' || responseType === 'text') {
                    return this.readyState < LOADING || this._hasError ? '' : this._response;
                }
                if (this.readyState !== DONE) {
                    return null;
                }
                if (this._cachedResponse !== undefined) {
                    return this._cachedResponse;
                }
                switch(responseType){
                    case 'document':
                        this._cachedResponse = null;
                        break;
                    case 'arraybuffer':
                        this._cachedResponse = base64.toByteArray(this._response).buffer;
                        break;
                    case 'blob':
                        if (typeof this._response === 'object' && this._response) {
                            this._cachedResponse = BlobManager.createFromOptions(this._response);
                        } else if (this._response === '') {
                            this._cachedResponse = BlobManager.createFromParts([]);
                        } else {
                            throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
                        }
                        break;
                    case 'json':
                        try {
                            this._cachedResponse = JSON.parse(this._response);
                        } catch (_) {
                            this._cachedResponse = null;
                        }
                        break;
                    default:
                        this._cachedResponse = null;
                }
                return this._cachedResponse;
            }
        },
        {
            // exposed for testing
            key: "__didCreateRequest",
            value: function __didCreateRequest(requestId) {
                this._requestId = requestId;
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
            }
        },
        {
            // exposed for testing
            key: "__didUploadProgress",
            value: function __didUploadProgress(requestId, progress, total) {
                if (requestId === this._requestId) {
                    this.upload.dispatchEvent({
                        type: 'progress',
                        lengthComputable: true,
                        loaded: progress,
                        total
                    });
                }
            }
        },
        {
            key: "__didReceiveResponse",
            value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
                if (requestId === this._requestId) {
                    this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
                    this.status = status;
                    this.setResponseHeaders(responseHeaders);
                    this.setReadyState(this.HEADERS_RECEIVED);
                    if (responseURL || responseURL === '') {
                        this.responseURL = responseURL;
                    } else {
                        delete this.responseURL;
                    }
                    XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
                }
            }
        },
        {
            key: "__didReceiveData",
            value: function __didReceiveData(requestId, response) {
                if (requestId !== this._requestId) {
                    return;
                }
                this._response = response;
                this._cachedResponse = undefined; // force lazy recomputation
                this.setReadyState(this.LOADING);
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
            }
        },
        {
            key: "__didReceiveIncrementalData",
            value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                if (!this._response) {
                    this._response = responseText;
                } else {
                    this._response += responseText;
                }
                if (XMLHttpRequest._profiling) {
                    performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
                }
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
                this.setReadyState(this.LOADING);
                this.__didReceiveDataProgress(requestId, progress, total);
            }
        },
        {
            key: "__didReceiveDataProgress",
            value: function __didReceiveDataProgress(requestId, loaded, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                this.dispatchEvent({
                    type: 'progress',
                    lengthComputable: total >= 0,
                    loaded,
                    total
                });
            }
        },
        {
            // exposed for testing
            key: "__didCompleteResponse",
            value: function __didCompleteResponse(requestId, error, timeOutError) {
                if (requestId === this._requestId) {
                    if (error) {
                        if (this._responseType === '' || this._responseType === 'text') {
                            this._response = error;
                        }
                        this._hasError = true;
                        if (timeOutError) {
                            this._timedOut = true;
                        }
                    }
                    this._clearSubscriptions();
                    this._requestId = null;
                    this.setReadyState(this.DONE);
                    if (XMLHttpRequest._profiling && this._startTime != null) {
                        var start = this._startTime;
                        performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
                            start,
                            end: performance.now()
                        });
                    }
                    if (error) {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
                    } else {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
                    }
                }
            }
        },
        {
            key: "_clearSubscriptions",
            value: function _clearSubscriptions() {
                (this._subscriptions || []).forEach((sub)=>{
                    if (sub) {
                        sub.remove();
                    }
                });
                this._subscriptions = [];
            }
        },
        {
            key: "getAllResponseHeaders",
            value: function getAllResponseHeaders() {
                if (!this.responseHeaders) {
                    // according to the spec, return null if no response has been received
                    return null;
                }
                // Assign to non-nullable local variable.
                var responseHeaders = this.responseHeaders;
                var unsortedHeaders = new Map();
                for (var rawHeaderName of Object.keys(responseHeaders)){
                    var headerValue = responseHeaders[rawHeaderName];
                    var lowerHeaderName = rawHeaderName.toLowerCase();
                    var header = unsortedHeaders.get(lowerHeaderName);
                    if (header) {
                        header.headerValue += ', ' + headerValue;
                        unsortedHeaders.set(lowerHeaderName, header);
                    } else {
                        unsortedHeaders.set(lowerHeaderName, {
                            lowerHeaderName,
                            upperHeaderName: rawHeaderName.toUpperCase(),
                            headerValue
                        });
                    }
                }
                // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
                var sortedHeaders = _to_consumable_array._(unsortedHeaders.values()).sort((a, b)=>{
                    if (a.upperHeaderName < b.upperHeaderName) {
                        return -1;
                    }
                    if (a.upperHeaderName > b.upperHeaderName) {
                        return 1;
                    }
                    return 0;
                });
                // Combine into single text response.
                return sortedHeaders.map((header)=>{
                    return header.lowerHeaderName + ': ' + header.headerValue;
                }).join('\r\n') + '\r\n';
            }
        },
        {
            key: "getResponseHeader",
            value: function getResponseHeader(header) {
                var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
                return value !== undefined ? value : null;
            }
        },
        {
            key: "setRequestHeader",
            value: function setRequestHeader(header, value) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                this._headers[header.toLowerCase()] = String(value);
            }
        },
        {
            /**
   * Custom extension for tracking origins of request.
   */ key: "setTrackingName",
            value: function setTrackingName(trackingName) {
                this._trackingName = trackingName;
                return this;
            }
        },
        {
            /**
   * Custom extension for setting a custom performance logger
   */ key: "setPerformanceLogger",
            value: function setPerformanceLogger(performanceLogger) {
                this._performanceLogger = performanceLogger;
                return this;
            }
        },
        {
            key: "open",
            value: function open(method, url, async) {
                /* Other optional arguments are not supported yet */ if (this.readyState !== this.UNSENT) {
                    throw new Error('Cannot open, already sending');
                }
                if (async !== undefined && !async) {
                    // async is default
                    throw new Error('Synchronous http requests are not supported');
                }
                if (!url) {
                    throw new Error('Cannot load an empty url');
                }
                this._method = method.toUpperCase();
                this._url = url;
                this._aborted = false;
                this.setReadyState(this.OPENED);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                if (this._sent) {
                    throw new Error('Request has already been sent');
                }
                this._sent = true;
                var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
                this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', (args)=>this.__didUploadProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', (args)=>this.__didReceiveResponse.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', (args)=>this.__didReceiveData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', (args)=>this.__didReceiveIncrementalData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', (args)=>this.__didReceiveDataProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', (args)=>this.__didCompleteResponse.apply(this, _to_consumable_array._(args))));
                var nativeResponseType = 'text';
                if (this._responseType === 'arraybuffer') {
                    nativeResponseType = 'base64';
                }
                if (this._responseType === 'blob') {
                    nativeResponseType = 'blob';
                }
                var doSend = ()=>{
                    var friendlyName = this._trackingName ?? this._url;
                    this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
                    this._performanceLogger.startTimespan(this._perfKey);
                    this._startTime = performance.now();
                    invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
                    invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
                    RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
         * when making Flow check .android.js files. */ nativeResponseType, incrementalEvents, this.timeout, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this.__didCreateRequest.bind(this), this.withCredentials);
                };
                if (DEBUG_NETWORK_SEND_DELAY) {
                    setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
                } else {
                    doSend();
                }
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                if (this._requestId) {
                    RCTNetworking.abortRequest(this._requestId);
                }
                // only call onreadystatechange if there is something to abort,
                // below logic is per spec
                if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
                    this._reset();
                    this.setReadyState(this.DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "setResponseHeaders",
            value: function setResponseHeaders(responseHeaders) {
                this.responseHeaders = responseHeaders || null;
                var headers = responseHeaders || {};
                this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName)=>{
                    // $FlowFixMe[invalid-computed-prop]
                    lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
                    return lcaseHeaders;
                }, {});
            }
        },
        {
            key: "setReadyState",
            value: function setReadyState(newState) {
                this.readyState = newState;
                this.dispatchEvent({
                    type: 'readystatechange'
                });
                if (newState === this.DONE) {
                    if (this._aborted) {
                        this.dispatchEvent({
                            type: 'abort'
                        });
                    } else if (this._hasError) {
                        if (this._timedOut) {
                            this.dispatchEvent({
                                type: 'timeout'
                            });
                        } else {
                            this.dispatchEvent({
                                type: 'error'
                            });
                        }
                    } else {
                        this.dispatchEvent({
                            type: 'load'
                        });
                    }
                    this.dispatchEvent({
                        type: 'loadend'
                    });
                }
            }
        },
        {
            /* global EventListener */ key: "addEventListener",
            value: function addEventListener(type, listener) {
                // If we dont' have a 'readystatechange' event handler, we don't
                // have to send repeated LOADING events with incremental updates
                // to responseText, which will avoid a bunch of native -> JS
                // bridge traffic.
                if (type === 'readystatechange' || type === 'progress') {
                    this._incrementalEvents = true;
                }
                _get._(_get_prototype_of._(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
            }
        },
        {
            key: "_getMeasureURL",
            value: function _getMeasureURL() {
                return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
            }
        }
    ], [
        {
            key: "__setInterceptor_DO_NOT_USE",
            value: function __setInterceptor_DO_NOT_USE(interceptor) {
                XMLHttpRequest._interceptor = interceptor;
            }
        },
        {
            key: "enableProfiling",
            value: function enableProfiling(enableProfiling) {
                XMLHttpRequest._profiling = enableProfiling;
            }
        }
    ]);
    return XMLHttpRequest;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(XHR_EVENTS)));
XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;
XMLHttpRequest._profiling = false;
var _default = XMLHttpRequest;


}),
99394: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Blob = (__webpack_require__(56540)/* ["default"] */["default"]);
var binaryToBase64 = (__webpack_require__(74259)/* ["default"] */["default"]);
var FormData = (__webpack_require__(38834)/* ["default"] */["default"]);
function convertRequestBody(body) {
    if (typeof body === 'string') {
        return {
            string: body
        };
    }
    if (body instanceof Blob) {
        return {
            blob: body.data
        };
    }
    if (body instanceof FormData) {
        return {
            formData: body.getParts()
        };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
     * an ArrayBufferView */ return {
            base64: binaryToBase64(body)
        };
    }
    return body;
}
var _default = convertRequestBody;


}),
67006: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Headers: function() {
        return Headers;
    },
    Request: function() {
        return Request;
    },
    Response: function() {
        return Response;
    },
    fetch: function() {
        return fetch;
    }
});
// side-effectful require() to put fetch,
// Headers, Request, Response in global scope
__webpack_require__(71840);
var fetch = __webpack_require__.g.fetch;
var Headers = __webpack_require__.g.Headers;
var Request = __webpack_require__.g.Request;
var Response = __webpack_require__.g.Response;


}),
10548: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _default = {
    primary: '#1292B4',
    white: '#FFF',
    lighter: '#F3F3F3',
    light: '#DAE1E7',
    dark: '#444',
    darker: '#222',
    black: '#000'
};


}),
28934: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var styles = _StyleSheet.default.create({
    highlight: {
        fontWeight: '700'
    }
});
var DebugInstructions = _Platform.default.select({
    ios: ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
            children: [
                "Press ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "Cmd + D"
                }),
                " in the simulator or",
                ' ',
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "Shake"
                }),
                " your device to open the Dev Menu."
            ]
        }),
    default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
            children: [
                "Press ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "Cmd or Ctrl + M"
                }),
                " or",
                ' ',
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "Shake"
                }),
                " your device to open the Dev Menu."
            ]
        })
});
var _default = DebugInstructions;


}),
54462: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _ImageBackground = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62029));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _useColorScheme = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17466));
var _Colors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10548));
var _HermesBadge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19767));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var Header = ()=>{
    var isDarkMode = (0, _useColorScheme.default)() === 'dark';
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_ImageBackground.default, {
        accessibilityRole: "image",
        testID: "new-app-screen-header",
        source: __webpack_require__(5632),
        style: [
            styles.background,
            {
                backgroundColor: isDarkMode ? _Colors.default.darker : _Colors.default.lighter
            }
        ],
        imageStyle: styles.logo,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_HermesBadge.default, {}),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
                style: [
                    styles.text,
                    {
                        color: isDarkMode ? _Colors.default.white : _Colors.default.black
                    }
                ],
                children: [
                    "Welcome to",
                    '\n',
                    "React Native"
                ]
            })
        ]
    });
};
var styles = _StyleSheet.default.create({
    background: {
        paddingBottom: 40,
        paddingTop: 96,
        paddingHorizontal: 32
    },
    logo: {
        opacity: 0.2,
        overflow: 'visible',
        resizeMode: 'cover',
        /*
     * These negative margins allow the image to be offset similarly across screen sizes and component sizes.
     *
     * The source logo.png image is 512x512px, so as such, these margins attempt to be relative to the
     * source image's size.
     */ marginLeft: -128,
        marginBottom: -192
    },
    text: {
        fontSize: 40,
        fontWeight: '700',
        textAlign: 'center'
    }
});
var _default = Header;


}),
19767: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _useColorScheme = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17466));
var _Colors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10548));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var HermesBadge = ()=>{
    var _global_HermesInternal_getRuntimeProperties, _global_HermesInternal;
    var isDarkMode = (0, _useColorScheme.default)() === 'dark';
    var version = ((_global_HermesInternal = __webpack_require__.g.HermesInternal) === null || _global_HermesInternal === void 0 ? void 0 : (_global_HermesInternal_getRuntimeProperties = _global_HermesInternal.getRuntimeProperties) === null || _global_HermesInternal_getRuntimeProperties === void 0 ? void 0 : _global_HermesInternal_getRuntimeProperties.call(_global_HermesInternal)['OSS Release Version']) ?? '';
    return __webpack_require__.g.HermesInternal ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.badge,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            style: [
                styles.badgeText,
                {
                    color: isDarkMode ? _Colors.default.light : _Colors.default.dark
                }
            ],
            children: `Engine: Hermes ${version}`
        })
    }) : null;
};
var styles = _StyleSheet.default.create({
    badge: {
        position: 'absolute',
        right: 12,
        bottom: 8
    },
    badgeText: {
        fontSize: 14,
        fontWeight: '600',
        textAlign: 'right'
    }
});
var _default = HermesBadge;


}),
92826: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _TouchableOpacity = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90001));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _openURLInBrowser = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41115));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _useColorScheme = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17466));
var _Colors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10548));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var links = [
    {
        id: 1,
        title: 'The Basics',
        link: 'https://reactnative.dev/docs/tutorial',
        description: 'Explains a Hello World for React Native.'
    },
    {
        id: 2,
        title: 'Style',
        link: 'https://reactnative.dev/docs/style',
        description: 'Covers how to use the prop named style which controls the visuals.'
    },
    {
        id: 3,
        title: 'Layout',
        link: 'https://reactnative.dev/docs/flexbox',
        description: 'React Native uses flexbox for layout, learn how it works.'
    },
    {
        id: 4,
        title: 'Components',
        link: 'https://reactnative.dev/docs/components-and-apis',
        description: 'The full list of components and APIs inside React Native.'
    },
    {
        id: 5,
        title: 'Navigation',
        link: 'https://reactnative.dev/docs/navigation',
        description: 'How to handle moving between screens inside your application.'
    },
    {
        id: 6,
        title: 'Networking',
        link: 'https://reactnative.dev/docs/network',
        description: 'How to use the Fetch API in React Native.'
    },
    {
        id: 7,
        title: 'Debugging',
        link: 'https://facebook.github.io/react-native/docs/debugging',
        description: 'Learn about the tools available to debug and inspect your app.'
    },
    {
        id: 8,
        title: 'Help',
        link: 'https://facebook.github.io/react-native/help',
        description: 'Need more help? There are many other React Native developers who may have the answer.'
    },
    {
        id: 9,
        title: 'Follow us',
        link: 'https://x.com/reactnative',
        description: 'Stay in touch with the community, join in on Q&As and more by following React Native on X.'
    }
];
var LinkList = ()=>{
    var isDarkMode = (0, _useColorScheme.default)() === 'dark';
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
        style: styles.container,
        children: links.map((ref)=>{
            var id = ref.id, title = ref.title, link = ref.link, description = ref.description;
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
                        style: [
                            styles.separator,
                            {
                                backgroundColor: isDarkMode ? _Colors.default.dark : _Colors.default.light
                            }
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_TouchableOpacity.default, {
                        accessibilityRole: "button",
                        onPress: ()=>(0, _openURLInBrowser.default)(link),
                        style: styles.linkContainer,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                style: styles.link,
                                children: title
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                style: [
                                    styles.description,
                                    {
                                        color: isDarkMode ? _Colors.default.lighter : _Colors.default.dark
                                    }
                                ],
                                children: description
                            })
                        ]
                    })
                ]
            }, id);
        })
    });
};
var styles = _StyleSheet.default.create({
    container: {
        marginTop: 32,
        paddingHorizontal: 24
    },
    linkContainer: {
        flexWrap: 'wrap',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 8
    },
    link: {
        flex: 2,
        fontSize: 18,
        fontWeight: '400',
        color: _Colors.default.primary
    },
    description: {
        flex: 3,
        paddingVertical: 16,
        fontWeight: '400',
        fontSize: 18
    },
    separator: {
        height: _StyleSheet.default.hairlineWidth
    }
});
var _default = LinkList;


}),
42638: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8893));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var styles = _StyleSheet.default.create({
    highlight: {
        fontWeight: '700'
    }
});
var ReloadInstructions = _Platform.default.select({
    ios: ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
            children: [
                "Press ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "Cmd + R"
                }),
                " in the simulator to reload your app's code."
            ]
        }),
    default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_Text.default, {
            children: [
                "Double tap ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    style: styles.highlight,
                    children: "R"
                }),
                " on your keyboard to reload your app's code."
            ]
        })
});
var _default = ReloadInstructions;


}),
73909: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Colors: function() {
        return _Colors.default;
    },
    DebugInstructions: function() {
        return _DebugInstructions.default;
    },
    Header: function() {
        return _Header.default;
    },
    HermesBadge: function() {
        return _HermesBadge.default;
    },
    LearnMoreLinks: function() {
        return _LearnMoreLinks.default;
    },
    ReloadInstructions: function() {
        return _ReloadInstructions.default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _Colors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10548));
var _DebugInstructions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28934));
var _Header = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54462));
var _HermesBadge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19767));
var _LearnMoreLinks = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92826));
var _ReloadInstructions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42638));


}),
725: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    beginAsyncEvent: function() {
        return beginAsyncEvent;
    },
    beginEvent: function() {
        return beginEvent;
    },
    counterEvent: function() {
        return counterEvent;
    },
    endAsyncEvent: function() {
        return endAsyncEvent;
    },
    endEvent: function() {
        return endEvent;
    },
    isEnabled: function() {
        return isEnabled;
    },
    setEnabled: function() {
        return setEnabled;
    }
});
var TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise
var _asyncCookie = 0;
function isEnabled() {
    return __webpack_require__.g.nativeTraceIsTracing ? __webpack_require__.g.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(__webpack_require__.g.__RCTProfileIsProfiling);
}
function setEnabled(_doEnable) {}
function beginEvent(eventName, args) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);
    }
}
function endEvent(args) {
    if (isEnabled()) {
        __webpack_require__.g.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);
    }
}
function beginAsyncEvent(eventName, args) {
    var cookie = _asyncCookie;
    if (isEnabled()) {
        _asyncCookie++;
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
    return cookie;
}
function endAsyncEvent(eventName, cookie, args) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
}
function counterEvent(eventName, value) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceCounter && __webpack_require__.g.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);
    }
}
if (false) { var Systrace }


}),
36538: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98207));
var _NativePermissionsAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22133));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
});
var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
});
/**
 * `PermissionsAndroid` provides access to Android M's new permissions model.
 *
 * See https://reactnative.dev/docs/permissionsandroid
 */ var PermissionsAndroid = /*#__PURE__*/ function() {
    "use strict";
    function PermissionsAndroid() {
        _class_call_check._(this, PermissionsAndroid);
        this.PERMISSIONS = PERMISSIONS;
        this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    _create_class._(PermissionsAndroid, [
        {
            /**
   * DEPRECATED - use check
   *
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * @deprecated
   */ key: "checkPermission",
            value: function checkPermission(permission) {
                console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve(false);
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                return _NativePermissionsAndroid.default.checkPermission(permission);
            }
        },
        {
            /**
   * Returns a promise resolving to a boolean value as to whether the specified
   * permissions has been granted
   *
   * See https://reactnative.dev/docs/permissionsandroid#check
   */ key: "check",
            value: function check(permission) {
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve(false);
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                return _NativePermissionsAndroid.default.checkPermission(permission);
            }
        },
        {
            key: "requestPermission",
            value: /**
   * DEPRECATED - use request
   *
   * Prompts the user to enable a permission and returns a promise resolving to a
   * boolean value indicating whether the user allowed or denied the request
   *
   * If the optional rationale argument is included (which is an object with a
   * `title` and `message`), this function checks with the OS whether it is
   * necessary to show a dialog explaining why the permission is needed
   * (https://developer.android.com/training/permissions/requesting#explain)
   * and then shows the system permission dialog
   *
   * @deprecated
   */ function requestPermission(permission, rationale) {
                var _this = this;
                return _async_to_generator._(function*() {
                    console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                    if (Platform.OS !== 'android') {
                        console.warn('"PermissionsAndroid" module works only for Android platform.');
                        return Promise.resolve(false);
                    }
                    var response = yield _this.request(permission, rationale);
                    return response === _this.RESULTS.GRANTED;
                })();
            }
        },
        {
            key: "request",
            value: /**
   * Prompts the user to enable a permission and returns a promise resolving to a
   * string value indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#request
   */ function request(permission, rationale) {
                var _this = this;
                return _async_to_generator._(function*() {
                    if (Platform.OS !== 'android') {
                        console.warn('"PermissionsAndroid" module works only for Android platform.');
                        return Promise.resolve(_this.RESULTS.DENIED);
                    }
                    (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                    if (rationale) {
                        var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
                        if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
                            return new Promise((resolve, reject)=>{
                                var options = _object_spread._({}, rationale);
                                _NativeDialogManagerAndroid.default.showAlert(/* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)
             * This comment suppresses an error found when Flow v0.111 was
             * deployed. To see the error, delete this comment and run Flow.
             */ options, ()=>reject(new Error('Error showing rationale')), ()=>// $FlowFixMe[incompatible-call]
                                    resolve(_NativePermissionsAndroid.default.requestPermission(permission)));
                            });
                        }
                    }
                    // $FlowFixMe[incompatible-return]
                    return _NativePermissionsAndroid.default.requestPermission(permission);
                })();
            }
        },
        {
            /**
   * Prompts the user to enable multiple permissions in the same dialog and
   * returns an object with the permissions as keys and strings as values
   * indicating whether the user allowed or denied the request
   *
   * See https://reactnative.dev/docs/permissionsandroid#requestmultiple
   */ key: "requestMultiple",
            value: function requestMultiple(permissions) {
                if (Platform.OS !== 'android') {
                    console.warn('"PermissionsAndroid" module works only for Android platform.');
                    return Promise.resolve({});
                }
                (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
                // $FlowFixMe[incompatible-return]
                // $FlowFixMe[incompatible-call]
                return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
            }
        }
    ]);
    return PermissionsAndroid;
}();
var PermissionsAndroidInstance = new PermissionsAndroid();
var _default = PermissionsAndroidInstance;


}),
62910: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isHoverEnabled", ({
    enumerable: true,
    get: function() {
        return isHoverEnabled;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var isEnabled = false;
/* $FlowFixMe[incompatible-type] Error found due to incomplete typing of
 * Platform.flow.js */ if (_Platform.default.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && // $FlowFixMe[method-unbinding]
    window.document.createElement);
    if (canUseDOM) {
        /**
     * Web browsers emulate mouse events (and hover states) after touch events.
     * This code infers when the currently-in-use modality supports hover
     * (including for multi-modality devices) and considers "hover" to be enabled
     * if a mouse movement occurs more than 1 second after the last touch event.
     * This threshold is long enough to account for longer delays between the
     * browser firing touch and mouse events on low-powered devices.
     */ var HOVER_THRESHOLD_MS = 1000;
        var lastTouchTimestamp = 0;
        var enableHover = ()=>{
            if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {
                return;
            }
            isEnabled = true;
        };
        var disableHover = ()=>{
            lastTouchTimestamp = Date.now();
            if (isEnabled) {
                isEnabled = false;
            }
        };
        document.addEventListener('touchstart', disableHover, true);
        document.addEventListener('touchmove', disableHover, true);
        document.addEventListener('mousemove', enableHover, true);
    }
}
function isHoverEnabled() {
    return isEnabled;
}


}),
31040: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Pressability;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _SoundManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87771));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(44170));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _Rect = __webpack_require__(50515);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _HoverState = __webpack_require__(62910);
var _PressabilityPerformanceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13003));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var Transitions = Object.freeze({
    NOT_RESPONDER: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'ERROR',
        RESPONDER_TERMINATED: 'ERROR',
        ENTER_PRESS_RECT: 'ERROR',
        LEAVE_PRESS_RECT: 'ERROR',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: 'ERROR',
        RESPONDER_GRANT: 'ERROR',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
        LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
        LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
        DELAY: 'NOT_RESPONDER',
        RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
        RESPONDER_RELEASE: 'NOT_RESPONDER',
        RESPONDER_TERMINATED: 'NOT_RESPONDER',
        ENTER_PRESS_RECT: 'NOT_RESPONDER',
        LEAVE_PRESS_RECT: 'NOT_RESPONDER',
        LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
});
var isActiveSignal = (signal)=>signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
var isActivationSignal = (signal)=>signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
var isPressInSignal = (signal)=>signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
var isTerminalSignal = (signal)=>signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
var DEFAULT_LONG_PRESS_DELAY_MS = 500;
var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
};
var DEFAULT_MIN_PRESS_DURATION = 130;
var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
var Pressability = /*#__PURE__*/ function() {
    "use strict";
    function Pressability(config) {
        _class_call_check._(this, Pressability);
        this._eventHandlers = null;
        this._hoverInDelayTimeout = null;
        this._hoverOutDelayTimeout = null;
        this._isHovered = false;
        this._longPressDelayTimeout = null;
        this._pressDelayTimeout = null;
        this._pressOutDelayTimeout = null;
        this._responderID = null;
        this._responderRegion = null;
        this._touchState = 'NOT_RESPONDER';
        this._measureCallback = (left, top, width, height, pageX, pageY)=>{
            if (!left && !top && !width && !height && !pageX && !pageY) {
                return;
            }
            this._responderRegion = {
                bottom: pageY + height,
                left: pageX,
                right: pageX + width,
                top: pageY
            };
        };
        this.configure(config);
    }
    _create_class._(Pressability, [
        {
            key: "configure",
            value: function configure(config) {
                this._config = config;
            }
        },
        {
            /**
   * Resets any pending timers. This should be called on unmount.
   */ key: "reset",
            value: function reset() {
                this._cancelHoverInDelayTimeout();
                this._cancelHoverOutDelayTimeout();
                this._cancelLongPressDelayTimeout();
                this._cancelPressDelayTimeout();
                this._cancelPressOutDelayTimeout();
                // Ensure that, if any async event handlers are fired after unmount
                // due to a race, we don't call any configured callbacks.
                this._config = Object.freeze({});
            }
        },
        {
            /**
   * Returns a set of props to spread into the interactive element.
   */ key: "getEventHandlers",
            value: function getEventHandlers() {
                if (this._eventHandlers == null) {
                    this._eventHandlers = this._createEventHandlers();
                }
                return this._eventHandlers;
            }
        },
        {
            key: "_createEventHandlers",
            value: function _createEventHandlers() {
                var focusEventHandlers = {
                    onBlur: (event)=>{
                        var onBlur = this._config.onBlur;
                        if (onBlur != null) {
                            onBlur(event);
                        }
                    },
                    onFocus: (event)=>{
                        var onFocus = this._config.onFocus;
                        if (onFocus != null) {
                            onFocus(event);
                        }
                    }
                };
                var responderEventHandlers = {
                    onStartShouldSetResponder: ()=>{
                        var disabled = this._config.disabled;
                        return !disabled ?? true;
                    },
                    onResponderGrant: (event)=>{
                        event.persist();
                        this._cancelPressOutDelayTimeout();
                        this._responderID = event.currentTarget;
                        this._touchState = 'NOT_RESPONDER';
                        this._receiveSignal('RESPONDER_GRANT', event);
                        var delayPressIn = normalizeDelay(this._config.delayPressIn);
                        if (delayPressIn > 0) {
                            this._pressDelayTimeout = setTimeout(()=>{
                                this._receiveSignal('DELAY', event);
                            }, delayPressIn);
                        } else {
                            this._receiveSignal('DELAY', event);
                        }
                        var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
                        this._longPressDelayTimeout = setTimeout(()=>{
                            this._handleLongPress(event);
                        }, delayLongPress + delayPressIn);
                        return this._config.blockNativeResponder === true;
                    },
                    onResponderMove: (event)=>{
                        var onPressMove = this._config.onPressMove;
                        if (onPressMove != null) {
                            onPressMove(event);
                        }
                        // Region may not have finished being measured, yet.
                        var responderRegion = this._responderRegion;
                        if (responderRegion == null) {
                            return;
                        }
                        var touch = getTouchFromPressEvent(event);
                        if (touch == null) {
                            this._cancelLongPressDelayTimeout();
                            this._receiveSignal('LEAVE_PRESS_RECT', event);
                            return;
                        }
                        if (this._touchActivatePosition != null) {
                            var deltaX = this._touchActivatePosition.pageX - touch.pageX;
                            var deltaY = this._touchActivatePosition.pageY - touch.pageY;
                            if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                                this._cancelLongPressDelayTimeout();
                            }
                        }
                        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {
                            this._receiveSignal('ENTER_PRESS_RECT', event);
                        } else {
                            this._cancelLongPressDelayTimeout();
                            this._receiveSignal('LEAVE_PRESS_RECT', event);
                        }
                    },
                    onResponderRelease: (event)=>{
                        this._receiveSignal('RESPONDER_RELEASE', event);
                    },
                    onResponderTerminate: (event)=>{
                        this._receiveSignal('RESPONDER_TERMINATED', event);
                    },
                    onResponderTerminationRequest: ()=>{
                        var cancelable = this._config.cancelable;
                        return cancelable ?? true;
                    },
                    onClick: (event)=>{
                        var _event_nativeEvent_hasOwnProperty, _event_nativeEvent;
                        // If event has `pointerType`, it was emitted from a PointerEvent and
                        // we should ignore it to avoid triggering `onPress` twice.
                        if (event === null || event === void 0 ? void 0 : (_event_nativeEvent = event.nativeEvent) === null || _event_nativeEvent === void 0 ? void 0 : (_event_nativeEvent_hasOwnProperty = _event_nativeEvent.hasOwnProperty) === null || _event_nativeEvent_hasOwnProperty === void 0 ? void 0 : _event_nativeEvent_hasOwnProperty.call(_event_nativeEvent, 'pointerType')) {
                            return;
                        }
                        // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the "real" target
                        // in particular, we shouldn't respond to clicks from nested pressables
                        if ((event === null || event === void 0 ? void 0 : event.currentTarget) !== (event === null || event === void 0 ? void 0 : event.target)) {
                            event === null || event === void 0 ? void 0 : event.stopPropagation();
                            return;
                        }
                        var _this__config = this._config, onPress = _this__config.onPress, disabled = _this__config.disabled;
                        if (onPress != null && disabled !== true) {
                            onPress(event);
                        }
                    }
                };
                if (false) {}
                if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
                    var hoverPointerEvents = {
                        onPointerEnter: undefined,
                        onPointerLeave: undefined
                    };
                    var _this__config = this._config, onHoverIn = _this__config.onHoverIn, onHoverOut = _this__config.onHoverOut;
                    if (onHoverIn != null) {
                        hoverPointerEvents.onPointerEnter = (event)=>{
                            this._isHovered = true;
                            this._cancelHoverOutDelayTimeout();
                            if (onHoverIn != null) {
                                var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                                if (delayHoverIn > 0) {
                                    event.persist();
                                    this._hoverInDelayTimeout = setTimeout(()=>{
                                        onHoverIn(convertPointerEventToMouseEvent(event));
                                    }, delayHoverIn);
                                } else {
                                    onHoverIn(convertPointerEventToMouseEvent(event));
                                }
                            }
                        };
                    }
                    if (onHoverOut != null) {
                        hoverPointerEvents.onPointerLeave = (event)=>{
                            if (this._isHovered) {
                                this._isHovered = false;
                                this._cancelHoverInDelayTimeout();
                                if (onHoverOut != null) {
                                    var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                                    if (delayHoverOut > 0) {
                                        event.persist();
                                        this._hoverOutDelayTimeout = setTimeout(()=>{
                                            onHoverOut(convertPointerEventToMouseEvent(event));
                                        }, delayHoverOut);
                                    } else {
                                        onHoverOut(convertPointerEventToMouseEvent(event));
                                    }
                                }
                            }
                        };
                    }
                    return _object_spread._({}, focusEventHandlers, responderEventHandlers, hoverPointerEvents);
                } else {
                    var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
                        onMouseEnter: (event)=>{
                            if ((0, _HoverState.isHoverEnabled)()) {
                                this._isHovered = true;
                                this._cancelHoverOutDelayTimeout();
                                var onHoverIn = this._config.onHoverIn;
                                if (onHoverIn != null) {
                                    var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                                    if (delayHoverIn > 0) {
                                        event.persist();
                                        this._hoverInDelayTimeout = setTimeout(()=>{
                                            onHoverIn(event);
                                        }, delayHoverIn);
                                    } else {
                                        onHoverIn(event);
                                    }
                                }
                            }
                        },
                        onMouseLeave: (event)=>{
                            if (this._isHovered) {
                                this._isHovered = false;
                                this._cancelHoverInDelayTimeout();
                                var onHoverOut = this._config.onHoverOut;
                                if (onHoverOut != null) {
                                    var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                                    if (delayHoverOut > 0) {
                                        event.persist();
                                        this._hoverInDelayTimeout = setTimeout(()=>{
                                            onHoverOut(event);
                                        }, delayHoverOut);
                                    } else {
                                        onHoverOut(event);
                                    }
                                }
                            }
                        }
                    };
                    return _object_spread._({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);
                }
            }
        },
        {
            /**
   * Receives a state machine signal, performs side effects of the transition
   * and stores the new state. Validates the transition as well.
   */ key: "_receiveSignal",
            value: function _receiveSignal(signal, event) {
                var _Transitions_prevState;
                // Especially on iOS, not all events have timestamps associated.
                // For telemetry purposes, this doesn't matter too much, as long as *some* do.
                // Since the native timestamp is integral for logging telemetry, just skip
                // events if they don't have a timestamp attached.
                if (event.nativeEvent.timestamp != null) {
                    _PressabilityPerformanceEventEmitter.default.emitEvent(()=>{
                        return {
                            signal,
                            nativeTimestamp: event.nativeEvent.timestamp
                        };
                    });
                }
                var prevState = this._touchState;
                var nextState = (_Transitions_prevState = Transitions[prevState]) === null || _Transitions_prevState === void 0 ? void 0 : _Transitions_prevState[signal];
                if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
                    return;
                }
                (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
                if (prevState !== nextState) {
                    this._performTransitionSideEffects(prevState, nextState, signal, event);
                    this._touchState = nextState;
                }
            }
        },
        {
            /**
   * Performs a transition between touchable states and identify any activations
   * or deactivations (and callback invocations).
   */ key: "_performTransitionSideEffects",
            value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
                if (isTerminalSignal(signal)) {
                    this._touchActivatePosition = null;
                    this._cancelLongPressDelayTimeout();
                }
                var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
                var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
                if (isInitialTransition || isActivationTransition) {
                    this._measureResponderRegion();
                }
                if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
                    var onLongPress = this._config.onLongPress;
                    if (onLongPress != null) {
                        onLongPress(event);
                    }
                }
                var isPrevActive = isActiveSignal(prevState);
                var isNextActive = isActiveSignal(nextState);
                if (!isPrevActive && isNextActive) {
                    this._activate(event);
                } else if (isPrevActive && !isNextActive) {
                    this._deactivate(event);
                }
                if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
                    // If we never activated (due to delays), activate and deactivate now.
                    if (!isNextActive && !isPrevActive) {
                        this._activate(event);
                        this._deactivate(event);
                    }
                    var _this__config = this._config, onLongPress1 = _this__config.onLongPress, onPress = _this__config.onPress, android_disableSound = _this__config.android_disableSound;
                    if (onPress != null) {
                        var isPressCanceledByLongPress = onLongPress1 != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
                        if (!isPressCanceledByLongPress) {
                            if (_Platform.default.OS === 'android' && android_disableSound !== true) {
                                _SoundManager.default.playTouchSound();
                            }
                            onPress(event);
                        }
                    }
                }
                this._cancelPressDelayTimeout();
            }
        },
        {
            key: "_activate",
            value: function _activate(event) {
                var onPressIn = this._config.onPressIn;
                var _getTouchFromPressEvent = getTouchFromPressEvent(event), pageX = _getTouchFromPressEvent.pageX, pageY = _getTouchFromPressEvent.pageY;
                this._touchActivatePosition = {
                    pageX,
                    pageY
                };
                this._touchActivateTime = Date.now();
                if (onPressIn != null) {
                    onPressIn(event);
                }
            }
        },
        {
            key: "_deactivate",
            value: function _deactivate(event) {
                var onPressOut = this._config.onPressOut;
                if (onPressOut != null) {
                    var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
                    var pressDuration = Date.now() - (this._touchActivateTime ?? 0);
                    var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
                    if (delayPressOut > 0) {
                        event.persist();
                        this._pressOutDelayTimeout = setTimeout(()=>{
                            onPressOut(event);
                        }, delayPressOut);
                    } else {
                        onPressOut(event);
                    }
                }
                this._touchActivateTime = null;
            }
        },
        {
            key: "_measureResponderRegion",
            value: function _measureResponderRegion() {
                if (this._responderID == null) {
                    return;
                }
                if (typeof this._responderID === 'number') {
                    _UIManager.default.measure(this._responderID, this._measureCallback);
                } else {
                    this._responderID.measure(this._measureCallback);
                }
            }
        },
        {
            key: "_isTouchWithinResponderRegion",
            value: function _isTouchWithinResponderRegion(touch, responderRegion) {
                var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
                var pressRectOffset = (0, _Rect.normalizeRect)(this._config.pressRectOffset);
                var regionBottom = responderRegion.bottom;
                var regionLeft = responderRegion.left;
                var regionRight = responderRegion.right;
                var regionTop = responderRegion.top;
                if (hitSlop != null) {
                    if (hitSlop.bottom != null) {
                        regionBottom += hitSlop.bottom;
                    }
                    if (hitSlop.left != null) {
                        regionLeft -= hitSlop.left;
                    }
                    if (hitSlop.right != null) {
                        regionRight += hitSlop.right;
                    }
                    if (hitSlop.top != null) {
                        regionTop -= hitSlop.top;
                    }
                }
                regionBottom += (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.bottom) ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;
                regionLeft -= (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.left) ?? DEFAULT_PRESS_RECT_OFFSETS.left;
                regionRight += (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.right) ?? DEFAULT_PRESS_RECT_OFFSETS.right;
                regionTop -= (pressRectOffset === null || pressRectOffset === void 0 ? void 0 : pressRectOffset.top) ?? DEFAULT_PRESS_RECT_OFFSETS.top;
                return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
            }
        },
        {
            key: "_handleLongPress",
            value: function _handleLongPress(event) {
                if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
                    this._receiveSignal('LONG_PRESS_DETECTED', event);
                }
            }
        },
        {
            key: "_cancelHoverInDelayTimeout",
            value: function _cancelHoverInDelayTimeout() {
                if (this._hoverInDelayTimeout != null) {
                    clearTimeout(this._hoverInDelayTimeout);
                    this._hoverInDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelHoverOutDelayTimeout",
            value: function _cancelHoverOutDelayTimeout() {
                if (this._hoverOutDelayTimeout != null) {
                    clearTimeout(this._hoverOutDelayTimeout);
                    this._hoverOutDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelLongPressDelayTimeout",
            value: function _cancelLongPressDelayTimeout() {
                if (this._longPressDelayTimeout != null) {
                    clearTimeout(this._longPressDelayTimeout);
                    this._longPressDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelPressDelayTimeout",
            value: function _cancelPressDelayTimeout() {
                if (this._pressDelayTimeout != null) {
                    clearTimeout(this._pressDelayTimeout);
                    this._pressDelayTimeout = null;
                }
            }
        },
        {
            key: "_cancelPressOutDelayTimeout",
            value: function _cancelPressOutDelayTimeout() {
                if (this._pressOutDelayTimeout != null) {
                    clearTimeout(this._pressOutDelayTimeout);
                    this._pressOutDelayTimeout = null;
                }
            }
        }
    ], [
        {
            key: "setLongPressDeactivationDistance",
            value: function setLongPressDeactivationDistance(distance) {
                longPressDeactivationDistance = distance;
            }
        }
    ]);
    return Pressability;
}();
function normalizeDelay(delay, ref, ref1) {
    var min = ref === void 0 ? 0 : ref, fallback = ref1 === void 0 ? 0 : ref1;
    return Math.max(min, delay ?? fallback);
}
var getTouchFromPressEvent = (event)=>{
    var _event_nativeEvent = event.nativeEvent, changedTouches = _event_nativeEvent.changedTouches, touches = _event_nativeEvent.touches;
    if (touches != null && touches.length > 0) {
        return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
        return changedTouches[0];
    }
    return event.nativeEvent;
};
function convertPointerEventToMouseEvent(input) {
    var _input_nativeEvent = input.nativeEvent, clientX = _input_nativeEvent.clientX, clientY = _input_nativeEvent.clientY;
    return _object_spread_props._(_object_spread._({}, input), {
        nativeEvent: {
            clientX,
            clientY,
            pageX: clientX,
            pageY: clientY,
            timestamp: input.timeStamp
        }
    });
}


}),
51386: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PressabilityDebugView: function() {
        return PressabilityDebugView;
    },
    isEnabled: function() {
        return isEnabled;
    },
    setEnabled: function() {
        return setEnabled;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _normalizeColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12990));
var _Rect = __webpack_require__(50515);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
function PressabilityDebugView(props) {
    if (false) { var normalizedColor, baseColor, hitSlop }
    return null;
}
var isDebugEnabled = false;
function isEnabled() {
    if (false) {}
    return false;
}
function setEnabled(value) {
    if (false) {}
}


}),
13003: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var PressabilityPerformanceEventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function PressabilityPerformanceEventEmitter() {
        _class_call_check._(this, PressabilityPerformanceEventEmitter);
        this._listeners = [];
    }
    _create_class._(PressabilityPerformanceEventEmitter, [
        {
            key: "addListener",
            value: function addListener(listener) {
                this._listeners.push(listener);
            }
        },
        {
            key: "removeListener",
            value: function removeListener(listener) {
                var index = this._listeners.indexOf(listener);
                if (index > -1) {
                    this._listeners.splice(index, 1);
                }
            }
        },
        {
            key: "emitEvent",
            value: function emitEvent(constructEvent) {
                if (this._listeners.length === 0) {
                    return;
                }
                var event = constructEvent();
                this._listeners.forEach((listener)=>listener(event));
            }
        }
    ]);
    return PressabilityPerformanceEventEmitter;
}();
var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
var _default = PressabilityPerformanceEventEmitterSingleton;


}),
45178: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return usePressability;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _Pressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31040));
var _react = __webpack_require__(4931);
function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
        pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;
    // On the initial mount, this is a no-op. On updates, `pressability` will be
    // re-configured to use the new configuration.
    (0, _react.useEffect)(()=>{
        if (config != null && pressability != null) {
            pressability.configure(config);
        }
    }, [
        config,
        pressability
    ]);
    // On unmount, reset pending state and timers inside `pressability`. This is
    // a separate effect because we do not want to reset when `config` changes.
    (0, _react.useEffect)(()=>{
        if (pressability != null) {
            return ()=>{
                pressability.reset();
            };
        }
    }, [
        pressability
    ]);
    return pressability == null ? null : pressability.getEventHandlers();
}


}),
68717: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _es6extensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46361));
__webpack_require__(82639);
if (false) {}
var _default = _es6extensions.default;


}),
52037: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativePushNotificationManagerIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(58312));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var PushNotificationEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
// If you want to use the native module on other platforms, please remove this condition and test its behavior
_Platform.default.OS !== 'ios' ? null : _NativePushNotificationManagerIOS.default);
var _notifHandlers = new Map();
var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
/**
 * An event emitted by PushNotificationIOS.
 */ /**
 *
 * Handle notifications for your app, including scheduling and permissions.
 *
 * See https://reactnative.dev/docs/pushnotificationios
 */ var PushNotificationIOS = /*#__PURE__*/ function() {
    "use strict";
    function PushNotificationIOS(nativeNotif) {
        _class_call_check._(this, PushNotificationIOS);
        this._data = {};
        this._remoteNotificationCompleteCallbackCalled = false;
        this._isRemote = nativeNotif.remote;
        if (this._isRemote) {
            this._notificationId = nativeNotif.notificationId;
        }
        if (nativeNotif.remote) {
            // Extract data from Apple's `aps` dict as defined:
            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService
            Object.keys(nativeNotif).forEach((notifKey)=>{
                var notifVal = nativeNotif[notifKey];
                if (notifKey === 'aps') {
                    this._alert = notifVal.alert;
                    this._sound = notifVal.sound;
                    this._badgeCount = notifVal.badge;
                    this._category = notifVal.category;
                    this._contentAvailable = notifVal['content-available'];
                    this._threadID = notifVal['thread-id'];
                } else {
                    this._data[notifKey] = notifVal;
                }
            });
        } else {
            // Local notifications aren't being sent down with `aps` dict.
            this._badgeCount = nativeNotif.applicationIconBadgeNumber;
            this._sound = nativeNotif.soundName;
            this._alert = nativeNotif.alertBody;
            this._data = nativeNotif.userInfo;
            this._category = nativeNotif.category;
        }
    }
    _create_class._(PushNotificationIOS, [
        {
            /**
   * This method is available for remote notifications that have been received via:
   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`. See docs
   * for more information.
   *
   * See https://reactnative.dev/docs/pushnotificationios#finish
   */ key: "finish",
            value: function finish(fetchResult) {
                if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
                    return;
                }
                this._remoteNotificationCompleteCallbackCalled = true;
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
            }
        },
        {
            /**
   * An alias for `getAlert` to get the notification's main message string.
   */ key: "getMessage",
            value: function getMessage() {
                // alias because "alert" is an ambiguous name
                return this._alert;
            }
        },
        {
            /**
   * Gets the sound string from the `aps` object. This will be `null` for local
   * notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getsound
   */ key: "getSound",
            value: function getSound() {
                return this._sound;
            }
        },
        {
            /**
   * Gets the category string from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcategory
   */ key: "getCategory",
            value: function getCategory() {
                return this._category;
            }
        },
        {
            /**
   * Gets the notification's main message from the `aps` object. Also see the
   * alias: `getMessage()`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getalert
   */ key: "getAlert",
            value: function getAlert() {
                return this._alert;
            }
        },
        {
            /**
   * Gets the content-available number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable
   */ key: "getContentAvailable",
            value: function getContentAvailable() {
                return this._contentAvailable;
            }
        },
        {
            /**
   * Gets the badge count number from the `aps` object.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getbadgecount
   */ key: "getBadgeCount",
            value: function getBadgeCount() {
                return this._badgeCount;
            }
        },
        {
            /**
   * Gets the data object on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdata
   */ key: "getData",
            value: function getData() {
                return this._data;
            }
        },
        {
            /**
   * Gets the thread ID on the notification.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getthreadid
   */ key: "getThreadID",
            value: function getThreadID() {
                return this._threadID;
            }
        }
    ], [
        {
            key: "presentLocalNotification",
            value: /**
   * Schedules the localNotification for immediate presentation.
   * details is an object containing:
   * alertBody : The message displayed in the notification alert.
   * alertAction : The "action" displayed beneath an actionable notification. Defaults to "view";
   * soundName : The sound played when the notification is fired (optional).
   * category : The category of this notification, required for actionable notifications (optional).
   * userInfo : An optional object containing additional notification data.
   * applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.
   *
   * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification
   */ function presentLocalNotification(details) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                // $FlowFixMe[prop-missing]
                _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
            }
        },
        {
            key: "scheduleLocalNotification",
            value: /**
   * Schedules a local notification for future presentation.
   *
   * details is an object containing:
   * fireDate : The date and time when the system should deliver the notification.
   * alertBody : The message displayed in the notification alert.
   * alertAction : The "action" displayed beneath an actionable notification. Defaults to "view";
   * soundName : The sound played when the notification is fired (optional).
   * category : The category of this notification, required for actionable notifications (optional).
   * userInfo : An optional object containing additional notification data.
   * applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.
   *
   * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification
   */ function scheduleLocalNotification(details) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                // $FlowFixMe[prop-missing]
                _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
            }
        },
        {
            key: "cancelAllLocalNotifications",
            value: /**
   * Cancels all scheduled local notifications.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications
   */ function cancelAllLocalNotifications() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
            }
        },
        {
            key: "removeAllDeliveredNotifications",
            value: /**
   * Removes all delivered notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications
   */ function removeAllDeliveredNotifications() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
            }
        },
        {
            key: "getDeliveredNotifications",
            value: /**
   * Provides a list of the app’s notifications that are currently displayed
   * in Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications
   */ function getDeliveredNotifications(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
            }
        },
        {
            key: "removeDeliveredNotifications",
            value: /**
   * Removes the specified notifications from Notification Center.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications
   */ function removeDeliveredNotifications(identifiers) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
            }
        },
        {
            key: "setApplicationIconBadgeNumber",
            value: /**
   * Sets the badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber
   */ function setApplicationIconBadgeNumber(number) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
            }
        },
        {
            key: "getApplicationIconBadgeNumber",
            value: /**
   * Gets the current badge number for the app icon on the Home Screen.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber
   */ function getApplicationIconBadgeNumber(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
            }
        },
        {
            key: "cancelLocalNotifications",
            value: /**
   * Cancels any scheduled local notifications which match the fields in the
   * provided `userInfo`.
   *
   * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification
   */ function cancelLocalNotifications(userInfo) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
            }
        },
        {
            key: "getScheduledLocalNotifications",
            value: /**
   * Gets the list of local notifications that are currently scheduled.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications
   */ function getScheduledLocalNotifications(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Attaches a listener to notification events including local notifications,
   * remote notifications, and notification registration results.
   *
   * See https://reactnative.dev/docs/pushnotificationios#addeventlistener
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
                var listener;
                if (type === 'notification') {
                    listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, (notifData)=>{
                        handler(new PushNotificationIOS(notifData));
                    });
                } else if (type === 'localNotification') {
                    listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, (notifData)=>{
                        handler(new PushNotificationIOS(notifData));
                    });
                } else if (type === 'register') {
                    listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, (registrationInfo)=>{
                        handler(registrationInfo.deviceToken);
                    });
                } else if (type === 'registrationError') {
                    listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, (errorInfo)=>{
                        handler(errorInfo);
                    });
                }
                _notifHandlers.set(type, listener);
            }
        },
        {
            key: "removeEventListener",
            value: /**
   * Removes the event listener. Do this in `componentWillUnmount` to prevent
   * memory leaks.
   *
   * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener
   */ function removeEventListener(type) {
                (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
                var listener = _notifHandlers.get(type);
                if (!listener) {
                    return;
                }
                listener.remove();
                _notifHandlers.delete(type);
            }
        },
        {
            key: "requestPermissions",
            value: /**
   * Requests notification permissions from iOS, prompting the user with a
   * dialog box. By default, it will request all notification permissions, but
   * you can optionally specify which permissions to request.
   *
   * See https://reactnative.dev/docs/pushnotificationios#requestpermissions
   */ function requestPermissions(permissions) {
                var requestedPermissions = {
                    alert: true,
                    badge: true,
                    sound: true
                };
                if (permissions) {
                    requestedPermissions = {
                        alert: !!permissions.alert,
                        badge: !!permissions.badge,
                        sound: !!permissions.sound
                    };
                }
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
            }
        },
        {
            key: "abandonPermissions",
            value: /**
   * Unregister for all remote notifications received via Apple Push Notification
   * service.
   * You should call this method in rare circumstances only, such as when
   * a new version of the app removes support for all types of remote
   * notifications. Users can temporarily prevent apps from receiving
   * remote notifications through the Notifications section of the
   * Settings app. Apps unregistered through this method can always
   * re-register.
   *
   * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions
   */ function abandonPermissions() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.abandonPermissions();
            }
        },
        {
            key: "checkPermissions",
            value: /**
   * Check which push permissions are currently enabled. `callback` will be
   * invoked with a `Permissions` object.
   *
   *  - `alert` :boolean
   *  - `badge` :boolean
   *  - `sound` :boolean
   *
   * See https://reactnative.dev/docs/pushnotificationios#checkpermissions
   */ function checkPermissions(callback) {
                (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.checkPermissions(callback);
            }
        },
        {
            key: "getInitialNotification",
            value: /**
   * This method returns a promise that resolves to either the notification
   * object if the app was launched by a push notification, or `null` otherwise.
   *
   * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification
   */ function getInitialNotification() {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                return _NativePushNotificationManagerIOS.default.getInitialNotification().then((notification)=>{
                    return notification && new PushNotificationIOS(notification);
                });
            }
        },
        {
            key: "getAuthorizationStatus",
            value: /**
   * This method returns a promise that resolves to the current notification
   * authorization status. See UNAuthorizationStatus for possible values.
   */ function getAuthorizationStatus(callback) {
                (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
                _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
            }
        }
    ]);
    return PushNotificationIOS;
}();
PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
};
var _default = PushNotificationIOS;


}),
49178: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _RootTag = __webpack_require__(90839);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var AppContainer = (ref)=>{
    var children = ref.children, fabric = ref.fabric, initialProps = ref.initialProps, rootTag = ref.rootTag, WrapperComponent = ref.WrapperComponent, rootViewStyle = ref.rootViewStyle;
    var innerView = children;
    if (WrapperComponent != null) {
        innerView = /*#__PURE__*/ (0, _jsxruntime.jsx)(WrapperComponent, {
            initialProps: initialProps,
            fabric: fabric === true,
            children: innerView
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(rootTag),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: rootViewStyle || styles.root,
            pointerEvents: "box-none",
            children: innerView
        })
    });
};
var styles = _StyleSheet.default.create({
    root: {
        flex: 1
    }
});
var _default = AppContainer;


}),
68710: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var AppContainer =  false ? 0 : (__webpack_require__(49178)/* ["default"] */["default"]);
var _default = AppContainer;


}),
80037: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _BugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47895));
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23882));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41268));
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63649));
var _SceneTracker = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17858));
var _DisplayMode = __webpack_require__(58155);
var _HeadlessJsTaskError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2515));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24149));
var _renderApplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74767));
var _RendererProxy = __webpack_require__(46513);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();
var componentProviderInstrumentationHook = (component)=>component();
var wrapperComponentProvider;
var rootViewStyleProvider;
/**
 * `AppRegistry` is the JavaScript entry point to running all React Native apps.
 *
 * See https://reactnative.dev/docs/appregistry
 */ var AppRegistry = {
    setWrapperComponentProvider (provider) {
        wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider (provider) {
        rootViewStyleProvider = provider;
    },
    registerConfig (config) {
        config.forEach((appConfig)=>{
            if (appConfig.run) {
                AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
            } else {
                (0, _invariant.default)(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
                AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
            }
        });
    },
    /**
   * Registers an app's root component.
   *
   * See https://reactnative.dev/docs/appregistry#registercomponent
   */ registerComponent (appKey, componentProvider, section) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = (appParameters, displayMode)=>{
            (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode);
        };
        if (section) {
            sections[appKey] = runnables[appKey];
        }
        return appKey;
    },
    registerRunnable (appKey, run) {
        runnables[appKey] = run;
        return appKey;
    },
    registerSection (appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys () {
        return Object.keys(runnables);
    },
    getSectionKeys () {
        return Object.keys(sections);
    },
    getSections () {
        return _object_spread._({}, sections);
    },
    getRunnable (appKey) {
        return runnables[appKey];
    },
    getRegistry () {
        return {
            sections: AppRegistry.getSectionKeys(),
            runnables: _object_spread._({}, runnables)
        };
    },
    setComponentProviderInstrumentationHook (hook) {
        componentProviderInstrumentationHook = hook;
    },
    /**
   * Loads the JavaScript bundle and runs the app.
   *
   * See https://reactnative.dev/docs/appregistry#runapplication
   */ runApplication (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var logParams =  false ? 0 : '';
            var msg = `Running "${appKey}"${logParams}`;
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        _SceneTracker.default.setActiveScene({
            name: appKey
        });
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Update initial props for a surface that's already rendered
   */ setSurfaceProps (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Stops an application when a view should be destroyed.
   *
   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
   */ unmountApplicationComponentAtRootTag (rootTag) {
        (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
   * Register a headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registerheadlesstask
   */ registerHeadlessTask (taskKey, taskProvider) {
        // $FlowFixMe[object-this-reference]
        this.registerCancellableHeadlessTask(taskKey, taskProvider, ()=>()=>{
            /* Cancel is no-op */ });
    },
    /**
   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
   */ registerCancellableHeadlessTask (taskKey, taskProvider, taskCancelProvider) {
        if (taskProviders.has(taskKey)) {
            console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
        }
        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
   * Only called from native code. Starts a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#startheadlesstask
   */ startHeadlessTask (taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);
        if (!taskProvider) {
            console.warn(`No task registered for key ${taskKey}`);
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
            return;
        }
        taskProvider()(data).then(()=>{
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
        }).catch((reason)=>{
            console.error(reason);
            if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
                // $FlowFixMe[unused-promise]
                _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then((retryPosted)=>{
                    if (!retryPosted) {
                        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
                    }
                });
            }
        });
    },
    /**
   * Only called from native code. Cancels a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
   */ cancelHeadlessTask (taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);
        if (!taskCancelProvider) {
            throw new Error(`No task canceller registered for key '${taskKey}'`);
        }
        taskCancelProvider()();
    }
};
// Register LogBox as a default surface
AppRegistry.registerComponent('LogBox', ()=>{
    if (false) {} else {
        return function NoOp() {
            return null;
        };
    }
});
__webpack_require__.g.RN$AppRegistry = AppRegistry;
// Backwards compat with SurfaceRegistry, remove me later
__webpack_require__.g.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
};
(0, _registerCallableModule.default)('AppRegistry', AppRegistry);
var _default = AppRegistry;


}),
65144: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeComponentRegistryUnstable = __webpack_require__(53655);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function raiseSoftError(methodName, details) {
    console.error(`[ReactNative Architecture][JS] '${methodName}' is not available in the new React Native architecture.` + (details ? ` ${details}` : ''));
}
var getUIManagerConstants = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstants;
var getUIManagerConstantsCached = function() {
    var wasCalledOnce = false;
    var result = {};
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getUIManagerConstants)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
var getConstantsForViewManager = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstantsForViewManager;
var getDefaultEventTypes = __webpack_require__.g.RN$LegacyInterop_UIManager_getDefaultEventTypes;
var getDefaultEventTypesCached = function() {
    var wasCalledOnce = false;
    var result = null;
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getDefaultEventTypes)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
/**
 * UIManager.js overrides these APIs.
 * Pull them out from the BridgelessUIManager implementation. So, we can ignore them.
 */ var UIManagerJSOverridenAPIs = {
    measure: (reactTag, callback)=>{
        raiseSoftError('measure');
    },
    measureInWindow: (reactTag, callback)=>{
        raiseSoftError('measureInWindow');
    },
    measureLayout: (reactTag, ancestorReactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayout');
    },
    measureLayoutRelativeToParent: (reactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayoutRelativeToParent');
    },
    dispatchViewManagerCommand: (reactTag, commandID, commandArgs)=>{
        raiseSoftError('dispatchViewManagerCommand');
    }
};
/**
 * Leave Unimplemented: The only thing that called these methods was the paper renderer.
 * In OSS, the New Architecture will just use the Fabric renderer, which uses
 * different APIs.
 */ var UIManagerJSUnusedInNewArchAPIs = {
    createView: (reactTag, viewName, rootTag, props)=>{
        raiseSoftError('createView');
    },
    updateView: (reactTag, viewName, props)=>{
        raiseSoftError('updateView');
    },
    setChildren: (containerTag, reactTags)=>{
        raiseSoftError('setChildren');
    },
    manageChildren: (containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices)=>{
        raiseSoftError('manageChildren');
    },
    setJSResponder: (reactTag, blockNativeResponder)=>{
        raiseSoftError('setJSResponder');
    },
    clearJSResponder: ()=>{
        raiseSoftError('clearJSResponder');
    }
};
/**
 * Leave unimplemented: These APIs are deprecated in UIManager. We will eventually remove
 * them from React Native.
 */ var UIManagerJSDeprecatedPlatformAPIs = _Platform.default.select({
    android: {}
});
var UIManagerJSPlatformAPIs = _Platform.default.select({
    android: {
        getConstantsForViewManager: (viewManagerName)=>{
            if (getConstantsForViewManager) {
                return getConstantsForViewManager(viewManagerName);
            }
            raiseSoftError('getConstantsForViewManager');
            return {};
        },
        getDefaultEventTypes: ()=>{
            if (getDefaultEventTypes) {
                return getDefaultEventTypesCached();
            }
            raiseSoftError('getDefaultEventTypes');
            return [];
        },
        setLayoutAnimationEnabledExperimental: (enabled)=>{
            if (false) {}
        },
        sendAccessibilityEvent: (reactTag, eventType)=>{
            // Keep this in sync with java:FabricUIManager.sendAccessibilityEventFromJS
            // and legacySendAccessibilityEvent.android.js
            var AccessibilityEvent = {
                TYPE_VIEW_FOCUSED: 0x00000008,
                TYPE_WINDOW_STATE_CHANGED: 0x00000020,
                TYPE_VIEW_CLICKED: 0x00000001,
                TYPE_VIEW_HOVER_ENTER: 0x00000080
            };
            var eventName = null;
            if (eventType === AccessibilityEvent.TYPE_VIEW_FOCUSED) {
                eventName = 'focus';
            } else if (eventType === AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
                eventName = 'windowStateChange';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_CLICKED) {
                eventName = 'click';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_HOVER_ENTER) {
                eventName = 'viewHoverEnter';
            } else {
                console.error(`sendAccessibilityEvent() dropping event: Called with unsupported eventType: ${eventType}`);
                return;
            }
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`sendAccessibilityEvent() dropping event: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.sendAccessibilityEvent(shadowNode, eventName);
        }
    },
    ios: {
        /**
     * TODO(T174674274): Implement lazy loading of legacy view managers in the new architecture.
     *
     * Leave this unimplemented until we implement lazy loading of legacy modules and view managers in the new architecture.
     */ lazilyLoadView: (name)=>{
            raiseSoftError('lazilyLoadView');
            return {};
        },
        focus: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`focus() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'focus', []);
        },
        blur: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`blur() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'blur', []);
        }
    }
});
var UIManagerJS = _object_spread_props._(_object_spread._({}, UIManagerJSOverridenAPIs, UIManagerJSDeprecatedPlatformAPIs, UIManagerJSPlatformAPIs, UIManagerJSUnusedInNewArchAPIs), {
    getViewManagerConfig: (viewManagerName)=>{
        if (getUIManagerConstants) {
            var constants = getUIManagerConstantsCached();
            if (!constants[viewManagerName] && UIManagerJS.getConstantsForViewManager) {
                constants[viewManagerName] = UIManagerJS.getConstantsForViewManager(viewManagerName);
            }
            return constants[viewManagerName];
        } else {
            raiseSoftError(`getViewManagerConfig('${viewManagerName}')`, `If '${viewManagerName}' has a ViewManager and you want to retrieve its native ViewConfig, please turn on the native ViewConfig interop layer. If you want to see if this component is registered with React Native, please call hasViewManagerConfig('${viewManagerName}') instead.`);
            return null;
        }
    },
    hasViewManagerConfig: (viewManagerName)=>{
        return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: ()=>{
        if (getUIManagerConstants) {
            return getUIManagerConstantsCached();
        } else {
            raiseSoftError('getConstants');
            return null;
        }
    },
    findSubviewIn: (reactTag, point, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`findSubviewIn() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        FabricUIManager.findNodeAtPoint(shadowNode, point[0], point[1], function(internalInstanceHandle) {
            if (internalInstanceHandle == null) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var instanceHandle = internalInstanceHandle;
            var node = instanceHandle.stateNode.node;
            if (!node) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var nativeViewTag = instanceHandle.stateNode.canonical.nativeTag;
            FabricUIManager.measure(node, function(x, y, width, height, pageX, pageY) {
                callback(nativeViewTag, pageX, pageY, width, height);
            });
        });
    },
    viewIsDescendantOf: (reactTag, ancestorReactTag, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!ancestorShadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with ancestorReactTag ${ancestorReactTag}`);
            return;
        }
        // Keep this in sync with ReadOnlyNode.js
        var DOCUMENT_POSITION_CONTAINED_BY = 16;
        var result = FabricUIManager.compareDocumentPosition(ancestorShadowNode, shadowNode);
        // eslint-disable-next-line no-bitwise
        var isAncestor = (result & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
        callback([
            isAncestor
        ]);
    },
    configureNextLayoutAnimation: (config, callback, errorCallback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        FabricUIManager.configureNextLayoutAnimation(config, callback, errorCallback);
    }
});
if (getUIManagerConstants) {
    Object.keys(getUIManagerConstantsCached()).forEach((viewConfigName)=>{
        UIManagerJS[viewConfigName] = getUIManagerConstantsCached()[viewConfigName];
    });
    if (UIManagerJS.getConstants().ViewManagerNames) {
        UIManagerJS.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
            (0, _defineLazyObjectProperty.default)(UIManagerJS, viewManagerName, {
                get: ()=>(0, _nullthrows.default)(UIManagerJS.getConstantsForViewManager)(viewManagerName)
            });
        });
    }
}
var _default = UIManagerJS;


}),
58155: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ /** DisplayMode should be in sync with the method displayModeToInt from
 * react/renderer/uimanager/primitives.h. */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    coerceDisplayMode: function() {
        return coerceDisplayMode;
    },
    default: function() {
        return _default;
    }
});
var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
});
function coerceDisplayMode(value) {
    switch(value){
        case DisplayMode.SUSPENDED:
            return DisplayMode.SUSPENDED;
        case DisplayMode.HIDDEN:
            return DisplayMode.HIDDEN;
        default:
            return DisplayMode.VISIBLE;
    }
}
var _default = DisplayMode;


}),
4697: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getFabricUIManager", ({
    enumerable: true,
    get: function() {
        return getFabricUIManager;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var nativeFabricUIManagerProxy;
// This is a list of all the methods in global.nativeFabricUIManager that we'll
// cache in JavaScript, as the current implementation of the binding
// creates a new host function every time methods are accessed.
var CACHED_PROPERTIES = [
    'createNode',
    'cloneNode',
    'cloneNodeWithNewChildren',
    'cloneNodeWithNewProps',
    'cloneNodeWithNewChildrenAndProps',
    'createChildSet',
    'appendChild',
    'appendChildToSet',
    'completeRoot',
    'measure',
    'measureInWindow',
    'measureLayout',
    'configureNextLayoutAnimation',
    'sendAccessibilityEvent',
    'findShadowNodeByTag_DEPRECATED',
    'setNativeProps',
    'dispatchCommand',
    'compareDocumentPosition',
    'getBoundingClientRect'
];
function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && __webpack_require__.g.nativeFabricUIManager != null) {
        nativeFabricUIManagerProxy = createProxyWithCachedProperties(__webpack_require__.g.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
}
/**
 *
 * Returns an object that caches the specified properties the first time they
 * are accessed, and falls back to the original object for other properties.
 */ function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var _loop = function(propertyName) {
        (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
            // $FlowExpectedError[prop-missing]
            get: ()=>implementation[propertyName]
        });
    };
    var proxy = Object.create(implementation);
    for (var propertyName of propertiesToCache)_loop(propertyName);
    return proxy;
}


}),
2515: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeadlessJsTaskError;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var HeadlessJsTaskError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits._(HeadlessJsTaskError, Error1);
    function HeadlessJsTaskError() {
        _class_call_check._(this, HeadlessJsTaskError);
        return _call_super._(this, HeadlessJsTaskError, arguments);
    }
    return HeadlessJsTaskError;
}(_wrap_native_super._(Error));


}),
38722: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeI18nManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(78546));
var i18nConstants = getI18nManagerConstants();
function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
        var _NativeI18nManager_getConstants = _NativeI18nManager.default.getConstants(), isRTL = _NativeI18nManager_getConstants.isRTL, doLeftAndRightSwapInRTL = _NativeI18nManager_getConstants.doLeftAndRightSwapInRTL, localeIdentifier = _NativeI18nManager_getConstants.localeIdentifier;
        return {
            isRTL,
            doLeftAndRightSwapInRTL,
            localeIdentifier
        };
    }
    return {
        isRTL: false,
        doLeftAndRightSwapInRTL: true
    };
}
var _default = {
    getConstants: ()=>{
        return i18nConstants;
    },
    allowRTL: (shouldAllow)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: (shouldForce)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: (flipStyles)=>{
        if (!_NativeI18nManager.default) {
            return;
        }
        _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
};


}),
1394: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40142));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var NativeModules = (__webpack_require__(40225)/* ["default"] */["default"]);
var defineLazyObjectProperty = (__webpack_require__(53077)/* ["default"] */["default"]);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var UIManagerProperties = (__webpack_require__(85238)/* ["default"] */["default"]);
var viewManagerConfigs = {};
var triedLoadingConfig = new Set();
var NativeUIManagerConstants = {};
var isNativeUIManagerConstantsSet = false;
function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
        NativeUIManagerConstants = _NativeUIManager.default.getConstants();
        isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
}
function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
        try {
            viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
            console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
            viewManagerConfigs[viewManagerName] = null;
        }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
        return config;
    }
    // If we're in the Chrome Debugger, let's not even try calling the sync
    // method.
    if (!__webpack_require__.g.nativeCallSyncHook) {
        return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = (0, _nullthrows.default)(_NativeUIManager.default.lazilyLoadView)(viewManagerName);
        triedLoadingConfig.add(viewManagerName);
        if (result != null && result.viewConfig != null) {
            getConstants()[viewManagerName] = result.viewConfig;
            lazifyViewManagerConfig(viewManagerName);
        }
    }
    return viewManagerConfigs[viewManagerName];
}
// $FlowFixMe[cannot-spread-interface]
var UIManagerJS = _object_spread_props._(_object_spread._({}, _NativeUIManager.default), {
    createView (reactTag, viewName, rootTag, props) {
        if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {
            // This is necessary to force the initialization of native viewManager
            // classes in iOS when using static ViewConfigs
            getViewManagerConfig(viewName);
        }
        _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants () {
        return getConstants();
    },
    getViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName) != null;
    }
});
// TODO (T45220498): Remove this.
// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`
// instead of `UIManager.getViewManagerConfig()` off UIManager.js.
// This is a workaround for now.
// $FlowFixMe[prop-missing]
_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var constants = {};
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value !== 'function') {
                        constants[key] = value;
                    }
                });
                return constants;
            }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var commands = {};
                var index = 0;
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value === 'function') {
                        commands[key] = index++;
                    }
                });
                return commands;
            }
        });
    }
}
/**
 * Copies the ViewManager constants and commands into UIManager. This is
 * only needed for iOS, which puts the constants in the ViewManager
 * namespace instead of UIManager, unlike Android.
 */ if (Platform.OS === 'ios') {
    Object.keys(getConstants()).forEach((viewName)=>{
        lazifyViewManagerConfig(viewName);
    });
} else if (getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: ()=>(0, _nullthrows.default)(_NativeUIManager.default.getConstantsForViewManager)(viewManagerName)
        });
    });
}
if (!__webpack_require__.g.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach((viewManagerName)=>{
        if (!UIManagerProperties.includes(viewManagerName)) {
            if (!viewManagerConfigs[viewManagerName]) {
                viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
            }
            defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
                get: ()=>{
                    console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
                    return UIManagerJS.getViewManagerConfig(viewManagerName);
                }
            });
        }
    });
}
var _default = UIManagerJS;


}),
54419: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReactFabricHostComponent;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7273));
var _RendererProxy = __webpack_require__(46513);
var _FabricUIManager = __webpack_require__(4697);
var _ReactNativeAttributePayload = __webpack_require__(39825);
var _warnForStyleProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91360));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _nullthrows1 = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()), fabricMeasure = _nullthrows1.measure, fabricMeasureInWindow = _nullthrows1.measureInWindow, fabricMeasureLayout = _nullthrows1.measureLayout, fabricGetBoundingClientRect = _nullthrows1.getBoundingClientRect, setNativeProps = _nullthrows1.setNativeProps;
var noop = ()=>{};
var ReactFabricHostComponent = /*#__PURE__*/ function() {
    "use strict";
    function ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle) {
        _class_call_check._(this, ReactFabricHostComponent);
        this.__nativeTag = tag;
        this._viewConfig = viewConfig;
        this.__internalInstanceHandle = internalInstanceHandle;
    }
    _create_class._(ReactFabricHostComponent, [
        {
            key: "blur",
            value: function blur() {
                _TextInputState.default.blurTextInput(this);
            }
        },
        {
            key: "focus",
            value: function focus() {
                _TextInputState.default.focusTextInput(this);
            }
        },
        {
            key: "measure",
            value: function measure(callback) {
                var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
                if (node != null) {
                    fabricMeasure(node, callback);
                }
            }
        },
        {
            key: "measureInWindow",
            value: function measureInWindow(callback) {
                var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
                if (node != null) {
                    fabricMeasureInWindow(node, callback);
                }
            }
        },
        {
            key: "measureLayout",
            value: function measureLayout(relativeToNativeNode, onSuccess, onFail /* currently unused */ ) {
                if (typeof relativeToNativeNode === 'number' || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
                    if (false) {}
                    return;
                }
                var toStateNode = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
                var fromStateNode = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(relativeToNativeNode.__internalInstanceHandle);
                if (toStateNode != null && fromStateNode != null) {
                    fabricMeasureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
                }
            }
        },
        {
            key: "unstable_getBoundingClientRect",
            value: function unstable_getBoundingClientRect() {
                var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
                if (node != null) {
                    var rect = fabricGetBoundingClientRect(node, true);
                    if (rect) {
                        return new DOMRect(rect[0], rect[1], rect[2], rect[3]);
                    }
                }
                // Empty rect if any of the above failed
                return new DOMRect(0, 0, 0, 0);
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps1(nativeProps) {
                if (false) {}
                var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this._viewConfig.validAttributes);
                var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
                if (node != null && updatePayload != null) {
                    setNativeProps(node, updatePayload);
                }
            }
        }
    ]);
    return ReactFabricHostComponent;
}();


}),
84430: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /**
 * This module is meant to be used by the React renderers to create public
 * instances and get some data from them (like their instance handle / fiber).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createPublicInstance: function() {
        return createPublicInstance;
    },
    createPublicRootInstance: function() {
        return createPublicRootInstance;
    },
    createPublicTextInstance: function() {
        return createPublicTextInstance;
    },
    getInternalInstanceHandleFromPublicInstance: function() {
        return getInternalInstanceHandleFromPublicInstance;
    },
    getNativeTagFromPublicInstance: function() {
        return getNativeTagFromPublicInstance;
    },
    getNodeFromPublicInstance: function() {
        return getNodeFromPublicInstance;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
// Lazy loaded to avoid evaluating the module when using the legacy renderer.
var ReactNativeDocumentModuleObject;
var ReactFabricHostComponentClass;
var ReactNativeElementClass;
var ReadOnlyTextClass;
var RendererProxy;
function getReactNativeDocumentModule() {
    if (ReactNativeDocumentModuleObject == null) {
        // We initialize this lazily to avoid a require cycle.
        ReactNativeDocumentModuleObject = __webpack_require__(43554);
    }
    return ReactNativeDocumentModuleObject;
}
function getReactNativeElementClass() {
    if (ReactNativeElementClass == null) {
        ReactNativeElementClass = (__webpack_require__(8778)/* ["default"] */["default"]);
    }
    return ReactNativeElementClass;
}
function getReactFabricHostComponentClass() {
    if (ReactFabricHostComponentClass == null) {
        ReactFabricHostComponentClass = (__webpack_require__(54419)/* ["default"] */["default"]);
    }
    return ReactFabricHostComponentClass;
}
function getReadOnlyTextClass() {
    if (ReadOnlyTextClass == null) {
        ReadOnlyTextClass = (__webpack_require__(38523)/* ["default"] */["default"]);
    }
    return ReadOnlyTextClass;
}
function createPublicRootInstance(rootTag) {
    if (_ReactNativeFeatureFlags.enableAccessToHostTreeInFabric() && _ReactNativeFeatureFlags.enableDOMDocumentAPI()) {
        var ReactNativeDocumentModule = getReactNativeDocumentModule();
        // $FlowExpectedError[incompatible-return]
        return ReactNativeDocumentModule.createReactNativeDocument(rootTag);
    }
    // $FlowExpectedError[incompatible-return]
    return null;
}
function createPublicInstance(tag, viewConfig, internalInstanceHandle, ownerDocument) {
    if (_ReactNativeFeatureFlags.enableAccessToHostTreeInFabric()) {
        var ReactNativeElement = getReactNativeElementClass();
        return new ReactNativeElement(tag, viewConfig, internalInstanceHandle, ownerDocument);
    } else {
        var ReactFabricHostComponent = getReactFabricHostComponentClass();
        return new ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle);
    }
}
function createPublicTextInstance(internalInstanceHandle, ownerDocument) {
    var ReadOnlyText = getReadOnlyTextClass();
    return new ReadOnlyText(internalInstanceHandle, ownerDocument);
}
function getNativeTagFromPublicInstance(publicInstance) {
    return publicInstance.__nativeTag;
}
function getNodeFromPublicInstance(publicInstance) {
    // Avoid loading ReactFabric if using an instance from the legacy renderer.
    if (publicInstance.__internalInstanceHandle == null) {
        return null;
    }
    if (RendererProxy == null) {
        RendererProxy = __webpack_require__(46513);
    }
    return RendererProxy.getNodeFromInternalInstanceHandle(// $FlowExpectedError[incompatible-call] __internalInstanceHandle is always an InternalInstanceHandle from React when we get here.
    publicInstance.__internalInstanceHandle);
}
function getInternalInstanceHandleFromPublicInstance(publicInstance) {
    // TODO(T174762768): Remove this once OSS versions of renderers will be synced.
    // $FlowExpectedError[prop-missing] Keeping this for backwards-compatibility with the renderers versions in open source.
    if (publicInstance._internalInstanceHandle != null) {
        // $FlowExpectedError[incompatible-return] Keeping this for backwards-compatibility with the renderers versions in open source.
        return publicInstance._internalInstanceHandle;
    }
    // $FlowExpectedError[incompatible-return] __internalInstanceHandle is always an InternalInstanceHandle from React when we get here.
    return publicInstance.__internalInstanceHandle;
}


}),
76866: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * IMPORTANT!!
 *
 * This module cannot import `ReactFabric` (directly or indirectly)
 * because it can be used by apps only using the legacy renderer.
 * In that case `nativeFabricUIManager` isn't defined and `ReactFabric` throws.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "isPublicInstance", ({
    enumerable: true,
    get: function() {
        return isPublicInstance;
    }
}));
function isPublicInstance(maybeInstance) {
    return maybeInstance != null && // TODO: implement a better check when the instance is defined in the React Native repository.
    (maybeInstance.__nativeTag != null || // TODO: remove this check when syncing the new version of the renderer from React to React Native.
    isLegacyFabricInstance(maybeInstance));
}
function isLegacyFabricInstance(maybeInstance) {
    /* eslint-disable dot-notation */ return maybeInstance != null && // $FlowExpectedError[incompatible-use]
    maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
}


}),
39825: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    create: function() {
        return create;
    },
    diff: function() {
        return diff;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _deepDiffer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5914));
var emptyObject = {};
/**
 * Create a payload that contains all the updates between two sets of props.
 *
 * These helpers are all encapsulated into a single module, because they use
 * mutation as a performance optimization which leads to subtle shared
 * dependencies between the code paths. To avoid this mutable state leaking
 * across modules, I've kept them isolated to this module.
 */ // Tracks removed keys
var removedKeys = null;
var removedKeyCount = 0;
var deepDifferOptions = {
    unsafelyIgnoreFunctions: true
};
function defaultDiffer(prevProp, nextProp) {
    if (typeof nextProp !== 'object' || nextProp === null) {
        // Scalars have already been checked for equality
        return true;
    } else {
        // For objects and arrays, the default diffing algorithm is a deep compare
        return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);
    }
}
function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) {
        var i = node.length;
        while(i-- && removedKeyCount > 0){
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
        }
    } else if (node && removedKeyCount > 0) {
        var obj = node;
        for(var propKey in removedKeys){
            // $FlowFixMe[incompatible-use] found when upgrading Flow
            if (!removedKeys[propKey]) {
                continue;
            }
            var nextProp = obj[propKey];
            if (nextProp === undefined) {
                continue;
            }
            var attributeConfig = validAttributes[propKey];
            if (!attributeConfig) {
                continue; // not a valid native prop
            }
            if (typeof nextProp === 'function') {
                // $FlowFixMe[incompatible-type] found when upgrading Flow
                nextProp = true;
            }
            if (typeof nextProp === 'undefined') {
                // $FlowFixMe[incompatible-type] found when upgrading Flow
                nextProp = null;
            }
            if (typeof attributeConfig !== 'object') {
                // case: !Object is the default case
                updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
                // case: CustomAttributeConfiguration
                var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
            // $FlowFixMe[incompatible-use] found when upgrading Flow
            removedKeys[propKey] = false;
            removedKeyCount--;
        }
    }
}
function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    var i;
    for(i = 0; i < minLength; i++){
        // Diff any items in the array in the forward direction. Repeated keys
        // will be overwritten by later values.
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }
    for(; i < prevArray.length; i++){
        // Clear out all remaining properties.
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }
    for(; i < nextArray.length; i++){
        // Add all remaining properties.
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }
    return updatePayload;
}
function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) {
        // If no properties have been added, then we can bail out quickly on object
        // equality.
        return updatePayload;
    }
    if (!prevProp || !nextProp) {
        if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
        }
        if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
        }
        return updatePayload;
    }
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
        // Both are leaves, we can diff the leaves.
        return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
        // Both are arrays, we can diff the arrays.
        return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp)) {
        return diffProperties(updatePayload, // $FlowFixMe - We know that this is always an object when the input is.
        (0, _flattenStyle.default)(prevProp), // $FlowFixMe - We know that this isn't an array because of above flow.
        nextProp, validAttributes);
    }
    return diffProperties(updatePayload, prevProp, // $FlowFixMe - We know that this is always an object when the input is.
    (0, _flattenStyle.default)(nextProp), validAttributes);
}
/**
 * addNestedProperty takes a single set of props and valid attribute
 * attribute configurations. It processes each prop and adds it to the
 * updatePayload.
 */ function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) {
        return updatePayload;
    }
    if (!Array.isArray(nextProp)) {
        // Add each property of the leaf.
        return addProperties(updatePayload, nextProp, validAttributes);
    }
    for(var i = 0; i < nextProp.length; i++){
        // Add all the properties of the array.
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }
    return updatePayload;
}
/**
 * clearNestedProperty takes a single set of props and valid attributes. It
 * adds a null sentinel to the updatePayload, for each prop key.
 */ function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) {
        return updatePayload;
    }
    if (!Array.isArray(prevProp)) {
        // Add each property of the leaf.
        return clearProperties(updatePayload, prevProp, validAttributes);
    }
    for(var i = 0; i < prevProp.length; i++){
        // Add all the properties of the array.
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }
    return updatePayload;
}
/**
 * diffProperties takes two sets of props and a set of valid attributes
 * and write to updatePayload the values that changed or were deleted.
 * If no updatePayload is provided, a new one is created and returned if
 * anything changed.
 */ function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig;
    var nextProp;
    var prevProp;
    for(var propKey in nextProps){
        attributeConfig = validAttributes[propKey];
        if (!attributeConfig) {
            continue; // not a valid native prop
        }
        prevProp = prevProps[propKey];
        nextProp = nextProps[propKey];
        // functions are converted to booleans as markers that the associated
        // events should be sent from native.
        if (typeof nextProp === 'function') {
            nextProp = true;
            // If nextProp is not a function, then don't bother changing prevProp
            // since nextProp will win and go into the updatePayload regardless.
            if (typeof prevProp === 'function') {
                prevProp = true;
            }
        }
        // An explicit value of undefined is treated as a null because it overrides
        // any other preceding value.
        if (typeof nextProp === 'undefined') {
            nextProp = null;
            if (typeof prevProp === 'undefined') {
                prevProp = null;
            }
        }
        if (removedKeys) {
            removedKeys[propKey] = false;
        }
        if (updatePayload && updatePayload[propKey] !== undefined) {
            // Something else already triggered an update to this key because another
            // value diffed. Since we're now later in the nested arrays our value is
            // more important so we need to calculate it and override the existing
            // value. It doesn't matter if nothing changed, we'll set it anyway.
            // Pattern match on: attributeConfig
            if (typeof attributeConfig !== 'object') {
                // case: !Object is the default case
                updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
                // case: CustomAttributeConfiguration
                var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
            continue;
        }
        if (prevProp === nextProp) {
            continue; // nothing changed
        }
        // Pattern match on: attributeConfig
        if (typeof attributeConfig !== 'object') {
            // case: !Object is the default case
            if (defaultDiffer(prevProp, nextProp)) {
                // a normal leaf has changed
                (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
            // case: CustomAttributeConfiguration
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            if (shouldUpdate) {
                var nextValue1 = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
                (updatePayload || (updatePayload = {}))[propKey] = nextValue1;
            }
        } else {
            // default: fallthrough case when nested properties are defined
            removedKeys = null;
            removedKeyCount = 0;
            // We think that attributeConfig is not CustomAttributeConfiguration at
            // this point so we assume it must be AttributeConfiguration.
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
            if (removedKeyCount > 0 && updatePayload) {
                restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
                removedKeys = null;
            }
        }
    }
    // Also iterate through all the previous props to catch any that have been
    // removed and make sure native gets the signal so it can reset them to the
    // default.
    for(var propKey1 in prevProps){
        if (nextProps[propKey1] !== undefined) {
            continue; // we've already covered this key in the previous pass
        }
        attributeConfig = validAttributes[propKey1];
        if (!attributeConfig) {
            continue; // not a valid native prop
        }
        if (updatePayload && updatePayload[propKey1] !== undefined) {
            continue;
        }
        prevProp = prevProps[propKey1];
        if (prevProp === undefined) {
            continue; // was already empty anyway
        }
        // Pattern match on: attributeConfig
        if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
            // case: CustomAttributeConfiguration | !Object
            // Flag the leaf property for removal by sending a sentinel.
            (updatePayload || (updatePayload = {}))[propKey1] = null;
            if (!removedKeys) {
                removedKeys = {};
            }
            if (!removedKeys[propKey1]) {
                removedKeys[propKey1] = true;
                removedKeyCount++;
            }
        } else {
            // default:
            // This is a nested attribute configuration where all the properties
            // were removed so we need to go through and clear out all of them.
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
        }
    }
    return updatePayload;
}
/**
 * addProperties adds all the valid props to the payload after being processed.
 */ function addProperties(updatePayload, props, validAttributes) {
    // TODO: Fast path
    return diffProperties(updatePayload, emptyObject, props, validAttributes);
}
/**
 * clearProperties clears all the previous props by adding a null sentinel
 * to the payload for each valid key.
 */ function clearProperties(updatePayload, prevProps, validAttributes) {
    // TODO: Fast path
    return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
}
function create(props, validAttributes) {
    return addProperties(null, props, validAttributes);
}
function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null, prevProps, nextProps, validAttributes);
}


}),
91360: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return warnForStyleProps;
    }
}));
function warnForStyleProps(props, validAttributes) {
    if (false) { var key }
}


}),
44170: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ReactNativeFeatureFlags = {
    shouldEmitW3CPointerEvents: ()=>false,
    shouldPressibilityUseW3CPointerEventsForHover: ()=>false
};
var _default = ReactNativeFeatureFlags;


}),
65610: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dispatchCommand: function() {
        return dispatchCommand;
    },
    findHostInstance_DEPRECATED: function() {
        return findHostInstance_DEPRECATED;
    },
    findNodeHandle: function() {
        return findNodeHandle;
    },
    getNodeFromInternalInstanceHandle: function() {
        return getNodeFromInternalInstanceHandle;
    },
    getPublicInstanceFromInternalInstanceHandle: function() {
        return getPublicInstanceFromInternalInstanceHandle;
    },
    getPublicInstanceFromRootTag: function() {
        return getPublicInstanceFromRootTag;
    },
    isChildPublicInstance: function() {
        return isChildPublicInstance;
    },
    isProfilingRenderer: function() {
        return isProfilingRenderer;
    },
    renderElement: function() {
        return renderElement;
    },
    sendAccessibilityEvent: function() {
        return sendAccessibilityEvent;
    },
    unmountComponentAtNodeAndRemoveContainer: function() {
        return unmountComponentAtNodeAndRemoveContainer;
    },
    unstable_batchedUpdates: function() {
        return unstable_batchedUpdates;
    }
});
var _ErrorHandlers = __webpack_require__(21934);
function renderElement(ref) {
    var element = ref.element, rootTag = ref.rootTag, useFabric = ref.useFabric, useConcurrentRoot = ref.useConcurrentRoot;
    if (useFabric) {
        (__webpack_require__(12262)/* ["default"].render */["default"].render)(element, rootTag, null, useConcurrentRoot, {
            onCaughtError: _ErrorHandlers.onCaughtError,
            onUncaughtError: _ErrorHandlers.onUncaughtError,
            onRecoverableError: _ErrorHandlers.onRecoverableError
        });
    } else {
        (__webpack_require__(1105)/* ["default"].render */["default"].render)(element, rootTag, undefined, {
            onCaughtError: _ErrorHandlers.onCaughtError,
            onUncaughtError: _ErrorHandlers.onUncaughtError,
            onRecoverableError: _ErrorHandlers.onRecoverableError
        });
    }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
    return (__webpack_require__(1105)/* ["default"].findHostInstance_DEPRECATED */["default"].findHostInstance_DEPRECATED)(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
    return (__webpack_require__(1105)/* ["default"].findNodeHandle */["default"].findNodeHandle)(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        // Note: this function has the same implementation in the legacy and new renderer.
        // However, evaluating the old renderer comes with some side effects.
        return (__webpack_require__(12262)/* ["default"].dispatchCommand */["default"].dispatchCommand)(handle, command, args);
    } else {
        return (__webpack_require__(1105)/* ["default"].dispatchCommand */["default"].dispatchCommand)(handle, command, args);
    }
}
function sendAccessibilityEvent(handle, eventType) {
    return (__webpack_require__(1105)/* ["default"].sendAccessibilityEvent */["default"].sendAccessibilityEvent)(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
    // $FlowExpectedError[incompatible-type] rootTag is an opaque type so we can't really cast it as is.
    var rootTagAsNumber = rootTag;
    (__webpack_require__(1105)/* ["default"].unmountComponentAtNodeAndRemoveContainer */["default"].unmountComponentAtNodeAndRemoveContainer)(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
    // This doesn't actually do anything when batching updates for a Fabric root.
    return (__webpack_require__(1105)/* ["default"].unstable_batchedUpdates */["default"].unstable_batchedUpdates)(fn, bookkeeping);
}
function isProfilingRenderer() {
    return Boolean(false);
}
function isChildPublicInstance(parentInstance, childInstance) {
    return (__webpack_require__(1105)/* ["default"].isChildPublicInstance */["default"].isChildPublicInstance)(parentInstance, childInstance);
}
function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
    // This is only available in Fabric
    return (__webpack_require__(12262)/* ["default"].getNodeFromInternalInstanceHandle */["default"].getNodeFromInternalInstanceHandle)(internalInstanceHandle);
}
function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) /*PublicInstance | PublicTextInstance | null*/ {
    // This is only available in Fabric
    return (__webpack_require__(12262)/* ["default"].getPublicInstanceFromInternalInstanceHandle */["default"].getPublicInstanceFromInternalInstanceHandle)(internalInstanceHandle);
}
function getPublicInstanceFromRootTag(rootTag) /*PublicRootInstance | null*/ {
    // This is only available in Fabric
    return (__webpack_require__(12262)/* ["default"].getPublicInstanceFromRootTag */["default"].getPublicInstanceFromRootTag)(rootTag);
}


}),
46513: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /**
 * This module exists to allow apps to select their renderer implementation
 * (e.g.: Fabric-only, Paper-only) without having to pull all the renderer
 * implementations into their app bundle, which affects app size.
 *
 * By default, the setup will be:
 *   -> RendererProxy
 *     -> RendererImplementation (which uses Fabric or Paper depending on a flag at runtime)
 *
 * But this will allow a setup like this without duplicating logic:
 *   -> RendererProxy (fork)
 *     -> RendererImplementation (which uses Fabric or Paper depending on a flag at runtime)
 *     or -> OtherImplementation (which uses Fabric only)
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _export_star = __webpack_require__(4084);
_export_star._(__webpack_require__(65610), exports);


}),
90839: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RootTagContext: function() {
        return RootTagContext;
    },
    createRootTag: function() {
        return createRootTag;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var RootTagContext = /*#__PURE__*/ _react.createContext(0);
if (false) {}
function createRootTag(rootTag) {
    return rootTag;
}


}),
74853: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function isFabricReactTag(reactTag) {
    // React reserves even numbers for Fabric.
    return reactTag % 2 === 0;
}
var UIManagerImpl = __webpack_require__.g.RN$Bridgeless === true ? (__webpack_require__(65144)/* ["default"] */["default"]) : (__webpack_require__(1394)/* ["default"] */["default"]);
// $FlowFixMe[cannot-spread-interface]
var UIManager = _object_spread_props._(_object_spread._({}, UIManagerImpl), {
    measure (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measure(reactTag, callback);
        }
    },
    measureInWindow (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measureInWindow(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measureInWindow(reactTag, callback);
        }
    },
    measureLayout (reactTag, ancestorReactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
            if (!shadowNode || !ancestorShadowNode) {
                return;
            }
            FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
        } else {
            // Paper
            UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
        }
    },
    measureLayoutRelativeToParent (reactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, (left, top, width, height, pageX, pageY)=>{
                    callback(left, top, width, height);
                });
            }
        } else {
            // Paper
            UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
        }
    },
    dispatchViewManagerCommand (reactTag, commandName, commandArgs) {
        // Sometimes, libraries directly pass in the output of `findNodeHandle` to
        // this function without checking if it's null. This guards against that
        // case. We throw early here in Javascript so we can get a JS stacktrace
        // instead of a harder-to-debug native Java or Objective-C stacktrace.
        if (typeof reactTag !== 'number') {
            throw new Error('dispatchViewManagerCommand: found null reactTag');
        }
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                // Transform the accidental CommandID into a CommandName which is the stringified number.
                // The interop layer knows how to convert this number into the right method name.
                // Stringify a string is a no-op, so it's safe.
                commandName = `${commandName}`;
                FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
            }
        } else {
            UIManagerImpl.dispatchViewManagerCommand(reactTag, // We have some legacy components that are actually already using strings. ¯\_(ツ)_/¯
            // $FlowFixMe[incompatible-call]
            commandName, commandArgs);
        }
    }
});
var _default = UIManager;


}),
85238: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/**
 * The list of non-ViewManager related UIManager properties.
 *
 * In an effort to improve startup performance by lazily loading view managers,
 * the interface to access view managers will change from
 * UIManager['viewManagerName'] to UIManager.getViewManagerConfig('viewManagerName').
 * By using a function call instead of a property access, the UIManager will
 * be able to initialize and load the required view manager from native
 * synchronously. All of React Native's core components have been updated to
 * use getViewManagerConfig(). For the next few releases, any usage of
 * UIManager['viewManagerName'] will result in a warning. Because React Native
 * does not support Proxy objects, a view manager access is implied if any of
 * UIManager's properties that are not one of the properties below is being
 * accessed. Once UIManager property accesses for view managers has been fully
 * deprecated, this file will also be removed.
 */ var UIManagerProperties = [
    'clearJSResponder',
    'configureNextLayoutAnimation',
    'createView',
    'dispatchViewManagerCommand',
    'findSubviewIn',
    'getConstantsForViewManager',
    'getDefaultEventTypes',
    'manageChildren',
    'measure',
    'measureInWindow',
    'measureLayout',
    'measureLayoutRelativeToParent',
    'removeRootView',
    'sendAccessibilityEvent',
    'setChildren',
    'setJSResponder',
    'setLayoutAnimationEnabledExperimental',
    'updateView',
    'viewIsDescendantOf',
    'LazyViewManagersEnabled',
    'ViewManagerNames',
    'StyleConstants',
    'AccessibilityEventTypes',
    'UIView',
    'getViewManagerConfig',
    'hasViewManagerConfig',
    'blur',
    'focus',
    'genericBubblingEventTypes',
    'genericDirectEventTypes',
    'lazilyLoadView'
];
var _default = UIManagerProperties;


}),
75741: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getCachedComponentWithDisplayName;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
var cache = new Map();
function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = (ref)=>{
            var children = ref.children;
            return children;
        };
        // $FlowFixMe[prop-missing]
        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
}


}),
69093: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var ReactNativeStyleAttributes = (__webpack_require__(34650)/* ["default"] */["default"]);
var resolveAssetSource = (__webpack_require__(63980)/* ["default"] */["default"]);
var processBackgroundImage = (__webpack_require__(33518)/* ["default"] */["default"]);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var processColorArray = (__webpack_require__(57338)/* ["default"] */["default"]);
var processFilter = (__webpack_require__(62354)/* ["default"] */["default"]);
var insetsDiffer = (__webpack_require__(14691)/* ["default"] */["default"]);
var matricesDiffer = (__webpack_require__(96940)/* ["default"] */["default"]);
var pointsDiffer = (__webpack_require__(60882)/* ["default"] */["default"]);
var sizesDiffer = (__webpack_require__(24395)/* ["default"] */["default"]);
var UIManager = (__webpack_require__(74853)/* ["default"] */["default"]);
var nullthrows = __webpack_require__(92956);
function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    if (viewConfig == null) {
        return null;
    }
    // TODO: This seems like a whole lot of runtime initialization for every
    // native component that can be either avoided or simplified.
    var baseModuleName = viewConfig.baseModuleName, bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes ?? {};
    directEventTypes = directEventTypes ?? {};
    while(baseModuleName){
        var baseModule = UIManager.getViewManagerConfig(baseModuleName);
        if (!baseModule) {
            baseModuleName = null;
        } else {
            bubblingEventTypes = _object_spread._({}, baseModule.bubblingEventTypes, bubblingEventTypes);
            directEventTypes = _object_spread._({}, baseModule.directEventTypes, directEventTypes);
            nativeProps = _object_spread._({}, baseModule.NativeProps, nativeProps);
            baseModuleName = baseModule.baseModuleName;
        }
    }
    var validAttributes = {};
    for(var key in nativeProps){
        var typeName = nativeProps[key];
        var diff = getDifferForType(typeName);
        var process = getProcessorForType(typeName);
        // If diff or process == null, omit the corresponding property from the Attribute
        // Why:
        //  1. Consistency with AttributeType flow type
        //  2. Consistency with Static View Configs, which omit the null properties
        validAttributes[key] = diff == null ? process == null ? true : {
            process
        } : process == null ? {
            diff
        } : {
            diff,
            process
        };
    }
    // Unfortunately, the current setup declares style properties as top-level
    // props. This makes it so we allow style properties in the `style` prop.
    // TODO: Move style properties into a `style` prop and disallow them as
    // top-level props on the native side.
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
        uiViewClassName,
        validAttributes,
        bubblingEventTypes,
        directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
}
function attachDefaultEventTypes(viewConfig) {
    // This is supported on UIManager platforms (ex: Android),
    // as lazy view managers are not implemented for all platforms.
    // See [UIManager] for details on constants and implementations.
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
        // Lazy view managers enabled.
        viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
    } else {
        viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
        viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
}
// TODO: Figure out how to avoid all this runtime initialization cost.
function merge(destination, source) {
    if (!source) {
        return destination;
    }
    if (!destination) {
        return source;
    }
    for(var key in source){
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        var sourceValue = source[key];
        if (destination.hasOwnProperty(key)) {
            var destinationValue = destination[key];
            if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
                sourceValue = merge(destinationValue, sourceValue);
            }
        }
        destination[key] = sourceValue;
    }
    return destination;
}
function getDifferForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CATransform3D':
            return matricesDiffer;
        case 'CGPoint':
            return pointsDiffer;
        case 'CGSize':
            return sizesDiffer;
        case 'UIEdgeInsets':
            return insetsDiffer;
        // Android Types
        case 'Point':
            return pointsDiffer;
        case 'EdgeInsets':
            return insetsDiffer;
    }
    return null;
}
function getProcessorForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CGColor':
        case 'UIColor':
            return processColor;
        case 'CGColorArray':
        case 'UIColorArray':
            return processColorArray;
        case 'CGImage':
        case 'UIImage':
        case 'RCTImageSource':
            return resolveAssetSource;
        case 'BoxShadowArray':
            return _processBoxShadow.default;
        case 'FilterArray':
            return processFilter;
        // Android Types
        case 'Color':
            return processColor;
        case 'ColorArray':
            return processColorArray;
        case 'Filter':
            return processFilter;
        case 'BackgroundImage':
            return processBackgroundImage;
        case 'ImageSource':
            return resolveAssetSource;
        case 'BoxShadow':
            return _processBoxShadow.default;
    }
    return null;
}
var _default = getNativeComponentAttributes;


}),
74767: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return renderApplication;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27160));
var _PerformanceLoggerContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(44630));
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68710));
var _DisplayMode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(58155));
var _getCachedComponentWithDebugName = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75741));
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(46513));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
__webpack_require__(86833);
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger ?? _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceLoggerContext.default.Provider, {
        value: performanceLogger,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContainer.default, {
            rootTag: rootTag,
            fabric: fabric,
            WrapperComponent: WrapperComponent,
            rootViewStyle: rootViewStyle,
            initialProps: initialProps ?? Object.freeze({}),
            internal_excludeLogBox: isLogBox,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(RootComponent, _object_spread_props._(_object_spread._({}, initialProps), {
                rootTag: rootTag
            }))
        })
    });
    if (false) { var RootComponentWithMeaningfulName }
    if (useOffscreen && displayMode != null) {
        // $FlowFixMe[incompatible-type]
        // $FlowFixMe[prop-missing]
        var Activity = _react.unstable_Activity;
        renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(Activity, {
            mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
            children: renderable
        });
    }
    // We want to have concurrentRoot always enabled when you're on Fabric.
    var useConcurrentRoot = Boolean(fabric);
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', _RendererProxy.isProfilingRenderer());
    _RendererProxy.renderElement({
        element: renderable,
        rootTag,
        useFabric: Boolean(fabric),
        useConcurrentRoot
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
}


}),
89741: (function () {
// Empty module as a target for NormalModuleReplacementPlugin.
//# sourceMappingURL=EmptyModule.js.map


}),
53244: (function (module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Expose these types to the React renderer
// flowlint unsafe-getters-setters:off
module.exports = {
    get BatchedBridge () {
        return (__webpack_require__(63531)/* ["default"] */["default"]);
    },
    get ExceptionsManager () {
        return (__webpack_require__(48065)/* ["default"] */["default"]);
    },
    get Platform () {
        return (__webpack_require__(73335)/* ["default"] */["default"]);
    },
    get RCTEventEmitter () {
        return (__webpack_require__(85307)/* ["default"] */["default"]);
    },
    get ReactNativeViewConfigRegistry () {
        return __webpack_require__(25232);
    },
    get TextInputState () {
        return (__webpack_require__(7273)/* ["default"] */["default"]);
    },
    get UIManager () {
        return (__webpack_require__(74853)/* ["default"] */["default"]);
    },
    // TODO: Remove when React has migrated to `createAttributePayload` and `diffAttributePayloads`
    get deepDiffer () {
        return (__webpack_require__(5914)/* ["default"] */["default"]);
    },
    get deepFreezeAndThrowOnMutationInDev () {
        return (__webpack_require__(14702)/* ["default"] */["default"]);
    },
    // TODO: Remove when React has migrated to `createAttributePayload` and `diffAttributePayloads`
    get flattenStyle () {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[incompatible-return]
        return (__webpack_require__(69490)/* ["default"] */["default"]);
    },
    get ReactFiberErrorDialog () {
        return (__webpack_require__(74051)/* ["default"] */["default"]);
    },
    get legacySendAccessibilityEvent () {
        return (__webpack_require__(63614)/* ["default"] */["default"]);
    },
    get RawEventEmitter () {
        return (__webpack_require__(50029)/* ["default"] */["default"]);
    },
    get CustomEvent () {
        return (__webpack_require__(63948)/* ["default"] */["default"]);
    },
    get createAttributePayload () {
        return (__webpack_require__(39825)/* .create */.create);
    },
    get diffAttributePayloads () {
        return (__webpack_require__(39825)/* .diff */.diff);
    },
    get createPublicRootInstance () {
        return (__webpack_require__(84430)/* .createPublicRootInstance */.createPublicRootInstance);
    },
    get createPublicInstance () {
        return (__webpack_require__(84430)/* .createPublicInstance */.createPublicInstance);
    },
    get createPublicTextInstance () {
        return (__webpack_require__(84430)/* .createPublicTextInstance */.createPublicTextInstance);
    },
    get getNativeTagFromPublicInstance () {
        return (__webpack_require__(84430)/* .getNativeTagFromPublicInstance */.getNativeTagFromPublicInstance);
    },
    get getNodeFromPublicInstance () {
        return (__webpack_require__(84430)/* .getNodeFromPublicInstance */.getNodeFromPublicInstance);
    },
    get getInternalInstanceHandleFromPublicInstance () {
        return (__webpack_require__(84430)/* .getInternalInstanceHandleFromPublicInstance */.getInternalInstanceHandleFromPublicInstance);
    }
};


}),
97257: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *        
 * @nolint
 * @preventMunge
 * @generated SignedSource<<558b9dfa7f6550519be8c208c6bc0eef>>
 *
 * This file was sync'd from the facebook/react repository.
 */ 
__webpack_require__(61536);
var ReactNativePrivateInterface = __webpack_require__(43798), React = __webpack_require__(4931), Scheduler = __webpack_require__(43827), isArrayImpl = Array.isArray, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.tracing_marker");
var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
}
var assign = Object.assign, prefix, suffix;
function describeBuiltInComponentFrame(name) {
    if (void 0 === prefix) try {
        throw Error();
    } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || "";
        suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
}
var reentry = !1;
function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = !0;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
                try {
                    if (construct) {
                        var Fake = function() {
                            throw Error();
                        };
                        Object.defineProperty(Fake.prototype, "props", {
                            set: function() {
                                throw Error();
                            }
                        });
                        if ("object" === typeof Reflect && Reflect.construct) {
                            try {
                                Reflect.construct(Fake, []);
                            } catch (x) {
                                var control = x;
                            }
                            Reflect.construct(fn, [], Fake);
                        } else {
                            try {
                                Fake.call();
                            } catch (x$0) {
                                control = x$0;
                            }
                            fn.call(Fake.prototype);
                        }
                    } else {
                        try {
                            throw Error();
                        } catch (x$1) {
                            control = x$1;
                        }
                        (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                    }
                } catch (sample) {
                    if (sample && control && "string" === typeof sample.stack) return [
                        sample.stack,
                        control.stack
                    ];
                }
                return [
                    null,
                    null
                ];
            }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
            value: "DetermineComponentFrameRoot"
        });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for(namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");)RunInRootFrame++;
            for(; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for(RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];)namePropDescriptor--;
            for(; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                    do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                        var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                        fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                        return frame;
                    }
                    while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
            }
        }
    } finally{
        reentry = !1, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
}
function describeFiber(fiber) {
    switch(fiber.tag){
        case 26:
        case 27:
        case 5:
            return describeBuiltInComponentFrame(fiber.type);
        case 16:
            return describeBuiltInComponentFrame("Lazy");
        case 13:
            return describeBuiltInComponentFrame("Suspense");
        case 19:
            return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
            return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
        case 11:
            return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
        case 1:
            return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
        default:
            return "";
    }
}
function getStackByFiberInDevAndProd(workInProgress) {
    try {
        var info = "";
        do info += describeFiber(workInProgress), workInProgress = workInProgress.return;
        while (workInProgress);
        return info;
    } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
}
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch(type){
        case REACT_FRAGMENT_TYPE:
            return "Fragment";
        case REACT_PORTAL_TYPE:
            return "Portal";
        case REACT_PROFILER_TYPE:
            return "Profiler";
        case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
        case REACT_SUSPENSE_TYPE:
            return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
    }
    if ("object" === typeof type) switch(type.$$typeof){
        case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
        case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
        case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
        case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
        case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
                return getComponentNameFromType(type(innerType));
            } catch (x) {}
    }
    return null;
}
var hasError = !1, caughtError = null, getFiberCurrentPropsFromNode$1 = null, getInstanceFromNode$1 = null, getNodeFromInstance$1 = null;
function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance$1(inst);
    try {
        listener(event);
    } catch (error) {
        hasError || (hasError = !0, caughtError = error);
    }
    event.currentTarget = null;
}
function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners, dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance$1(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
}
function functionThatReturnsTrue() {
    return !0;
}
function functionThatReturnsFalse() {
    return !1;
}
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for(var propName in dispatchConfig)dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
}
assign(SyntheticEvent.prototype, {
    preventDefault: function() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function() {
        this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function() {
        var Interface = this.constructor.Interface, propName;
        for(propName in Interface)this[propName] = null;
        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
    }
});
SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function() {
        return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};
SyntheticEvent.extend = function(Interface) {
    function E() {}
    function Class() {
        return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
};
addEventPoolingTo(SyntheticEvent);
function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
}
function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
}
function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
}
var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function() {
        return null;
    }
});
function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
}
function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
}
var startDependencies = [
    "topTouchStart"
], moveDependencies = [
    "topTouchMove"
], endDependencies = [
    "topTouchCancel",
    "topTouchEnd"
], touchBank = [], touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};
function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}
function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
}
function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch), touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}
function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
var instrumentationCallback, ResponderTouchHistoryStore = {
    instrument: function(callback) {
        instrumentationCallback = callback;
    },
    recordTouchTrack: function(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);
        else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) {
            if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) {
                for(topLevelType = 0; topLevelType < touchBank.length; topLevelType++)if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = topLevelType;
                    break;
                }
            }
        }
    },
    touchHistory: touchHistory
};
function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
        if (isArrayImpl(next)) return current.push.apply(current, next), current;
        current.push(next);
        return current;
    }
    return isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}
var responderInst = null, trackedTouchCount = 0;
function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
}
var eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        },
        dependencies: startDependencies
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        },
        dependencies: [
            "topScroll"
        ]
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        },
        dependencies: [
            "topSelectionChange"
        ]
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        },
        dependencies: moveDependencies
    },
    responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies
    },
    responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies
    },
    responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies
    },
    responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: []
    },
    responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: []
    },
    responderReject: {
        registrationName: "onResponderReject",
        dependencies: []
    },
    responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: []
    }
};
function getParent$1(inst) {
    do inst = inst.return;
    while (inst && 5 !== inst.tag);
    return inst ? inst : null;
}
function traverseTwoPhase$1(inst, fn, arg) {
    for(var path = []; inst;)path.push(inst), inst = getParent$1(inst);
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener$1(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent$1(targetInst) : null;
        traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
}
function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
}
var ResponderEventPlugin = {
    _getResponder: function() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;
        else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
            var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
            if (responderInst) b: {
                var JSCompiler_temp = responderInst;
                for(var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA))depthA++;
                tempA = 0;
                for(var tempB = targetInst; tempB; tempB = getParent$1(tempB))tempA++;
                for(; 0 < depthA - tempA;)JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
                for(; 0 < tempA - depthA;)targetInst = getParent$1(targetInst), tempA--;
                for(; depthA--;){
                    if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
                    JSCompiler_temp = getParent$1(JSCompiler_temp);
                    targetInst = getParent$1(targetInst);
                }
                JSCompiler_temp = null;
            }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
            shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
            b: {
                JSCompiler_temp = shouldSetEventType._dispatchListeners;
                targetInst = shouldSetEventType._dispatchInstances;
                if (isArrayImpl(JSCompiler_temp)) for(depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++){
                    if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                        JSCompiler_temp = targetInst[depthA];
                        break b;
                    }
                }
                else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
                    JSCompiler_temp = targetInst;
                    break b;
                }
                JSCompiler_temp = null;
            }
            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = !0 === executeDirectDispatch(shouldSetEventType), responderInst) if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [
                    shouldSetEventType,
                    depthA
                ]);
                changeResponder(JSCompiler_temp, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
            else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
            if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) {
                for(JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++)if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
                    depthA = getInstanceFromNode$1(targetInst);
                    b: {
                        for(targetInst = responderInst; depthA;){
                            if (targetInst === depthA || targetInst === depthA.alternate) {
                                targetInst = !0;
                                break b;
                            }
                            depthA = getParent$1(depthA);
                        }
                        targetInst = !1;
                    }
                    if (targetInst) {
                        topLevelType = !1;
                        break a;
                    }
                }
            }
            topLevelType = !0;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
        injectGlobalResponderHandler: function(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
    }
}, eventPluginOrder = null, namesToPlugins = {};
function recomputePluginOrdering() {
    if (eventPluginOrder) for(var pluginName in namesToPlugins){
        var pluginModule = namesToPlugins[pluginName], pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
        if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;
            for(var eventName in pluginIndex){
                var JSCompiler_inline_result = void 0;
                var dispatchConfig = pluginIndex[eventName];
                if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
                eventNameDispatchConfigs[eventName] = dispatchConfig;
                var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                if (phasedRegistrationNames) {
                    for(JSCompiler_inline_result in phasedRegistrationNames)phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
                    JSCompiler_inline_result = !0;
                } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;
                if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
        }
    }
}
function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
}
var plugins = [], eventNameDispatchConfigs = {}, registrationNameModules = {};
function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes, customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for(var path = []; inst;){
        path.push(inst);
        do inst = inst.return;
        while (inst && 5 !== inst.tag);
        inst = inst ? inst : null;
    }
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);
    else for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, !1);
}
function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
eventPluginOrder = Array.prototype.slice.call([
    "ResponderEventPlugin",
    "ReactNativeBridgeEventPlugin"
]);
recomputePluginOrdering();
var injectedNamesToPlugins$jscomp$inline_281 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType], directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
            topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, !0) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);
            else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);
            else return null;
            return topLevelType;
        }
    }
}, isOrderingDirty$jscomp$inline_282 = !1, pluginName$jscomp$inline_283;
for(pluginName$jscomp$inline_283 in injectedNamesToPlugins$jscomp$inline_281)if (injectedNamesToPlugins$jscomp$inline_281.hasOwnProperty(pluginName$jscomp$inline_283)) {
    var pluginModule$jscomp$inline_284 = injectedNamesToPlugins$jscomp$inline_281[pluginName$jscomp$inline_283];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_283) || namesToPlugins[pluginName$jscomp$inline_283] !== pluginModule$jscomp$inline_284) {
        if (namesToPlugins[pluginName$jscomp$inline_283]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_283 + "`."));
        namesToPlugins[pluginName$jscomp$inline_283] = pluginModule$jscomp$inline_284;
        isOrderingDirty$jscomp$inline_282 = !0;
    }
}
isOrderingDirty$jscomp$inline_282 && recomputePluginOrdering();
var emptyObject = {}, removedKeys = null, removedKeyCount = 0, deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
};
function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
}
function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for(var i = node.length; i-- && 0 < removedKeyCount;)restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    else if (node && 0 < removedKeyCount) {
        for(i in removedKeys)if (removedKeys[i]) {
            var nextProp = node[i];
            if (void 0 !== nextProp) {
                var attributeConfig = validAttributes[i];
                if (attributeConfig) {
                    "function" === typeof nextProp && (nextProp = !0);
                    "undefined" === typeof nextProp && (nextProp = null);
                    if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;
                    else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
                    removedKeys[i] = !1;
                    removedKeyCount--;
                }
            }
        }
    }
}
function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length, i;
        for(i = 0; i < minLength; i++)updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
        for(; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        for(; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
}
function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for(var i = 0; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
}
function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for(var i = 0; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
}
function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for(propKey in nextProps)if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;
        else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
        else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
        else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
            if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for(var propKey$5 in prevProps)void 0 === nextProps[propKey$5] && (!(attributeConfig = validAttributes[propKey$5]) || updatePayload && void 0 !== updatePayload[propKey$5] || (prevProp = prevProps[propKey$5], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$5] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$5] || (removedKeys[propKey$5] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
}
function fastAddProperties(payload, props, validAttributes) {
    if (isArrayImpl(props)) {
        for(var i = 0; i < props.length; i++)payload = fastAddProperties(payload, props[i], validAttributes);
        return payload;
    }
    for(i in props){
        var prop = props[i], attributeConfig = validAttributes[i];
        if (null != attributeConfig) {
            var newValue = void 0;
            if (void 0 === prop) if (payload && void 0 !== payload[i]) newValue = null;
            else continue;
            else "function" === typeof prop ? newValue = !0 : "object" !== typeof attributeConfig ? newValue = prop : "function" === typeof attributeConfig.process ? newValue = attributeConfig.process(prop) : "function" === typeof attributeConfig.diff && (newValue = prop);
            void 0 !== newValue ? (payload || (payload = {}), payload[i] = newValue) : payload = fastAddProperties(payload, prop, attributeConfig);
        }
    }
    return payload;
}
function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
}
var isInsideEventHandler = !1;
function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;
    try {
        return batchedUpdatesImpl(fn, bookkeeping);
    } finally{
        isInsideEventHandler = !1;
    }
}
var eventQueue = null;
function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
        var dispatchListeners = e._dispatchListeners, dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners)) for(var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++)executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
        else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
    }
}
function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;
    if (null != target) {
        var stateNode = target.stateNode;
        null != stateNode && (eventTarget = getPublicInstance(stateNode));
    }
    batchedUpdates$1(function() {
        var event = {
            eventName: topLevelType,
            nativeEvent: nativeEvent
        };
        ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);
        ReactNativePrivateInterface.RawEventEmitter.emit("*", event);
        event = eventTarget;
        for(var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++){
            var possiblePlugin = legacyPlugins[i];
            possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, event)) && (events = accumulateInto(events, possiblePlugin));
        }
        event = events;
        null !== event && (eventQueue = accumulateInto(eventQueue, event));
        event = eventQueue;
        eventQueue = null;
        if (event) {
            forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
            if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            if (hasError) throw event = caughtError, hasError = !1, caughtError = null, event;
        }
    });
}
var scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
        injectedHook.onCommitFiberRoot(rendererID, root, void 0, 128 === (root.current.flags & 128));
    } catch (err) {}
}
function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
}
var nextTransitionLane = 128, nextRetryLane = 4194304;
function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch(lanes & -lanes){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
            return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return lanes & 4194176;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return lanes & 62914560;
        case 67108864:
            return 67108864;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 0;
        default:
            return lanes;
    }
}
function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
}
function computeExpirationTime(lane, currentTime) {
    switch(lane){
        case 1:
        case 2:
        case 4:
        case 8:
            return currentTime + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
}
function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
}
function createLaneMap(initial) {
    for(var laneMap = [], i = 0; 31 > i; i++)laneMap.push(initial);
    return laneMap;
}
function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
}
function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements, expirationTimes = root.expirationTimes, hiddenUpdates = root.hiddenUpdates;
    for(remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;){
        var index$10 = 31 - clz32(remainingLanes), lane = 1 << index$10;
        entanglements[index$10] = 0;
        expirationTimes[index$10] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index$10];
        if (null !== hiddenUpdatesForLane) for(hiddenUpdates[index$10] = null, index$10 = 0; index$10 < hiddenUpdatesForLane.length; index$10++){
            var update = hiddenUpdatesForLane[index$10];
            null !== update && (update.lane &= -536870913);
        }
        remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
}
function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for(root = root.entanglements; rootEntangledLanes;){
        var index$11 = 31 - clz32(rootEntangledLanes), lane = 1 << index$11;
        lane & entangledLanes | root[index$11] & entangledLanes && (root[index$11] |= entangledLanes);
        rootEntangledLanes &= ~lane;
    }
}
function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
}
function getNearestMountedFiber(fiber) {
    var node = fiber, nearestMounted = fiber;
    if (fiber.alternate) for(; node.return;)node = node.return;
    else {
        fiber = node;
        do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
        while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
}
function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
}
function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
    }
    for(var a = fiber, b = alternate;;){
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
                a = b;
                continue;
            }
            break;
        }
        if (parentA.child === parentB.child) {
            for(parentB = parentA.child; parentB;){
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;
        else {
            for(var didFindChild = !1, child$12 = parentA.child; child$12;){
                if (child$12 === a) {
                    didFindChild = !0;
                    a = parentA;
                    b = parentB;
                    break;
                }
                if (child$12 === b) {
                    didFindChild = !0;
                    b = parentA;
                    a = parentB;
                    break;
                }
                child$12 = child$12.sibling;
            }
            if (!didFindChild) {
                for(child$12 = parentB.child; child$12;){
                    if (child$12 === a) {
                        didFindChild = !0;
                        a = parentB;
                        b = parentA;
                        break;
                    }
                    if (child$12 === b) {
                        didFindChild = !0;
                        b = parentB;
                        a = parentA;
                        break;
                    }
                    child$12 = child$12.sibling;
                }
                if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
        }
        if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for(node = node.child; null !== node;){
        tag = findCurrentHostFiberImpl(node);
        if (null !== tag) return tag;
        node = node.sibling;
    }
    return null;
}
var valueStack = [], index = -1;
function createCursor(defaultValue) {
    return {
        current: defaultValue
    };
}
function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
}
function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
}
var emptyContextObject = {};
function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
}
var objectIs = "function" === typeof Object.is ? Object.is : is, CapturedStacks = new WeakMap();
function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
    }
    return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
    };
}
var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    fiber = PROD_HOST_CONTEXT;
    pop(contextStackCursor);
    push(contextStackCursor, fiber);
}
function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    context !== context && (push(contextFiberStackCursor, fiber), push(contextStackCursor, context));
}
function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue2 = null);
}
var hydrationErrors = null, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
function finishQueueingConcurrentUpdates() {
    for(var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;){
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for(var isHidden = !1, parent = sourceFiber.return; null !== parent;)parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [
        update
    ] : sourceFiber.push(update), update.lane = lane | 536870912);
}
function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for(var parent = sourceFiber.return; null !== parent;)sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
}
var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = !1, mightHavePendingSyncWork = !1, isFlushingWork = !1, currentEventTransitionLane = 0;
function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = !0;
    didScheduleMicrotask || (didScheduleMicrotask = !0, scheduleImmediateTask(processRootScheduleInMicrotask));
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = !0;
        do {
            var didPerformSomeWork = !1;
            for(var root = firstScheduledRoot; null !== root;){
                if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
                    var pendingLanes = root.pendingLanes;
                    if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                    else {
                        var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
                        JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                        JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                        JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                    }
                    0 !== JSCompiler_inline_result && (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                root = root.next;
            }
        }while (didPerformSomeWork);
        isFlushingWork = !1;
    }
}
function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = !1;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for(var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;){
        var next = root.next, nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
        0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = !0));
        root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, !1);
}
function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for(var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;){
        var index$8 = 31 - clz32(lanes), lane = 1 << index$8, expirationTime = expirationTimes[index$8];
        if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$8] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
        lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime === root.callbackPriority) return currentTime;
        null !== pingedLanes && cancelCallback$1(pingedLanes);
        switch(lanesToEventPriority(suspendedLanes)){
            case 2:
            case 8:
                suspendedLanes = UserBlockingPriority;
                break;
            case 32:
                suspendedLanes = NormalPriority$1;
                break;
            case 268435456:
                suspendedLanes = IdlePriority;
                break;
            default:
                suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
        suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root.callbackPriority = currentTime;
        root.callbackNode = suspendedLanes;
        return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
}
function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
}
function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, !0);
}
function scheduleImmediateTask(cb) {
    supportsMicrotasks ? scheduleMicrotask(function() {
        0 !== (executionContext & 6) ? scheduleCallback$3(ImmediatePriority, cb) : cb();
    }) : scheduleCallback$3(ImmediatePriority, cb);
}
function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
}
var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
                entangledListeners.push(resolve);
            }
        };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
}
function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
        null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])();
    }
}
function chainThenableValue(thenable, result) {
    var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
            listeners.push(resolve);
        }
    };
    thenable.then(function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(result);
    }, function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for(error = 0; error < listeners.length; error++)(0, listeners[error])(void 0);
    });
    return thenableWithOverride;
}
var hasForceUpdate = !1;
function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            lanes: 0,
            hiddenCallbacks: null
        },
        callbacks: null
    };
}
function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
        baseState: current.baseState,
        firstBaseUpdate: current.firstBaseUpdate,
        lastBaseUpdate: current.lastBaseUpdate,
        shared: current.shared,
        callbacks: null
    });
}
function createUpdate(lane) {
    return {
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        update = getRootForUpdatedFiber(fiber);
        markUpdateLaneFromFiberToRoot(fiber, null, lane);
        return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
    }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue, current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
            do {
                var clone = {
                    lane: queue.lane,
                    tag: queue.tag,
                    payload: queue.payload,
                    callback: null,
                    next: null
                };
                null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                queue = queue.next;
            }while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else newFirst = newLast = capturedUpdate;
        queue = {
            baseState: current.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current.shared,
            callbacks: current.callbacks
        };
        workInProgress.updateQueue = queue;
        return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
}
var didReadFromEntangledAsyncAction = !1;
function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
    }
}
function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = !1;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                null !== current && (current = current.next = {
                    lane: 0,
                    tag: pendingQueue.tag,
                    payload: pendingQueue.payload,
                    callback: null,
                    next: null
                });
                a: {
                    var workInProgress = workInProgress$jscomp$0, update = pendingQueue;
                    updateLane = props;
                    var instance = instance$jscomp$0;
                    switch(update.tag){
                        case 1:
                            workInProgress = update.payload;
                            if ("function" === typeof workInProgress) {
                                newState = workInProgress.call(instance, newState, updateLane);
                                break a;
                            }
                            newState = workInProgress;
                            break a;
                        case 3:
                            workInProgress.flags = workInProgress.flags & -65537 | 128;
                        case 0:
                            workInProgress = update.payload;
                            updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                            if (null === updateLane || void 0 === updateLane) break a;
                            newState = assign({}, newState, updateLane);
                            break a;
                        case 2:
                            hasForceUpdate = !0;
                    }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [
                    updateLane
                ] : isHiddenUpdate.push(updateLane));
            } else isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
            }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;
            else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        }while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
    }
}
function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
}
function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for(updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)callCallback(callbacks[updateQueue], context);
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA), keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;
    for(keysB = 0; keysB < keysA.length; keysB++){
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return !1;
    }
    return !0;
}
var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), noopSuspenseyCommitThenable = {
    then: function() {}
};
function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
}
function noop() {}
function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch(thenable.status){
        case "fulfilled":
            return thenable.value;
        case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        default:
            if ("string" === typeof thenable.status) thenable.then(noop, noop);
            else {
                thenableState = workInProgressRoot;
                if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
                thenableState = thenable;
                thenableState.status = "pending";
                thenableState.then(function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                        var fulfilledThenable = thenable;
                        fulfilledThenable.status = "fulfilled";
                        fulfilledThenable.value = fulfilledValue;
                    }
                }, function(error) {
                    if ("pending" === thenable.status) {
                        var rejectedThenable = thenable;
                        rejectedThenable.status = "rejected";
                        rejectedThenable.reason = error;
                    }
                });
            }
            switch(thenable.status){
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
    }
}
var suspendedThenable = null;
function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
}
function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
}
var thenableState$1 = null, thenableIndexCounter$1 = 0;
function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
}
function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = void 0 !== element ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
}
function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [
                childToDelete
            ], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for(; null !== currentFirstChild;)deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
    }
    function mapRemainingChildren(currentFirstChild) {
        for(var existingChildren = new Map(); null !== currentFirstChild;)null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
        newFiber.flags |= 33554434;
        return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
        return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
        if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
        current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
        coerceRef(current, element);
        current.return = returnFiber;
        return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
    }
    function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                    return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_PORTAL_TYPE:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
                case REACT_PORTAL_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; newIdx < newChildren.length; newIdx++)oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (null == newChildren) throw Error("An iterable object provided no iterator.");
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; !step.done; newIdx++, step = newChildren.next())step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    a: {
                        for(var key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) {
                                key = newChild.type;
                                if (key === REACT_FRAGMENT_TYPE) {
                                    if (7 === currentFirstChild.tag) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, newChild.props.children);
                                        lanes.return = returnFiber;
                                        returnFiber = lanes;
                                        break a;
                                    }
                                } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                    lanes = useFiber(currentFirstChild, newChild.props);
                                    coerceRef(lanes, newChild);
                                    lanes.return = returnFiber;
                                    returnFiber = lanes;
                                    break a;
                                }
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            } else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                    }
                    return placeSingleChild(returnFiber);
                case REACT_PORTAL_TYPE:
                    a: {
                        for(key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                lanes = useFiber(currentFirstChild, newChild.children || []);
                                lanes.return = returnFiber;
                                returnFiber = lanes;
                                break a;
                            } else {
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            }
                            else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                    }
                    return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) {
                key = getIteratorFn(newChild);
                if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                newChild = key.call(newChild);
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function(returnFiber, currentFirstChild, newChild, lanes) {
        try {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            thenableState$1 = null;
            return firstChildFiber;
        } catch (x) {
            if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
            var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
        } finally{}
    };
}
var reconcileChildFibers = createChildReconciler(!0), mountChildFibers = createChildReconciler(!1), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
}
var suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
        if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current = fiber.alternate;
            null !== current && null !== current.memoizedState && (shellBoundary = fiber);
        }
    } else reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
}
var suspenseStackCursor = createCursor(0);
function findFirstSuspended(row) {
    for(var node = row; null !== node;){
        if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
        } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
        }
        if (node === row) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === row) return null;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
    return null;
}
var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, shouldDoubleInvokeUserFnsInHooksDEV = !1, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0;
function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
}
function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;
    for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++)if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    return !0;
}
function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
}
function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = !0));
}
function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
        thenableIndexCounter = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        numberOfReRenders += 1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress.updateQueue) {
            var children = workInProgress.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
        }
        ReactSharedInternals.H = HooksDispatcherOnRerender;
        children = Component(props, secondArg);
    }while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
}
function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
}
function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
        for(workInProgress = workInProgress.memoizedState; null !== workInProgress;){
            var queue = workInProgress.queue;
            null !== queue && (queue.pending = null);
            workInProgress = workInProgress.next;
        }
        didScheduleRenderPhaseUpdate = !1;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = !1;
    thenableIndexCounter = 0;
    thenableState = null;
}
function mountWorkInProgressHook() {
    var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
}
function updateWorkInProgressHook() {
    if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
    else {
        if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
            throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
}
var createFunctionComponentUpdateQueue;
createFunctionComponentUpdateQueue = function() {
    return {
        lastEffect: null,
        events: null,
        stores: null,
        memoCache: null
    };
};
function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
}
function use(usable) {
    if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
}
function useMemoCache(size) {
    var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
        var current = currentlyRenderingFiber$1.alternate;
        null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
            data: current.data.map(function(array) {
                return array.slice();
            }),
            index: 0
        })));
    }
    null == memoCache && (memoCache = {
        data: [],
        index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (void 0 === updateQueue) for(updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
}
function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
}
function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
    if (null !== pendingQueue) {
        if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;
    else {
        current = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$45 = !1;
        do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = !0);
                else if ((renderLanes & revertLane) === revertLane) {
                    update = update.next;
                    revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = !0);
                    continue;
                } else updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
        }while (null !== update && update !== current);
        null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = !0, didReadFromEntangledAsyncAction$45 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [
        hook.memoizedState,
        queue.dispatch
    ];
}
function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(), queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
    }
    return [
        newState,
        dispatch
    ];
}
function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = !0);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe
    ]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [
        fiber
    ]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [
        fiber
    ] : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
}
function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
    } catch (error) {
        return !0;
    }
}
function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
}
function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                initialStateInitializer();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
    };
    return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
}
function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
        var actionNode = {
            payload: payload,
            action: fiber,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
                actionNode.listeners.push(listener);
            }
        };
        null !== ReactSharedInternals.T ? setPendingState(!0) : actionNode.isTransition = !1;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
}
function runActionStateAction(actionQueue, node) {
    var action = node.action, payload = node.payload, prevState = actionQueue.state;
    if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
            onActionError(actionQueue, node, error);
        } finally{
            ReactSharedInternals.T = prevTransition;
        }
    } else try {
        prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$49) {
        onActionError(actionQueue, node, error$49);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
    }, function(error) {
        return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
        last = last.next;
        do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
    }
    actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for(var i = 0; i < actionNode.length; i++)(0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
    return newState;
}
function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(!1);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !1, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
        state: initialStateProp,
        dispatch: null,
        action: action,
        pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [
        initialStateProp,
        stateHook,
        !1
    ];
}
function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
        destroy: void 0
    }, null));
    return [
        currentStateHook,
        dispatch,
        stateHook
    ];
}
function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
}
function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [
        stateHook,
        dispatch,
        !1
    ];
}
function pushEffect(tag, create, inst, deps) {
    tag = {
        tag: tag,
        create: create,
        inst: inst,
        deps: deps,
        next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
}
function updateRef() {
    return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
        destroy: void 0
    }, void 0 === deps ? null : deps);
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
}
function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
}
function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
}
function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
    }
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function() {
        ref.current = null;
    };
}
function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([
        ref
    ]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {}
function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [
        callback,
        deps
    ];
    return callback;
}
function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
            nextCreate();
        } finally{
            setIsStrictModeForDevtools(!1);
        }
    }
    hook.memoizedState = [
        prevState,
        deps
    ];
    return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = !0), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = !0, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, !1, queue, pendingState);
    try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
            dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
        } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
        dispatchSetStateInternal(fiber, queue, {
            then: function() {},
            status: "rejected",
            reason: error
        }, requestUpdateLane(fiber));
    } finally{
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
}
function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
}
function updateId() {
    return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
    for(var provider = fiber.return; null !== provider;){
        switch(provider.tag){
            case 24:
            case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root = enqueueUpdate(provider, fiber, lane);
                null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
                provider = {
                    cache: createCache()
                };
                fiber.payload = provider;
                return;
        }
        provider = provider.return;
    }
}
function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
    else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), !1;
        } catch (error) {} finally{}
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), !0;
    }
    return !1;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
}
function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
}
function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
    }
}
var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
};
ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
ContextOnlyDispatcher.useFormState = throwInvalidHookError;
ContextOnlyDispatcher.useActionState = throwInvalidHookError;
ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
        ];
        return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function(create, deps) {
        return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
        mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            nextValue,
            deps
        ];
        return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    init(initialArg);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [
            hook.memoizedState,
            reducer
        ];
    },
    useRef: function(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
            current: initialValue
        };
        return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [
            initialState.memoizedState,
            dispatch
        ];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
        var stateHook = mountStateImpl(!1);
        stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, !0, !1);
        mountWorkInProgressHook().memoizedState = stateHook;
        return [
            !1,
            stateHook
        ];
    },
    useSyncExternalStore: function(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        return nextSnapshot;
    },
    useId: function() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix, globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
};
HooksDispatcherOnMount.useMemoCache = useMemoCache;
HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnMount.useFormState = mountActionState;
HooksDispatcherOnMount.useActionState = mountActionState;
HooksDispatcherOnMount.useOptimistic = function(passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !0, queue);
    queue.dispatch = hook;
    return [
        passthrough,
        hook
    ];
};
var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
        return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnUpdate.useFormState = updateActionState;
HooksDispatcherOnUpdate.useActionState = updateActionState;
HooksDispatcherOnUpdate.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
};
var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
        return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
HooksDispatcherOnRerender.useMemoCache = useMemoCache;
HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnRerender.useFormState = rerenderActionState;
HooksDispatcherOnRerender.useActionState = rerenderActionState;
HooksDispatcherOnRerender.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [
        passthrough,
        hook.queue.dispatch
    ];
};
function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
var classComponentUpdater = {
    isMounted: function(component) {
        return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 1;
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 2;
        void 0 !== callback && null !== callback && (update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
};
function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
}
function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject, contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
}
function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
}
function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
        newProps = {};
        for(var propName in baseProps)"ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for(var propName$51 in Component)void 0 === newProps[propName$51] && (newProps[propName$51] = Component[propName$51]);
    }
    return newProps;
}
var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error: error
        });
        if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
    }
    console.error(error);
};
function defaultOnRecoverableError(error) {
    reportGlobalError(error);
}
function logUncaughtError(root, errorInfo) {
    try {
        var onUncaughtError = root.onUncaughtError;
        onUncaughtError(errorInfo.value, {
            componentStack: errorInfo.stack
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function logCaughtError(root, boundary, errorInfo) {
    try {
        var onCaughtError = root.onCaughtError;
        onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
        element: null
    };
    lane.callback = function() {
        logUncaughtError(root, errorInfo);
    };
    return lane;
}
function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
}
function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function() {
            return getDerivedStateFromError(error);
        };
        update.callback = function() {
            logCaughtError(root, fiber, errorInfo);
        };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
        logCaughtError(root, fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([
            this
        ]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
        });
    });
}
function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
        var currentSourceFiber = sourceFiber.alternate;
        null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, !0);
        currentSourceFiber = sourceFiber.tag;
        0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
        currentSourceFiber = suspenseHandlerStackCursor.current;
        if (null !== currentSourceFiber) {
            switch(currentSourceFiber.tag){
                case 13:
                    return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([
                        value
                    ]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), !1;
                case 22:
                    if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                        transitions: null,
                        markerInstances: null,
                        retryQueue: new Set([
                            value
                        ])
                    }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([
                        value
                    ]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), !1;
            }
            throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
        }
        if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), !1;
        value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
        cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [
        currentSourceFiber
    ] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return !0;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
        switch(returnFiber.tag){
            case 3:
                return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), !1;
            case 1:
                if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), !1;
        }
        returnFiber = returnFiber.return;
    }while (null !== returnFiber);
    return !1;
}
var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = !1;
function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
}
function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for(var key in nextProps)"ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
        current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
}
function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
        else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}
function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2), prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
        if (0 !== (workInProgress.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
            if (null !== current) {
                nextChildren = workInProgress.child = current.child;
                for(nextIsDetached = 0; null !== nextChildren;)nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress.childLanes = nextIsDetached & ~nextProps;
            } else workInProgress.childLanes = 0, workInProgress.child = null;
            return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
        }
        if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
}
function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
        parent: CacheContext._currentValue2,
        pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, !0);
    return null;
}
function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);
    else {
        if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
        if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
}
function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, void 0, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
}
function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = !0;
    else if (null === current) {
        var instance = workInProgress.stateNode, unresolvedOldProps = workInProgress.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
        instance.props = oldProps;
        var oldContext = instance.context, contextType = Component.contextType, nextContext = emptyContextObject;
        "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
        contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = !1);
    } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        nextContext = workInProgress.memoizedProps;
        contextType = resolveClassComponentProps(Component, nextContext);
        instance.props = contextType;
        getDerivedStateFromProps = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        oldProps = emptyContextObject;
        "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress.memoizedState;
        nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = !1);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, !1, renderLanes);
}
function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
}
var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function mountSuspenseOffscreenState(renderLanes) {
    return {
        baseLanes: renderLanes,
        cachePool: getSuspendedCache()
    };
}
function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, showFallback = !1, didSuspend = 0 !== (workInProgress.flags & 128), JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = !0, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
        var nextPrimaryChildren = nextProps.children;
        nextProps = nextProps.fallback;
        if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
            mode: "hidden",
            children: nextPrimaryChildren
        }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress);
        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
        if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
            mode: "visible",
            children: nextProps.children
        }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);
        else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
            value: nextProps,
            source: null,
            stack: null
        }, null === hydrationErrors ? hydrationErrors = [
            JSCompiler_temp
        ] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, !1), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp) {
                nextProps = renderLanes & -renderLanes;
                if (0 !== (nextProps & 42)) nextProps = 1;
                else switch(nextProps){
                    case 2:
                        nextProps = 1;
                        break;
                    case 8:
                        nextProps = 4;
                        break;
                    case 32:
                        nextProps = 16;
                        break;
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                    case 4194304:
                    case 8388608:
                    case 16777216:
                    case 33554432:
                        nextProps = 64;
                        break;
                    case 268435456:
                        nextProps = 134217728;
                        break;
                    default:
                        nextProps = 0;
                }
                nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
                if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
            }
            shim$1() || renderDidSuspendDelayIfPossible();
            workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
        return workInProgress;
    }
    if (showFallback) {
        reuseSuspenseHandlerOnStack(workInProgress);
        nextPrimaryChildren = nextProps.fallback;
        showFallback = workInProgress.mode;
        didSuspend = current.child;
        var currentFallbackChildFragment = didSuspend.sibling, primaryChildProps = {
            mode: "hidden",
            children: nextProps.children
        };
        0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
        null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
        nextPrimaryChildren.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = nextPrimaryChildren;
        workInProgress.child = nextProps;
        nextProps = nextPrimaryChildren;
        nextPrimaryChildren = workInProgress.child;
        showFallback = current.child.memoizedState;
        null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue2, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
            parent: currentFallbackChildFragment,
            pool: currentFallbackChildFragment
        } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
            baseLanes: showFallback.baseLanes | renderLanes,
            cachePool: didSuspend
        });
        nextPrimaryChildren.memoizedState = showFallback;
        nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
        mode: "visible",
        children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [
        current
    ], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
        mode: "visible",
        children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
}
function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}
function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
}
function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;
    else {
        if (null !== current && 0 !== (current.flags & 128)) a: for(current = workInProgress.child; null !== current;){
            if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
            }
            if (current === workInProgress) break a;
            for(; null === current.sibling;){
                if (null === current.return || current.return === workInProgress) break a;
                current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
        }
        nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
    else switch(revealOrder){
        case "forwards":
            renderLanes = workInProgress.child;
            for(revealOrder = null; null !== renderLanes;)current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
            renderLanes = revealOrder;
            null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
            initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
            break;
        case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;
            for(workInProgress.child = null; null !== revealOrder;){
                current = revealOrder.alternate;
                if (null !== current && null === findFirstSuspended(current)) {
                    workInProgress.child = revealOrder;
                    break;
                }
                current = revealOrder.sibling;
                revealOrder.sibling = renderLanes;
                renderLanes = revealOrder;
                revealOrder = current;
            }
            initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
            break;
        case "together":
            initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
            break;
        default:
            workInProgress.memoizedState = null;
    }
    return workInProgress.child;
}
function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
        if (propagateParentContextChanges(current, workInProgress, renderLanes, !1), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for(renderLanes.return = workInProgress; null !== current.sibling;)current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
        renderLanes.sibling = null;
    }
    return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return !0;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? !0 : !1;
}
function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch(workInProgress.tag){
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
            break;
        case 27:
        case 5:
            pushHostContext(workInProgress);
            break;
        case 4:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        case 10:
            pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
            break;
        case 13:
            var state = workInProgress.memoizedState;
            if (null !== state) {
                if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
                if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                pushPrimaryTreeSuspenseHandler(workInProgress);
                current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                return null !== current ? current.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress);
            break;
        case 19:
            var didSuspendBefore = 0 !== (current.flags & 128);
            state = 0 !== (renderLanes & workInProgress.childLanes);
            state || (propagateParentContextChanges(current, workInProgress, renderLanes, !1), state = 0 !== (renderLanes & workInProgress.childLanes));
            if (didSuspendBefore) {
                if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                workInProgress.flags |= 128;
            }
            didSuspendBefore = workInProgress.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
        case 22:
        case 23:
            return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}
function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = !0;
    else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
    }
    else didReceiveUpdate = !1;
    workInProgress.lanes = 0;
    switch(workInProgress.tag){
        case 16:
            var elementType = workInProgress.elementType;
            a: {
                resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
                current = workInProgress.pendingProps;
                var init = elementType._init;
                elementType = init(elementType._payload);
                workInProgress.type = elementType;
                if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));
                else {
                    if (void 0 !== elementType && null !== elementType) {
                        if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                            workInProgress.tag = 11;
                            workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        } else if (init === REACT_MEMO_TYPE) {
                            workInProgress.tag = 14;
                            workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        }
                    }
                    workInProgress = getComponentNameFromType(elementType) || elementType;
                    throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
                }
            }
            return workInProgress;
        case 0:
            return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 1:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
            var nextProps = workInProgress.pendingProps;
            init = workInProgress.memoizedState;
            elementType = init.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            nextProps = workInProgress.memoizedState;
            var nextCache = nextProps.cache;
            pushProvider(workInProgress, CacheContext, nextCache);
            nextCache !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0);
            suspendIfUpdateReadFromEntangledAsyncAction();
            init = nextProps.element;
            init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
            return workInProgress;
        case 26:
        case 27:
        case 5:
            return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue2 = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 6:
            return null;
        case 13:
            return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 11:
            return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 7:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
        case 8:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 12:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 10:
            return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
        case 9:
            return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 14:
            return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 15:
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 17:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, !0, !1, renderLanes);
        case 28:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
        case 19:
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
        case 22:
            return updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
                parent: elementType,
                cache: init
            }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
                parent: elementType,
                cache: elementType
            }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 29:
            throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
var valueCursor = createCursor(null), currentlyRenderingFiber = null, lastContextDependency = null;
function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue2);
    context._currentValue2 = nextValue;
}
function popProvider(context) {
    context._currentValue2 = valueCursor.current;
    pop(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for(; null !== parent;){
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
    }
}
function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for(; null !== fiber;){
        var list = fiber.dependencies;
        if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for(; null !== list;){
                var dependency = list;
                list = fiber;
                for(var i = 0; i < contexts.length; i++)if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                }
                list = dependency.next;
            }
        } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            nextFiber.lanes |= renderLanes;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
            nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else for(nextFiber = fiber; null !== nextFiber;){
            if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
            }
            nextFiber = nextFiber.return;
        }
        fiber = nextFiber;
    }
}
function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for(var parent = workInProgress, isInsidePropagationBailout = !1; null !== parent;){
        if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
            else if (0 !== (parent.flags & 262144)) break;
        }
        if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [
                    context
                ]);
            }
        } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [
                HostTransitionContext
            ]);
        }
        parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
    for(currentDependencies = currentDependencies.firstContext; null !== currentDependencies;){
        if (!objectIs(currentDependencies.context._currentValue2, currentDependencies.memoizedValue)) return !0;
        currentDependencies = currentDependencies.next;
    }
    return !1;
}
function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
}
function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
}
function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
    var value = context._currentValue2;
    context = {
        context: context,
        memoizedValue: value,
        next: null
    };
    if (null === lastContextDependency) {
        if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = context;
        consumer.dependencies = {
            lanes: 0,
            firstContext: context
        };
        consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
}
var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
    var listeners = [], signal = this.signal = {
        aborted: !1,
        addEventListener: function(type, listener) {
            listeners.push(listener);
        }
    };
    this.abort = function() {
        signal.aborted = !0;
        listeners.forEach(function(listener) {
            return listener();
        });
    };
}, scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
};
function createCache() {
    return {
        controller: new AbortControllerLocal(),
        data: new Map(),
        refCount: 0
    };
}
function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function() {
        cache.controller.abort();
    });
}
var prevOnStartTransitionFinish = ReactSharedInternals.S;
ReactSharedInternals.S = function(transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
};
var resumedCache = createCursor(null);
function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
        parent: CacheContext._currentValue2,
        pool: cacheFromPool
    };
}
function doesRequireClone(current, completedWork) {
    if (null !== current && current.child === completedWork.child) return !1;
    if (0 !== (completedWork.flags & 16)) return !0;
    for(current = completedWork.child; null !== current;){
        if (0 !== (current.flags & 13878) || 0 !== (current.subtreeFlags & 13878)) return !0;
        current = current.sibling;
    }
    return !1;
}
function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for(var node = workInProgress.child; null !== node;){
        if (5 === node.tag) {
            var instance = node.stateNode;
            needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
            appendChildNode(parent.node, instance.node);
        } else if (6 === node.tag) {
            instance = node.stateNode;
            if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
            appendChildNode(parent.node, instance.node);
        } else if (4 !== node.tag) {
            if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildren(parent, node, !0, !0);
            else if (null !== node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
        }
        if (node === workInProgress) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === workInProgress) return;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
}
function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for(var node = workInProgress.child; null !== node;){
        if (5 === node.tag) {
            var instance = node.stateNode;
            needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
            appendChildNodeToSet(containerChildSet, instance.node);
        } else if (6 === node.tag) {
            instance = node.stateNode;
            if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
            appendChildNodeToSet(containerChildSet, instance.node);
        } else if (4 !== node.tag) {
            if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildrenToContainer(containerChildSet, node, !(null !== node.memoizedProps && "manual" === node.memoizedProps.mode), !0);
            else if (null !== node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
        }
        if (node === workInProgress) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === workInProgress) return;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
}
function updateHostContainer(current, workInProgress) {
    if (doesRequireClone(current, workInProgress)) {
        current = workInProgress.stateNode;
        var container = current.containerInfo, newChildSet = createChildNodeSet();
        appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);
        current.pendingChildren = newChildSet;
        workInProgress.flags |= 4;
        completeRoot(container, newChildSet);
    }
}
function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch(renderState.tailMode){
        case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for(var lastTailNode = null; null !== hasRenderedATailFallback;)null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
        case "collapsed":
            lastTailNode = renderState.tail;
            for(var lastTailNode$92 = null; null !== lastTailNode;)null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
            null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
}
function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
    if (didBailout) for(var child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;
    else for(child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
}
function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch(workInProgress.tag){
        case 28:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return bubbleProperties(workInProgress), null;
        case 1:
            return bubbleProperties(workInProgress), null;
        case 3:
            return newProps = workInProgress.stateNode, renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
        case 26:
        case 27:
        case 5:
            popHostContext(workInProgress);
            renderLanes = workInProgress.type;
            if (null !== current && null != workInProgress.stateNode) {
                renderLanes = current.stateNode;
                var oldProps = current.memoizedProps;
                if ((current = doesRequireClone(current, workInProgress)) || oldProps !== newProps) {
                    b: {
                        oldProps = diffProperties(null, oldProps, newProps, renderLanes.canonical.viewConfig.validAttributes);
                        renderLanes.canonical.currentProps = newProps;
                        newProps = renderLanes.node;
                        if (current) newProps = null !== oldProps ? cloneNodeWithNewChildrenAndProps(newProps, oldProps) : cloneNodeWithNewChildren(newProps);
                        else if (null !== oldProps) newProps = cloneNodeWithNewProps(newProps, oldProps);
                        else {
                            newProps = renderLanes;
                            break b;
                        }
                        newProps = {
                            node: newProps,
                            canonical: renderLanes.canonical
                        };
                    }
                    newProps === renderLanes ? workInProgress.stateNode = renderLanes : (workInProgress.stateNode = newProps, current ? appendAllChildren(newProps, workInProgress, !1, !1) : workInProgress.flags |= 4);
                } else workInProgress.stateNode = renderLanes;
            } else {
                if (!newProps) {
                    if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    bubbleProperties(workInProgress);
                    return null;
                }
                oldProps = rootInstanceStackCursor.current;
                current = nextReactTag;
                nextReactTag += 2;
                renderLanes = getViewConfigForType(renderLanes);
                var updatePayload = fastAddProperties(null, newProps, renderLanes.validAttributes);
                oldProps = createNode(current, renderLanes.uiViewClassName, oldProps, updatePayload, workInProgress);
                updatePayload = ReactNativePrivateInterface.createPublicInstance(current, renderLanes, workInProgress);
                current = {
                    node: oldProps,
                    canonical: {
                        nativeTag: current,
                        viewConfig: renderLanes,
                        currentProps: newProps,
                        internalInstanceHandle: workInProgress,
                        publicInstance: updatePayload
                    }
                };
                appendAllChildren(current, workInProgress, !1, !1);
                workInProgress.stateNode = current;
            }
            bubbleProperties(workInProgress);
            workInProgress.flags &= -16777217;
            return null;
        case 6:
            if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps ? (workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress), workInProgress.flags |= 4) : workInProgress.stateNode = current.stateNode;
            else {
                if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress);
            }
            bubbleProperties(workInProgress);
            return null;
        case 13:
            newProps = workInProgress.memoizedState;
            if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
                if (null !== newProps && null !== newProps.dehydrated) {
                    if (null === current) {
                        throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
                    workInProgress.flags |= 4;
                    bubbleProperties(workInProgress);
                    oldProps = !1;
                } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), oldProps = !0;
                if (!oldProps) {
                    if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
                    popSuspenseHandler(workInProgress);
                    return null;
                }
            }
            popSuspenseHandler(workInProgress);
            if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
            newProps = null !== newProps;
            current = null !== current && null !== current.memoizedState;
            newProps && (renderLanes = workInProgress.child, oldProps = null, null !== renderLanes.alternate && null !== renderLanes.alternate.memoizedState && null !== renderLanes.alternate.memoizedState.cachePool && (oldProps = renderLanes.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== renderLanes.memoizedState && null !== renderLanes.memoizedState.cachePool && (updatePayload = renderLanes.memoizedState.cachePool.pool), updatePayload !== oldProps && (renderLanes.flags |= 2048));
            newProps !== current && newProps && (workInProgress.child.flags |= 8192);
            scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
            bubbleProperties(workInProgress);
            return null;
        case 4:
            return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
        case 10:
            return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
        case 17:
            return bubbleProperties(workInProgress), null;
        case 19:
            pop(suspenseStackCursor);
            oldProps = workInProgress.memoizedState;
            if (null === oldProps) return bubbleProperties(workInProgress), null;
            newProps = 0 !== (workInProgress.flags & 128);
            updatePayload = oldProps.rendering;
            if (null === updatePayload) if (newProps) cutOffTailIfNeeded(oldProps, !1);
            else {
                if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for(current = workInProgress.child; null !== current;){
                    updatePayload = findFirstSuspended(current);
                    if (null !== updatePayload) {
                        workInProgress.flags |= 128;
                        cutOffTailIfNeeded(oldProps, !1);
                        current = updatePayload.updateQueue;
                        workInProgress.updateQueue = current;
                        scheduleRetryEffect(workInProgress, current);
                        workInProgress.subtreeFlags = 0;
                        current = renderLanes;
                        for(newProps = workInProgress.child; null !== newProps;)resetWorkInProgress(newProps, current), newProps = newProps.sibling;
                        push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                        return workInProgress.child;
                    }
                    current = current.sibling;
                }
                null !== oldProps.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(oldProps, !1), workInProgress.lanes = 4194304);
            }
            else {
                if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
                    if (workInProgress.flags |= 128, newProps = !0, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(oldProps, !0), null === oldProps.tail && "hidden" === oldProps.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
                } else 2 * now() - oldProps.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(oldProps, !1), workInProgress.lanes = 4194304);
                oldProps.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = oldProps.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, oldProps.last = updatePayload);
            }
            if (null !== oldProps.tail) return workInProgress = oldProps.tail, oldProps.rendering = workInProgress, oldProps.tail = workInProgress.sibling, oldProps.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
            bubbleProperties(workInProgress);
            return null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), newProps = workInProgress.updateQueue, null !== newProps && scheduleRetryEffect(workInProgress, newProps.retryQueue), newProps = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (newProps = current.memoizedState.cachePool.pool), renderLanes = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (renderLanes = workInProgress.memoizedState.cachePool.pool), renderLanes !== newProps && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
        case 24:
            return newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
        case 25:
            return null;
        case 29:
            return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
function unwindWork(current, workInProgress) {
    switch(workInProgress.tag){
        case 1:
            return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 3:
            return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 26:
        case 27:
        case 5:
            return popHostContext(workInProgress), null;
        case 13:
            popSuspenseHandler(workInProgress);
            current = workInProgress.memoizedState;
            if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            current = workInProgress.flags;
            return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 19:
            return pop(suspenseStackCursor), null;
        case 4:
            return popHostContainer(), null;
        case 10:
            return popProvider(workInProgress.type), null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 24:
            return popProvider(CacheContext), null;
        case 25:
            return null;
        default:
            return null;
    }
}
function unwindInterruptedWork(current, interruptedWork) {
    switch(interruptedWork.tag){
        case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
        case 26:
        case 27:
        case 5:
            popHostContext(interruptedWork);
            break;
        case 4:
            popHostContainer();
            break;
        case 13:
            popSuspenseHandler(interruptedWork);
            break;
        case 19:
            pop(suspenseStackCursor);
            break;
        case 10:
            popProvider(interruptedWork.type);
            break;
        case 22:
        case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current && pop(resumedCache);
            break;
        case 24:
            popProvider(CacheContext);
    }
}
function commitHookEffectListMount(flags, finishedWork) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    lastEffect = void 0;
                    var create$114 = updateQueue.create, inst = updateQueue.inst;
                    lastEffect = create$114();
                    inst.destroy = lastEffect;
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    var inst = updateQueue.inst, destroy = inst.destroy;
                    if (void 0 !== destroy) {
                        inst.destroy = void 0;
                        lastEffect = finishedWork;
                        var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
                        try {
                            destroy();
                        } catch (error) {
                            captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
                        }
                    }
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        try {
            commitCallbacks(updateQueue, instance);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
}
function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
        instance.componentWillUnmount();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyAttachRef(current, nearestMountedAncestor) {
    try {
        var ref = current.ref;
        if (null !== ref) {
            var instance = current.stateNode;
            switch(current.tag){
                case 26:
                case 27:
                case 5:
                    var instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
        }
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref, refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
        refCleanup();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally{
        current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    }
    else if ("function" === typeof ref) try {
        ref(null);
    } catch (error$116) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    }
    else ref.current = null;
}
function commitHostMount(finishedWork) {
    try {
        throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, shouldFireAfterActiveInstanceBlur = !1;
function commitBeforeMutationEffects(root, firstChild) {
    for(nextEffect = firstChild; null !== nextEffect;)if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;
    else for(; null !== nextEffect;){
        root = nextEffect;
        var current = root.alternate;
        firstChild = root.flags;
        switch(root.tag){
            case 0:
                break;
            case 11:
            case 15:
                break;
            case 1:
                if (0 !== (firstChild & 1024) && null !== current) {
                    firstChild = void 0;
                    var finishedWork = root, prevProps = current.memoizedProps;
                    current = current.memoizedState;
                    var instance = finishedWork.stateNode;
                    try {
                        var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
                        firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
                        instance.__reactInternalSnapshotBeforeUpdate = firstChild;
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                break;
            case 3:
                break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
                break;
            default:
                if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        firstChild = root.sibling;
        if (null !== firstChild) {
            firstChild.return = root.return;
            nextEffect = firstChild;
            break;
        }
        nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = !1;
    return resolvedPrevProps;
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
        case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
                finishedRoot.componentDidMount();
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            else {
                var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
                current = current.memoizedState;
                try {
                    finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
                } catch (error$115) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
                }
            }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                finishedRoot = null;
                if (null !== finishedWork.child) switch(finishedWork.child.tag){
                    case 27:
                    case 5:
                        finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                        break;
                    case 1:
                        finishedRoot = finishedWork.child.stateNode;
                }
                try {
                    commitCallbacks(flags, finishedRoot);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            null === current && flags & 4 && commitHostMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 22:
            if (0 !== (finishedWork.mode & 1)) {
                if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
                    current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = prevProps;
                    (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
            } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
            break;
        default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
}
function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
}
function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for(parent = parent.child; null !== parent;)commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
}
function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch(deletedFiber.tag){
        case 26:
        case 27:
        case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 18:
            break;
        case 4:
            createChildNodeSet();
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 1:
            if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 21:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 22:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (instance = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = instance) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        default:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
}
function getRetryCache(finishedWork) {
    switch(finishedWork.tag){
        case 13:
        case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
        case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
        default:
            throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function(wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
}
function recursivelyTraverseMutationEffects(root, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for(var i = 0; i < deletions.length; i++){
        var childToDelete = deletions[i];
        commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for(parentFiber = parentFiber.child; null !== parentFiber;)commitMutationEffectsOnFiber(parentFiber, root), parentFiber = parentFiber.sibling;
}
function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate, flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
        case 1:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            break;
        case 6:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 3:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 4:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 12:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 13:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && (current = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || current || (globalMostRecentFallbackTime = now()));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 22:
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            var isHidden = null !== finishedWork.memoizedState, wasHidden = null !== current && null !== current.memoizedState;
            if (finishedWork.mode & 1) {
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            } else recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            root = finishedWork.stateNode;
            root._current = finishedWork;
            root._visibility &= -3;
            root._visibility |= root._pendingVisibility & 2;
            flags & 8192 && (root._visibility = isHidden ? root._visibility & -2 : root._visibility | 1, isHidden && (isHidden = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || wasHidden || isHidden || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
            break;
        case 19:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 21:
            break;
        default:
            recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
}
function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    flags & 2 && (finishedWork.flags &= -3);
    flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for(parentFiber = parentFiber.child; null !== parentFiber;)commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedWork = parentFiber;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 1:
                safelyDetachRef(finishedWork, finishedWork.return);
                var instance = finishedWork.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 26:
            case 27:
            case 5:
                safelyDetachRef(finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 22:
                safelyDetachRef(finishedWork, finishedWork.return);
                null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            default:
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                commitHookEffectListMount(4, finishedWork);
                break;
            case 1:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                current = finishedWork;
                finishedRoot = current.stateNode;
                if ("function" === typeof finishedRoot.componentDidMount) try {
                    finishedRoot.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(current, current.return, error);
                }
                current = finishedWork;
                finishedRoot = current.updateQueue;
                if (null !== finishedRoot) {
                    var instance = current.stateNode;
                    try {
                        var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
                        if (null !== hiddenCallbacks) for(finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)callCallback(hiddenCallbacks[finishedRoot], instance);
                    } catch (error) {
                        captureCommitPhaseError(current, current.return, error);
                    }
                }
                includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 26:
            case 27:
            case 5:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 13:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 22:
                null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            default:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
}
function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
        case 3:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
        case 12:
            if (flags & 2048) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                finishedRoot = finishedWork.stateNode;
                try {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                    "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            break;
        case 23:
            break;
        case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
            flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
            break;
        case 24:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
        default:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
}
function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                commitHookEffectListMount(8, finishedWork);
                break;
            case 23:
                break;
            case 22:
                var instance = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
                includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
var suspenseyCommitFlag = 8192;
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for(parentFiber = parentFiber.child; null !== parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function accumulateSuspenseyCommitOnFiber(fiber) {
    switch(fiber.tag){
        case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
            break;
        case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 3:
        case 4:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 22:
            if (null === fiber.memoizedState) {
                var current = fiber.alternate;
                null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
            }
            break;
        default:
            recursivelyAccumulateSuspenseyCommit(fiber);
    }
}
function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
        previousFiber.child = null;
        do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (null !== parentFiber);
    }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function commitPassiveUnmountOnFiber(finishedWork) {
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        deletions = parentFiber;
        switch(deletions.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, deletions, deletions.return);
                recursivelyTraverseDisconnectPassiveEffects(deletions);
                break;
            case 22:
                i = deletions.stateNode;
                i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
                break;
            default:
                recursivelyTraverseDisconnectPassiveEffects(deletions);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for(; null !== nextEffect;){
        var fiber = nextEffect;
        switch(fiber.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
                break;
            case 23:
            case 22:
                if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                    var cache = fiber.memoizedState.cachePool.pool;
                    null != cache && cache.refCount++;
                }
                break;
            case 24:
                releaseCache(fiber.memoizedState.cache);
        }
        cache = fiber.child;
        if (null !== cache) cache.return = fiber, nextEffect = cache;
        else a: for(fiber = deletedSubtreeRoot; null !== nextEffect;){
            cache = nextEffect;
            var sibling = cache.sibling, returnFiber = cache.return;
            detachFiberAfterEffects(cache);
            if (cache === fiber) {
                nextEffect = null;
                break a;
            }
            if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
            }
            nextEffect = returnFiber;
        }
    }
}
var DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
    }
}, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = !1, workInProgressRootIsPrerendering = !1, workInProgressRootDidAttachPingListener = !1, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = !1, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
function requestUpdateLane(fiber) {
    return 0 === (fiber.mode & 1) ? 2 : 0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes ? workInProgressRootRenderLanes & -workInProgressRootRenderLanes : null !== ReactSharedInternals.T ? (fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
}
function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, !0), renderWasConcurrent = shouldTimeSlice;
    do {
        if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, !1);
            break;
        } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);
        else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
                renderWasConcurrent = !1;
                continue;
            }
            if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
                renderWasConcurrent = lanes;
                if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;
                else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
                if (0 !== JSCompiler_inline_result) {
                    lanes = JSCompiler_inline_result;
                    a: {
                        var root = root$jscomp$0;
                        exitStatus = workInProgressRootConcurrentErrors;
                        JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, !1);
                        if (2 !== JSCompiler_inline_result) {
                            if (workInProgressRootDidAttachPingListener) {
                                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                                workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                                exitStatus = 4;
                                break a;
                            }
                            renderWasConcurrent = workInProgressRootRecoverableErrors;
                            workInProgressRootRecoverableErrors = exitStatus;
                            null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
                        }
                        exitStatus = JSCompiler_inline_result;
                    }
                    renderWasConcurrent = !1;
                    if (2 !== exitStatus) continue;
                }
            }
            if (1 === exitStatus) {
                prepareFreshStack(root$jscomp$0, 0);
                markRootSuspended(root$jscomp$0, lanes, 0, !0);
                break;
            }
            a: {
                shouldTimeSlice = root$jscomp$0;
                renderWasConcurrent = exitStatus;
                switch(renderWasConcurrent){
                    case 0:
                    case 1:
                        throw Error("Root did not complete. This is a bug in React.");
                    case 4:
                        if ((lanes & 4194176) === lanes) {
                            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                            break a;
                        }
                        break;
                    case 2:
                        workInProgressRootRecoverableErrors = null;
                        break;
                    case 3:
                    case 5:
                        break;
                    default:
                        throw Error("Unknown root exit status.");
                }
                shouldTimeSlice.finishedWork = forceSync;
                shouldTimeSlice.finishedLanes = lanes;
                if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
                    markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                    if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
                    break a;
                }
                commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
            }
        }
        break;
    }while (1);
    ensureRootIsScheduled(root$jscomp$0);
}
function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
}
function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
        currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally{
        ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
}
function isRenderConsistentWithExternalStores(finishedWork) {
    for(var node = finishedWork;;){
        var tag = node.tag;
        if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for(var i = 0; i < tag.length; i++){
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
                if (!objectIs(getSnapshot(), check)) return !1;
            } catch (error) {
                return !1;
            }
        }
        tag = node.child;
        if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;
        else {
            if (node === finishedWork) break;
            for(; null === node.sibling;){
                if (null === node.return || node.return === finishedWork) return !0;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    return !0;
}
function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for(var lanes = suspendedLanes; 0 < lanes;){
        var index$9 = 31 - clz32(lanes), lane = 1 << index$9;
        didAttemptEntireTree[index$9] = -1;
        lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
}
function resetWorkInProgressStack() {
    if (null !== workInProgress) {
        if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;
        else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
        for(; null !== interruptedWork;)unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
    }
}
function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = !1;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = !1;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for(root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;){
        var index$7 = 31 - clz32(allEntangledLanes), lane = 1 << index$7;
        lanes |= root[index$7];
        allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
}
function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
}
function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = !0);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
}
function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = !1;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
            switch(workInProgressSuspendedReason){
                case 8:
                    resetWorkInProgressStack();
                    exitStatus = 6;
                    break a;
                case 3:
                case 2:
                case 6:
                    null === suspenseHandlerStackCursor.current && (lanes = !0);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                        exitStatus = 0;
                        break a;
                    }
                    break;
                default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
    } catch (thrownValue$129) {
        handleThrow(root, thrownValue$129);
    }
    while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
}
function workLoopSync() {
    for(; null !== workInProgress;)performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            lanes = workInProgress;
            var thrownValue = workInProgressThrownValue;
            b: switch(workInProgressSuspendedReason){
                case 1:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
                    break;
                case 2:
                    if (isThenableResolved(thrownValue)) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                    }
                    lanes = function() {
                        2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
                        ensureRootIsScheduled(root);
                    };
                    thrownValue.then(lanes, lanes);
                    break a;
                case 3:
                    workInProgressSuspendedReason = 7;
                    break a;
                case 4:
                    workInProgressSuspendedReason = 5;
                    break a;
                case 7:
                    isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
                    break;
                case 5:
                    var resource = null;
                    switch(workInProgress.tag){
                        case 26:
                            resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                            var hostFiber = workInProgress;
                            if (resource ? shim(resource) : 1) {
                                workInProgressSuspendedReason = 0;
                                workInProgressThrownValue = null;
                                var sibling = hostFiber.sibling;
                                if (null !== sibling) workInProgress = sibling;
                                else {
                                    var returnFiber = hostFiber.return;
                                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                                }
                                break b;
                            }
                    }
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
                    break;
                case 6:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
                    break;
                case 8:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = 6;
                    break a;
                default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
            }
        }
        workLoopConcurrent();
        break;
    } catch (thrownValue$131) {
        handleThrow(root, thrownValue$131);
    }
    while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
}
function workLoopConcurrent() {
    for(; null !== workInProgress && !shouldYield();)performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch(next.tag){
        case 15:
        case 0:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type, void 0, workInProgressRootRenderLanes);
            break;
        case 11:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
            break;
        case 5:
            resetHooksOnUnwind(next);
        default:
            unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
        if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
            workInProgress = null;
            return;
        }
    } catch (error) {
        if (null !== returnFiber) throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
    }
    if (unitOfWork.flags & 32768) {
        if (1 === suspendedReason) root = !0;
        else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = !1;
        else if (workInProgressRootDidSkipSuspendedSiblings = root = !0, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
        if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
            return;
        }
        unitOfWork = completedWork.return;
        var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
        if (null !== next) {
            workInProgress = next;
            return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
            workInProgress = completedWork;
            return;
        }
        workInProgress = completedWork = unitOfWork;
    }while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
        }
        next = unitOfWork.return;
        null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
        }
        workInProgress = unitOfWork = next;
    }while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
}
function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects();
    while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function() {
        flushPassiveEffects(!0);
        return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for(renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
        componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, !1);
    return null;
}
function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
}
function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
        var root = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
        pendingPassiveEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
            ReactSharedInternals.T = null;
            if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = !1;
            else {
                renderPriority = pendingPassiveTransitions;
                pendingPassiveTransitions = null;
                var root$jscomp$0 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
                rootWithPendingPassiveEffects = null;
                pendingPassiveEffectsLanes = 0;
                if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
                var prevExecutionContext = executionContext;
                executionContext |= 4;
                commitPassiveUnmountOnFiber(root$jscomp$0.current);
                commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
                executionContext = prevExecutionContext;
                flushSyncWorkAcrossRoots_impl(0, !1);
                if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
                    injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
                } catch (err) {}
                JSCompiler_inline_result = !0;
            }
            return JSCompiler_inline_result;
        } finally{
            currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
        }
    }
    return !1;
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    else for(; null !== nearestMountedAncestor;){
        if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
            break;
        } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
            }
        }
        nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = !0, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch(boundaryFiber.tag){
        case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
        case 19:
            retryCache = boundaryFiber.stateNode;
            break;
        case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
        default:
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
}
function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
        lanes: pendingProps.lanes,
        firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
        lanes: renderLanes.lanes,
        firstContext: renderLanes.firstContext
    });
    return workInProgress;
}
function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
    else if ("string" === typeof type) fiberTag = 5;
    else a: switch(type){
        case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            0 !== (mode & 1) && (mode |= 16);
            break;
        case REACT_PROFILER_TYPE:
            return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE:
            return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
            return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
        default:
            if ("object" === typeof type && null !== type) switch(type.$$typeof){
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    break a;
                case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
            }
            fiberTag = 29;
            pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
            owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
        _visibility: 1,
        _pendingVisibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null,
        _current: null,
        detach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 === (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
            }
        },
        attach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
            }
        }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
}
function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
}
function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
    };
    return mode;
}
function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
}
function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
}
function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (void 0 === fiber) {
        if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
}
function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
        element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
}
function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
}
function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
}
function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
}
var _nativeFabricUIManage = nativeFabricUIManager, createNode = _nativeFabricUIManage.createNode, cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren, cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps, cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps, createChildNodeSet = _nativeFabricUIManage.createChildSet, appendChildNode = _nativeFabricUIManage.appendChild, appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet, completeRoot = _nativeFabricUIManage.completeRoot, registerEventHandler = _nativeFabricUIManage.registerEventHandler, FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority, fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority, extraDevToolsConfig = {
    getInspectorDataForInstance: getInspectorDataForInstance,
    getInspectorDataForViewTag: function() {
        throw Error("getInspectorDataForViewTag() is not available in production");
    },
    getInspectorDataForViewAtPoint: function() {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
    }
}, getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get, nextReactTag = 2;
registerEventHandler && registerEventHandler(dispatchEvent);
var PROD_HOST_CONTEXT = {
    isInAParentText: !0
};
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
        node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
            text: text
        }, internalInstanceHandle)
    };
}
function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : null != instance._nativeTag ? instance : null;
}
var currentUpdatePriority = 0;
function resolveUpdatePriority() {
    if (0 !== currentUpdatePriority) return currentUpdatePriority;
    var currentEventPriority = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;
    if (null != currentEventPriority) switch(currentEventPriority){
        case FabricDiscretePriority:
            return 2;
    }
    return 32;
}
var scheduleTimeout = setTimeout, cancelTimeout = clearTimeout;
function cloneHiddenInstance(instance) {
    var node = instance.node;
    var JSCompiler_inline_result = fastAddProperties(null, {
        style: {
            display: "none"
        }
    }, instance.canonical.viewConfig.validAttributes);
    return {
        node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
        canonical: instance.canonical
    };
}
var HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Provider: null,
    Consumer: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
}, supportsMicrotasks = "undefined" !== typeof RN$enableMicrotasksInReact && !!RN$enableMicrotasksInReact, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : scheduleTimeout;
function getInstanceFromNode(node) {
    return null != node.canonical && null != node.canonical.internalInstanceHandle ? node.canonical.internalInstanceHandle : node;
}
getFiberCurrentPropsFromNode$1 = function(instance) {
    return instance.canonical.currentProps;
};
getInstanceFromNode$1 = getInstanceFromNode;
getNodeFromInstance$1 = function(fiber) {
    fiber = getPublicInstance(fiber.stateNode);
    if (null == fiber) throw Error("Could not find host instance from fiber");
    return fiber;
};
ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function(from, to, blockNativeResponder) {
        from && from.stateNode && nativeFabricUIManager.setIsJSResponder(from.stateNode.node, !1, blockNativeResponder || !1);
        to && to.stateNode && nativeFabricUIManager.setIsJSResponder(to.stateNode.node, !0, blockNativeResponder || !1);
    }
});
if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
function nativeOnUncaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: null,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
}
function nativeOnCaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: errorInfo.errorBoundary,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
}
batchedUpdatesImpl = function(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
        return fn(a);
    } finally{
        executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
    }
};
var roots = new Map(), internals$jscomp$inline_1147 = {
    bundleType: 0,
    version: "19.0.0",
    rendererPackageName: "react-native-renderer",
    currentDispatcherRef: ReactSharedInternals,
    findFiberByHostInstance: getInstanceFromNode,
    reconcilerVersion: "19.0.0"
};
null !== extraDevToolsConfig && (internals$jscomp$inline_1147.rendererConfig = extraDevToolsConfig);
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1463 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1463.isDisabled && hook$jscomp$inline_1463.supportsFiber) try {
        rendererID = hook$jscomp$inline_1463.inject(internals$jscomp$inline_1147), injectedHook = hook$jscomp$inline_1463;
    } catch (err) {}
}
exports.createPortal = function(children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.dispatchCommand = function(handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
};
exports.findHostInstance_DEPRECATED = function(componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
};
exports.findNodeHandle = function(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
};
exports.getInspectorDataForInstance = getInspectorDataForInstance;
exports.getNodeFromInternalInstanceHandle = function(internalInstanceHandle) {
    return internalInstanceHandle && internalInstanceHandle.stateNode && internalInstanceHandle.stateNode.node;
};
exports.getPublicInstanceFromInternalInstanceHandle = function(internalInstanceHandle) {
    var instance = internalInstanceHandle.stateNode;
    return null == instance ? null : 6 === internalInstanceHandle.tag ? (null == instance.publicInstance && (instance.publicInstance = ReactNativePrivateInterface.createPublicTextInstance(internalInstanceHandle)), instance.publicInstance) : getPublicInstance(internalInstanceHandle.stateNode);
};
exports.isChildPublicInstance = function() {
    throw Error("isChildPublicInstance() is not available in production.");
};
exports.render = function(element, containerTag, callback, concurrentRoot, options) {
    var root = roots.get(containerTag);
    if (!root) {
        root = nativeOnUncaughtError;
        var onCaughtError = nativeOnCaughtError, onRecoverableError = defaultOnRecoverableError;
        options && void 0 !== options.onUncaughtError && (root = options.onUncaughtError);
        options && void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError);
        options && void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
        concurrentRoot = concurrentRoot ? 1 : 0;
        options = new FiberRootNode(containerTag, concurrentRoot, !1, "", root, onCaughtError, onRecoverableError, null);
        concurrentRoot = createFiberImplClass(3, null, null, 1 === concurrentRoot ? 1 : 0);
        options.current = concurrentRoot;
        concurrentRoot.stateNode = options;
        root = createCache();
        root.refCount++;
        options.pooledCache = root;
        root.refCount++;
        concurrentRoot.memoizedState = {
            element: null,
            isDehydrated: !1,
            cache: root
        };
        initializeUpdateQueue(concurrentRoot);
        root = options;
        roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch(element.child.tag){
        case 27:
        case 5:
            element = getPublicInstance(element.child.stateNode);
            break a;
        default:
            element = element.child.stateNode;
    }
    else element = null;
    return element;
};
exports.sendAccessibilityEvent = function(handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
};
exports.stopSurface = function(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function() {
        roots.delete(containerTag);
    });
};
exports.unmountComponentAtNode = function(containerTag) {
    this.stopSurface(containerTag);
};


}),
43530: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *        
 * @nolint
 * @preventMunge
 * @generated SignedSource<<f7a2299fd4eb6daeaa2b3967a6e4b69c>>
 *
 * This file was sync'd from the facebook/react repository.
 */ 
__webpack_require__(61536);
var ReactNativePrivateInterface = __webpack_require__(43798), React = __webpack_require__(4931), Scheduler = __webpack_require__(43827), isArrayImpl = Array.isArray, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.tracing_marker");
var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
}
var assign = Object.assign, prefix, suffix;
function describeBuiltInComponentFrame(name) {
    if (void 0 === prefix) try {
        throw Error();
    } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || "";
        suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
}
var reentry = !1;
function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = !0;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
                try {
                    if (construct) {
                        var Fake = function() {
                            throw Error();
                        };
                        Object.defineProperty(Fake.prototype, "props", {
                            set: function() {
                                throw Error();
                            }
                        });
                        if ("object" === typeof Reflect && Reflect.construct) {
                            try {
                                Reflect.construct(Fake, []);
                            } catch (x) {
                                var control = x;
                            }
                            Reflect.construct(fn, [], Fake);
                        } else {
                            try {
                                Fake.call();
                            } catch (x$0) {
                                control = x$0;
                            }
                            fn.call(Fake.prototype);
                        }
                    } else {
                        try {
                            throw Error();
                        } catch (x$1) {
                            control = x$1;
                        }
                        (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                    }
                } catch (sample) {
                    if (sample && control && "string" === typeof sample.stack) return [
                        sample.stack,
                        control.stack
                    ];
                }
                return [
                    null,
                    null
                ];
            }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
            value: "DetermineComponentFrameRoot"
        });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for(namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");)RunInRootFrame++;
            for(; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for(RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];)namePropDescriptor--;
            for(; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                    do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                        var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                        fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                        return frame;
                    }
                    while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
            }
        }
    } finally{
        reentry = !1, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
}
function describeFiber(fiber) {
    switch(fiber.tag){
        case 26:
        case 27:
        case 5:
            return describeBuiltInComponentFrame(fiber.type);
        case 16:
            return describeBuiltInComponentFrame("Lazy");
        case 13:
            return describeBuiltInComponentFrame("Suspense");
        case 19:
            return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
            return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
        case 11:
            return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
        case 1:
            return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
        default:
            return "";
    }
}
function getStackByFiberInDevAndProd(workInProgress) {
    try {
        var info = "";
        do info += describeFiber(workInProgress), workInProgress = workInProgress.return;
        while (workInProgress);
        return info;
    } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
}
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch(type){
        case REACT_FRAGMENT_TYPE:
            return "Fragment";
        case REACT_PORTAL_TYPE:
            return "Portal";
        case REACT_PROFILER_TYPE:
            return "Profiler";
        case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
        case REACT_SUSPENSE_TYPE:
            return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
    }
    if ("object" === typeof type) switch(type.$$typeof){
        case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
        case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
        case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
        case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
        case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
                return getComponentNameFromType(type(innerType));
            } catch (x) {}
    }
    return null;
}
var hasError = !1, caughtError = null, getFiberCurrentPropsFromNode$1 = null, getInstanceFromNode = null, getNodeFromInstance = null;
function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance(inst);
    try {
        listener(event);
    } catch (error) {
        hasError || (hasError = !0, caughtError = error);
    }
    event.currentTarget = null;
}
function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners, dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
}
function functionThatReturnsTrue() {
    return !0;
}
function functionThatReturnsFalse() {
    return !1;
}
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for(var propName in dispatchConfig)dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
}
assign(SyntheticEvent.prototype, {
    preventDefault: function() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function() {
        this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function() {
        var Interface = this.constructor.Interface, propName;
        for(propName in Interface)this[propName] = null;
        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
    }
});
SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function() {
        return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};
SyntheticEvent.extend = function(Interface) {
    function E() {}
    function Class() {
        return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
};
addEventPoolingTo(SyntheticEvent);
function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
}
function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
}
function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
}
var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function() {
        return null;
    }
});
function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
}
function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
}
var startDependencies = [
    "topTouchStart"
], moveDependencies = [
    "topTouchMove"
], endDependencies = [
    "topTouchCancel",
    "topTouchEnd"
], touchBank = [], touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};
function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}
function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
}
function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch), touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}
function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
var instrumentationCallback, ResponderTouchHistoryStore = {
    instrument: function(callback) {
        instrumentationCallback = callback;
    },
    recordTouchTrack: function(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);
        else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) {
            if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) {
                for(topLevelType = 0; topLevelType < touchBank.length; topLevelType++)if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = topLevelType;
                    break;
                }
            }
        }
    },
    touchHistory: touchHistory
};
function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
        if (isArrayImpl(next)) return current.push.apply(current, next), current;
        current.push(next);
        return current;
    }
    return isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}
var responderInst = null, trackedTouchCount = 0;
function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
}
var eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        },
        dependencies: startDependencies
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        },
        dependencies: [
            "topScroll"
        ]
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        },
        dependencies: [
            "topSelectionChange"
        ]
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        },
        dependencies: moveDependencies
    },
    responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies
    },
    responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies
    },
    responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies
    },
    responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: []
    },
    responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: []
    },
    responderReject: {
        registrationName: "onResponderReject",
        dependencies: []
    },
    responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: []
    }
};
function getParent$1(inst) {
    do inst = inst.return;
    while (inst && 5 !== inst.tag);
    return inst ? inst : null;
}
function traverseTwoPhase$1(inst, fn, arg) {
    for(var path = []; inst;)path.push(inst), inst = getParent$1(inst);
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener$1(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent$1(targetInst) : null;
        traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
}
function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
}
var ResponderEventPlugin = {
    _getResponder: function() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;
        else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
            var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
            if (responderInst) b: {
                var JSCompiler_temp = responderInst;
                for(var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA))depthA++;
                tempA = 0;
                for(var tempB = targetInst; tempB; tempB = getParent$1(tempB))tempA++;
                for(; 0 < depthA - tempA;)JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
                for(; 0 < tempA - depthA;)targetInst = getParent$1(targetInst), tempA--;
                for(; depthA--;){
                    if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
                    JSCompiler_temp = getParent$1(JSCompiler_temp);
                    targetInst = getParent$1(targetInst);
                }
                JSCompiler_temp = null;
            }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
            shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
            b: {
                JSCompiler_temp = shouldSetEventType._dispatchListeners;
                targetInst = shouldSetEventType._dispatchInstances;
                if (isArrayImpl(JSCompiler_temp)) for(depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++){
                    if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                        JSCompiler_temp = targetInst[depthA];
                        break b;
                    }
                }
                else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
                    JSCompiler_temp = targetInst;
                    break b;
                }
                JSCompiler_temp = null;
            }
            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = !0 === executeDirectDispatch(shouldSetEventType), responderInst) if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [
                    shouldSetEventType,
                    depthA
                ]);
                changeResponder(JSCompiler_temp, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
            else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
            if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) {
                for(JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++)if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
                    depthA = getInstanceFromNode(targetInst);
                    b: {
                        for(targetInst = responderInst; depthA;){
                            if (targetInst === depthA || targetInst === depthA.alternate) {
                                targetInst = !0;
                                break b;
                            }
                            depthA = getParent$1(depthA);
                        }
                        targetInst = !1;
                    }
                    if (targetInst) {
                        topLevelType = !1;
                        break a;
                    }
                }
            }
            topLevelType = !0;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
        injectGlobalResponderHandler: function(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
    }
}, eventPluginOrder = null, namesToPlugins = {};
function recomputePluginOrdering() {
    if (eventPluginOrder) for(var pluginName in namesToPlugins){
        var pluginModule = namesToPlugins[pluginName], pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
        if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;
            for(var eventName in pluginIndex){
                var JSCompiler_inline_result = void 0;
                var dispatchConfig = pluginIndex[eventName];
                if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
                eventNameDispatchConfigs[eventName] = dispatchConfig;
                var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                if (phasedRegistrationNames) {
                    for(JSCompiler_inline_result in phasedRegistrationNames)phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
                    JSCompiler_inline_result = !0;
                } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;
                if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
        }
    }
}
function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
}
var plugins = [], eventNameDispatchConfigs = {}, registrationNameModules = {};
function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes, customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for(var path = []; inst;){
        path.push(inst);
        do inst = inst.return;
        while (inst && 5 !== inst.tag);
        inst = inst ? inst : null;
    }
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);
    else for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, !1);
}
function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
eventPluginOrder = Array.prototype.slice.call([
    "ResponderEventPlugin",
    "ReactNativeBridgeEventPlugin"
]);
recomputePluginOrdering();
var injectedNamesToPlugins$jscomp$inline_288 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType], directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
            topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, !0) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);
            else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);
            else return null;
            return topLevelType;
        }
    }
}, isOrderingDirty$jscomp$inline_289 = !1, pluginName$jscomp$inline_290;
for(pluginName$jscomp$inline_290 in injectedNamesToPlugins$jscomp$inline_288)if (injectedNamesToPlugins$jscomp$inline_288.hasOwnProperty(pluginName$jscomp$inline_290)) {
    var pluginModule$jscomp$inline_291 = injectedNamesToPlugins$jscomp$inline_288[pluginName$jscomp$inline_290];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_290) || namesToPlugins[pluginName$jscomp$inline_290] !== pluginModule$jscomp$inline_291) {
        if (namesToPlugins[pluginName$jscomp$inline_290]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_290 + "`."));
        namesToPlugins[pluginName$jscomp$inline_290] = pluginModule$jscomp$inline_291;
        isOrderingDirty$jscomp$inline_289 = !0;
    }
}
isOrderingDirty$jscomp$inline_289 && recomputePluginOrdering();
var instanceCache = new Map(), instanceProps = new Map();
function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
}
function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
}
var isInsideEventHandler = !1;
function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;
    try {
        return batchedUpdatesImpl(fn, bookkeeping);
    } finally{
        isInsideEventHandler = !1;
    }
}
var eventQueue = null;
function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
        var dispatchListeners = e._dispatchListeners, dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners)) for(var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++)executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
        else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
    }
}
var EMPTY_NATIVE_EVENT = {};
function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT, inst = getInstanceFromTag(rootNodeID), target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates$1(function() {
        var JSCompiler_inline_result = target;
        for(var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++){
            var possiblePlugin = legacyPlugins[i];
            possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, JSCompiler_inline_result)) && (events = accumulateInto(events, possiblePlugin));
        }
        JSCompiler_inline_result = events;
        null !== JSCompiler_inline_result && (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
        JSCompiler_inline_result = eventQueue;
        eventQueue = null;
        if (JSCompiler_inline_result) {
            forEachAccumulated(JSCompiler_inline_result, executeDispatchesAndReleaseTopLevel);
            if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            if (hasError) throw JSCompiler_inline_result = caughtError, hasError = !1, caughtError = null, JSCompiler_inline_result;
        }
    });
}
ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function(eventTopLevelType, touches, changedIndices) {
        if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
            var JSCompiler_temp = [];
            for(var i = 0; i < changedIndices.length; i++){
                var index$4 = changedIndices[i];
                JSCompiler_temp.push(touches[index$4]);
                touches[index$4] = null;
            }
            for(i = changedIndices = 0; i < touches.length; i++)index$4 = touches[i], null !== index$4 && (touches[changedIndices++] = index$4);
            touches.length = changedIndices;
        } else for(JSCompiler_temp = [], i = 0; i < changedIndices.length; i++)JSCompiler_temp.push(touches[changedIndices[i]]);
        for(changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++){
            i = JSCompiler_temp[changedIndices];
            i.changedTouches = JSCompiler_temp;
            i.touches = touches;
            index$4 = null;
            var target = i.target;
            null === target || void 0 === target || 1 > target || (index$4 = target);
            _receiveRootNodeIDEvent(index$4, eventTopLevelType, i);
        }
    }
});
getFiberCurrentPropsFromNode$1 = function(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
};
getInstanceFromNode = getInstanceFromTag;
getNodeFromInstance = function(inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    void 0 === tag && null != inst.canonical && (tag = inst.canonical.nativeTag, inst = inst.canonical.publicInstance);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
};
ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function(from, to, blockNativeResponder) {
        null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
});
function getNearestMountedFiber(fiber) {
    var node = fiber, nearestMounted = fiber;
    if (fiber.alternate) for(; node.return;)node = node.return;
    else {
        fiber = node;
        do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
        while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
}
function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
}
function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
    }
    for(var a = fiber, b = alternate;;){
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
                a = b;
                continue;
            }
            break;
        }
        if (parentA.child === parentB.child) {
            for(parentB = parentA.child; parentB;){
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;
        else {
            for(var didFindChild = !1, child$5 = parentA.child; child$5;){
                if (child$5 === a) {
                    didFindChild = !0;
                    a = parentA;
                    b = parentB;
                    break;
                }
                if (child$5 === b) {
                    didFindChild = !0;
                    b = parentA;
                    a = parentB;
                    break;
                }
                child$5 = child$5.sibling;
            }
            if (!didFindChild) {
                for(child$5 = parentB.child; child$5;){
                    if (child$5 === a) {
                        didFindChild = !0;
                        a = parentB;
                        b = parentA;
                        break;
                    }
                    if (child$5 === b) {
                        didFindChild = !0;
                        b = parentB;
                        a = parentA;
                        break;
                    }
                    child$5 = child$5.sibling;
                }
                if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
        }
        if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for(node = node.child; null !== node;){
        tag = findCurrentHostFiberImpl(node);
        if (null !== tag) return tag;
        node = node.sibling;
    }
    return null;
}
var emptyObject = {}, removedKeys = null, removedKeyCount = 0, deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
};
function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
}
function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for(var i = node.length; i-- && 0 < removedKeyCount;)restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    else if (node && 0 < removedKeyCount) {
        for(i in removedKeys)if (removedKeys[i]) {
            var nextProp = node[i];
            if (void 0 !== nextProp) {
                var attributeConfig = validAttributes[i];
                if (attributeConfig) {
                    "function" === typeof nextProp && (nextProp = !0);
                    "undefined" === typeof nextProp && (nextProp = null);
                    if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;
                    else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
                    removedKeys[i] = !1;
                    removedKeyCount--;
                }
            }
        }
    }
}
function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length, i;
        for(i = 0; i < minLength; i++)updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
        for(; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        for(; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
}
function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for(var i = 0; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
}
function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for(var i = 0; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
}
function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for(propKey in nextProps)if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;
        else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
        else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
        else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
            if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for(var propKey$7 in prevProps)void 0 === nextProps[propKey$7] && (!(attributeConfig = validAttributes[propKey$7]) || updatePayload && void 0 !== updatePayload[propKey$7] || (prevProp = prevProps[propKey$7], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$7] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$7] || (removedKeys[propKey$7] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
}
function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function() {
        if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
}
var ReactNativeFiberHostComponent = function() {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        this.viewConfig = this._internalFiberInstanceHandleDEV = void 0;
        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
    }
    var _proto = ReactNativeFiberHostComponent.prototype;
    _proto.blur = function() {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this);
    };
    _proto.focus = function() {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this);
    };
    _proto.measure = function(callback) {
        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureInWindow = function(callback) {
        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureLayout = function(relativeToNativeNode, onSuccess, onFail) {
        if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;
        else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
        null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };
    _proto.setNativeProps = function(nativeProps) {
        nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
        null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };
    return ReactNativeFiberHostComponent;
}(), scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
        injectedHook.onCommitFiberRoot(rendererID, root, void 0, 128 === (root.current.flags & 128));
    } catch (err) {}
}
function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
}
var nextTransitionLane = 128, nextRetryLane = 4194304;
function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch(lanes & -lanes){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
            return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return lanes & 4194176;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return lanes & 62914560;
        case 67108864:
            return 67108864;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 0;
        default:
            return lanes;
    }
}
function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
}
function computeExpirationTime(lane, currentTime) {
    switch(lane){
        case 1:
        case 2:
        case 4:
        case 8:
            return currentTime + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
}
function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
}
function createLaneMap(initial) {
    for(var laneMap = [], i = 0; 31 > i; i++)laneMap.push(initial);
    return laneMap;
}
function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
}
function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements, expirationTimes = root.expirationTimes, hiddenUpdates = root.hiddenUpdates;
    for(remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;){
        var index$12 = 31 - clz32(remainingLanes), lane = 1 << index$12;
        entanglements[index$12] = 0;
        expirationTimes[index$12] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index$12];
        if (null !== hiddenUpdatesForLane) for(hiddenUpdates[index$12] = null, index$12 = 0; index$12 < hiddenUpdatesForLane.length; index$12++){
            var update = hiddenUpdatesForLane[index$12];
            null !== update && (update.lane &= -536870913);
        }
        remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
}
function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for(root = root.entanglements; rootEntangledLanes;){
        var index$13 = 31 - clz32(rootEntangledLanes), lane = 1 << index$13;
        lane & entangledLanes | root[index$13] & entangledLanes && (root[index$13] |= entangledLanes);
        rootEntangledLanes &= ~lane;
    }
}
function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
}
function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
}
function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
}
function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
}
var extraDevToolsConfig = {
    getInspectorDataForInstance: getInspectorDataForInstance,
    getInspectorDataForViewTag: function() {
        throw Error("getInspectorDataForViewTag() is not available in production");
    },
    getInspectorDataForViewAtPoint: function() {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
    }
}, getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get, nextReactTag = 3;
function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
}
function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);
    else {
        var tag = node._nativeTag;
        instanceCache.delete(tag);
        instanceProps.delete(tag);
        node._children.forEach(recursivelyUncacheFiberNode);
    }
}
function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return !1;
    var nativeTags = parentInstance._children.map(function(child) {
        return "number" === typeof child ? child : child._nativeTag;
    });
    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return !1;
}
function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : instance;
}
var scheduleTimeout = setTimeout, cancelTimeout = clearTimeout, currentUpdatePriority = 0, HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Provider: null,
    Consumer: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
}, valueStack = [], index = -1;
function createCursor(defaultValue) {
    return {
        current: defaultValue
    };
}
function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
}
function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
}
var emptyContextObject = {};
function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
}
var objectIs = "function" === typeof Object.is ? Object.is : is, CapturedStacks = new WeakMap();
function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
    }
    return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
    };
}
var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    pop(contextStackCursor);
    push(contextStackCursor, {
        isInAParentText: !1
    });
}
function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
        isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
}
function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = null);
}
var hydrationErrors = null, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
function finishQueueingConcurrentUpdates() {
    for(var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;){
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for(var isHidden = !1, parent = sourceFiber.return; null !== parent;)parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [
        update
    ] : sourceFiber.push(update), update.lane = lane | 536870912);
}
function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for(var parent = sourceFiber.return; null !== parent;)sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
}
var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = !1, mightHavePendingSyncWork = !1, isFlushingWork = !1, currentEventTransitionLane = 0;
function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = !0;
    didScheduleMicrotask || (didScheduleMicrotask = !0, scheduleCallback$3(ImmediatePriority, processRootScheduleInMicrotask));
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = !0;
        do {
            var didPerformSomeWork = !1;
            for(var root = firstScheduledRoot; null !== root;){
                if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
                    var pendingLanes = root.pendingLanes;
                    if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                    else {
                        var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
                        JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                        JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                        JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                    }
                    0 !== JSCompiler_inline_result && (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                root = root.next;
            }
        }while (didPerformSomeWork);
        isFlushingWork = !1;
    }
}
function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = !1;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for(var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;){
        var next = root.next, nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
        0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = !0));
        root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, !1);
}
function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for(var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;){
        var index$10 = 31 - clz32(lanes), lane = 1 << index$10, expirationTime = expirationTimes[index$10];
        if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$10] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
        lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime === root.callbackPriority) return currentTime;
        null !== pingedLanes && cancelCallback$1(pingedLanes);
        switch(lanesToEventPriority(suspendedLanes)){
            case 2:
            case 8:
                suspendedLanes = UserBlockingPriority;
                break;
            case 32:
                suspendedLanes = NormalPriority$1;
                break;
            case 268435456:
                suspendedLanes = IdlePriority;
                break;
            default:
                suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
        suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root.callbackPriority = currentTime;
        root.callbackNode = suspendedLanes;
        return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
}
function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
}
function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, !0);
}
function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
}
var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
                entangledListeners.push(resolve);
            }
        };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
}
function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
        null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])();
    }
}
function chainThenableValue(thenable, result) {
    var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
            listeners.push(resolve);
        }
    };
    thenable.then(function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(result);
    }, function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for(error = 0; error < listeners.length; error++)(0, listeners[error])(void 0);
    });
    return thenableWithOverride;
}
var hasForceUpdate = !1;
function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            lanes: 0,
            hiddenCallbacks: null
        },
        callbacks: null
    };
}
function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
        baseState: current.baseState,
        firstBaseUpdate: current.firstBaseUpdate,
        lastBaseUpdate: current.lastBaseUpdate,
        shared: current.shared,
        callbacks: null
    });
}
function createUpdate(lane) {
    return {
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        update = getRootForUpdatedFiber(fiber);
        markUpdateLaneFromFiberToRoot(fiber, null, lane);
        return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
    }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue, current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
            do {
                var clone = {
                    lane: queue.lane,
                    tag: queue.tag,
                    payload: queue.payload,
                    callback: null,
                    next: null
                };
                null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                queue = queue.next;
            }while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else newFirst = newLast = capturedUpdate;
        queue = {
            baseState: current.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current.shared,
            callbacks: current.callbacks
        };
        workInProgress.updateQueue = queue;
        return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
}
var didReadFromEntangledAsyncAction = !1;
function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
    }
}
function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = !1;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                null !== current && (current = current.next = {
                    lane: 0,
                    tag: pendingQueue.tag,
                    payload: pendingQueue.payload,
                    callback: null,
                    next: null
                });
                a: {
                    var workInProgress = workInProgress$jscomp$0, update = pendingQueue;
                    updateLane = props;
                    var instance = instance$jscomp$0;
                    switch(update.tag){
                        case 1:
                            workInProgress = update.payload;
                            if ("function" === typeof workInProgress) {
                                newState = workInProgress.call(instance, newState, updateLane);
                                break a;
                            }
                            newState = workInProgress;
                            break a;
                        case 3:
                            workInProgress.flags = workInProgress.flags & -65537 | 128;
                        case 0:
                            workInProgress = update.payload;
                            updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                            if (null === updateLane || void 0 === updateLane) break a;
                            newState = assign({}, newState, updateLane);
                            break a;
                        case 2:
                            hasForceUpdate = !0;
                    }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [
                    updateLane
                ] : isHiddenUpdate.push(updateLane));
            } else isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
            }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;
            else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        }while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
    }
}
function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
}
function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for(updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)callCallback(callbacks[updateQueue], context);
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA), keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;
    for(keysB = 0; keysB < keysA.length; keysB++){
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return !1;
    }
    return !0;
}
var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), noopSuspenseyCommitThenable = {
    then: function() {}
};
function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
}
function noop() {}
function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch(thenable.status){
        case "fulfilled":
            return thenable.value;
        case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        default:
            if ("string" === typeof thenable.status) thenable.then(noop, noop);
            else {
                thenableState = workInProgressRoot;
                if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
                thenableState = thenable;
                thenableState.status = "pending";
                thenableState.then(function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                        var fulfilledThenable = thenable;
                        fulfilledThenable.status = "fulfilled";
                        fulfilledThenable.value = fulfilledValue;
                    }
                }, function(error) {
                    if ("pending" === thenable.status) {
                        var rejectedThenable = thenable;
                        rejectedThenable.status = "rejected";
                        rejectedThenable.reason = error;
                    }
                });
            }
            switch(thenable.status){
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
    }
}
var suspendedThenable = null;
function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
}
function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
}
var thenableState$1 = null, thenableIndexCounter$1 = 0;
function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
}
function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = void 0 !== element ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
}
function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [
                childToDelete
            ], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for(; null !== currentFirstChild;)deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
    }
    function mapRemainingChildren(currentFirstChild) {
        for(var existingChildren = new Map(); null !== currentFirstChild;)null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
        newFiber.flags |= 33554434;
        return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
        return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
        if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
        current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
        coerceRef(current, element);
        current.return = returnFiber;
        return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
    }
    function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                    return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_PORTAL_TYPE:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
                case REACT_PORTAL_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; newIdx < newChildren.length; newIdx++)oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (null == newChildren) throw Error("An iterable object provided no iterator.");
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; !step.done; newIdx++, step = newChildren.next())step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    a: {
                        for(var key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) {
                                key = newChild.type;
                                if (key === REACT_FRAGMENT_TYPE) {
                                    if (7 === currentFirstChild.tag) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, newChild.props.children);
                                        lanes.return = returnFiber;
                                        returnFiber = lanes;
                                        break a;
                                    }
                                } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                    lanes = useFiber(currentFirstChild, newChild.props);
                                    coerceRef(lanes, newChild);
                                    lanes.return = returnFiber;
                                    returnFiber = lanes;
                                    break a;
                                }
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            } else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                    }
                    return placeSingleChild(returnFiber);
                case REACT_PORTAL_TYPE:
                    a: {
                        for(key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                lanes = useFiber(currentFirstChild, newChild.children || []);
                                lanes.return = returnFiber;
                                returnFiber = lanes;
                                break a;
                            } else {
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            }
                            else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                    }
                    return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) {
                key = getIteratorFn(newChild);
                if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                newChild = key.call(newChild);
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function(returnFiber, currentFirstChild, newChild, lanes) {
        try {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            thenableState$1 = null;
            return firstChildFiber;
        } catch (x) {
            if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
            var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
        } finally{}
    };
}
var reconcileChildFibers = createChildReconciler(!0), mountChildFibers = createChildReconciler(!1), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
}
var suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
        if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current = fiber.alternate;
            null !== current && null !== current.memoizedState && (shellBoundary = fiber);
        }
    } else reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
}
var suspenseStackCursor = createCursor(0);
function findFirstSuspended(row) {
    for(var node = row; null !== node;){
        if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
        } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
        }
        if (node === row) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === row) return null;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
    return null;
}
var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, shouldDoubleInvokeUserFnsInHooksDEV = !1, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0;
function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
}
function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;
    for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++)if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    return !0;
}
function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
}
function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = !0));
}
function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
        thenableIndexCounter = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        numberOfReRenders += 1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress.updateQueue) {
            var children = workInProgress.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
        }
        ReactSharedInternals.H = HooksDispatcherOnRerender;
        children = Component(props, secondArg);
    }while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
}
function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
}
function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
        for(workInProgress = workInProgress.memoizedState; null !== workInProgress;){
            var queue = workInProgress.queue;
            null !== queue && (queue.pending = null);
            workInProgress = workInProgress.next;
        }
        didScheduleRenderPhaseUpdate = !1;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = !1;
    thenableIndexCounter = 0;
    thenableState = null;
}
function mountWorkInProgressHook() {
    var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
}
function updateWorkInProgressHook() {
    if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
    else {
        if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
            throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
}
var createFunctionComponentUpdateQueue;
createFunctionComponentUpdateQueue = function() {
    return {
        lastEffect: null,
        events: null,
        stores: null,
        memoCache: null
    };
};
function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
}
function use(usable) {
    if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
}
function useMemoCache(size) {
    var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
        var current = currentlyRenderingFiber$1.alternate;
        null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
            data: current.data.map(function(array) {
                return array.slice();
            }),
            index: 0
        })));
    }
    null == memoCache && (memoCache = {
        data: [],
        index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (void 0 === updateQueue) for(updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
}
function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
}
function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
    if (null !== pendingQueue) {
        if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;
    else {
        current = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$47 = !1;
        do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = !0);
                else if ((renderLanes & revertLane) === revertLane) {
                    update = update.next;
                    revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = !0);
                    continue;
                } else updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
        }while (null !== update && update !== current);
        null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = !0, didReadFromEntangledAsyncAction$47 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [
        hook.memoizedState,
        queue.dispatch
    ];
}
function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(), queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
    }
    return [
        newState,
        dispatch
    ];
}
function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = !0);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe
    ]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [
        fiber
    ]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [
        fiber
    ] : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
}
function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
    } catch (error) {
        return !0;
    }
}
function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
}
function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                initialStateInitializer();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
    };
    return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
}
function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
        var actionNode = {
            payload: payload,
            action: fiber,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
                actionNode.listeners.push(listener);
            }
        };
        null !== ReactSharedInternals.T ? setPendingState(!0) : actionNode.isTransition = !1;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
}
function runActionStateAction(actionQueue, node) {
    var action = node.action, payload = node.payload, prevState = actionQueue.state;
    if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
            onActionError(actionQueue, node, error);
        } finally{
            ReactSharedInternals.T = prevTransition;
        }
    } else try {
        prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$51) {
        onActionError(actionQueue, node, error$51);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
    }, function(error) {
        return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
        last = last.next;
        do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
    }
    actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for(var i = 0; i < actionNode.length; i++)(0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
    return newState;
}
function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(!1);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !1, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
        state: initialStateProp,
        dispatch: null,
        action: action,
        pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [
        initialStateProp,
        stateHook,
        !1
    ];
}
function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
        destroy: void 0
    }, null));
    return [
        currentStateHook,
        dispatch,
        stateHook
    ];
}
function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
}
function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [
        stateHook,
        dispatch,
        !1
    ];
}
function pushEffect(tag, create, inst, deps) {
    tag = {
        tag: tag,
        create: create,
        inst: inst,
        deps: deps,
        next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
}
function updateRef() {
    return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
        destroy: void 0
    }, void 0 === deps ? null : deps);
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
}
function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
}
function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
}
function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
    }
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function() {
        ref.current = null;
    };
}
function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([
        ref
    ]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {}
function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [
        callback,
        deps
    ];
    return callback;
}
function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
            nextCreate();
        } finally{
            setIsStrictModeForDevtools(!1);
        }
    }
    hook.memoizedState = [
        prevState,
        deps
    ];
    return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = !0), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = !0, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, !1, queue, pendingState);
    try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
            dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
        } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
        dispatchSetStateInternal(fiber, queue, {
            then: function() {},
            status: "rejected",
            reason: error
        }, requestUpdateLane(fiber));
    } finally{
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
}
function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
}
function updateId() {
    return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
    for(var provider = fiber.return; null !== provider;){
        switch(provider.tag){
            case 24:
            case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root = enqueueUpdate(provider, fiber, lane);
                null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
                provider = {
                    cache: createCache()
                };
                fiber.payload = provider;
                return;
        }
        provider = provider.return;
    }
}
function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
    else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), !1;
        } catch (error) {} finally{}
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), !0;
    }
    return !1;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
}
function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
}
function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
    }
}
var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
};
ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
ContextOnlyDispatcher.useFormState = throwInvalidHookError;
ContextOnlyDispatcher.useActionState = throwInvalidHookError;
ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
        ];
        return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function(create, deps) {
        return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
        mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            nextValue,
            deps
        ];
        return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    init(initialArg);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [
            hook.memoizedState,
            reducer
        ];
    },
    useRef: function(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
            current: initialValue
        };
        return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [
            initialState.memoizedState,
            dispatch
        ];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
        var stateHook = mountStateImpl(!1);
        stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, !0, !1);
        mountWorkInProgressHook().memoizedState = stateHook;
        return [
            !1,
            stateHook
        ];
    },
    useSyncExternalStore: function(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        return nextSnapshot;
    },
    useId: function() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix, globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
};
HooksDispatcherOnMount.useMemoCache = useMemoCache;
HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnMount.useFormState = mountActionState;
HooksDispatcherOnMount.useActionState = mountActionState;
HooksDispatcherOnMount.useOptimistic = function(passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !0, queue);
    queue.dispatch = hook;
    return [
        passthrough,
        hook
    ];
};
var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
        return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnUpdate.useFormState = updateActionState;
HooksDispatcherOnUpdate.useActionState = updateActionState;
HooksDispatcherOnUpdate.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
};
var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
        return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
HooksDispatcherOnRerender.useMemoCache = useMemoCache;
HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnRerender.useFormState = rerenderActionState;
HooksDispatcherOnRerender.useActionState = rerenderActionState;
HooksDispatcherOnRerender.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [
        passthrough,
        hook.queue.dispatch
    ];
};
function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
var classComponentUpdater = {
    isMounted: function(component) {
        return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 1;
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 2;
        void 0 !== callback && null !== callback && (update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
};
function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
}
function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject, contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
}
function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
}
function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
        newProps = {};
        for(var propName in baseProps)"ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for(var propName$53 in Component)void 0 === newProps[propName$53] && (newProps[propName$53] = Component[propName$53]);
    }
    return newProps;
}
var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error: error
        });
        if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
    }
    console.error(error);
};
function defaultOnRecoverableError(error) {
    reportGlobalError(error);
}
function logUncaughtError(root, errorInfo) {
    try {
        var onUncaughtError = root.onUncaughtError;
        onUncaughtError(errorInfo.value, {
            componentStack: errorInfo.stack
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function logCaughtError(root, boundary, errorInfo) {
    try {
        var onCaughtError = root.onCaughtError;
        onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
        element: null
    };
    lane.callback = function() {
        logUncaughtError(root, errorInfo);
    };
    return lane;
}
function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
}
function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function() {
            return getDerivedStateFromError(error);
        };
        update.callback = function() {
            logCaughtError(root, fiber, errorInfo);
        };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
        logCaughtError(root, fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([
            this
        ]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
        });
    });
}
function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
        var currentSourceFiber = sourceFiber.alternate;
        null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, !0);
        currentSourceFiber = sourceFiber.tag;
        0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
        currentSourceFiber = suspenseHandlerStackCursor.current;
        if (null !== currentSourceFiber) {
            switch(currentSourceFiber.tag){
                case 13:
                    return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([
                        value
                    ]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), !1;
                case 22:
                    if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                        transitions: null,
                        markerInstances: null,
                        retryQueue: new Set([
                            value
                        ])
                    }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([
                        value
                    ]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), !1;
            }
            throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
        }
        if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), !1;
        value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
        cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [
        currentSourceFiber
    ] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return !0;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
        switch(returnFiber.tag){
            case 3:
                return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), !1;
            case 1:
                if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), !1;
        }
        returnFiber = returnFiber.return;
    }while (null !== returnFiber);
    return !1;
}
var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = !1;
function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
}
function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for(var key in nextProps)"ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
        current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
}
function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
        else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}
function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2), prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
        if (0 !== (workInProgress.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
            if (null !== current) {
                nextChildren = workInProgress.child = current.child;
                for(nextIsDetached = 0; null !== nextChildren;)nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress.childLanes = nextIsDetached & ~nextProps;
            } else workInProgress.childLanes = 0, workInProgress.child = null;
            return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
        }
        if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
}
function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
        parent: CacheContext._currentValue,
        pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, !0);
    return null;
}
function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);
    else {
        if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
        if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
}
function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, void 0, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
}
function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = !0;
    else if (null === current) {
        var instance = workInProgress.stateNode, unresolvedOldProps = workInProgress.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
        instance.props = oldProps;
        var oldContext = instance.context, contextType = Component.contextType, nextContext = emptyContextObject;
        "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
        contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = !1);
    } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        nextContext = workInProgress.memoizedProps;
        contextType = resolveClassComponentProps(Component, nextContext);
        instance.props = contextType;
        getDerivedStateFromProps = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        oldProps = emptyContextObject;
        "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress.memoizedState;
        nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = !1);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, !1, renderLanes);
}
function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
}
var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function mountSuspenseOffscreenState(renderLanes) {
    return {
        baseLanes: renderLanes,
        cachePool: getSuspendedCache()
    };
}
function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, showFallback = !1, didSuspend = 0 !== (workInProgress.flags & 128), JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = !0, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
        var nextPrimaryChildren = nextProps.children;
        nextProps = nextProps.fallback;
        if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
            mode: "hidden",
            children: nextPrimaryChildren
        }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress);
        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
        if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
            mode: "visible",
            children: nextProps.children
        }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);
        else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
            value: nextProps,
            source: null,
            stack: null
        }, null === hydrationErrors ? hydrationErrors = [
            JSCompiler_temp
        ] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, !1), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp) {
                nextProps = renderLanes & -renderLanes;
                if (0 !== (nextProps & 42)) nextProps = 1;
                else switch(nextProps){
                    case 2:
                        nextProps = 1;
                        break;
                    case 8:
                        nextProps = 4;
                        break;
                    case 32:
                        nextProps = 16;
                        break;
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                    case 4194304:
                    case 8388608:
                    case 16777216:
                    case 33554432:
                        nextProps = 64;
                        break;
                    case 268435456:
                        nextProps = 134217728;
                        break;
                    default:
                        nextProps = 0;
                }
                nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
                if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
            }
            shim$1() || renderDidSuspendDelayIfPossible();
            workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
        return workInProgress;
    }
    if (showFallback) {
        reuseSuspenseHandlerOnStack(workInProgress);
        nextPrimaryChildren = nextProps.fallback;
        showFallback = workInProgress.mode;
        didSuspend = current.child;
        var currentFallbackChildFragment = didSuspend.sibling, primaryChildProps = {
            mode: "hidden",
            children: nextProps.children
        };
        0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
        null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
        nextPrimaryChildren.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = nextPrimaryChildren;
        workInProgress.child = nextProps;
        nextProps = nextPrimaryChildren;
        nextPrimaryChildren = workInProgress.child;
        showFallback = current.child.memoizedState;
        null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
            parent: currentFallbackChildFragment,
            pool: currentFallbackChildFragment
        } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
            baseLanes: showFallback.baseLanes | renderLanes,
            cachePool: didSuspend
        });
        nextPrimaryChildren.memoizedState = showFallback;
        nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
        mode: "visible",
        children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [
        current
    ], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
        mode: "visible",
        children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
}
function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}
function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
}
function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;
    else {
        if (null !== current && 0 !== (current.flags & 128)) a: for(current = workInProgress.child; null !== current;){
            if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
            }
            if (current === workInProgress) break a;
            for(; null === current.sibling;){
                if (null === current.return || current.return === workInProgress) break a;
                current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
        }
        nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
    else switch(revealOrder){
        case "forwards":
            renderLanes = workInProgress.child;
            for(revealOrder = null; null !== renderLanes;)current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
            renderLanes = revealOrder;
            null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
            initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
            break;
        case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;
            for(workInProgress.child = null; null !== revealOrder;){
                current = revealOrder.alternate;
                if (null !== current && null === findFirstSuspended(current)) {
                    workInProgress.child = revealOrder;
                    break;
                }
                current = revealOrder.sibling;
                revealOrder.sibling = renderLanes;
                renderLanes = revealOrder;
                revealOrder = current;
            }
            initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
            break;
        case "together":
            initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
            break;
        default:
            workInProgress.memoizedState = null;
    }
    return workInProgress.child;
}
function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
        if (propagateParentContextChanges(current, workInProgress, renderLanes, !1), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for(renderLanes.return = workInProgress; null !== current.sibling;)current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
        renderLanes.sibling = null;
    }
    return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return !0;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? !0 : !1;
}
function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch(workInProgress.tag){
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
            break;
        case 27:
        case 5:
            pushHostContext(workInProgress);
            break;
        case 4:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        case 10:
            pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
            break;
        case 13:
            var state = workInProgress.memoizedState;
            if (null !== state) {
                if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
                if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                pushPrimaryTreeSuspenseHandler(workInProgress);
                current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                return null !== current ? current.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress);
            break;
        case 19:
            var didSuspendBefore = 0 !== (current.flags & 128);
            state = 0 !== (renderLanes & workInProgress.childLanes);
            state || (propagateParentContextChanges(current, workInProgress, renderLanes, !1), state = 0 !== (renderLanes & workInProgress.childLanes));
            if (didSuspendBefore) {
                if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                workInProgress.flags |= 128;
            }
            didSuspendBefore = workInProgress.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
        case 22:
        case 23:
            return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}
function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = !0;
    else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
    }
    else didReceiveUpdate = !1;
    workInProgress.lanes = 0;
    switch(workInProgress.tag){
        case 16:
            var elementType = workInProgress.elementType;
            a: {
                resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
                current = workInProgress.pendingProps;
                var init = elementType._init;
                elementType = init(elementType._payload);
                workInProgress.type = elementType;
                if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));
                else {
                    if (void 0 !== elementType && null !== elementType) {
                        if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                            workInProgress.tag = 11;
                            workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        } else if (init === REACT_MEMO_TYPE) {
                            workInProgress.tag = 14;
                            workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        }
                    }
                    workInProgress = getComponentNameFromType(elementType) || elementType;
                    throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
                }
            }
            return workInProgress;
        case 0:
            return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 1:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
            var nextProps = workInProgress.pendingProps;
            init = workInProgress.memoizedState;
            elementType = init.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            nextProps = workInProgress.memoizedState;
            var nextCache = nextProps.cache;
            pushProvider(workInProgress, CacheContext, nextCache);
            nextCache !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0);
            suspendIfUpdateReadFromEntangledAsyncAction();
            init = nextProps.element;
            init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
            return workInProgress;
        case 26:
        case 27:
        case 5:
            return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 6:
            return null;
        case 13:
            return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 11:
            return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 7:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
        case 8:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 12:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 10:
            return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
        case 9:
            return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 14:
            return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 15:
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 17:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, !0, !1, renderLanes);
        case 28:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
        case 19:
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
        case 22:
            return updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
                parent: elementType,
                cache: init
            }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
                parent: elementType,
                cache: elementType
            }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 29:
            throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
var valueCursor = createCursor(null), currentlyRenderingFiber = null, lastContextDependency = null;
function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue);
    context._currentValue = nextValue;
}
function popProvider(context) {
    context._currentValue = valueCursor.current;
    pop(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for(; null !== parent;){
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
    }
}
function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for(; null !== fiber;){
        var list = fiber.dependencies;
        if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for(; null !== list;){
                var dependency = list;
                list = fiber;
                for(var i = 0; i < contexts.length; i++)if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                }
                list = dependency.next;
            }
        } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            nextFiber.lanes |= renderLanes;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
            nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else for(nextFiber = fiber; null !== nextFiber;){
            if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
            }
            nextFiber = nextFiber.return;
        }
        fiber = nextFiber;
    }
}
function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for(var parent = workInProgress, isInsidePropagationBailout = !1; null !== parent;){
        if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
            else if (0 !== (parent.flags & 262144)) break;
        }
        if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [
                    context
                ]);
            }
        } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [
                HostTransitionContext
            ]);
        }
        parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
    for(currentDependencies = currentDependencies.firstContext; null !== currentDependencies;){
        if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue)) return !0;
        currentDependencies = currentDependencies.next;
    }
    return !1;
}
function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
}
function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
}
function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
    var value = context._currentValue;
    context = {
        context: context,
        memoizedValue: value,
        next: null
    };
    if (null === lastContextDependency) {
        if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = context;
        consumer.dependencies = {
            lanes: 0,
            firstContext: context
        };
        consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
}
var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
    var listeners = [], signal = this.signal = {
        aborted: !1,
        addEventListener: function(type, listener) {
            listeners.push(listener);
        }
    };
    this.abort = function() {
        signal.aborted = !0;
        listeners.forEach(function(listener) {
            return listener();
        });
    };
}, scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
};
function createCache() {
    return {
        controller: new AbortControllerLocal(),
        data: new Map(),
        refCount: 0
    };
}
function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function() {
        cache.controller.abort();
    });
}
var prevOnStartTransitionFinish = ReactSharedInternals.S;
ReactSharedInternals.S = function(transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
};
var resumedCache = createCursor(null);
function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
        parent: CacheContext._currentValue,
        pool: cacheFromPool
    };
}
function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch(renderState.tailMode){
        case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for(var lastTailNode = null; null !== hasRenderedATailFallback;)null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
        case "collapsed":
            lastTailNode = renderState.tail;
            for(var lastTailNode$92 = null; null !== lastTailNode;)null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
            null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
}
function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
    if (didBailout) for(var child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;
    else for(child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
}
function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch(workInProgress.tag){
        case 28:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return bubbleProperties(workInProgress), null;
        case 1:
            return bubbleProperties(workInProgress), null;
        case 3:
            return renderLanes = workInProgress.stateNode, newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), bubbleProperties(workInProgress), null;
        case 26:
        case 27:
        case 5:
            popHostContext(workInProgress);
            var type = workInProgress.type;
            if (null !== current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);
            else {
                if (!newProps) {
                    if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    bubbleProperties(workInProgress);
                    return null;
                }
                renderLanes = rootInstanceStackCursor.current;
                current = allocateTag();
                type = getViewConfigForType(type);
                var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
                ReactNativePrivateInterface.UIManager.createView(current, type.uiViewClassName, renderLanes, updatePayload);
                renderLanes = new ReactNativeFiberHostComponent(current, type, workInProgress);
                instanceCache.set(current, workInProgress);
                instanceProps.set(current, newProps);
                a: for(current = workInProgress.child; null !== current;){
                    if (5 === current.tag || 6 === current.tag) renderLanes._children.push(current.stateNode);
                    else if (4 !== current.tag && null !== current.child) {
                        current.child.return = current;
                        current = current.child;
                        continue;
                    }
                    if (current === workInProgress) break a;
                    for(; null === current.sibling;){
                        if (null === current.return || current.return === workInProgress) break a;
                        current = current.return;
                    }
                    current.sibling.return = current.return;
                    current = current.sibling;
                }
                workInProgress.stateNode = renderLanes;
                finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
            }
            bubbleProperties(workInProgress);
            workInProgress.flags &= -16777217;
            return null;
        case 6:
            if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);
            else {
                if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                current = rootInstanceStackCursor.current;
                if (!contextStackCursor.current.isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
                renderLanes = allocateTag();
                ReactNativePrivateInterface.UIManager.createView(renderLanes, "RCTRawText", current, {
                    text: newProps
                });
                instanceCache.set(renderLanes, workInProgress);
                workInProgress.stateNode = renderLanes;
            }
            bubbleProperties(workInProgress);
            return null;
        case 13:
            newProps = workInProgress.memoizedState;
            if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
                if (null !== newProps && null !== newProps.dehydrated) {
                    if (null === current) {
                        throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
                    workInProgress.flags |= 4;
                    bubbleProperties(workInProgress);
                    type = !1;
                } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = !0;
                if (!type) {
                    if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
                    popSuspenseHandler(workInProgress);
                    return null;
                }
            }
            popSuspenseHandler(workInProgress);
            if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
            renderLanes = null !== newProps;
            current = null !== current && null !== current.memoizedState;
            renderLanes && (newProps = workInProgress.child, type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (updatePayload = newProps.memoizedState.cachePool.pool), updatePayload !== type && (newProps.flags |= 2048));
            renderLanes !== current && renderLanes && (workInProgress.child.flags |= 8192);
            scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
            bubbleProperties(workInProgress);
            return null;
        case 4:
            return popHostContainer(), bubbleProperties(workInProgress), null;
        case 10:
            return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
        case 17:
            return bubbleProperties(workInProgress), null;
        case 19:
            pop(suspenseStackCursor);
            type = workInProgress.memoizedState;
            if (null === type) return bubbleProperties(workInProgress), null;
            newProps = 0 !== (workInProgress.flags & 128);
            updatePayload = type.rendering;
            if (null === updatePayload) if (newProps) cutOffTailIfNeeded(type, !1);
            else {
                if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for(current = workInProgress.child; null !== current;){
                    updatePayload = findFirstSuspended(current);
                    if (null !== updatePayload) {
                        workInProgress.flags |= 128;
                        cutOffTailIfNeeded(type, !1);
                        current = updatePayload.updateQueue;
                        workInProgress.updateQueue = current;
                        scheduleRetryEffect(workInProgress, current);
                        workInProgress.subtreeFlags = 0;
                        current = renderLanes;
                        for(renderLanes = workInProgress.child; null !== renderLanes;)resetWorkInProgress(renderLanes, current), renderLanes = renderLanes.sibling;
                        push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                        return workInProgress.child;
                    }
                    current = current.sibling;
                }
                null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(type, !1), workInProgress.lanes = 4194304);
            }
            else {
                if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
                    if (workInProgress.flags |= 128, newProps = !0, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(type, !0), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
                } else 2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(type, !1), workInProgress.lanes = 4194304);
                type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
            }
            if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
            bubbleProperties(workInProgress);
            return null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), renderLanes = workInProgress.updateQueue, null !== renderLanes && scheduleRetryEffect(workInProgress, renderLanes.retryQueue), renderLanes = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (newProps = workInProgress.memoizedState.cachePool.pool), newProps !== renderLanes && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
        case 24:
            return renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
        case 25:
            return null;
        case 29:
            return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
function unwindWork(current, workInProgress) {
    switch(workInProgress.tag){
        case 1:
            return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 3:
            return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 26:
        case 27:
        case 5:
            return popHostContext(workInProgress), null;
        case 13:
            popSuspenseHandler(workInProgress);
            current = workInProgress.memoizedState;
            if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            current = workInProgress.flags;
            return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 19:
            return pop(suspenseStackCursor), null;
        case 4:
            return popHostContainer(), null;
        case 10:
            return popProvider(workInProgress.type), null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 24:
            return popProvider(CacheContext), null;
        case 25:
            return null;
        default:
            return null;
    }
}
function unwindInterruptedWork(current, interruptedWork) {
    switch(interruptedWork.tag){
        case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
        case 26:
        case 27:
        case 5:
            popHostContext(interruptedWork);
            break;
        case 4:
            popHostContainer();
            break;
        case 13:
            popSuspenseHandler(interruptedWork);
            break;
        case 19:
            pop(suspenseStackCursor);
            break;
        case 10:
            popProvider(interruptedWork.type);
            break;
        case 22:
        case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current && pop(resumedCache);
            break;
        case 24:
            popProvider(CacheContext);
    }
}
function commitHookEffectListMount(flags, finishedWork) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    lastEffect = void 0;
                    var create$114 = updateQueue.create, inst = updateQueue.inst;
                    lastEffect = create$114();
                    inst.destroy = lastEffect;
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    var inst = updateQueue.inst, destroy = inst.destroy;
                    if (void 0 !== destroy) {
                        inst.destroy = void 0;
                        lastEffect = finishedWork;
                        var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
                        try {
                            destroy();
                        } catch (error) {
                            captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
                        }
                    }
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        try {
            commitCallbacks(updateQueue, instance);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
}
function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
        instance.componentWillUnmount();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyAttachRef(current, nearestMountedAncestor) {
    try {
        var ref = current.ref;
        if (null !== ref) {
            var instance = current.stateNode;
            switch(current.tag){
                case 26:
                case 27:
                case 5:
                    var instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
        }
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref, refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
        refCleanup();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally{
        current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    }
    else if ("function" === typeof ref) try {
        ref(null);
    } catch (error$116) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    }
    else ref.current = null;
}
function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
}
function getHostSibling(fiber) {
    a: for(;;){
        for(; null === fiber.sibling;){
            if (null === fiber.return || isHostParent(fiber.return)) return null;
            fiber = fiber.return;
        }
        fiber.sibling.return = fiber.return;
        for(fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;){
            if (fiber.flags & 2) continue a;
            if (null === fiber.child || 4 === fiber.tag) continue a;
            else fiber.child.return = fiber, fiber = fiber.child;
        }
        if (!(fiber.flags & 2)) return fiber.stateNode;
    }
}
function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) if (node = node.stateNode, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
    } else ReactNativePrivateInterface.UIManager.setChildren(parent, [
        "number" === typeof node ? node : node._nativeTag
    ]);
    else if (4 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
}
function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) if (node = node.stateNode, before) {
        tag = parent._children;
        var index = tag.indexOf(node);
        0 <= index ? (tag.splice(index, 1), before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [
            index
        ], [
            before
        ], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [
            "number" === typeof node ? node : node._nativeTag
        ], [
            before
        ], []));
    } else before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, index = tag.indexOf(node), 0 <= index ? (tag.splice(index, 1), tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [
        index
    ], [
        tag.length - 1
    ], [], [], [])) : (tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [
        before
    ], [
        tag.length - 1
    ], []));
    else if (4 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
}
var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, shouldFireAfterActiveInstanceBlur = !1;
function commitBeforeMutationEffects(root, firstChild) {
    for(nextEffect = firstChild; null !== nextEffect;)if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;
    else for(; null !== nextEffect;){
        root = nextEffect;
        var current = root.alternate;
        firstChild = root.flags;
        switch(root.tag){
            case 0:
                break;
            case 11:
            case 15:
                break;
            case 1:
                if (0 !== (firstChild & 1024) && null !== current) {
                    firstChild = void 0;
                    var finishedWork = root, prevProps = current.memoizedProps;
                    current = current.memoizedState;
                    var instance = finishedWork.stateNode;
                    try {
                        var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
                        firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
                        instance.__reactInternalSnapshotBeforeUpdate = firstChild;
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                break;
            case 3:
                break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
                break;
            default:
                if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        firstChild = root.sibling;
        if (null !== firstChild) {
            firstChild.return = root.return;
            nextEffect = firstChild;
            break;
        }
        nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = !1;
    return resolvedPrevProps;
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
        case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
                finishedRoot.componentDidMount();
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            else {
                var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
                current = current.memoizedState;
                try {
                    finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
                } catch (error$115) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
                }
            }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                finishedRoot = null;
                if (null !== finishedWork.child) switch(finishedWork.child.tag){
                    case 27:
                    case 5:
                        finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                        break;
                    case 1:
                        finishedRoot = finishedWork.child.stateNode;
                }
                try {
                    commitCallbacks(flags, finishedRoot);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 22:
            if (0 !== (finishedWork.mode & 1)) {
                if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
                    current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = prevProps;
                    (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
            } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
            break;
        default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
}
function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
}
var hostParent = null, hostParentIsContainer = !1;
function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for(parent = parent.child; null !== parent;)commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
}
function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch(deletedFiber.tag){
        case 26:
        case 27:
        case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (null !== hostParent) if (hostParentIsContainer) try {
                finishedRoot = hostParent, recursivelyUncacheFiberNode(deletedFiber.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot, [], [], [], [], [
                    0
                ]);
            } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
            }
            else try {
                finishedRoot = hostParent;
                var child = deletedFiber.stateNode;
                recursivelyUncacheFiberNode(child);
                var children = finishedRoot._children, index = children.indexOf(child);
                children.splice(index, 1);
                ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [
                    index
                ]);
            } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
            }
            break;
        case 18:
            null !== hostParent && shim$1();
            break;
        case 4:
            child = hostParent;
            children = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = !0;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = child;
            hostParentIsContainer = children;
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 1:
            offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), child = deletedFiber.stateNode, "function" === typeof child.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, child));
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 21:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 22:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (child = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = child) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        default:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
}
function getRetryCache(finishedWork) {
    switch(finishedWork.tag){
        case 13:
        case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
        case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
        default:
            throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function(wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
}
function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for(var i = 0; i < deletions.length; i++){
        var childToDelete = deletions[i], root = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
        a: for(; null !== parent;){
            switch(parent.tag){
                case 27:
                case 5:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = !1;
                    break a;
                case 3:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = !0;
                    break a;
                case 4:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = !0;
                    break a;
            }
            parent = parent.return;
        }
        if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
        hostParent = null;
        hostParentIsContainer = !1;
        root = childToDelete.alternate;
        null !== root && (root.return = null);
        childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for(parentFiber = parentFiber.child; null !== parentFiber;)commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
}
function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate, flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
        case 1:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags))) {
                var existingHiddenCallbacks = finishedWork.shared.hiddenCallbacks;
                finishedWork.shared.hiddenCallbacks = null === existingHiddenCallbacks ? flags : existingHiddenCallbacks.concat(flags);
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (flags & 4 && null != finishedWork.stateNode) {
                flags = finishedWork.memoizedProps;
                existingHiddenCallbacks = null !== current ? current.memoizedProps : flags;
                try {
                    var instance = finishedWork.stateNode, viewConfig = instance.viewConfig;
                    instanceProps.set(instance._nativeTag, flags);
                    var updatePayload = diffProperties(null, existingHiddenCallbacks, flags, viewConfig.validAttributes);
                    null != updatePayload && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 6:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
                if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                flags = finishedWork.memoizedProps;
                existingHiddenCallbacks = finishedWork.stateNode;
                try {
                    ReactNativePrivateInterface.UIManager.updateView(existingHiddenCallbacks, "RCTRawText", {
                        text: flags
                    });
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 3:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 4:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 12:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 13:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && (existingHiddenCallbacks = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || existingHiddenCallbacks || (globalMostRecentFallbackTime = now()));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 22:
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            instance = null !== finishedWork.memoizedState;
            viewConfig = null !== current && null !== current.memoizedState;
            if (finishedWork.mode & 1) {
                updatePayload = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = updatePayload || instance;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || viewConfig;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = updatePayload;
            } else recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            root = finishedWork.stateNode;
            root._current = finishedWork;
            root._visibility &= -3;
            root._visibility |= root._pendingVisibility & 2;
            if (flags & 8192 && (root._visibility = instance ? root._visibility & -2 : root._visibility | 1, instance && (root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || viewConfig || root || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)), null === finishedWork.memoizedProps || "manual" !== finishedWork.memoizedProps.mode)) a: for(current = null, root = finishedWork;;){
                if (5 === root.tag) {
                    if (null === current) {
                        viewConfig = current = root;
                        try {
                            if (existingHiddenCallbacks = viewConfig.stateNode, instance) {
                                updatePayload = existingHiddenCallbacks;
                                var viewConfig$jscomp$0 = updatePayload.viewConfig;
                                var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                                    style: {
                                        display: "none"
                                    }
                                }, viewConfig$jscomp$0.validAttributes);
                                ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig$jscomp$0.uiViewClassName, updatePayload$jscomp$0);
                            } else {
                                var instance$jscomp$0 = viewConfig.stateNode, props = viewConfig.memoizedProps, viewConfig$jscomp$1 = instance$jscomp$0.viewConfig, prevProps = assign({}, props, {
                                    style: [
                                        props.style,
                                        {
                                            display: "none"
                                        }
                                    ]
                                });
                                var updatePayload$jscomp$1 = diffProperties(null, prevProps, props, viewConfig$jscomp$1.validAttributes);
                                ReactNativePrivateInterface.UIManager.updateView(instance$jscomp$0._nativeTag, viewConfig$jscomp$1.uiViewClassName, updatePayload$jscomp$1);
                            }
                        } catch (error) {
                            captureCommitPhaseError(viewConfig, viewConfig.return, error);
                        }
                    }
                } else if (6 === root.tag) {
                    if (null === current) {
                        viewConfig = root;
                        try {
                            throw Error("Not yet implemented.");
                        } catch (error) {
                            captureCommitPhaseError(viewConfig, viewConfig.return, error);
                        }
                    }
                } else if ((22 !== root.tag && 23 !== root.tag || null === root.memoizedState || root === finishedWork) && null !== root.child) {
                    root.child.return = root;
                    root = root.child;
                    continue;
                }
                if (root === finishedWork) break a;
                for(; null === root.sibling;){
                    if (null === root.return || root.return === finishedWork) break a;
                    current === root && (current = null);
                    root = root.return;
                }
                current === root && (current = null);
                root.sibling.return = root.return;
                root = root.sibling;
            }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (existingHiddenCallbacks = flags.retryQueue, null !== existingHiddenCallbacks && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, existingHiddenCallbacks))));
            break;
        case 19:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 21:
            break;
        default:
            recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
}
function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
        try {
            a: {
                for(var parent = finishedWork.return; null !== parent;){
                    if (isHostParent(parent)) {
                        var JSCompiler_inline_result = parent;
                        break a;
                    }
                    parent = parent.return;
                }
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            switch(JSCompiler_inline_result.tag){
                case 27:
                case 5:
                    var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
                    JSCompiler_inline_result.flags & 32 && (JSCompiler_inline_result.flags &= -33);
                    var before = getHostSibling(finishedWork);
                    insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
                    break;
                case 3:
                case 4:
                    var parent$117 = JSCompiler_inline_result.stateNode.containerInfo, before$118 = getHostSibling(finishedWork);
                    insertOrAppendPlacementNodeIntoContainer(finishedWork, before$118, parent$117);
                    break;
                default:
                    throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for(parentFiber = parentFiber.child; null !== parentFiber;)commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedWork = parentFiber;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 1:
                safelyDetachRef(finishedWork, finishedWork.return);
                var instance = finishedWork.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 26:
            case 27:
            case 5:
                safelyDetachRef(finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 22:
                safelyDetachRef(finishedWork, finishedWork.return);
                null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            default:
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                commitHookEffectListMount(4, finishedWork);
                break;
            case 1:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                finishedRoot = finishedWork;
                var instance = finishedRoot.stateNode;
                if ("function" === typeof instance.componentDidMount) try {
                    instance.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
                }
                finishedRoot = finishedWork;
                instance = finishedRoot.updateQueue;
                if (null !== instance) {
                    var instance$jscomp$0 = finishedRoot.stateNode;
                    try {
                        var hiddenCallbacks = instance.shared.hiddenCallbacks;
                        if (null !== hiddenCallbacks) for(instance.shared.hiddenCallbacks = null, instance = 0; instance < hiddenCallbacks.length; instance++)callCallback(hiddenCallbacks[instance], instance$jscomp$0);
                    } catch (error) {
                        captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
                    }
                }
                includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 26:
            case 27:
            case 5:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 13:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 22:
                null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            default:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
}
function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
        case 3:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
        case 12:
            if (flags & 2048) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                finishedRoot = finishedWork.stateNode;
                try {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                    "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            break;
        case 23:
            break;
        case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
            flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
            break;
        case 24:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
        default:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
}
function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                commitHookEffectListMount(8, finishedWork);
                break;
            case 23:
                break;
            case 22:
                var instance = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
                includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
var suspenseyCommitFlag = 8192;
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for(parentFiber = parentFiber.child; null !== parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function accumulateSuspenseyCommitOnFiber(fiber) {
    switch(fiber.tag){
        case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
            break;
        case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 3:
        case 4:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 22:
            if (null === fiber.memoizedState) {
                var current = fiber.alternate;
                null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
            }
            break;
        default:
            recursivelyAccumulateSuspenseyCommit(fiber);
    }
}
function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
        previousFiber.child = null;
        do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (null !== parentFiber);
    }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function commitPassiveUnmountOnFiber(finishedWork) {
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        deletions = parentFiber;
        switch(deletions.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, deletions, deletions.return);
                recursivelyTraverseDisconnectPassiveEffects(deletions);
                break;
            case 22:
                i = deletions.stateNode;
                i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
                break;
            default:
                recursivelyTraverseDisconnectPassiveEffects(deletions);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for(; null !== nextEffect;){
        var fiber = nextEffect;
        switch(fiber.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
                break;
            case 23:
            case 22:
                if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                    var cache = fiber.memoizedState.cachePool.pool;
                    null != cache && cache.refCount++;
                }
                break;
            case 24:
                releaseCache(fiber.memoizedState.cache);
        }
        cache = fiber.child;
        if (null !== cache) cache.return = fiber, nextEffect = cache;
        else a: for(fiber = deletedSubtreeRoot; null !== nextEffect;){
            cache = nextEffect;
            var sibling = cache.sibling, returnFiber = cache.return;
            detachFiberAfterEffects(cache);
            if (cache === fiber) {
                nextEffect = null;
                break a;
            }
            if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
            }
            nextEffect = returnFiber;
        }
    }
}
var DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
    }
}, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = !1, workInProgressRootIsPrerendering = !1, workInProgressRootDidAttachPingListener = !1, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = !1, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 2;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactSharedInternals.T) return fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane();
    fiber = 0 !== currentUpdatePriority ? currentUpdatePriority : 32;
    return fiber;
}
function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, !0), renderWasConcurrent = shouldTimeSlice;
    do {
        if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, !1);
            break;
        } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);
        else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
                renderWasConcurrent = !1;
                continue;
            }
            if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
                renderWasConcurrent = lanes;
                if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;
                else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
                if (0 !== JSCompiler_inline_result) {
                    lanes = JSCompiler_inline_result;
                    a: {
                        var root = root$jscomp$0;
                        exitStatus = workInProgressRootConcurrentErrors;
                        JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, !1);
                        if (2 !== JSCompiler_inline_result) {
                            if (workInProgressRootDidAttachPingListener) {
                                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                                workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                                exitStatus = 4;
                                break a;
                            }
                            renderWasConcurrent = workInProgressRootRecoverableErrors;
                            workInProgressRootRecoverableErrors = exitStatus;
                            null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
                        }
                        exitStatus = JSCompiler_inline_result;
                    }
                    renderWasConcurrent = !1;
                    if (2 !== exitStatus) continue;
                }
            }
            if (1 === exitStatus) {
                prepareFreshStack(root$jscomp$0, 0);
                markRootSuspended(root$jscomp$0, lanes, 0, !0);
                break;
            }
            a: {
                shouldTimeSlice = root$jscomp$0;
                renderWasConcurrent = exitStatus;
                switch(renderWasConcurrent){
                    case 0:
                    case 1:
                        throw Error("Root did not complete. This is a bug in React.");
                    case 4:
                        if ((lanes & 4194176) === lanes) {
                            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                            break a;
                        }
                        break;
                    case 2:
                        workInProgressRootRecoverableErrors = null;
                        break;
                    case 3:
                    case 5:
                        break;
                    default:
                        throw Error("Unknown root exit status.");
                }
                shouldTimeSlice.finishedWork = forceSync;
                shouldTimeSlice.finishedLanes = lanes;
                if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
                    markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                    if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
                    break a;
                }
                commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
            }
        }
        break;
    }while (1);
    ensureRootIsScheduled(root$jscomp$0);
}
function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
}
function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
        currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally{
        ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
}
function isRenderConsistentWithExternalStores(finishedWork) {
    for(var node = finishedWork;;){
        var tag = node.tag;
        if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for(var i = 0; i < tag.length; i++){
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
                if (!objectIs(getSnapshot(), check)) return !1;
            } catch (error) {
                return !1;
            }
        }
        tag = node.child;
        if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;
        else {
            if (node === finishedWork) break;
            for(; null === node.sibling;){
                if (null === node.return || node.return === finishedWork) return !0;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    return !0;
}
function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for(var lanes = suspendedLanes; 0 < lanes;){
        var index$11 = 31 - clz32(lanes), lane = 1 << index$11;
        didAttemptEntireTree[index$11] = -1;
        lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
}
function resetWorkInProgressStack() {
    if (null !== workInProgress) {
        if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;
        else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
        for(; null !== interruptedWork;)unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
    }
}
function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = !1;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = !1;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for(root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;){
        var index$9 = 31 - clz32(allEntangledLanes), lane = 1 << index$9;
        lanes |= root[index$9];
        allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
}
function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
}
function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = !0);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
}
function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = !1;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
            switch(workInProgressSuspendedReason){
                case 8:
                    resetWorkInProgressStack();
                    exitStatus = 6;
                    break a;
                case 3:
                case 2:
                case 6:
                    null === suspenseHandlerStackCursor.current && (lanes = !0);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                        exitStatus = 0;
                        break a;
                    }
                    break;
                default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
    } catch (thrownValue$133) {
        handleThrow(root, thrownValue$133);
    }
    while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
}
function workLoopSync() {
    for(; null !== workInProgress;)performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            lanes = workInProgress;
            var thrownValue = workInProgressThrownValue;
            b: switch(workInProgressSuspendedReason){
                case 1:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
                    break;
                case 2:
                    if (isThenableResolved(thrownValue)) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                    }
                    lanes = function() {
                        2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
                        ensureRootIsScheduled(root);
                    };
                    thrownValue.then(lanes, lanes);
                    break a;
                case 3:
                    workInProgressSuspendedReason = 7;
                    break a;
                case 4:
                    workInProgressSuspendedReason = 5;
                    break a;
                case 7:
                    isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
                    break;
                case 5:
                    var resource = null;
                    switch(workInProgress.tag){
                        case 26:
                            resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                            var hostFiber = workInProgress;
                            if (resource ? shim(resource) : 1) {
                                workInProgressSuspendedReason = 0;
                                workInProgressThrownValue = null;
                                var sibling = hostFiber.sibling;
                                if (null !== sibling) workInProgress = sibling;
                                else {
                                    var returnFiber = hostFiber.return;
                                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                                }
                                break b;
                            }
                    }
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
                    break;
                case 6:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
                    break;
                case 8:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = 6;
                    break a;
                default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
            }
        }
        workLoopConcurrent();
        break;
    } catch (thrownValue$135) {
        handleThrow(root, thrownValue$135);
    }
    while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
}
function workLoopConcurrent() {
    for(; null !== workInProgress && !shouldYield();)performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch(next.tag){
        case 15:
        case 0:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type, void 0, workInProgressRootRenderLanes);
            break;
        case 11:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
            break;
        case 5:
            resetHooksOnUnwind(next);
        default:
            unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
        if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
            workInProgress = null;
            return;
        }
    } catch (error) {
        if (null !== returnFiber) throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
    }
    if (unitOfWork.flags & 32768) {
        if (1 === suspendedReason) root = !0;
        else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = !1;
        else if (workInProgressRootDidSkipSuspendedSiblings = root = !0, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
        if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
            return;
        }
        unitOfWork = completedWork.return;
        var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
        if (null !== next) {
            workInProgress = next;
            return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
            workInProgress = completedWork;
            return;
        }
        workInProgress = completedWork = unitOfWork;
    }while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
        }
        next = unitOfWork.return;
        null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
        }
        workInProgress = unitOfWork = next;
    }while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
}
function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects();
    while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function() {
        flushPassiveEffects(!0);
        return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for(renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
        componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, !1);
    return null;
}
function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
}
function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
        var root = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
        pendingPassiveEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
            ReactSharedInternals.T = null;
            if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = !1;
            else {
                renderPriority = pendingPassiveTransitions;
                pendingPassiveTransitions = null;
                var root$jscomp$0 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
                rootWithPendingPassiveEffects = null;
                pendingPassiveEffectsLanes = 0;
                if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
                var prevExecutionContext = executionContext;
                executionContext |= 4;
                commitPassiveUnmountOnFiber(root$jscomp$0.current);
                commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
                executionContext = prevExecutionContext;
                flushSyncWorkAcrossRoots_impl(0, !1);
                if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
                    injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
                } catch (err) {}
                JSCompiler_inline_result = !0;
            }
            return JSCompiler_inline_result;
        } finally{
            currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
        }
    }
    return !1;
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    else for(; null !== nearestMountedAncestor;){
        if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
            break;
        } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
            }
        }
        nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = !0, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch(boundaryFiber.tag){
        case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
        case 19:
            retryCache = boundaryFiber.stateNode;
            break;
        case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
        default:
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
}
function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
        lanes: pendingProps.lanes,
        firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
        lanes: renderLanes.lanes,
        firstContext: renderLanes.firstContext
    });
    return workInProgress;
}
function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
    else if ("string" === typeof type) fiberTag = 5;
    else a: switch(type){
        case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            0 !== (mode & 1) && (mode |= 16);
            break;
        case REACT_PROFILER_TYPE:
            return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE:
            return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
            return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
        default:
            if ("object" === typeof type && null !== type) switch(type.$$typeof){
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    break a;
                case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
            }
            fiberTag = 29;
            pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
            owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
        _visibility: 1,
        _pendingVisibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null,
        _current: null,
        detach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 === (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
            }
        },
        attach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
            }
        }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
}
function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
}
function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
    };
    return mode;
}
function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
}
function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
}
function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (void 0 === fiber) {
        if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
}
function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
        element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
}
var isomorphicReactPackageVersion = React.version;
if ("19.0.0" !== isomorphicReactPackageVersion) throw Error('Incompatible React versions: The "react" and "react-native-renderer" packages must have the exact same version. Instead got:\n  - react:                  ' + (isomorphicReactPackageVersion + "\n  - react-native-renderer:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch"));
if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
function nativeOnUncaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: null,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
}
function nativeOnCaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: errorInfo.errorBoundary,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
}
function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function() {
        roots.delete(containerTag);
    });
}
batchedUpdatesImpl = function(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
        return fn(a);
    } finally{
        executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
    }
};
var roots = new Map(), internals$jscomp$inline_1213 = {
    bundleType: 0,
    version: "19.0.0",
    rendererPackageName: "react-native-renderer",
    currentDispatcherRef: ReactSharedInternals,
    findFiberByHostInstance: getInstanceFromTag,
    reconcilerVersion: "19.0.0"
};
null !== extraDevToolsConfig && (internals$jscomp$inline_1213.rendererConfig = extraDevToolsConfig);
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1551 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1551.isDisabled && hook$jscomp$inline_1551.supportsFiber) try {
        rendererID = hook$jscomp$inline_1551.inject(internals$jscomp$inline_1213), injectedHook = hook$jscomp$inline_1551;
    } catch (err) {}
}
exports.createPortal = function(children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.dispatchCommand = function(handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
};
exports.findHostInstance_DEPRECATED = function(componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
};
exports.findNodeHandle = function(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
};
exports.getInspectorDataForInstance = getInspectorDataForInstance;
exports.isChildPublicInstance = function() {
    throw Error("isChildPublicInstance() is not available in production.");
};
exports.render = function(element, containerTag, callback, options) {
    var root = roots.get(containerTag);
    if (!root) {
        root = nativeOnUncaughtError;
        var onCaughtError = nativeOnCaughtError, onRecoverableError = defaultOnRecoverableError;
        options && void 0 !== options.onUncaughtError && (root = options.onUncaughtError);
        options && void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError);
        options && void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
        options = new FiberRootNode(containerTag, 0, !1, "", root, onCaughtError, onRecoverableError, null);
        root = createFiberImplClass(3, null, null, 0);
        options.current = root;
        root.stateNode = options;
        onCaughtError = createCache();
        onCaughtError.refCount++;
        options.pooledCache = onCaughtError;
        onCaughtError.refCount++;
        root.memoizedState = {
            element: null,
            isDehydrated: !1,
            cache: onCaughtError
        };
        initializeUpdateQueue(root);
        root = options;
        roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch(element.child.tag){
        case 27:
        case 5:
            element = getPublicInstance(element.child.stateNode);
            break a;
        default:
            element = element.child.stateNode;
    }
    else element = null;
    return element;
};
exports.sendAccessibilityEvent = function(handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
};
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unmountComponentAtNodeAndRemoveContainer = function(containerTag) {
    unmountComponentAtNode(containerTag);
    ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
};
exports.unstable_batchedUpdates = batchedUpdates$1;


}),
12262: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *      
 * @generated SignedSource<<cf323fc5ca893bab5669c7d321660412>>
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _ReactNativePrivateInterface = __webpack_require__(43798);
var ReactFabric;
if (false) {} else {
    ReactFabric = __webpack_require__(97257);
}
__webpack_require__.g.RN$stopSurface = ReactFabric.stopSurface;
if (__webpack_require__.g.RN$Bridgeless !== true) {
    _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
}
var _default = ReactFabric;


}),
1105: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *      
 * @generated SignedSource<<8f46fdc9267fcc4fdc9e76842fe24066>>
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ReactNative;
if (false) {} else {
    ReactNative = __webpack_require__(43530);
}
var _default = ReactNative;


}),
25232: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<83073425aa3f71ced2c8c51f25a25938>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customBubblingEventTypes: function() {
        return customBubblingEventTypes;
    },
    customDirectEventTypes: function() {
        return customDirectEventTypes;
    },
    get: function() {
        return get;
    },
    register: function() {
        return register;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    if (false) { var topLevelType }
    if (bubblingEventTypes != null) {
        for(var topLevelType1 in bubblingEventTypes){
            if (customBubblingEventTypes[topLevelType1] == null) {
                customBubblingEventTypes[topLevelType1] = bubblingEventTypes[topLevelType1];
            }
        }
    }
    if (directEventTypes != null) {
        for(var topLevelType2 in directEventTypes){
            if (customDirectEventTypes[topLevelType2] == null) {
                customDirectEventTypes[topLevelType2] = directEventTypes[topLevelType2];
            }
        }
    }
}
function register(name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
}
function get(name) {
    var viewConfig = viewConfigs.get(name);
    if (viewConfig == null) {
        var callback = viewConfigCallbacks.get(name);
        if (typeof callback !== 'function') {
            (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, // $FlowFixMe[recursive-definition]
            typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
        }
        viewConfig = callback();
        (0, _invariant.default)(viewConfig, 'View config not found for component `%s`', name);
        processEventTypes(viewConfig);
        viewConfigs.set(name, viewConfig);
        // Clear the callback after the config is set so that
        // we don't mask any errors during registration.
        viewConfigCallbacks.set(name, null);
    }
    return viewConfig;
}


}),
94914: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<52163887de05f1cff05388145cf85b3b>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _ReactNativePrivateInterface = __webpack_require__(43798);
var register = _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;
/**
 * Creates a renderable ReactNative host component.
 * Use this method for view configs that are loaded from UIManager.
 * Use createReactNativeComponentClass() for view configs defined within JavaScript.
 *
 * @param {string} config iOS View configuration.
 * @private
 */ var createReactNativeComponentClass = function(name, callback) {
    return register(name, callback);
};
var _default = createReactNativeComponentClass;


}),
10140: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Settings = {
    get (key) {
        console.warn('Settings is not yet supported on this platform.');
        return null;
    },
    set (settings) {
        console.warn('Settings is not yet supported on this platform.');
    },
    watchKeys (keys, callback) {
        console.warn('Settings is not yet supported on this platform.');
        return -1;
    },
    clearWatch (watchId) {
        console.warn('Settings is not yet supported on this platform.');
    }
};
var _default = Settings;


}),
43705: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _NativeActionSheetManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(781));
var _NativeShareModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(37591));
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
var Share = /*#__PURE__*/ function() {
    "use strict";
    function Share() {
        _class_call_check._(this, Share);
    }
    _create_class._(Share, null, [
        {
            key: "share",
            value: /**
   * Open a dialog to share text content.
   *
   * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.
   * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`
   * and all the other keys being undefined.
   *
   * In Android, Returns a Promise which always resolves with action being `Share.sharedAction`.
   *
   * ### Content
   *
   * #### iOS
   *
   *  - `url` - a URL to share
   *  - `message` - a message to share
   *
   * At least one of `URL` or `message` is required.
   *
   * #### Android
   *
   * - `title` - title of the message (optional)
   * - `message` - a message to share (often will include a URL).
   *
   * ### Options
   *
   * #### iOS
   *
   *  - `subject` - a subject to share via email
   *  - `excludedActivityTypes`
   *  - `tintColor`
   *
   * #### Android
   *
   *  - `dialogTitle`
   *
   */ function share(content, ref) {
                var options = ref === void 0 ? {} : ref;
                invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
                invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL or message is required');
                invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
                if (Platform.OS === 'android') {
                    invariant(_NativeShareModule.default, 'ShareModule should be registered on Android.');
                    invariant(content.title == null || typeof content.title === 'string', 'Invalid title: title should be a string.');
                    var newContent = {
                        title: content.title,
                        message: typeof content.message === 'string' ? content.message : undefined
                    };
                    return _NativeShareModule.default.share(newContent, options.dialogTitle).then((result)=>_object_spread._({
                            activityType: null
                        }, result));
                } else if (Platform.OS === 'ios') {
                    return new Promise((resolve, reject)=>{
                        var tintColor = processColor(options.tintColor);
                        invariant(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');
                        invariant(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');
                        _NativeActionSheetManager.default.showShareActionSheetWithOptions({
                            message: typeof content.message === 'string' ? content.message : undefined,
                            url: typeof content.url === 'string' ? content.url : undefined,
                            subject: options.subject,
                            tintColor: typeof tintColor === 'number' ? tintColor : undefined,
                            anchor: typeof options.anchor === 'number' ? options.anchor : undefined,
                            excludedActivityTypes: options.excludedActivityTypes
                        }, (error)=>reject(error), (success, activityType)=>{
                            if (success) {
                                resolve({
                                    action: 'sharedAction',
                                    activityType: activityType
                                });
                            } else {
                                resolve({
                                    action: 'dismissedAction',
                                    activityType: null
                                });
                            }
                        });
                    });
                } else {
                    return Promise.reject(new Error('Unsupported platform'));
                }
            }
        }
    ]);
    return Share;
}();
/**
   * The content was successfully shared.
   */ Share.sharedAction = 'sharedAction';
/**
   * The dialog has been dismissed.
   * @platform ios
   */ Share.dismissedAction = 'dismissedAction';
var _default = Share;


}),
49457: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /** The actual type of the opaque NativeColorValue on Android platform */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PlatformColor: function() {
        return PlatformColor;
    },
    normalizeColorObject: function() {
        return normalizeColorObject;
    },
    processColorObject: function() {
        return processColorObject;
    }
});
var PlatformColor = (...names)=>{
    /* $FlowExpectedError[incompatible-return]
   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */ return {
        resource_paths: names
    };
};
var normalizeColorObject = (color)=>{
    /* $FlowExpectedError[incompatible-cast]
   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */ if ('resource_paths' in color) {
        return color;
    }
    return null;
};
var processColorObject = (color)=>{
    return color;
};


}),
40335: (function (__unused_webpack_module, exports) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "DynamicColorIOS", ({
    enumerable: true,
    get: function() {
        return DynamicColorIOS;
    }
}));
var DynamicColorIOS = (tuple)=>{
    throw new Error('DynamicColorIOS is not available on this platform.');
};


}),
50515: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createSquare: function() {
        return createSquare;
    },
    normalizeRect: function() {
        return normalizeRect;
    }
});
function createSquare(size) {
    return {
        bottom: size,
        left: size,
        right: size,
        top: size
    };
}
function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
}


}),
5938: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90285));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var ReactNativeStyleAttributes = (__webpack_require__(34650)/* ["default"] */["default"]);
var PixelRatio = (__webpack_require__(52712)/* ["default"] */["default"]);
/**
 * This type should be used as the type for anything that is a color. It is
 * most useful when using DynamicColorIOS which can be a string or a dynamic
 * color object.
 *
 * type props = {backgroundColor: ColorValue};
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <View>'s `style` prop. This ensures call sites of the component
 * can't pass styles that View doesn't support such as `fontSize`.`
 *
 * type Props = {style: ViewStyleProp}
 * const MyComponent = (props: Props) => <View style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <Text>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Text doesn't support such as `resizeMode`.`
 *
 * type Props = {style: TextStyleProp}
 * const MyComponent = (props: Props) => <Text style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to an <Image>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Image doesn't support such as `fontSize`.`
 *
 * type Props = {style: ImageStyleProp}
 * const MyComponent = (props: Props) => <Image style={props.style} />
 */ /**
 * WARNING: You probably shouldn't be using this type. This type
 * is similar to the ones above except it allows styles that are accepted
 * by all of View, Text, or Image. It is therefore very unsafe to pass this
 * through to an underlying component. Using this is almost always a mistake
 * and using one of the other more restrictive types is likely the right choice.
 */ /**
 * Utility type for getting the values for specific style keys.
 *
 * The following is bad because position is more restrictive than 'string':
 * ```
 * type Props = {position: string};
 * ```
 *
 * You should use the following instead:
 *
 * ```
 * type Props = {position: TypeForStyleKey<'position'>};
 * ```
 *
 * This will correctly give you the type 'absolute' | 'relative'
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for View.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ViewStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a View that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Text.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using TextStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a Text that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Image.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ImageStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to an Image that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * WARNING: You probably shouldn't be using this type. This type is an object
 * with all possible style keys and their values. Note that this isn't
 * a safe way to type a style prop for a component as results from
 * StyleSheet.create return an internal identifier, not an object of styles.
 *
 * If you want to type the style prop of a function, consider using
 * ViewStyleProp, TextStyleProp, or ImageStyleProp.
 *
 * This should only be used by very core utilities that operate on an object
 * containing any possible style value.
 */ var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
}
var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
};
if (false) {}
var _default = {
    /**
   * This is defined as the width of a thin line on the platform. It can be
   * used as the thickness of a border or division between two elements.
   * Example:
   * ```
   *   {
   *     borderBottomColor: '#bbb',
   *     borderBottomWidth: StyleSheet.hairlineWidth
   *   }
   * ```
   *
   * This constant will always be a round number of pixels (so a line defined
   * by it look crisp) and will try to match the standard width of a thin line
   * on the underlying platform. However, you should not rely on it being a
   * constant size, because on different platforms and screen densities its
   * value may be calculated differently.
   *
   * A line with hairline width may not be visible if your simulator is downscaled.
   */ hairlineWidth,
    /**
   * A very common pattern is to create overlays with position absolute and zero positioning,
   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
   * styles.
   */ absoluteFill: absoluteFill,
    /**
   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
   * used to create a customized entry in a `StyleSheet`, e.g.:
   *
   *   const styles = StyleSheet.create({
   *     wrapper: {
   *       ...StyleSheet.absoluteFillObject,
   *       top: 10,
   *       backgroundColor: 'transparent',
   *     },
   *   });
   */ absoluteFillObject: absoluteFill,
    /**
   * Combines two styles such that `style2` will override any styles in `style1`.
   * If either style is falsy, the other one is returned without allocating an
   * array, saving allocations and maintaining reference equality for
   * PureComponent checks.
   */ compose: _composeStyles.default,
    /**
   * Flattens an array of style objects, into one aggregated style object.
   *
   * Example:
   * ```
   * const styles = StyleSheet.create({
   *   listItem: {
   *     flex: 1,
   *     fontSize: 16,
   *     color: 'white'
   *   },
   *   selectedListItem: {
   *     color: 'green'
   *   }
   * });
   *
   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
   * // returns { flex: 1, fontSize: 16, color: 'green' }
   * ```
   */ flatten: _flattenStyle.default,
    /**
   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
   * not be reliably announced. The whole thing might be deleted, who knows? Use
   * at your own risk.
   *
   * Sets a function to use to pre-process a style property value. This is used
   * internally to process color and transform values. You should not use this
   * unless you really know what you are doing and have exhausted other options.
   */ setStyleAttributePreprocessor (property, process) {
        var _ReactNativeStyleAttributes_property, _ReactNativeStyleAttributes_property1;
        var value;
        if (ReactNativeStyleAttributes[property] === true) {
            value = {
                process
            };
        } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
            value = _object_spread_props._(_object_spread._({}, ReactNativeStyleAttributes[property]), {
                process
            });
        } else {
            console.error(`${property} is not a valid style attribute`);
            return;
        }
        if (false) {}
        ReactNativeStyleAttributes[property] = value;
    },
    /**
   * An identity function for creating style sheets.
   */ // $FlowFixMe[unsupported-variance-annotation]
    create (obj) {
        // TODO: This should return S as the return type. But first,
        // we need to codemod all the callsites that are typing this
        // return value as a number (even though it was opaque).
        if (false) { var key }
        return obj;
    }
};


}),
69490: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        // $FlowFixMe[incompatible-return]
        return style;
    }
    var result = {};
    for(var i = 0, styleLength = style.length; i < styleLength; ++i){
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            // $FlowFixMe[invalid-in-rhs]
            for(var key in computedStyle){
                // $FlowFixMe[incompatible-use]
                // $FlowFixMe[invalid-computed-prop]
                result[key] = computedStyle[key];
            }
        }
    }
    // $FlowFixMe[incompatible-return]
    return result;
}
var _default = flattenStyle;


}),
12990: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /* eslint no-bitwise: 0 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _normalizecolors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50999));
function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
        var normalizeColorObject = (__webpack_require__(49457)/* .normalizeColorObject */.normalizeColorObject);
        var normalizedColor = normalizeColorObject(color);
        if (normalizedColor != null) {
            return normalizedColor;
        }
    }
    if (typeof color === 'string' || typeof color === 'number') {
        return (0, _normalizecolors.default)(color);
    }
}
var _default = normalizeColor;


}),
5304: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var invariant = __webpack_require__(56481);
function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
        return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
        if (false) {}
        return;
    }
    var matches = aspectRatio.split('/').map((s)=>s.trim());
    if (matches.includes('auto')) {
        if (false) {}
        return;
    }
    var hasNonNumericValues = matches.some((n)=>Number.isNaN(Number(n)));
    if (false) {}
    if (hasNonNumericValues) {
        return;
    }
    if (matches.length === 2) {
        return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
}
var _default = processAspectRatio;


}),
33518: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBackgroundImage;
    }
}));
var _sliced_to_array = __webpack_require__(78474);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
// null color indicate that the transition hint syntax is used. e.g. red, 20%, blue
// percentage or pixel value
var DEFAULT_DIRECTION = {
    type: 'angle',
    value: 180
};
function processBackgroundImage(backgroundImage) {
    var result = [];
    if (backgroundImage == null) {
        return result;
    }
    if (typeof backgroundImage === 'string') {
        result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
    } else if (Array.isArray(backgroundImage)) {
        for (var bgImage of backgroundImage){
            var processedColorStops = [];
            for(var index = 0; index < bgImage.colorStops.length; index++){
                var colorStop = bgImage.colorStops[index];
                var positions = colorStop.positions;
                // Color transition hint syntax (red, 20%, blue)
                if (colorStop.color == null && Array.isArray(positions) && positions.length === 1) {
                    var position = positions[0];
                    if (typeof position === 'number' || typeof position === 'string' && position.endsWith('%')) {
                        processedColorStops.push({
                            color: null,
                            position
                        });
                    } else {
                        // If a position is invalid, return an empty array and do not apply gradient. Same as web.
                        return [];
                    }
                } else {
                    var processedColor = processColor(colorStop.color);
                    if (processedColor == null) {
                        // If a color is invalid, return an empty array and do not apply gradient. Same as web.
                        return [];
                    }
                    if (positions != null && positions.length > 0) {
                        for (var position1 of positions){
                            if (typeof position1 === 'number' || typeof position1 === 'string' && position1.endsWith('%')) {
                                processedColorStops.push({
                                    color: processedColor,
                                    position: position1
                                });
                            } else {
                                // If a position is invalid, return an empty array and do not apply gradient. Same as web.
                                return [];
                            }
                        }
                    } else {
                        processedColorStops.push({
                            color: processedColor,
                            position: null
                        });
                    }
                }
            }
            var direction = DEFAULT_DIRECTION;
            var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
            if (bgDirection != null) {
                if (ANGLE_UNIT_REGEX.test(bgDirection)) {
                    var parsedAngle = getAngleInDegrees(bgDirection);
                    if (parsedAngle != null) {
                        direction = {
                            type: 'angle',
                            value: parsedAngle
                        };
                    } else {
                        // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
                    var parsedDirection = getDirectionForKeyword(bgDirection);
                    if (parsedDirection != null) {
                        direction = parsedDirection;
                    } else {
                        // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else {
                    // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            }
            result = result.concat({
                type: 'linearGradient',
                direction,
                colorStops: processedColorStops
            });
        }
    }
    return result;
}
function parseCSSLinearGradient(cssString) {
    var gradients = [];
    var match;
    // matches one or more linear-gradient functions in CSS
    var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
    while(match = linearGradientRegex.exec(cssString)){
        var gradientContent = match[1];
        var parts = gradientContent.split(',');
        var direction = DEFAULT_DIRECTION;
        var trimmedDirection = parts[0].trim().toLowerCase();
        if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
            var parsedAngle = getAngleInDegrees(trimmedDirection);
            if (parsedAngle != null) {
                direction = {
                    type: 'angle',
                    value: parsedAngle
                };
                parts.shift();
            } else {
                // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
            var parsedDirection = getDirectionForKeyword(trimmedDirection);
            if (parsedDirection != null) {
                direction = parsedDirection;
                parts.shift();
            } else {
                // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        }
        var colorStopsString = parts.join(',');
        var colorStops = [];
        // split by comma, but not if it's inside a parentheses. e.g. red, rgba(0, 0, 0, 0.5), green => ["red", "rgba(0, 0, 0, 0.5)", "green"]
        var stops = colorStopsString.split(/,(?![^(]*\))/);
        var prevStop = null;
        for(var i = 0; i < stops.length; i++){
            var stop = stops[i];
            var trimmedStop = stop.trim().toLowerCase();
            // Match function like pattern or single words
            var colorStopParts = trimmedStop.match(/\S+\([^)]*\)|\S+/g);
            if (colorStopParts == null) {
                // If a color stop is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
            // Case 1: [color, position, position]
            if (colorStopParts.length === 3) {
                var color = colorStopParts[0];
                var position1 = getPositionFromCSSValue(colorStopParts[1]);
                var position2 = getPositionFromCSSValue(colorStopParts[2]);
                var processedColor = processColor(color);
                if (processedColor == null) {
                    // If a color is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
                if (position1 == null || position2 == null) {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
                colorStops.push({
                    color: processedColor,
                    position: position1
                });
                colorStops.push({
                    color: processedColor,
                    position: position2
                });
            } else if (colorStopParts.length === 2) {
                var color1 = colorStopParts[0];
                var position = getPositionFromCSSValue(colorStopParts[1]);
                var processedColor1 = processColor(color1);
                if (processedColor1 == null) {
                    // If a color is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
                if (position == null) {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
                colorStops.push({
                    color: processedColor1,
                    position
                });
            } else if (colorStopParts.length === 1) {
                var position3 = getPositionFromCSSValue(colorStopParts[0]);
                if (position3 != null) {
                    // handle invalid transition hint syntax. transition hint syntax must have color before and after the position. e.g. red, 20%, blue
                    if (prevStop != null && prevStop.length === 1 && getPositionFromCSSValue(prevStop[0]) != null || i === stops.length - 1 || i === 0) {
                        // If the last stop is a transition hint syntax, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                    colorStops.push({
                        color: null,
                        position: position3
                    });
                } else {
                    var processedColor2 = processColor(colorStopParts[0]);
                    if (processedColor2 == null) {
                        // If a color is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                    colorStops.push({
                        color: processedColor2,
                        position: null
                    });
                }
            } else {
                // If a color stop is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
            prevStop = colorStopParts;
        }
        gradients.push({
            type: 'linearGradient',
            direction,
            colorStops
        });
    }
    return gradients;
}
function getDirectionForKeyword(direction) {
    if (direction == null) {
        return null;
    }
    // Remove extra whitespace
    var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
    switch(normalized){
        case 'to top':
            return {
                type: 'angle',
                value: 0
            };
        case 'to right':
            return {
                type: 'angle',
                value: 90
            };
        case 'to bottom':
            return {
                type: 'angle',
                value: 180
            };
        case 'to left':
            return {
                type: 'angle',
                value: 270
            };
        case 'to top right':
        case 'to right top':
            return {
                type: 'keyword',
                value: 'to top right'
            };
        case 'to bottom right':
        case 'to right bottom':
            return {
                type: 'keyword',
                value: 'to bottom right'
            };
        case 'to top left':
        case 'to left top':
            return {
                type: 'keyword',
                value: 'to top left'
            };
        case 'to bottom left':
        case 'to left bottom':
            return {
                type: 'keyword',
                value: 'to bottom left'
            };
        default:
            return null;
    }
}
function getAngleInDegrees(angle) {
    if (angle == null) {
        return null;
    }
    var match = angle.match(ANGLE_UNIT_REGEX);
    if (!match) {
        return null;
    }
    var _match = _sliced_to_array._(match, 3), value = _match[1], unit = _match[2];
    var numericValue = parseFloat(value);
    switch(unit){
        case 'deg':
            return numericValue;
        case 'grad':
            return numericValue * 0.9; // 1 grad = 0.9 degrees
        case 'rad':
            return numericValue * 180 / Math.PI;
        case 'turn':
            return numericValue * 360; // 1 turn = 360 degrees
        default:
            return null;
    }
}
function getPositionFromCSSValue(position) {
    if (position.endsWith('px')) {
        return parseFloat(position);
    }
    if (position.endsWith('%')) {
        return position;
    }
}


}),
47204: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react-native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBoxShadow;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processBoxShadow(rawBoxShadows) {
    var result = [];
    if (rawBoxShadows == null) {
        return result;
    }
    var boxShadowList = typeof rawBoxShadows === 'string' ? parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' ')) : rawBoxShadows;
    for (var rawBoxShadow of boxShadowList){
        var parsedBoxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var value = void 0;
        for(var arg in rawBoxShadow){
            switch(arg){
                case 'offsetX':
                    value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetX = value;
                    break;
                case 'offsetY':
                    value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetY = value;
                    break;
                case 'spreadDistance':
                    value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.spreadDistance = value;
                    break;
                case 'blurRadius':
                    value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
                    if (value == null || value < 0) {
                        return [];
                    }
                    parsedBoxShadow.blurRadius = value;
                    break;
                case 'color':
                    var color = (0, _processColor.default)(rawBoxShadow.color);
                    if (color == null) {
                        return [];
                    }
                    parsedBoxShadow.color = color;
                    break;
                case 'inset':
                    parsedBoxShadow.inset = rawBoxShadow.inset;
            }
        }
        result.push(parsedBoxShadow);
    }
    return result;
}
function parseBoxShadowString(rawBoxShadows) {
    var result = [];
    for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/) // split by comma that is not in parenthesis
    .map((bS)=>bS.trim()).filter((bS)=>bS !== '')){
        var boxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var offsetX = void 0;
        var offsetY = void 0;
        var keywordDetectedAfterLength = false;
        var lengthCount = 0;
        // split rawBoxShadow string by all whitespaces that are not in parenthesis
        var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
        for (var arg of args){
            var processedColor = (0, _processColor.default)(arg);
            if (processedColor != null) {
                if (boxShadow.color != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.color = arg;
                continue;
            }
            if (arg === 'inset') {
                if (boxShadow.inset != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.inset = true;
                continue;
            }
            switch(lengthCount){
                case 0:
                    offsetX = arg;
                    lengthCount++;
                    break;
                case 1:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    offsetY = arg;
                    lengthCount++;
                    break;
                case 2:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.blurRadius = arg;
                    lengthCount++;
                    break;
                case 3:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.spreadDistance = arg;
                    lengthCount++;
                    break;
                default:
                    return [];
            }
        }
        if (offsetX == null || offsetY == null) {
            return [];
        }
        boxShadow.offsetX = offsetX;
        boxShadow.offsetY = offsetY;
        result.push(boxShadow);
    }
    return result;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    if (match[3] == null && match[1] !== '0') {
        return null;
    }
    return Number(match[1]);
}


}),
23865: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
var normalizeColor = (__webpack_require__(12990)/* ["default"] */["default"]);
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return color;
    }
    var normalizedColor = normalizeColor(color);
    if (normalizedColor === null || normalizedColor === undefined) {
        return undefined;
    }
    if (typeof normalizedColor === 'object') {
        var processColorObject = (__webpack_require__(49457)/* .processColorObject */.processColorObject);
        var processedColorObj = processColorObject(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    }
    if (typeof normalizedColor !== 'number') {
        return null;
    }
    // Converts 0xrrggbbaa into 0xaarrggbb
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    if (Platform.OS === 'android') {
        // Android use 32 bit *signed* integer to represent the color
        // We utilize the fact that bitwise operations in JS also operates on
        // signed 32 bit integers, so that we can use those to convert from
        // *unsigned* to *signed* 32bit int that way.
        normalizedColor = normalizedColor | 0x0;
    }
    return normalizedColor;
}
var _default = processColor;


}),
57338: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var TRANSPARENT = 0; // rgba(0, 0, 0, 0)
function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
}
function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    // For invalid colors, fallback to transparent.
    if (value == null) {
        console.error('Invalid value in color array:', color);
        return TRANSPARENT;
    }
    return value;
}
var _default = processColorArray;


}),
62354: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *      
 * @oncall react-native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processFilter;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processFilter(filter) {
    var result = [];
    if (filter == null) {
        return result;
    }
    if (typeof filter === 'string') {
        filter = filter.replace(/\n/g, ' ');
        // matches on functions with args and nested functions like "drop-shadow(10 10 10 rgba(0, 0, 0, 1))"
        var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
        var matches;
        while(matches = regex.exec(filter)){
            var filterName = matches[1].toLowerCase();
            if (filterName === 'drop-shadow') {
                var dropShadow = parseDropShadow(matches[2]);
                if (dropShadow != null) {
                    result.push({
                        dropShadow
                    });
                } else {
                    return [];
                }
            } else {
                var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
                var amount = _getFilterAmount(camelizedName, matches[2]);
                if (amount != null) {
                    var filterFunction = {};
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    filterFunction[camelizedName] = amount;
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    result.push(filterFunction);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else if (Array.isArray(filter)) {
        for (var filterFunction1 of filter){
            var _Object_entries_ = _sliced_to_array._(Object.entries(filterFunction1)[0], 2), filterName1 = _Object_entries_[0], filterValue = _Object_entries_[1];
            if (filterName1 === 'dropShadow') {
                // $FlowFixMe
                var dropShadow1 = parseDropShadow(filterValue);
                if (dropShadow1 == null) {
                    return [];
                }
                result.push({
                    dropShadow: dropShadow1
                });
            } else {
                var amount1 = _getFilterAmount(filterName1, filterValue);
                if (amount1 != null) {
                    var resultObject = {};
                    // $FlowFixMe
                    resultObject[filterName1] = amount1;
                    // $FlowFixMe
                    result.push(resultObject);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else {
        throw new TypeError(`${typeof filter} filter is not a string or array`);
    }
    return result;
}
function _getFilterAmount(filterName, filterArgs) {
    var filterArgAsNumber;
    var unit;
    if (typeof filterArgs === 'string') {
        // matches on args with units like "1.5 5% -80deg"
        var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
        var match = argsWithUnitsRegex.exec(filterArgs);
        if (!match || isNaN(Number(match[1]))) {
            return undefined;
        }
        filterArgAsNumber = Number(match[1]);
        unit = match[3];
    } else if (typeof filterArgs === 'number') {
        filterArgAsNumber = filterArgs;
    } else {
        return undefined;
    }
    switch(filterName){
        // Hue rotate takes some angle that can have a unit and can be
        // negative. Additionally, 0 with no unit is allowed.
        case 'hueRotate':
            if (filterArgAsNumber === 0) {
                return 0;
            }
            if (unit !== 'deg' && unit !== 'rad') {
                return undefined;
            }
            return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
        // blur takes any positive CSS length that is not a percent. In RN
        // we currently only have DIPs, so we are not parsing units here.
        case 'blur':
            if (unit && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            return filterArgAsNumber;
        // All other filters except take a non negative number or percentage. There
        // are no units associated with this value and percentage numbers map 1-to-1
        // to a non-percentage number (e.g. 50% == 0.5).
        case 'brightness':
        case 'contrast':
        case 'grayscale':
        case 'invert':
        case 'opacity':
        case 'saturate':
        case 'sepia':
            if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            if (unit === '%') {
                filterArgAsNumber /= 100;
            }
            return filterArgAsNumber;
        default:
            return undefined;
    }
}
function parseDropShadow(rawDropShadow) {
    var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
    var parsedDropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    for(var arg in dropShadow){
        var value = void 0;
        switch(arg){
            case 'offsetX':
                value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
                if (value == null) {
                    return null;
                }
                offsetX = value;
                break;
            case 'offsetY':
                value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
                if (value == null) {
                    return null;
                }
                offsetY = value;
                break;
            case 'standardDeviation':
                value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
                if (value == null || value < 0) {
                    return null;
                }
                parsedDropShadow.standardDeviation = value;
                break;
            case 'color':
                var color = (0, _processColor.default)(dropShadow.color);
                if (color == null) {
                    return null;
                }
                parsedDropShadow.color = color;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    parsedDropShadow.offsetX = offsetX;
    parsedDropShadow.offsetY = offsetY;
    return parsedDropShadow;
}
function parseDropShadowString(rawDropShadow) {
    var dropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    var lengthCount = 0;
    var keywordDetectedAfterLength = false;
    // split args by all whitespaces that are not in parenthesis
    for (var arg of rawDropShadow.split(/\s+(?![^(]*\))/)){
        var processedColor = (0, _processColor.default)(arg);
        if (processedColor != null) {
            if (dropShadow.color != null) {
                return null;
            }
            if (offsetX != null) {
                keywordDetectedAfterLength = true;
            }
            dropShadow.color = arg;
            continue;
        }
        switch(lengthCount){
            case 0:
                offsetX = arg;
                lengthCount++;
                break;
            case 1:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                offsetY = arg;
                lengthCount++;
                break;
            case 2:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                dropShadow.standardDeviation = arg;
                lengthCount++;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    dropShadow.offsetX = offsetX;
    dropShadow.offsetY = offsetY;
    return dropShadow;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    if (match[3] == null && match[1] !== '0') {
        return null;
    }
    return Number(match[1]);
}


}),
45989: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
        return fontVariant;
    }
    // $FlowFixMe[incompatible-type]
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
}
var _default = processFontVariant;


}),
88823: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
/**
 * Generate a transform matrix based on the provided transforms, and use that
 * within the style object instead.
 *
 * This allows us to provide an API that is similar to CSS, where transforms may
 * be applied in an arbitrary order, and yet have a universal, singular
 * interface to native code.
 */ function processTransform(transform) {
    if (typeof transform === 'string') {
        var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
        var transformArray = [];
        var matches;
        while(matches = regex.exec(transform)){
            var _getKeyAndValueFromCSSTransform1 = _getKeyAndValueFromCSSTransform(matches[1], matches[2]), key = _getKeyAndValueFromCSSTransform1.key, value = _getKeyAndValueFromCSSTransform1.value;
            if (value !== undefined) {
                transformArray.push({
                    [key]: value
                });
            }
        }
        transform = transformArray;
    }
    if (false) {}
    return transform;
}
var _getKeyAndValueFromCSSTransform = (key, args)=>{
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+|%)?/g);
    switch(key){
        case 'matrix':
            var _args_match;
            return {
                key,
                value: (_args_match = args.match(/[+-]?\d+(\.\d+)?/g)) === null || _args_match === void 0 ? void 0 : _args_match.map(Number)
            };
        case 'translate':
        case 'translate3d':
            var parsedArgs = [];
            var missingUnitOfMeasurement = false;
            var matches;
            while(matches = argsWithUnitsRegex.exec(args)){
                var value = Number(matches[1]);
                var unitOfMeasurement = matches[3];
                if (value !== 0 && !unitOfMeasurement) {
                    missingUnitOfMeasurement = true;
                }
                if (unitOfMeasurement === '%') {
                    parsedArgs.push(`${value}%`);
                } else {
                    parsedArgs.push(value);
                }
            }
            if (false) {}
            if ((parsedArgs === null || parsedArgs === void 0 ? void 0 : parsedArgs.length) === 1) {
                parsedArgs.push(0);
            }
            return {
                key: 'translate',
                value: parsedArgs
            };
        case 'translateX':
        case 'translateY':
        case 'perspective':
            var argMatches = argsWithUnitsRegex.exec(args);
            if (!(argMatches === null || argMatches === void 0 ? void 0 : argMatches.length)) {
                return {
                    key,
                    value: undefined
                };
            }
            var value1 = Number(argMatches[1]);
            var unitOfMeasurement1 = argMatches[3];
            if (false) {}
            return {
                key,
                value: value1
            };
        default:
            return {
                key,
                value: !isNaN(args) ? Number(args) : args
            };
    }
};
function _validateTransforms(transform) {
    transform.forEach((transformation)=>{
        var keys = Object.keys(transformation);
        invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
        var key = keys[0];
        var value = transformation[key];
        if (key === 'matrix' && transform.length > 1) {
            console.error('When using a matrix transform, you must specify exactly one transform object. Passed transform: ' + stringifySafe(transform));
        }
        _validateTransform(key, value, transformation);
    });
}
function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = [
        'matrix',
        'translate'
    ];
    if (multivalueTransforms.indexOf(key) !== -1) {
        invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }
    switch(key){
        case 'matrix':
            invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'translate':
            invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate':
        case 'skewX':
        case 'skewY':
            invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
            invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
            break;
        case 'perspective':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
            break;
        case 'translateX':
        case 'translateY':
            invariant(typeof value === 'number' || typeof value === 'string' && value.endsWith('%'), 'Transform with key of "%s" must be number or a percentage. Passed value: %s.', key, stringifySafe(transformation));
            break;
        case 'scale':
        case 'scaleX':
        case 'scaleY':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            break;
        default:
            invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
}
var _default = processTransform;


}),
91166: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processTransformOrigin;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var INDEX_X = 0;
var INDEX_Y = 1;
var INDEX_Z = 2;
function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
        var transformOriginString = transformOrigin;
        var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
        var transformOriginArray = [
            '50%',
            '50%',
            0
        ];
        var index = INDEX_X;
        var matches;
        outer: while(matches = regex.exec(transformOriginString)){
            var nextIndex = index + 1;
            var value = matches[0];
            var valueLower = value.toLowerCase();
            switch(valueLower){
                case 'left':
                case 'right':
                    {
                        (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
                        transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
                        break;
                    }
                case 'top':
                case 'bottom':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
                        transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
                        // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?
                        if (index === INDEX_X) {
                            var horizontal = regex.exec(transformOriginString);
                            if (horizontal == null) {
                                break outer;
                            }
                            switch(horizontal[0].toLowerCase()){
                                case 'left':
                                    transformOriginArray[INDEX_X] = 0;
                                    break;
                                case 'right':
                                    transformOriginArray[INDEX_X] = '100%';
                                    break;
                                case 'center':
                                    transformOriginArray[INDEX_X] = '50%';
                                    break;
                                default:
                                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                            }
                            nextIndex = INDEX_Z;
                        }
                        break;
                    }
                case 'center':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
                        transformOriginArray[index] = '50%';
                        break;
                    }
                default:
                    {
                        if (value.endsWith('%')) {
                            transformOriginArray[index] = value;
                        } else {
                            transformOriginArray[index] = parseFloat(value); // Remove `px`
                        }
                        break;
                    }
            }
            index = nextIndex;
        }
        transformOrigin = transformOriginArray;
    }
    if (false) {}
    return transformOrigin;
}
function _validateTransformOrigin(transformOrigin) {
    (0, _invariant.default)(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');
    var _transformOrigin = _sliced_to_array._(transformOrigin, 3), x = _transformOrigin[0], y = _transformOrigin[1], z = _transformOrigin[2];
    (0, _invariant.default)(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);
    (0, _invariant.default)(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);
    (0, _invariant.default)(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);
}


}),
89492: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return splitLayoutProps;
    }
}));
function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        outer = {};
        // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
        inner = {};
        for (var prop of Object.keys(props)){
            switch(prop){
                case 'margin':
                case 'marginHorizontal':
                case 'marginVertical':
                case 'marginBottom':
                case 'marginTop':
                case 'marginLeft':
                case 'marginRight':
                case 'flex':
                case 'flexGrow':
                case 'flexShrink':
                case 'flexBasis':
                case 'alignSelf':
                case 'height':
                case 'minHeight':
                case 'maxHeight':
                case 'width':
                case 'minWidth':
                case 'maxWidth':
                case 'position':
                case 'left':
                case 'right':
                case 'bottom':
                case 'top':
                case 'transform':
                case 'transformOrigin':
                case 'rowGap':
                case 'columnGap':
                case 'gap':
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    outer[prop] = props[prop];
                    break;
                default:
                    // $FlowFixMe[cannot-write]
                    // $FlowFixMe[incompatible-use]
                    // $FlowFixMe[prop-missing]
                    inner[prop] = props[prop];
                    break;
            }
        }
    }
    return {
        outer,
        inner
    };
}


}),
8893: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _PressabilityDebug = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(51386));
var _usePressability = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45178));
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86981));
var _TextNativeComponent = __webpack_require__(66099);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * Text is the fundamental component for displaying text.
 *
 * @see https://reactnative.dev/docs/text
 */ var Text = /*#__PURE__*/ _react.forwardRef((_param, forwardedRef)=>{
    var accessible = _param.accessible, accessibilityLabel = _param.accessibilityLabel, accessibilityState = _param.accessibilityState, allowFontScaling = _param.allowFontScaling, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaLabel = _param['aria-label'], ariaSelected = _param['aria-selected'], children = _param.children, ellipsizeMode = _param.ellipsizeMode, disabled = _param.disabled, id = _param.id, nativeID = _param.nativeID, numberOfLines = _param.numberOfLines, onLongPress = _param.onLongPress, onPress = _param.onPress, onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, onResponderGrant = _param.onResponderGrant, onResponderMove = _param.onResponderMove, onResponderRelease = _param.onResponderRelease, onResponderTerminate = _param.onResponderTerminate, onResponderTerminationRequest = _param.onResponderTerminationRequest, onStartShouldSetResponder = _param.onStartShouldSetResponder, pressRetentionOffset = _param.pressRetentionOffset, selectable = _param.selectable, selectionColor = _param.selectionColor, suppressHighlighting = _param.suppressHighlighting, style = _param.style, restProps = _object_without_properties._(_param, [
        "accessible",
        "accessibilityLabel",
        "accessibilityState",
        "allowFontScaling",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-label',
        'aria-selected',
        "children",
        "ellipsizeMode",
        "disabled",
        "id",
        "nativeID",
        "numberOfLines",
        "onLongPress",
        "onPress",
        "onPressIn",
        "onPressOut",
        "onResponderGrant",
        "onResponderMove",
        "onResponderRelease",
        "onResponderTerminate",
        "onResponderTerminationRequest",
        "onStartShouldSetResponder",
        "pressRetentionOffset",
        "selectable",
        "selectionColor",
        "suppressHighlighting",
        "style"
    ]);
    var _accessibilityLabel = ariaLabel ?? accessibilityLabel;
    var _accessibilityState = accessibilityState;
    if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        if (_accessibilityState != null) {
            _accessibilityState = {
                busy: ariaBusy ?? _accessibilityState.busy,
                checked: ariaChecked ?? _accessibilityState.checked,
                disabled: ariaDisabled ?? _accessibilityState.disabled,
                expanded: ariaExpanded ?? _accessibilityState.expanded,
                selected: ariaSelected ?? _accessibilityState.selected
            };
        } else {
            _accessibilityState = {
                busy: ariaBusy,
                checked: ariaChecked,
                disabled: ariaDisabled,
                expanded: ariaExpanded,
                selected: ariaSelected
            };
        }
    }
    var _accessibilityStateDisabled = _accessibilityState === null || _accessibilityState === void 0 ? void 0 : _accessibilityState.disabled;
    var _disabled = disabled ?? _accessibilityStateDisabled;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    // TODO: Move this processing to the view configuration.
    var _selectionColor = selectionColor != null ? (0, _processColor.default)(selectionColor) : undefined;
    var _style = style;
    if (false) {}
    var _numberOfLines = numberOfLines;
    if (_numberOfLines != null && !(_numberOfLines >= 0)) {
        if (false) {}
        _numberOfLines = 0;
    }
    var _selectable = selectable;
    var processedStyle = (0, _flattenStyle.default)(_style);
    if (processedStyle != null) {
        var overrides = null;
        if (typeof processedStyle.fontWeight === 'number') {
            overrides = overrides || {};
            overrides.fontWeight = // $FlowFixMe[incompatible-cast]
            processedStyle.fontWeight.toString();
        }
        if (processedStyle.userSelect != null) {
            _selectable = userSelectToSelectableMap[processedStyle.userSelect];
            overrides = overrides || {};
            overrides.userSelect = undefined;
        }
        if (processedStyle.verticalAlign != null) {
            overrides = overrides || {};
            overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];
            overrides.verticalAlign = undefined;
        }
        if (overrides != null) {
            // $FlowFixMe[incompatible-type]
            _style = [
                _style,
                overrides
            ];
        }
    }
    var _nativeID = id ?? nativeID;
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    if (hasTextAncestor) {
        if (isPressable) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativePressableVirtualText, {
                ref: forwardedRef,
                textProps: _object_spread_props._(_object_spread._({}, restProps), {
                    accessibilityLabel: _accessibilityLabel,
                    accessibilityState: _accessibilityState,
                    nativeID: _nativeID,
                    numberOfLines: _numberOfLines,
                    selectable: _selectable,
                    selectionColor: _selectionColor,
                    style: _style,
                    disabled: disabled,
                    children
                }),
                textPressabilityProps: {
                    onLongPress,
                    onPress,
                    onPressIn,
                    onPressOut,
                    onResponderGrant,
                    onResponderMove,
                    onResponderRelease,
                    onResponderTerminate,
                    onResponderTerminationRequest,
                    onStartShouldSetResponder,
                    pressRetentionOffset,
                    suppressHighlighting
                }
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeVirtualText, _object_spread_props._(_object_spread._({}, restProps), {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            disabled: disabled,
            children: children
        }));
    }
    // If the disabled prop and accessibilityState.disabled are out of sync but not both in
    // falsy states we need to update the accessibilityState object to use the disabled prop.
    if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {
        _accessibilityState = _object_spread_props._(_object_spread._({}, _accessibilityState), {
            disabled: _disabled
        });
    }
    var _accessible = _Platform.default.select({
        ios: accessible !== false,
        android: accessible == null ? onPress != null || onLongPress != null : accessible,
        default: accessible
    });
    var nativeText = null;
    if (isPressable) {
        nativeText = /*#__PURE__*/ (0, _jsxruntime.jsx)(NativePressableText, {
            ref: forwardedRef,
            textProps: _object_spread_props._(_object_spread._({}, restProps), {
                accessibilityLabel: _accessibilityLabel,
                accessibilityState: _accessibilityState,
                accessible: _accessible,
                allowFontScaling: allowFontScaling !== false,
                disabled: _disabled,
                ellipsizeMode: ellipsizeMode ?? 'tail',
                nativeID: _nativeID,
                numberOfLines: _numberOfLines,
                selectable: _selectable,
                selectionColor: _selectionColor,
                style: _style,
                children
            }),
            textPressabilityProps: {
                onLongPress,
                onPress,
                onPressIn,
                onPressOut,
                onResponderGrant,
                onResponderMove,
                onResponderRelease,
                onResponderTerminate,
                onResponderTerminationRequest,
                onStartShouldSetResponder,
                pressRetentionOffset,
                suppressHighlighting
            }
        });
    } else {
        nativeText = /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeText, _object_spread_props._(_object_spread._({}, restProps), {
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            accessible: _accessible,
            allowFontScaling: allowFontScaling !== false,
            disabled: _disabled,
            ellipsizeMode: ellipsizeMode ?? 'tail',
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            ref: forwardedRef,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            children: children
        }));
    }
    if (children == null) {
        return nativeText;
    }
    // If the children do not contain a JSX element it would not be possible to have a
    // nested `Text` component so we can skip adding the `TextAncestor` context wrapper
    // which has a performance overhead. Since we do this for performance reasons we need
    // to keep the check simple to avoid regressing overall perf. For this reason the
    // `children.length` constant is set to `3`, this should be a reasonable tradeoff
    // to capture the majority of `Text` uses but also not make this check too expensive.
    if (Array.isArray(children) && children.length <= 3) {
        var hasNonTextChild = false;
        for (var child of children){
            if (child != null && typeof child === 'object') {
                hasNonTextChild = true;
                break;
            }
        }
        if (!hasNonTextChild) {
            return nativeText;
        }
    } else if (typeof children !== 'object') {
        return nativeText;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
        value: true,
        children: nativeText
    });
});
Text.displayName = 'Text';
/**
 * Hook that handles setting up Pressability of Text components.
 *
 * NOTE: This hook is relatively expensive so it should only be used absolutely necessary.
 */ function useTextPressability(ref) {
    var onLongPress = ref.onLongPress, onPress = ref.onPress, onPressIn = ref.onPressIn, onPressOut = ref.onPressOut, onResponderGrant = ref.onResponderGrant, onResponderMove = ref.onResponderMove, onResponderRelease = ref.onResponderRelease, onResponderTerminate = ref.onResponderTerminate, onResponderTerminationRequest = ref.onResponderTerminationRequest, onStartShouldSetResponder = ref.onStartShouldSetResponder, pressRetentionOffset = ref.pressRetentionOffset, suppressHighlighting = ref.suppressHighlighting;
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), isHighlighted = _useState[0], setHighlighted = _useState[1];
    // Setup pressability config and wrap callbacks needs to track the highlight state.
    var config = (0, _react.useMemo)(()=>{
        var _onPressIn = onPressIn;
        var _onPressOut = onPressOut;
        // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it
        // in the best case, and cause issues with text selection in the worst case. Forcing
        // the isHighlighted prop to false on all platforms except iOS.
        if (_Platform.default.OS === 'ios') {
            _onPressIn = (event)=>{
                setHighlighted(suppressHighlighting == null || !suppressHighlighting);
                onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);
            };
            _onPressOut = (event)=>{
                setHighlighted(false);
                onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);
            };
        }
        return {
            disabled: false,
            pressRectOffset: pressRetentionOffset,
            onLongPress,
            onPress,
            onPressIn: _onPressIn,
            onPressOut: _onPressOut
        };
    }, [
        pressRetentionOffset,
        onLongPress,
        onPress,
        onPressIn,
        onPressOut,
        suppressHighlighting
    ]);
    // Init the pressability class
    var eventHandlers = (0, _usePressability.default)(config);
    // Create NativeText event handlers which proxy events to pressability
    var eventHandlersForText = (0, _react.useMemo)(()=>eventHandlers == null ? null : {
            onResponderGrant (event) {
                eventHandlers.onResponderGrant(event);
                if (onResponderGrant != null) {
                    onResponderGrant(event);
                }
            },
            onResponderMove (event) {
                eventHandlers.onResponderMove(event);
                if (onResponderMove != null) {
                    onResponderMove(event);
                }
            },
            onResponderRelease (event) {
                eventHandlers.onResponderRelease(event);
                if (onResponderRelease != null) {
                    onResponderRelease(event);
                }
            },
            onResponderTerminate (event) {
                eventHandlers.onResponderTerminate(event);
                if (onResponderTerminate != null) {
                    onResponderTerminate(event);
                }
            },
            onClick: eventHandlers.onClick,
            onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,
            onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder
        }, [
        eventHandlers,
        onResponderGrant,
        onResponderMove,
        onResponderRelease,
        onResponderTerminate,
        onResponderTerminationRequest,
        onStartShouldSetResponder
    ]);
    // Return the highlight state and NativeText event handlers
    return (0, _react.useMemo)(()=>[
            isHighlighted,
            eventHandlersForText
        ], [
        isHighlighted,
        eventHandlersForText
    ]);
}
/**
 * Wrap the NativeVirtualText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableVirtualText = /*#__PURE__*/ _react.forwardRef((ref, forwardedRef)=>{
    var textProps = ref.textProps, textPressabilityProps = ref.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeVirtualText, _object_spread_props._(_object_spread._({}, textProps, eventHandlersForText), {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
/**
 * Wrap the NativeText component and initialize pressability.
 *
 * This logic is split out from the main Text component to enable the more
 * expensive pressability logic to be only initialized when needed.
 */ var NativePressableText = /*#__PURE__*/ _react.forwardRef((ref, forwardedRef)=>{
    var textProps = ref.textProps, textPressabilityProps = ref.textPressabilityProps;
    var _useTextPressability = _sliced_to_array._(useTextPressability(textPressabilityProps), 2), isHighlighted = _useTextPressability[0], eventHandlersForText = _useTextPressability[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextNativeComponent.NativeText, _object_spread_props._(_object_spread._({}, textProps, eventHandlersForText), {
        isHighlighted: isHighlighted,
        isPressable: true,
        ref: forwardedRef
    }));
});
var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
};
var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
};
var _default = Text;


}),
86981: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var React = __webpack_require__(4931);
/**
 * Whether the current element is the descendant of a <Text> element.
 */ var TextAncestorContext = React.createContext(false);
if (false) {}
var _default = TextAncestorContext;


}),
76645: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    get: function() {
        return get;
    },
    getEnforcing: function() {
        return getEnforcing;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var NativeModules = (__webpack_require__(40225)/* ["default"] */["default"]);
var turboModuleProxy = __webpack_require__.g.__turboModuleProxy;
function requireModule(name) {
    if (turboModuleProxy != null) {
        var module = turboModuleProxy(name);
        if (module != null) {
            return module;
        }
    }
    if (__webpack_require__.g.RN$Bridgeless !== true || __webpack_require__.g.RN$TurboInterop === true || __webpack_require__.g.RN$UnifiedNativeModuleProxy === true) {
        var legacyModule = NativeModules[name];
        if (legacyModule != null) {
            return legacyModule;
        }
    }
    return null;
}
function get(name) {
    return requireModule(name);
}
function getEnforcing(name) {
    var module = requireModule(name);
    (0, _invariant.default)(module != null, `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.');
    return module;
}


}),
89872: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var deepFreezeAndThrowOnMutationInDev = (__webpack_require__(14702)/* ["default"] */["default"]);
/**
 * A collection of Unicode sequences for various characters and emoji.
 *
 *  - More explicit than using the sequences directly in code.
 *  - Source code should be limited to ASCII.
 *  - Less chance of typos.
 */ var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: '\ufeff',
    BULLET: '\u2022',
    BULLET_SP: '\u00A0\u2022\u00A0',
    MIDDOT: '\u00B7',
    MIDDOT_SP: '\u00A0\u00B7\u00A0',
    MIDDOT_KATAKANA: '\u30FB',
    MDASH: '\u2014',
    MDASH_SP: '\u00A0\u2014\u00A0',
    NDASH: '\u2013',
    NDASH_SP: '\u00A0\u2013\u00A0',
    NEWLINE: '\u000A',
    NBSP: '\u00A0',
    PIZZA: '\uD83C\uDF55',
    TRIANGLE_LEFT: '\u25c0',
    TRIANGLE_RIGHT: '\u25b6'
});
var _default = UTFSequence;


}),
52299: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addChangeListener: function() {
        return addChangeListener;
    },
    getColorScheme: function() {
        return getColorScheme;
    },
    setColorScheme: function() {
        return setColorScheme;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var lazyState;
/**
 * Ensures that all state and listeners are lazily initialized correctly.
 */ function getState() {
    if (lazyState != null) {
        return lazyState;
    }
    var eventEmitter = new _EventEmitter.default();
    // NOTE: Avoid initializing `NativeAppearance` until it is actually used.
    var NativeAppearance = (__webpack_require__(84893)/* ["default"] */["default"]);
    if (NativeAppearance == null) {
        // Assign `null` to avoid re-initializing on subsequent invocations.
        lazyState = {
            NativeAppearance: null,
            appearance: null,
            eventEmitter
        };
    } else {
        var state = {
            NativeAppearance,
            appearance: null,
            eventEmitter
        };
        new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', (newAppearance)=>{
            state.appearance = {
                colorScheme: toColorScheme(newAppearance.colorScheme)
            };
            eventEmitter.emit('change', state.appearance);
        });
        lazyState = state;
    }
    return lazyState;
}
function getColorScheme() {
    var colorScheme = null;
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        if (state.appearance == null) {
            // Lazily initialize `state.appearance`. This should only
            // happen once because we never reassign a null value to it.
            state.appearance = {
                colorScheme: toColorScheme(NativeAppearance.getColorScheme())
            };
        }
        colorScheme = state.appearance.colorScheme;
    }
    return colorScheme;
}
function setColorScheme(colorScheme) {
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
        NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');
        state.appearance = {
            colorScheme: toColorScheme(NativeAppearance.getColorScheme())
        };
    }
}
function addChangeListener(listener) {
    var eventEmitter = getState().eventEmitter;
    return eventEmitter.addListener('change', listener);
}
/**
 * TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union
 */ function toColorScheme(colorScheme) {
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
    return colorScheme;
}


}),
86833: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28082));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var DEVICE_BACK_EVENT = 'hardwareBackPress';
var _backPressSubscriptions = [];
_RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function() {
    for(var i = _backPressSubscriptions.length - 1; i >= 0; i--){
        var _backPressSubscriptions_i;
        if ((_backPressSubscriptions_i = _backPressSubscriptions[i]) === null || _backPressSubscriptions_i === void 0 ? void 0 : _backPressSubscriptions_i.call(_backPressSubscriptions)) {
            return;
        }
    }
    BackHandler.exitApp();
});
/**
 * Detect hardware button presses for back navigation.
 *
 * Android: Detect hardware back button presses, and programmatically invoke the default back button
 * functionality to exit the app if there are no listeners or if none of the listeners return true.
 *
 * iOS: Not applicable.
 *
 * The event subscriptions are called in reverse order (i.e. last registered subscription first),
 * and if one subscription returns true then subscriptions registered earlier will not be called.
 *
 * Example:
 *
 * ```javascript
 * BackHandler.addEventListener('hardwareBackPress', function() {
 *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here
 *  // Typically you would use the navigator here to go to the last state.
 *
 *  if (!this.onMainScreen()) {
 *    this.goBack();
 *    return true;
 *  }
 *  return false;
 * });
 * ```
 */ var BackHandler = {
    exitApp: function() {
        if (!_NativeDeviceEventManager.default) {
            return;
        }
        _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
    },
    /**
   * Adds an event handler. Supported events:
   *
   * - `hardwareBackPress`: Fires when the Android hardware back button is pressed.
   */ addEventListener: function(eventName, handler) {
        if (_backPressSubscriptions.indexOf(handler) === -1) {
            _backPressSubscriptions.push(handler);
        }
        return {
            remove: ()=>{
                var index = _backPressSubscriptions.indexOf(handler);
                if (index !== -1) {
                    _backPressSubscriptions.splice(index, 1);
                }
            }
        };
    }
};
var _default = BackHandler;


}),
31371: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _NativeDevSettings = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15849));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
/**
 * The DevSettings module exposes methods for customizing settings for developers in development.
 */ var DevSettings = {
    addMenuItem (title, handler) {},
    reload (reason) {},
    onFastRefresh () {}
};
if (false) { var subscriptions, emitter }
var _default = DevSettings;


}),
65562: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19784));
var _default = _NativeDeviceInfo.default;


}),
6482: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19784));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
/** @deprecated Use DisplayMetrics */ var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = /*#__PURE__*/ function() {
    "use strict";
    function Dimensions() {
        _class_call_check._(this, Dimensions);
    }
    _create_class._(Dimensions, null, [
        {
            key: "get",
            value: /**
   * NOTE: `useWindowDimensions` is the preferred API for React components.
   *
   * Initial dimensions are set before `runApplication` is called so they should
   * be available before any other require's are run, but may be updated later.
   *
   * Note: Although dimensions are available immediately, they may change (e.g
   * due to device rotation) so any rendering logic or styles that depend on
   * these constants should try to call this function on every render, rather
   * than caching the value (for example, using inline styles rather than
   * setting a value in a `StyleSheet`).
   *
   * Example: `const {height, width} = Dimensions.get('window');`
   *
   * @param {string} dim Name of dimension as defined when calling `set`.
   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
   */ function get(dim) {
                // $FlowFixMe[invalid-computed-prop]
                (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
                return dimensions[dim];
            }
        },
        {
            key: "set",
            value: /**
   * This should only be called from native code by sending the
   * didUpdateDimensions event.
   *
   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
   */ function set(dims) {
                // We calculate the window dimensions in JS so that we don't encounter loss of
                // precision in transferring the dimensions (which could be non-integers) over
                // the bridge.
                var screen = dims.screen, window = dims.window;
                var windowPhysicalPixels = dims.windowPhysicalPixels;
                if (windowPhysicalPixels) {
                    window = {
                        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
                        scale: windowPhysicalPixels.scale,
                        fontScale: windowPhysicalPixels.fontScale
                    };
                }
                var screenPhysicalPixels = dims.screenPhysicalPixels;
                if (screenPhysicalPixels) {
                    screen = {
                        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
                        scale: screenPhysicalPixels.scale,
                        fontScale: screenPhysicalPixels.fontScale
                    };
                } else if (screen == null) {
                    screen = window;
                }
                dimensions = {
                    window,
                    screen
                };
                if (dimensionsInitialized) {
                    // Don't fire 'change' the first time the dimensions are set.
                    eventEmitter.emit('change', dimensions);
                } else {
                    dimensionsInitialized = true;
                }
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Add an event handler. Supported events:
   *
   * - `change`: Fires when a property within the `Dimensions` object changes. The argument
   *   to the event handler is an object with `window` and `screen` properties whose values
   *   are the same as the return values of `Dimensions.get('window')` and
   *   `Dimensions.get('screen')`, respectively.
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
                return eventEmitter.addListener(type, handler);
            }
        }
    ]);
    return Dimensions;
}();
// Subscribe before calling getConstants to make sure we don't miss any updates in between.
_RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', (update)=>{
    Dimensions.set(update);
});
Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
var _default = Dimensions;


}),
65410: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /**
 * @return whether or not a @param {function} f is provided natively by calling
 * `toString` and check if the result includes `[native code]` in it.
 *
 * Note that a polyfill can technically fake this behavior but few does it.
 * Therefore, this is usually good enough for our purpose.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasNativeConstructor: function() {
        return hasNativeConstructor;
    },
    isNativeFunction: function() {
        return isNativeFunction;
    }
});
function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
}
function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
}


}),
27160: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41268));
/**
 * This is a global shared instance of IPerformanceLogger that is created with
 * createPerformanceLogger().
 * This logger should be used only for global performance metrics like the ones
 * that are logged during loading bundle. If you want to log something from your
 * React component you should use PerformanceLoggerContext instead.
 */ var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
var _default = GlobalPerformanceLogger;


}),
49646: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
// This shim ensures DEV binary builds don't crash in JS
// when they're combined with a PROD JavaScript build.
var HMRClientProdShim = {
    setup () {},
    enable () {
        console.error('Fast Refresh is disabled in JavaScript bundles built in production mode. ' + 'Did you forget to run Metro?');
    },
    disable () {},
    registerBundle () {},
    log () {}
};
var _default = HMRClientProdShim;


}),
44630: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    usePerformanceLogger: function() {
        return usePerformanceLogger;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27160));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
/**
 * This is a React Context that provides a scoped instance of IPerformanceLogger.
 * We wrap every <AppContainer /> with a Provider for this context so the logger
 * should be available in every component.
 * See React docs about using Context: https://react.dev/docs/context.html
 */ var PerformanceLoggerContext = /*#__PURE__*/ _react.createContext(_GlobalPerformanceLogger.default);
if (false) {}
function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;


}),
52712: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Dimensions = (__webpack_require__(6482)/* ["default"] */["default"]);
/**
 * PixelRatio class gives access to the device pixel density.
 *
 * ## Fetching a correctly sized image
 *
 * You should get a higher resolution image if you are on a high pixel density
 * device. A good rule of thumb is to multiply the size of the image you display
 * by the pixel ratio.
 *
 * ```
 * var image = getImage({
 *   width: PixelRatio.getPixelSizeForLayoutSize(200),
 *   height: PixelRatio.getPixelSizeForLayoutSize(100),
 * });
 * <Image source={image} style={{width: 200, height: 100}} />
 * ```
 *
 * ## Pixel grid snapping
 *
 * In iOS, you can specify positions and dimensions for elements with arbitrary
 * precision, for example 29.674825. But, ultimately the physical display only
 * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
 * for iPhone 6. iOS tries to be as faithful as possible to the user value by
 * spreading one original pixel into multiple ones to trick the eye. The
 * downside of this technique is that it makes the resulting element look
 * blurry.
 *
 * In practice, we found out that developers do not want this feature and they
 * have to work around it by doing manual rounding in order to avoid having
 * blurry elements. In React Native, we are rounding all the pixels
 * automatically.
 *
 * We have to be careful when to do this rounding. You never want to work with
 * rounded and unrounded values at the same time as you're going to accumulate
 * rounding errors. Having even one rounding error is deadly because a one
 * pixel border may vanish or be twice as big.
 *
 * In React Native, everything in JavaScript and within the layout engine works
 * with arbitrary precision numbers. It's only when we set the position and
 * dimensions of the native element on the main thread that we round. Also,
 * rounding is done relative to the root rather than the parent, again to avoid
 * accumulating rounding errors.
 *
 */ var PixelRatio = /*#__PURE__*/ function() {
    function PixelRatio() {
        _class_call_check._(this, PixelRatio);
    }
    _create_class._(PixelRatio, null, [
        {
            key: "get",
            value: /**
   * Returns the device pixel density. Some examples:
   *
   *   - PixelRatio.get() === 1
   *     - mdpi Android devices (160 dpi)
   *   - PixelRatio.get() === 1.5
   *     - hdpi Android devices (240 dpi)
   *   - PixelRatio.get() === 2
   *     - iPhone 4, 4S
   *     - iPhone 5, 5c, 5s
   *     - iPhone 6
   *     - iPhone 7
   *     - iPhone 8
   *     - iPhone SE
   *     - xhdpi Android devices (320 dpi)
   *   - PixelRatio.get() === 3
   *     - iPhone 6 Plus
   *     - iPhone 7 Plus
   *     - iPhone 8 Plus
   *     - iPhone X
   *     - xxhdpi Android devices (480 dpi)
   *   - PixelRatio.get() === 3.5
   *     - Nexus 6
   */ function get() {
                return Dimensions.get('window').scale;
            }
        },
        {
            key: "getFontScale",
            value: /**
   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
   * absolute font size, so any elements that heavily depend on that should use this to do
   * calculations.
   *
   * If a font scale is not set, this returns the device pixel ratio.
   *
   * This reflects the user preference set in:
   *  - Settings > Display > Font size on Android,
   *  - Settings > Display & Brightness > Text Size on iOS.
   */ function getFontScale() {
                return Dimensions.get('window').fontScale || PixelRatio.get();
            }
        },
        {
            key: "getPixelSizeForLayoutSize",
            value: /**
   * Converts a layout size (dp) to pixel size (px).
   *
   * Guaranteed to return an integer number.
   */ function getPixelSizeForLayoutSize(layoutSize) {
                return Math.round(layoutSize * PixelRatio.get());
            }
        },
        {
            key: "roundToNearestPixel",
            value: /**
   * Rounds a layout size (dp) to the nearest layout size that corresponds to
   * an integer number of pixels. For example, on a device with a PixelRatio
   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
   * exactly (8.33 * 3) = 25 pixels.
   */ function roundToNearestPixel(layoutSize) {
                var ratio = PixelRatio.get();
                return Math.round(layoutSize * ratio) / ratio;
            }
        },
        {
            key: "startDetecting",
            value: // No-op for iOS, but used on the web. Should not be documented.
            function startDetecting() {}
        }
    ]);
    return PixelRatio;
}();
var _default = PixelRatio;


}),
73335: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativePlatformConstantsAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63048));
var Platform = {
    __constants: null,
    OS: 'android',
    // $FlowFixMe[unsafe-getters-setters]
    get Version () {
        // $FlowFixMe[object-this-reference]
        return this.constants.Version;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get constants () {
        // $FlowFixMe[object-this-reference]
        if (this.__constants == null) {
            // $FlowFixMe[object-this-reference]
            this.__constants = _NativePlatformConstantsAndroid.default.getConstants();
        }
        // $FlowFixMe[object-this-reference]
        return this.__constants;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTesting () {
        if (false) {}
        return false;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isDisableAnimations () {
        // $FlowFixMe[object-this-reference]
        return this.constants.isDisableAnimations ?? this.isTesting;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTV () {
        // $FlowFixMe[object-this-reference]
        return this.constants.uiMode === 'tv';
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isVision () {
        return false;
    },
    select: (spec)=>'android' in spec ? spec.android : 'native' in spec ? spec.native : spec.default
};
var _default = Platform;


}),
23223: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    polyfillGlobal: function() {
        return polyfillGlobal;
    },
    polyfillObjectProperty: function() {
        return polyfillObjectProperty;
    }
});
var defineLazyObjectProperty = (__webpack_require__(53077)/* ["default"] */["default"]);
function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    if (false) { var backupName }
    var _ref = descriptor || {}, enumerable = _ref.enumerable, writable = _ref.writable, _ref_configurable = _ref.configurable, configurable = _ref_configurable === void 0 ? false : _ref_configurable;
    if (descriptor && !configurable) {
        console.error('Failed to set polyfill. ' + name + ' is not configurable.');
        return;
    }
    defineLazyObjectProperty(object, name, {
        get: getValue,
        enumerable: enumerable !== false,
        writable: writable !== false
    });
}
function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(__webpack_require__.g, name, getValue);
}


}),
86053: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _to_consumable_array = __webpack_require__(92716);
var invariant = __webpack_require__(56481);
var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
    // level one of log, info, warn, error, mustfix
    logIfNoNativeHook (level, ...args) {
        // We already printed in the native console, so only log here if using a js debugger
        if (typeof __webpack_require__.g.nativeLoggingHook === 'undefined') {
            var _RCTLog;
            (_RCTLog = RCTLog).logToConsole.apply(_RCTLog, [
                level
            ].concat(_to_consumable_array._(args)));
        } else {
            // Report native warnings to LogBox
            if (warningHandler && level === 'warn') {
                warningHandler.apply(void 0, _to_consumable_array._(args));
            }
        }
    },
    // Log to console regardless of nativeLoggingHook
    logToConsole (level, ...args) {
        var _console;
        // $FlowFixMe[invalid-computed-prop]
        var logFn = levelsMap[level];
        invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
        (_console = console)[logFn].apply(_console, _to_consumable_array._(args));
    },
    setWarningHandler (handler) {
        warningHandler = handler;
    }
};
var _default = RCTLog;


}),
17858: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _listeners = [];
var _activeScene = {
    name: 'default'
};
var SceneTracker = {
    setActiveScene (scene) {
        _activeScene = scene;
        _listeners.forEach((listener)=>listener(_activeScene));
    },
    getActiveScene () {
        return _activeScene;
    },
    addActiveSceneChangedListener (callback) {
        _listeners.push(callback);
        return {
            remove: ()=>{
                _listeners = _listeners.filter((listener)=>callback !== listener);
            }
        };
    }
};
var _default = SceneTracker;


}),
74259: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var base64 = __webpack_require__(25608);
function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
        // $FlowFixMe[reassign-const]
        data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
        throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var buffer = data.buffer, byteOffset = data.byteOffset, byteLength = data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}
var _default = binaryToBase64;


}),
21852: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dispatchCommand = (__webpack_require__(46513)/* .dispatchCommand */.dispatchCommand);
function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach((command)=>{
        // $FlowFixMe[missing-local-annot]
        commandObj[command] = (ref, ...args)=>{
            // $FlowFixMe[incompatible-call]
            dispatchCommand(ref, command, args);
        };
    });
    return commandObj;
}
var _default = codegenNativeCommands;


}),
41268: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // Re-exporting for backwards compatibility with all the clients that
    // may still import it from this module.
    /**
 * This function creates performance loggers that can be used to collect and log
 * various performance data such as timespans, points and extras.
 * The loggers need to have minimal overhead since they're used in production.
 */ default: function() {
        return createPerformanceLogger;
    },
    getCurrentTimestamp: function() {
        return getCurrentTimestamp;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63649));
var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;
var getCurrentTimestamp = __webpack_require__.g.nativeQPLTimestamp ?? (()=>__webpack_require__.g.performance.now());
var PerformanceLogger = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceLogger() {
        _class_call_check._(this, PerformanceLogger);
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
    }
    _create_class._(PerformanceLogger, [
        {
            key: "addTimespan",
            value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._timespans[key] = {
                    startTime,
                    endTime,
                    totalTime: endTime - (startTime || 0),
                    startExtras,
                    endExtras
                };
            }
        },
        {
            key: "append",
            value: function append(performanceLogger) {
                this._timespans = _object_spread._({}, performanceLogger.getTimespans(), this._timespans);
                this._extras = _object_spread._({}, performanceLogger.getExtras(), this._extras);
                this._points = _object_spread._({}, performanceLogger.getPoints(), this._points);
                this._pointExtras = _object_spread._({}, performanceLogger.getPointExtras(), this._pointExtras);
            }
        },
        {
            key: "clear",
            value: function clear() {
                this._timespans = {};
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clear');
                }
            }
        },
        {
            key: "clearCompleted",
            value: function clearCompleted() {
                for(var key in this._timespans){
                    var _this__timespans_key;
                    if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                        delete this._timespans[key];
                    }
                }
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
                }
            }
        },
        {
            key: "close",
            value: function close() {
                this._closed = true;
            }
        },
        {
            key: "currentTimestamp",
            value: function currentTimestamp() {
                return getCurrentTimestamp();
            }
        },
        {
            key: "getExtras",
            value: function getExtras() {
                return this._extras;
            }
        },
        {
            key: "getPoints",
            value: function getPoints() {
                return this._points;
            }
        },
        {
            key: "getPointExtras",
            value: function getPointExtras() {
                return this._pointExtras;
            }
        },
        {
            key: "getTimespans",
            value: function getTimespans() {
                return this._timespans;
            }
        },
        {
            key: "hasTimespan",
            value: function hasTimespan(key) {
                return !!this._timespans[key];
            }
        },
        {
            key: "isClosed",
            value: function isClosed() {
                return this._closed;
            }
        },
        {
            key: "logEverything",
            value: function logEverything() {
                if (PRINT_TO_CONSOLE) {
                    // log timespans
                    for(var key in this._timespans){
                        var _this__timespans_key;
                        if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                            (0, _infoLog.default)(key + ': ' + this._timespans[key].totalTime + 'ms');
                        }
                    }
                    // log extras
                    (0, _infoLog.default)(this._extras);
                    // log points
                    for(var key1 in this._points){
                        if (this._points[key1] != null) {
                            (0, _infoLog.default)(key1 + ': ' + this._points[key1] + 'ms');
                        }
                    }
                }
            }
        },
        {
            key: "markPoint",
            value: function markPoint(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._points[key] != null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._points[key] = timestamp;
                if (extras) {
                    this._pointExtras[key] = extras;
                }
            }
        },
        {
            key: "removeExtra",
            value: function removeExtra(key) {
                var value = this._extras[key];
                delete this._extras[key];
                return value;
            }
        },
        {
            key: "setExtra",
            value: function setExtra(key, value) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._extras.hasOwnProperty(key)) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._extras[key] = value;
            }
        },
        {
            key: "startTimespan",
            value: function startTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._timespans[key] = {
                    startTime: timestamp,
                    startExtras: extras
                };
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
                }
            }
        },
        {
            key: "stopTimespan",
            value: function stopTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                var timespan = this._timespans[key];
                if (!timespan || timespan.startTime == null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (timespan.endTime != null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                timespan.endExtras = extras;
                timespan.endTime = timestamp;
                timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
                }
            }
        }
    ]);
    return PerformanceLogger;
}();
function createPerformanceLogger() {
    return new PerformanceLogger();
}


}),
14702: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/**
 * If your application is accepting different values for the same field over
 * time and is doing a diff on them, you can either (1) create a copy or
 * (2) ensure that those values are not mutated behind two passes.
 * This function helps you with (2) by freezing the object and throwing if
 * the user subsequently modifies the value.
 *
 * There are two caveats with this function:
 *   - If the call site is not in strict mode, it will only throw when
 *     mutating existing fields, adding a new one
 *     will unfortunately fail silently :(
 *   - If the object is already frozen or sealed, it will not continue the
 *     deep traversal and will leave leaf nodes unfrozen.
 *
 * Freezing the object and adding the throw mechanism is expensive and will
 * only be used in DEV.
 */ function deepFreezeAndThrowOnMutationInDev(object) {
    if (false) { var hasOwnProperty, key, keys, i1, key1, i }
    return object;
}
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}
function identity(value) {
    return value;
}
var _default = deepFreezeAndThrowOnMutationInDev;


}),
53077: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/**
 * Defines a lazily evaluated property on the supplied `object`.
 */ function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;
    function getValue() {
        // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls
        // `setValue` which calls `Object.defineProperty` which somehow triggers
        // `getValue` again. Adding `valueSet` breaks this loop.
        if (!valueSet) {
            // Calling `get()` here can trigger an infinite loop if it fails to
            // remove the getter on the property, which can happen when executing
            // JS in a V8 context.  `valueSet = true` will break this loop, and
            // sets the value of the property to undefined, until the code in `get()`
            // finishes, at which point the property is set to the correct value.
            valueSet = true;
            setValue(get());
        }
        return value;
    }
    function setValue(newValue) {
        value = newValue;
        valueSet = true;
        Object.defineProperty(object, name, {
            value: newValue,
            configurable: true,
            enumerable,
            writable
        });
    }
    Object.defineProperty(object, name, {
        get: getValue,
        set: setValue,
        configurable: true,
        enumerable
    });
}
var _default = defineLazyObjectProperty;


}),
5914: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var logListeners;
function unstable_setLogListeners(listeners) {
    logListeners = listeners;
}
/*
 * @returns {bool} true if different, false if equal
 */ function deepDiffer(one, two, ref, maybeOptions) {
    var maxDepthOrOptions = ref === void 0 ? -1 : ref;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
        return true;
    }
    if (one === two) {
        // Short circuit on identical object references instead of traversing them.
        return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
        // We consider all functions equal unless explicitly configured otherwise
        var unsafelyIgnoreFunctions = options === null || options === void 0 ? void 0 : options.unsafelyIgnoreFunctions;
        if (unsafelyIgnoreFunctions == null) {
            if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
                logListeners.onDifferentFunctionsIgnored(one.name, two.name);
            }
            unsafelyIgnoreFunctions = true;
        }
        return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
        // Primitives can be directly compared
        return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
        // We know they are different because the previous case would have triggered
        // otherwise.
        return true;
    }
    if (one.constructor !== two.constructor) {
        return true;
    }
    if (Array.isArray(one)) {
        // We know two is also an array because the constructors are equal
        var len = one.length;
        if (two.length !== len) {
            return true;
        }
        for(var ii = 0; ii < len; ii++){
            if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
                return true;
            }
        }
    } else {
        for(var key in one){
            if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
                return true;
            }
        }
        for(var twoKey in two){
            // The only case we haven't checked yet is keys that are in two but aren't
            // in one, which means they are different.
            if (one[twoKey] === undefined && two[twoKey] !== undefined) {
                return true;
            }
        }
    }
    return false;
}
deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
var _default = deepDiffer;


}),
14691: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
};
function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
}
var _default = insetsDiffer;


}),
96940: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/**
 * Unrolls an array comparison specially for matrices. Prioritizes
 * checking of indices that are most likely to change so that the comparison
 * bails as early as possible.
 *
 * @param {MatrixMath.Matrix} one First matrix.
 * @param {MatrixMath.Matrix} two Second matrix.
 * @return {boolean} Whether or not the two matrices differ.
 */ function matricesDiffer(one, two) {
    if (one === two) {
        return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
}
var _default = matricesDiffer;


}),
60882: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dummyPoint = {
    x: undefined,
    y: undefined
};
function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
}
var _default = pointsDiffer;


}),
24395: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dummySize = {
    width: undefined,
    height: undefined
};
function sizesDiffer(one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
}
var _default = sizesDiffer;


}),
45215: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ // This function dismisses the currently-open keyboard, if any.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var TextInputState = (__webpack_require__(7273)/* ["default"] */["default"]);
function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
}
var _default = dismissKeyboard;


}),
63649: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _to_consumable_array = __webpack_require__(92716);
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog(...args) {
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array._(args));
}
var _default = infoLog;


}),
92071: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
/**
 * Small utility that can be used as an error handler. You cannot just pass
 * `console.error` as a failure callback - it's not properly bound.  If passes an
 * `Error` object, it will print the message and stack.
 */ var logError = function(...args) {
    if (args.length === 1 && args[0] instanceof Error) {
        var err = args[0];
        console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
        console.error.apply(console, args);
    }
};
var _default = logError;


}),
47264: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createStringifySafeWithLimits: function() {
        return createStringifySafeWithLimits;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
function createStringifySafeWithLimits(limits) {
    var _limits_maxDepth = limits.maxDepth, maxDepth = _limits_maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits_maxDepth, _limits_maxStringLimit = limits.maxStringLimit, maxStringLimit = _limits_maxStringLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxStringLimit, _limits_maxArrayLimit = limits.maxArrayLimit, maxArrayLimit = _limits_maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxArrayLimit, _limits_maxObjectKeysLimit = limits.maxObjectKeysLimit, maxObjectKeysLimit = _limits_maxObjectKeysLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxObjectKeysLimit;
    var stack = [];
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ function replacer(key, value) {
        while(stack.length && this !== stack[0]){
            stack.shift();
        }
        if (typeof value === 'string') {
            var truncatedString = '...(truncated)...';
            if (value.length > maxStringLimit + truncatedString.length) {
                return value.substring(0, maxStringLimit) + truncatedString;
            }
            return value;
        }
        if (typeof value !== 'object' || value === null) {
            return value;
        }
        var retval = value;
        if (Array.isArray(value)) {
            if (stack.length >= maxDepth) {
                retval = `[ ... array with ${value.length} values ... ]`;
            } else if (value.length > maxArrayLimit) {
                retval = value.slice(0, maxArrayLimit).concat([
                    `... extra ${value.length - maxArrayLimit} values truncated ...`
                ]);
            }
        } else {
            // Add refinement after Array.isArray call.
            (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
            var keys = Object.keys(value);
            if (stack.length >= maxDepth) {
                retval = `{ ... object with ${keys.length} keys ... }`;
            } else if (keys.length > maxObjectKeysLimit) {
                // Return a sample of the keys.
                retval = {};
                for (var k of keys.slice(0, maxObjectKeysLimit)){
                    retval[k] = value[k];
                }
                var truncatedKey = '...(truncated keys)...';
                retval[truncatedKey] = keys.length - maxObjectKeysLimit;
            }
        }
        stack.unshift(retval);
        return retval;
    }
    return function stringifySafe(arg) {
        if (arg === undefined) {
            return 'undefined';
        } else if (arg === null) {
            return 'null';
        } else if (typeof arg === 'function') {
            try {
                return arg.toString();
            } catch (e) {
                return '[function unknown]';
            }
        } else if (arg instanceof Error) {
            return arg.name + ': ' + arg.message;
        } else {
            // Perform a try catch, just in case the object has a circular
            // reference or stringify throws for some other reason.
            try {
                var ret = JSON.stringify(arg, replacer);
                if (ret === undefined) {
                    return '["' + typeof arg + '" failed to stringify]';
                }
                return ret;
            } catch (e) {
                if (typeof arg.toString === 'function') {
                    try {
                        // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.
                        return arg.toString();
                    } catch (E) {}
                }
            }
        }
        return '["' + typeof arg + '" failed to stringify]';
    };
}
var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
});
var _default = stringifySafe;


}),
17466: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useColorScheme;
    }
}));
var _Appearance = __webpack_require__(52299);
var _react = __webpack_require__(4931);
var subscribe = (onStoreChange)=>{
    var appearanceSubscription = (0, _Appearance.addChangeListener)(onStoreChange);
    return ()=>appearanceSubscription.remove();
};
function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.getColorScheme);
}


}),
49143: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useMergeRefs;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _to_consumable_array = __webpack_require__(92716);
var _useRefEffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4594));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(4931));
function useMergeRefs(...refs) {
    var refEffect = (0, _react.useCallback)((current)=>{
        var cleanups = refs.map((ref)=>{
            if (ref == null) {
                return undefined;
            } else {
                if (typeof ref === 'function') {
                    // $FlowIssue[incompatible-type] - Flow does not understand ref cleanup.
                    var cleanup = ref(current);
                    return typeof cleanup === 'function' ? cleanup : ()=>{
                        ref(null);
                    };
                } else {
                    ref.current = current;
                    return ()=>{
                        ref.current = null;
                    };
                }
            }
        });
        return ()=>{
            for (var cleanup of cleanups){
                cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            }
        };
    }, _to_consumable_array._(refs));
    return (0, _useRefEffect.default)(refEffect);
}


}),
4594: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useRefEffect;
    }
}));
var _react = __webpack_require__(4931);
function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)((instance)=>{
        if (cleanupRef.current) {
            cleanupRef.current();
            cleanupRef.current = undefined;
        }
        if (instance != null) {
            cleanupRef.current = effect(instance);
        }
    }, [
        effect
    ]);
}


}),
70420: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useWindowDimensions;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _Dimensions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6482));
var _react = __webpack_require__(4931);
function useWindowDimensions() {
    var _useState = _sliced_to_array._((0, _react.useState)(()=>_Dimensions.default.get('window')), 2), dimensions = _useState[0], setDimensions = _useState[1];
    (0, _react.useEffect)(()=>{
        function handleChange(ref) {
            var window = ref.window;
            if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
                setDimensions(window);
            }
        }
        var subscription = _Dimensions.default.addEventListener('change', handleChange);
        // We might have missed an update between calling `get` in render and
        // `addEventListener` in this handler, so we set it here. If there was
        // no change, React will filter out this update as a no-op.
        handleChange({
            window: _Dimensions.default.get('window')
        });
        return ()=>{
            subscription.remove();
        };
    }, [
        dimensions
    ]);
    return dimensions;
}


}),
93473: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var warnedKeys = {};
/**
 * A simple function that prints a warning message once per session.
 *
 * @param {string} key - The key used to ensure the message is printed once.
 *                       This should be unique to the callsite.
 * @param {string} message - The message to print
 */ function warnOnce(key, message) {
    if (warnedKeys[key]) {
        return;
    }
    console.warn(message);
    warnedKeys[key] = true;
}
var _default = warnOnce;


}),
99982: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 * @jsdoc
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeVibration = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90069));
var Platform = (__webpack_require__(73335)/* ["default"] */["default"]);
/**
 * Vibration API
 *
 * See https://reactnative.dev/docs/vibration
 */ var _vibrating = false;
var _id = 0; // _id is necessary to prevent race condition.
var _default_vibration_length = 400;
function vibrateByPattern(pattern, ref) {
    var repeat = ref === void 0 ? false : ref;
    if (_vibrating) {
        return;
    }
    _vibrating = true;
    if (pattern[0] === 0) {
        _NativeVibration.default.vibrate(_default_vibration_length);
        // $FlowFixMe[reassign-const]
        pattern = pattern.slice(1);
    }
    if (pattern.length === 0) {
        _vibrating = false;
        return;
    }
    setTimeout(()=>vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);
}
function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
        return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
        if (repeat) {
            // $FlowFixMe[reassign-const]
            nextIndex = 0;
        } else {
            _vibrating = false;
            return;
        }
    }
    setTimeout(()=>vibrateScheduler(id, pattern, repeat, nextIndex + 1), pattern[nextIndex]);
}
var Vibration = {
    /**
   * Trigger a vibration with specified `pattern`.
   *
   * See https://reactnative.dev/docs/vibration#vibrate
   */ vibrate: function(ref, ref1) {
        var pattern = ref === void 0 ? _default_vibration_length : ref, repeat = ref1 === void 0 ? false : ref1;
        if (Platform.OS === 'android') {
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        } else {
            if (_vibrating) {
                return;
            }
            if (typeof pattern === 'number') {
                _NativeVibration.default.vibrate(pattern);
            } else if (Array.isArray(pattern)) {
                vibrateByPattern(pattern, repeat);
            } else {
                throw new Error('Vibration pattern should be a number or array');
            }
        }
    },
    /**
   * Stop vibration
   *
   * See https://reactnative.dev/docs/vibration#cancel
   */ cancel: function() {
        if (Platform.OS === 'ios') {
            _vibrating = false;
        } else {
            _NativeVibration.default.cancel();
        }
    }
};
var _default = Vibration;


}),
9188: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Use a global instead of a flag from ReactNativeFeatureFlags because this will
// be read before apps have a chance to set overrides.
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _global_RN$useBuiltInEventTarget, _global;
var useBuiltInEventTarget = (_global_RN$useBuiltInEventTarget = (_global = __webpack_require__.g).RN$useBuiltInEventTarget) === null || _global_RN$useBuiltInEventTarget === void 0 ? void 0 : _global_RN$useBuiltInEventTarget.call(_global);
var _default = useBuiltInEventTarget ? (__webpack_require__(51033)/* ["default"] */["default"]) : (__webpack_require__(7232)/* ["default"] */["default"]);


}),
77233: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
/**
 * Event object passed to the `onopen`, `onclose`, `onmessage`, `onerror`
 * callbacks of `WebSocket`.
 *
 * The `type` property is "open", "close", "message", "error" respectively.
 *
 * In case of "message", the `data` property contains the incoming data.
 */ var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _class_call_check._(this, WebSocketEvent);
    this.type = type.toString();
    Object.assign(this, eventInitDict);
};
var _default = WebSocketEvent;


}),
51033: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_without_properties = __webpack_require__(86136);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var _EventHandlerAttributes = __webpack_require__(85950);
var _EventTarget = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12020));
var _MessageEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84095));
var _CloseEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7795));
var _Blob = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56540));
var _BlobManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28586));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _binaryToBase64 = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74259));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10967));
var _base64js = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25608));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;
var CLOSE_NORMAL = 1000;
// Abnormal closure where no code is provided in a control frame
// https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5
var CLOSE_ABNORMAL = 1006;
var nextWebSocketId = 0;
/**
 * Browser-compatible WebSockets implementation.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 * See https://github.com/websockets/ws
 */ var WebSocket = /*#__PURE__*/ function(EventTarget) {
    "use strict";
    _inherits._(WebSocket, EventTarget);
    function WebSocket(url, protocols, options) {
        _class_call_check._(this, WebSocket);
        var _this;
        _this = _call_super._(this, WebSocket), _this.CONNECTING = CONNECTING, _this.OPEN = OPEN, _this.CLOSING = CLOSING, _this.CLOSED = CLOSED, _this.readyState = CONNECTING;
        _this.url = url;
        if (typeof protocols === 'string') {
            protocols = [
                protocols
            ];
        }
        var _ref = options || {}, _ref_headers = _ref.headers, headers = _ref_headers === void 0 ? {} : _ref_headers, unrecognized = _object_without_properties._(_ref, [
            "headers"
        ]);
        // Preserve deprecated backwards compatibility for the 'origin' option
        // $FlowFixMe[prop-missing]
        if (unrecognized && typeof unrecognized.origin === 'string') {
            console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ headers.origin = unrecognized.origin;
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ delete unrecognized.origin;
        }
        // Warn about and discard anything else
        if (Object.keys(unrecognized).length > 0) {
            console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
        }
        if (!Array.isArray(protocols)) {
            protocols = null;
        }
        _this._eventEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
        _this._socketId = nextWebSocketId++;
        _this._registerEvents();
        _NativeWebSocketModule.default.connect(url, protocols, {
            headers
        }, _this._socketId);
        return _this;
    }
    _create_class._(WebSocket, [
        {
            key: "binaryType",
            get: function() {
                return this._binaryType;
            },
            set: function(binaryType) {
                if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
                    throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
                }
                if (this._binaryType === 'blob' || binaryType === 'blob') {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    if (binaryType === 'blob') {
                        _BlobManager.default.addWebSocketHandler(this._socketId);
                    } else {
                        _BlobManager.default.removeWebSocketHandler(this._socketId);
                    }
                }
                this._binaryType = binaryType;
            }
        },
        {
            key: "close",
            value: function close(code, reason) {
                if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
                    return;
                }
                this.readyState = this.CLOSING;
                this._close(code, reason);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                if (data instanceof _Blob.default) {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    _BlobManager.default.sendOverSocket(data, this._socketId);
                    return;
                }
                if (typeof data === 'string') {
                    _NativeWebSocketModule.default.send(data, this._socketId);
                    return;
                }
                if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
                    _NativeWebSocketModule.default.sendBinary((0, _binaryToBase64.default)(data), this._socketId);
                    return;
                }
                throw new Error('Unsupported data type');
            }
        },
        {
            key: "ping",
            value: function ping() {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                _NativeWebSocketModule.default.ping(this._socketId);
            }
        },
        {
            key: "_close",
            value: function _close(code, reason) {
                // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
                var closeReason = typeof reason === 'string' ? reason : '';
                _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
                if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
                    _BlobManager.default.removeWebSocketHandler(this._socketId);
                }
            }
        },
        {
            key: "_unregisterEvents",
            value: function _unregisterEvents() {
                this._subscriptions.forEach((e)=>e.remove());
                this._subscriptions = [];
            }
        },
        {
            key: "_registerEvents",
            value: function _registerEvents() {
                this._subscriptions = [
                    this._eventEmitter.addListener('websocketMessage', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        var data = ev.data;
                        switch(ev.type){
                            case 'binary':
                                data = _base64js.default.toByteArray(ev.data).buffer;
                                break;
                            case 'blob':
                                data = _BlobManager.default.createFromOptions(ev.data);
                                break;
                        }
                        this.dispatchEvent(new _MessageEvent.default('message', {
                            data
                        }));
                    }),
                    this._eventEmitter.addListener('websocketOpen', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.OPEN;
                        this.protocol = ev.protocol;
                        this.dispatchEvent(new _Event.default('open'));
                    }),
                    this._eventEmitter.addListener('websocketClosed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _CloseEvent.default('close', {
                            code: ev.code,
                            reason: ev.reason
                        }));
                        this._unregisterEvents();
                        this.close();
                    }),
                    this._eventEmitter.addListener('websocketFailed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _Event.default('error'));
                        this.dispatchEvent(new _CloseEvent.default('close', {
                            code: CLOSE_ABNORMAL,
                            reason: ev.message
                        }));
                        this._unregisterEvents();
                        this.close();
                    })
                ];
            }
        },
        {
            key: "onclose",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'close');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'close', listener);
            }
        },
        {
            key: "onerror",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
            }
        },
        {
            key: "onmessage",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'message');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'message', listener);
            }
        },
        {
            key: "onopen",
            get: function() {
                return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'open');
            },
            set: function(listener) {
                (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'open', listener);
            }
        }
    ]);
    return WebSocket;
}(_wrap_native_super._(_EventTarget.default));
WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
var _default = WebSocket;


}),
7232: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _Blob = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56540));
var _BlobManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28586));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _binaryToBase64 = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74259));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10967));
var _WebSocketEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(77233));
var _base64js = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25608));
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;
var CLOSE_NORMAL = 1000;
// Abnormal closure where no code is provided in a control frame
// https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5
var CLOSE_ABNORMAL = 1006;
var WEBSOCKET_EVENTS = [
    'close',
    'error',
    'message',
    'open'
];
var nextWebSocketId = 0;
/**
 * Browser-compatible WebSockets implementation.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 * See https://github.com/websockets/ws
 */ var WebSocket = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(WebSocket, _EventTarget);
    function WebSocket(url, protocols, options) {
        _class_call_check._(this, WebSocket);
        var _this;
        _this = _call_super._(this, WebSocket), _this.CONNECTING = CONNECTING, _this.OPEN = OPEN, _this.CLOSING = CLOSING, _this.CLOSED = CLOSED, _this.readyState = CONNECTING;
        _this.url = url;
        if (typeof protocols === 'string') {
            protocols = [
                protocols
            ];
        }
        var _ref = options || {}, _ref_headers = _ref.headers, headers = _ref_headers === void 0 ? {} : _ref_headers, unrecognized = _object_without_properties._(_ref, [
            "headers"
        ]);
        // Preserve deprecated backwards compatibility for the 'origin' option
        // $FlowFixMe[prop-missing]
        if (unrecognized && typeof unrecognized.origin === 'string') {
            console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ headers.origin = unrecognized.origin;
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ delete unrecognized.origin;
        }
        // Warn about and discard anything else
        if (Object.keys(unrecognized).length > 0) {
            console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
        }
        if (!Array.isArray(protocols)) {
            protocols = null;
        }
        _this._eventEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
        _this._socketId = nextWebSocketId++;
        _this._registerEvents();
        _NativeWebSocketModule.default.connect(url, protocols, {
            headers
        }, _this._socketId);
        return _this;
    }
    _create_class._(WebSocket, [
        {
            key: "binaryType",
            get: function() {
                return this._binaryType;
            },
            set: function(binaryType) {
                if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
                    throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
                }
                if (this._binaryType === 'blob' || binaryType === 'blob') {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    if (binaryType === 'blob') {
                        _BlobManager.default.addWebSocketHandler(this._socketId);
                    } else {
                        _BlobManager.default.removeWebSocketHandler(this._socketId);
                    }
                }
                this._binaryType = binaryType;
            }
        },
        {
            key: "close",
            value: function close(code, reason) {
                if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
                    return;
                }
                this.readyState = this.CLOSING;
                this._close(code, reason);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                if (data instanceof _Blob.default) {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    _BlobManager.default.sendOverSocket(data, this._socketId);
                    return;
                }
                if (typeof data === 'string') {
                    _NativeWebSocketModule.default.send(data, this._socketId);
                    return;
                }
                if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
                    _NativeWebSocketModule.default.sendBinary((0, _binaryToBase64.default)(data), this._socketId);
                    return;
                }
                throw new Error('Unsupported data type');
            }
        },
        {
            key: "ping",
            value: function ping() {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                _NativeWebSocketModule.default.ping(this._socketId);
            }
        },
        {
            key: "_close",
            value: function _close(code, reason) {
                // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
                var closeReason = typeof reason === 'string' ? reason : '';
                _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
                if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
                    _BlobManager.default.removeWebSocketHandler(this._socketId);
                }
            }
        },
        {
            key: "_unregisterEvents",
            value: function _unregisterEvents() {
                this._subscriptions.forEach((e)=>e.remove());
                this._subscriptions = [];
            }
        },
        {
            key: "_registerEvents",
            value: function _registerEvents() {
                this._subscriptions = [
                    this._eventEmitter.addListener('websocketMessage', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        var data = ev.data;
                        switch(ev.type){
                            case 'binary':
                                data = _base64js.default.toByteArray(ev.data).buffer;
                                break;
                            case 'blob':
                                data = _BlobManager.default.createFromOptions(ev.data);
                                break;
                        }
                        this.dispatchEvent(new _WebSocketEvent.default('message', {
                            data
                        }));
                    }),
                    this._eventEmitter.addListener('websocketOpen', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.OPEN;
                        this.protocol = ev.protocol;
                        this.dispatchEvent(new _WebSocketEvent.default('open'));
                    }),
                    this._eventEmitter.addListener('websocketClosed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _WebSocketEvent.default('close', {
                            code: ev.code,
                            reason: ev.reason
                        }));
                        this._unregisterEvents();
                        this.close();
                    }),
                    this._eventEmitter.addListener('websocketFailed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _WebSocketEvent.default('error', {
                            message: ev.message
                        }));
                        this.dispatchEvent(new _WebSocketEvent.default('close', {
                            code: CLOSE_ABNORMAL,
                            reason: ev.message
                        }));
                        this._unregisterEvents();
                        this.close();
                    })
                ];
            }
        }
    ]);
    return WebSocket;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(WEBSOCKET_EVENTS)));
WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
var _default = WebSocket;


}),
78549: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * The particular require runtime that we are using looks for a global
 * `ErrorUtils` object and if it exists, then it requires modules with the
 * error handler specified via ErrorUtils.setGlobalHandler by calling the
 * require function with applyWithGuard. Since the require module is loaded
 * before any of the modules, this ErrorUtils must be defined (and the handler
 * set) globally before requiring anything.
 *
 * However, we still want to treat ErrorUtils as a module so that other modules
 * that use it aren't just using a global variable, so simply export the global
 * variable here. ErrorUtils is originally defined in a file named error-guard.js.
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _default = __webpack_require__.g.ErrorUtils;


}),
47006: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ // $FlowFixMe[unclear-type] unclear type of events
/**
 * EventEmitter manages listeners and publishes events to them.
 *
 * EventEmitter accepts a single type parameter that defines the valid events
 * and associated listener argument(s).
 *
 * @example
 *
 *   const emitter = new EventEmitter<{
 *     success: [number, string],
 *     error: [Error],
 *   }>();
 *
 *   emitter.on('success', (statusCode, responseText) => {...});
 *   emitter.emit('success', 200, '...');
 *
 *   emitter.on('error', error => {...});
 *   emitter.emit('error', new Error('Resource not found'));
 *
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventEmitter;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var // $FlowFixMe[incompatible-type]
_registry = /*#__PURE__*/ _class_private_field_loose_key._("_registry");
var EventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function EventEmitter() {
        _class_call_check._(this, EventEmitter);
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _registry)[_registry] = {};
    }
    _create_class._(EventEmitter, [
        {
            /**
   * Registers a listener that is called when the supplied event is emitted.
   * Returns a subscription that has a `remove` method to undo registration.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                if (typeof listener !== 'function') {
                    throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
                }
                var registrations = allocate(_class_private_field_loose_base._(this, _registry)[_registry], eventType);
                var registration = {
                    context,
                    listener,
                    remove () {
                        registrations.delete(registration);
                    }
                };
                registrations.add(registration);
                return registration;
            }
        },
        {
            /**
   * Emits the supplied event. Additional arguments supplied to `emit` will be
   * passed through to each of the registered listeners.
   *
   * If a listener modifies the listeners registered for the same event, those
   * changes will not be reflected in the current invocation of `emit`.
   */ key: "emit",
            value: function emit(eventType, ...args) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                if (registrations != null) {
                    // Copy `registrations` to take a snapshot when we invoke `emit`, in case
                    // registrations are added or removed when listeners are invoked.
                    for (var registration of Array.from(registrations)){
                        // $FlowFixMe[incompatible-call]
                        registration.listener.apply(registration.context, args);
                    }
                }
            }
        },
        {
            /**
   * Removes all registered listeners.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                if (eventType == null) {
                    // $FlowFixMe[incompatible-type]
                    _class_private_field_loose_base._(this, _registry)[_registry] = {};
                } else {
                    delete _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                }
            }
        },
        {
            /**
   * Returns the number of registered listeners for the supplied event.
   */ key: "listenerCount",
            value: function listenerCount(eventType) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                return registrations == null ? 0 : registrations.size;
            }
        }
    ]);
    return EventEmitter;
}();
function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
    }
    return registrations;
}


}),
40815: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
/* eslint-disable lint/no-commonjs-exports */ 
'use client';
// ----------------------------------------------------------------------------
// Runtime entry point for react-native.
//
// This module is separate from index.js.flow as it provides a more lenient
// `module.exports` API at runtime, for lazy module loading and backwards
// compatibility.
//
// IMPORTANT: Keep this file in sync with index.js.flow. Test your changes
// whenever updating React Native's public API.
// ----------------------------------------------------------------------------
var warnOnce = (__webpack_require__(93473)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
module.exports = {
    get registerCallableModule () {
        return (__webpack_require__(23882)/* ["default"] */["default"]);
    },
    // #region Components
    get AccessibilityInfo () {
        return (__webpack_require__(26132)/* ["default"] */["default"]);
    },
    get ActivityIndicator () {
        return (__webpack_require__(88058)/* ["default"] */["default"]);
    },
    get Button () {
        return (__webpack_require__(91869)/* ["default"] */["default"]);
    },
    get DrawerLayoutAndroid () {
        return (__webpack_require__(98615)/* ["default"] */["default"]);
    },
    get FlatList () {
        return (__webpack_require__(99130)/* ["default"] */["default"]);
    },
    get Image () {
        return (__webpack_require__(24451)/* ["default"] */["default"]);
    },
    get ImageBackground () {
        return (__webpack_require__(62029)/* ["default"] */["default"]);
    },
    get InputAccessoryView () {
        return (__webpack_require__(57646)/* ["default"] */["default"]);
    },
    get experimental_LayoutConformance () {
        return (__webpack_require__(95714)/* ["default"] */["default"]);
    },
    get KeyboardAvoidingView () {
        return (__webpack_require__(61850)/* ["default"] */["default"]);
    },
    get Modal () {
        return (__webpack_require__(97982)/* ["default"] */["default"]);
    },
    get Pressable () {
        return (__webpack_require__(37443)/* ["default"] */["default"]);
    },
    get ProgressBarAndroid () {
        warnOnce('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-bar-android');
        return (__webpack_require__(19107)/* ["default"] */["default"]);
    },
    get RefreshControl () {
        return (__webpack_require__(88414)/* ["default"] */["default"]);
    },
    get SafeAreaView () {
        return (__webpack_require__(25530)/* ["default"] */["default"]);
    },
    get ScrollView () {
        return (__webpack_require__(27864)/* ["default"] */["default"]);
    },
    get SectionList () {
        return (__webpack_require__(82231)/* ["default"] */["default"]);
    },
    get StatusBar () {
        return (__webpack_require__(22728)/* ["default"] */["default"]);
    },
    get Switch () {
        return (__webpack_require__(6353)/* ["default"] */["default"]);
    },
    get Text () {
        return (__webpack_require__(8893)/* ["default"] */["default"]);
    },
    get TextInput () {
        return (__webpack_require__(92756)/* ["default"] */["default"]);
    },
    get Touchable () {
        return (__webpack_require__(44263)/* ["default"] */["default"]);
    },
    get TouchableHighlight () {
        return (__webpack_require__(89974)/* ["default"] */["default"]);
    },
    get TouchableNativeFeedback () {
        return (__webpack_require__(25741)/* ["default"] */["default"]);
    },
    get TouchableOpacity () {
        return (__webpack_require__(90001)/* ["default"] */["default"]);
    },
    get TouchableWithoutFeedback () {
        return (__webpack_require__(99032)/* ["default"] */["default"]);
    },
    get View () {
        return (__webpack_require__(87847)/* ["default"] */["default"]);
    },
    get VirtualizedList () {
        return (__webpack_require__(54509)/* ["default"] */["default"]);
    },
    get VirtualizedSectionList () {
        return (__webpack_require__(42722)/* ["default"] */["default"]);
    },
    // #endregion
    // #region APIs
    get ActionSheetIOS () {
        return (__webpack_require__(31420)/* ["default"] */["default"]);
    },
    get Alert () {
        return (__webpack_require__(8306)/* ["default"] */["default"]);
    },
    // Include any types exported in the Animated module together with its default export, so
    // you can references types such as Animated.Numeric
    get Animated () {
        return (__webpack_require__(22644)/* ["default"] */["default"]);
    },
    get Appearance () {
        return __webpack_require__(52299);
    },
    get AppRegistry () {
        return (__webpack_require__(80037)/* ["default"] */["default"]);
    },
    get AppState () {
        return (__webpack_require__(2474)/* ["default"] */["default"]);
    },
    get BackHandler () {
        return (__webpack_require__(86833)/* ["default"] */["default"]);
    },
    get Clipboard () {
        warnOnce('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-clipboard/clipboard');
        return (__webpack_require__(8434)/* ["default"] */["default"]);
    },
    get DeviceInfo () {
        return (__webpack_require__(65562)/* ["default"] */["default"]);
    },
    get DevMenu () {
        return (__webpack_require__(72609)/* ["default"] */["default"]);
    },
    get DevSettings () {
        return (__webpack_require__(31371)/* ["default"] */["default"]);
    },
    get Dimensions () {
        return (__webpack_require__(6482)/* ["default"] */["default"]);
    },
    get Easing () {
        return (__webpack_require__(72466)/* ["default"] */["default"]);
    },
    get findNodeHandle () {
        return (__webpack_require__(46513)/* .findNodeHandle */.findNodeHandle);
    },
    get I18nManager () {
        return (__webpack_require__(38722)/* ["default"] */["default"]);
    },
    get InteractionManager () {
        return (__webpack_require__(9990)/* ["default"] */["default"]);
    },
    get Keyboard () {
        return (__webpack_require__(59853)/* ["default"] */["default"]);
    },
    get LayoutAnimation () {
        return (__webpack_require__(22236)/* ["default"] */["default"]);
    },
    get Linking () {
        return (__webpack_require__(66023)/* ["default"] */["default"]);
    },
    get LogBox () {
        return (__webpack_require__(72780)/* ["default"] */["default"]);
    },
    get NativeDialogManagerAndroid () {
        return (__webpack_require__(98207)/* ["default"] */["default"]);
    },
    get NativeEventEmitter () {
        return (__webpack_require__(55438)/* ["default"] */["default"]);
    },
    get Networking () {
        return (__webpack_require__(32478)/* ["default"] */["default"]);
    },
    get PanResponder () {
        return (__webpack_require__(93062)/* ["default"] */["default"]);
    },
    get PermissionsAndroid () {
        return (__webpack_require__(36538)/* ["default"] */["default"]);
    },
    get PixelRatio () {
        return (__webpack_require__(52712)/* ["default"] */["default"]);
    },
    get PushNotificationIOS () {
        warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-push-notification/ios');
        return (__webpack_require__(52037)/* ["default"] */["default"]);
    },
    get Settings () {
        return (__webpack_require__(10140)/* ["default"] */["default"]);
    },
    get Share () {
        return (__webpack_require__(43705)/* ["default"] */["default"]);
    },
    get StyleSheet () {
        return (__webpack_require__(5938)/* ["default"] */["default"]);
    },
    get Systrace () {
        return __webpack_require__(725);
    },
    get ToastAndroid () {
        return (__webpack_require__(43327)/* ["default"] */["default"]);
    },
    get TurboModuleRegistry () {
        return __webpack_require__(76645);
    },
    get UIManager () {
        return (__webpack_require__(74853)/* ["default"] */["default"]);
    },
    get unstable_batchedUpdates () {
        return (__webpack_require__(46513)/* .unstable_batchedUpdates */.unstable_batchedUpdates);
    },
    get useAnimatedValue () {
        return (__webpack_require__(38268)/* ["default"] */["default"]);
    },
    get useColorScheme () {
        return (__webpack_require__(17466)/* ["default"] */["default"]);
    },
    get useWindowDimensions () {
        return (__webpack_require__(70420)/* ["default"] */["default"]);
    },
    get UTFSequence () {
        return (__webpack_require__(89872)/* ["default"] */["default"]);
    },
    get Vibration () {
        return (__webpack_require__(99982)/* ["default"] */["default"]);
    },
    // #endregion
    // #region Plugins
    get DeviceEventEmitter () {
        return (__webpack_require__(75296)/* ["default"] */["default"]);
    },
    get DynamicColorIOS () {
        return (__webpack_require__(40335)/* .DynamicColorIOS */.DynamicColorIOS);
    },
    get NativeAppEventEmitter () {
        return (__webpack_require__(61971)/* ["default"] */["default"]);
    },
    get NativeModules () {
        return (__webpack_require__(40225)/* ["default"] */["default"]);
    },
    get Platform () {
        return (__webpack_require__(73335)/* ["default"] */["default"]);
    },
    get PlatformColor () {
        return (__webpack_require__(49457)/* .PlatformColor */.PlatformColor);
    },
    get processColor () {
        return (__webpack_require__(23865)/* ["default"] */["default"]);
    },
    get requireNativeComponent () {
        return (__webpack_require__(66766)/* ["default"] */["default"]);
    },
    get RootTagContext () {
        return (__webpack_require__(90839)/* .RootTagContext */.RootTagContext);
    }
};
if (false) {}


}),
97382: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return createAnimatedPropsHook;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
var _AnimatedEvent = __webpack_require__(12164);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33994));
var _AnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26820));
var _ReactFabricPublicInstanceUtils = __webpack_require__(76866);
var _useRefEffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4594));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _createAnimatedPropsMemoHook = __webpack_require__(24298);
var _NativeAnimatedHelper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59851));
var _react = __webpack_require__(4931);
function createAnimatedPropsHook(allowlist) {
    var useAnimatedPropsMemo = (0, _createAnimatedPropsMemoHook.createAnimatedPropsMemoHook)(allowlist);
    return function useAnimatedProps(props) {
        var _useReducer = _sliced_to_array._((0, _react.useReducer)((count)=>count + 1, 0), 2), scheduleUpdate = _useReducer[1];
        var onUpdateRef = (0, _react.useRef)(null);
        var timerRef = (0, _react.useRef)(null);
        var node = useAnimatedPropsMemo(()=>new _AnimatedProps.default(props, ()=>{
                var _onUpdateRef_current;
                return (_onUpdateRef_current = onUpdateRef.current) === null || _onUpdateRef_current === void 0 ? void 0 : _onUpdateRef_current.call(onUpdateRef);
            }, allowlist), props);
        var useNativePropsInFabric = _ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
        (0, _react.useEffect)(()=>{
            // If multiple components call `flushQueue`, the first one will flush the
            // queue and subsequent ones will do nothing.
            _NativeAnimatedHelper.default.API.flushQueue();
            var drivenAnimationEndedListener = null;
            if (node.__isNative) {
                drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', (data)=>{
                    node.update();
                });
            }
            return ()=>{
                drivenAnimationEndedListener === null || drivenAnimationEndedListener === void 0 ? void 0 : drivenAnimationEndedListener.remove();
            };
        });
        // NOTE: This feature flag must be evaluated inside the hook because this
        // module factory can be evaluated much sooner, before overrides are set.
        var useAnimatedPropsLifecycle = _ReactNativeFeatureFlags.scheduleAnimatedCleanupInMicrotask() ? useAnimatedPropsLifecycleWithCleanupInMicrotask : useAnimatedPropsLifecycleWithPrevNodeRef;
        useAnimatedPropsLifecycle(node);
        // TODO: This "effect" does three things:
        //
        //   1) Call `setNativeView`.
        //   2) Update `onUpdateRef`.
        //   3) Update listeners for `AnimatedEvent` props.
        //
        // Ideally, each of these would be separate "effects" so that they are not
        // unnecessarily re-run when irrelevant dependencies change. For example, we
        // should be able to hoist all `AnimatedEvent` props and only do #3 if either
        // the `AnimatedEvent` props change or `instance` changes.
        //
        // But there is no way to transparently compose three separate callback refs,
        // so we just combine them all into one for now.
        var refEffect = (0, _react.useCallback)((instance)=>{
            // NOTE: This may be called more often than necessary (e.g. when `props`
            // changes), but `setNativeView` already optimizes for that.
            node.setNativeView(instance);
            // NOTE: When using the JS animation driver, this callback is called on
            // every animation frame. When using the native driver, this callback is
            // called when the animation completes.
            onUpdateRef.current = ()=>{
                if (false) {}
                var isFabricNode = isFabricInstance(instance);
                if (node.__isNative) {
                    // Check 2: this is an animation driven by native.
                    // In native driven animations, this callback is only called once the animation completes.
                    if (isFabricNode) {
                        // Call `scheduleUpdate` to synchronise Fiber and Shadow tree.
                        // Must not be called in Paper.
                        scheduleUpdate();
                    }
                    return;
                }
                if (typeof instance !== 'object' || typeof (instance === null || instance === void 0 ? void 0 : instance.setNativeProps) !== 'function') {
                    // Check 3: the instance does not support setNativeProps. Call `scheduleUpdate`.
                    return scheduleUpdate();
                }
                if (!isFabricNode) {
                    // Check 4: this is a paper instance, call setNativeProps.
                    // $FlowIgnore[not-a-function] - Assume it's still a function.
                    // $FlowFixMe[incompatible-use]
                    return instance.setNativeProps(node.__getAnimatedValue());
                }
                if (!useNativePropsInFabric) {
                    // Check 5: setNativeProps are disabled.
                    return scheduleUpdate();
                }
                // This is a Fabric instance and setNativeProps is supported.
                // $FlowIgnore[not-a-function] - Assume it's still a function.
                // $FlowFixMe[incompatible-use]
                instance.setNativeProps(node.__getAnimatedValue());
                // Keeping state of Fiber tree and Shadow tree in sync.
                //
                // This is done by calling `scheduleUpdate` which will trigger a commit.
                // However, React commit is not fast enough to drive animations.
                // This is where setNativeProps comes in handy but the state between
                // Fiber tree and Shadow tree needs to be kept in sync.
                // The goal is to call `scheduleUpdate` as little as possible to maintain
                // performance but frequently enough to keep state in sync.
                // Debounce is set to 48ms, which is 3 * the duration of a frame.
                // 3 frames was the highest value where flickering state was not observed.
                if (timerRef.current != null) {
                    clearTimeout(timerRef.current);
                }
                timerRef.current = setTimeout(()=>{
                    timerRef.current = null;
                    scheduleUpdate();
                }, 48);
            };
            var target = getEventTarget(instance);
            var events = [];
            var animatedValueListeners = [];
            for(var propName in props){
                // $FlowFixMe[invalid-computed-prop]
                var propValue = props[propName];
                if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
                    propValue.__attach(target, propName);
                    events.push([
                        propName,
                        propValue
                    ]);
                    // $FlowFixMe[incompatible-call] - the `addListenersToPropsValue` drills down the propValue.
                    addListenersToPropsValue(propValue, animatedValueListeners);
                }
            }
            return ()=>{
                onUpdateRef.current = null;
                for (var ref of events){
                    var _ref = _sliced_to_array._(ref, 2), propName = _ref[0], propValue = _ref[1];
                    propValue.__detach(target, propName);
                }
                for (var ref1 of animatedValueListeners){
                    var propValue1 = ref1.propValue, listenerId = ref1.listenerId;
                    propValue1.removeListener(listenerId);
                }
            };
        }, [
            node,
            useNativePropsInFabric,
            props
        ]);
        var callbackRef = (0, _useRefEffect.default)(refEffect);
        return [
            reduceAnimatedProps(node, props),
            callbackRef
        ];
    };
}
function reduceAnimatedProps(node, props) {
    // Force `collapsable` to be false so that the native view is not flattened.
    // Flattened views cannot be accurately referenced by the native driver.
    return _object_spread_props._(_object_spread._({}, node.__getValueWithStaticProps(props)), {
        collapsable: false
    });
}
function addListenersToPropsValue(propValue, accumulator) {
    // propValue can be a scalar value, an array or an object.
    if (propValue instanceof _AnimatedValue.default) {
        var listenerId = propValue.addListener(()=>{});
        accumulator.push({
            propValue,
            listenerId
        });
    } else if (Array.isArray(propValue)) {
        // An array can be an array of scalar values, arrays of arrays, or arrays of objects
        for (var prop of propValue){
            addListenersToPropsValue(prop, accumulator);
        }
    } else if (propValue instanceof Object) {
        addAnimatedValuesListenersToProps(propValue, accumulator);
    }
}
function addAnimatedValuesListenersToProps(props, accumulator) {
    for(var propName in props){
        // $FlowFixMe[prop-missing] - This is an object contained in a prop, but we don't know the exact type.
        var propValue = props[propName];
        addListenersToPropsValue(propValue, accumulator);
    }
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, this is more complicated because `AnimatedProps`
 * uses reference counting to determine when to recursively detach its children
 * nodes. So in order to optimize this, we avoid detaching until the next attach
 * unless we are unmounting.
 */ function useAnimatedPropsLifecycleWithPrevNodeRef(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useInsertionEffect)(()=>{
        isUnmountingRef.current = false;
        return ()=>{
            isUnmountingRef.current = true;
        };
    }, []);
    (0, _react.useInsertionEffect)(()=>{
        node.__attach();
        if (prevNodeRef.current != null) {
            var prevNode = prevNodeRef.current;
            // TODO: Stop restoring default values (unless `reset` is called).
            prevNode.__restoreDefaultValues();
            prevNode.__detach();
            prevNodeRef.current = null;
        }
        return ()=>{
            if (isUnmountingRef.current) {
                // NOTE: Do not restore default values on unmount, see D18197735.
                node.__detach();
            } else {
                prevNodeRef.current = node;
            }
        };
    }, [
        node
    ]);
}
/**
 * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
 * and `__detach`. However, `__detach` occurs in a microtask for these reasons:
 *
 *   1. Optimizes detaching and attaching `AnimatedNode` instances that rely on
 *      reference counting to cleanup state, by causing detach to be scheduled
 *      after any subsequent attach.
 *   2. Avoids calling `detach` during the insertion effect phase (which
 *      occurs during the commit phase), which may invoke completion callbacks.
 *
 * We should avoid invoking completion callbacks during the commit phase because
 * callbacks may update state, which is unsupported and will force synchronous
 * updates.
 */ function useAnimatedPropsLifecycleWithCleanupInMicrotask(node) {
    var isMounted = (0, _react.useRef)(false);
    (0, _react.useInsertionEffect)(()=>{
        isMounted.current = true;
        node.__attach();
        return ()=>{
            isMounted.current = false;
            queueMicrotask(()=>{
                // NOTE: Do not restore default values on unmount, see D18197735.
                if (isMounted.current) {
                    // TODO: Stop restoring default values (unless `reset` is called).
                    node.__restoreDefaultValues();
                }
                node.__detach();
            });
        };
    }, [
        node
    ]);
}
function getEventTarget(instance) {
    return typeof instance === 'object' && typeof (instance === null || instance === void 0 ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
// $FlowFixMe[unclear-type] - Legacy instance assumptions.
function isFabricInstance(instance) {
    var _instance_getNativeScrollRef, _instance_getScrollResponder_getNativeScrollRef, _instance_getScrollResponder, _instance_getScrollResponder1;
    return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || // Some components have a setNativeProps function but aren't a host component
    // such as lists like FlatList and SectionList. These should also use
    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying
    // host component. This crazy hack is essentially special casing those lists and
    // ScrollView itself to use forceUpdate in Fabric.
    // If these components end up using forwardRef then these hacks can go away
    // as instance would actually be the underlying host component and the above check
    // would be sufficient.
    (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance === null || instance === void 0 ? void 0 : (_instance_getNativeScrollRef = instance.getNativeScrollRef) === null || _instance_getNativeScrollRef === void 0 ? void 0 : _instance_getNativeScrollRef.call(instance)) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance === null || instance === void 0 ? void 0 : (_instance_getScrollResponder1 = instance.getScrollResponder) === null || _instance_getScrollResponder1 === void 0 ? void 0 : (_instance_getScrollResponder = _instance_getScrollResponder1.call(instance)) === null || _instance_getScrollResponder === void 0 ? void 0 : (_instance_getScrollResponder_getNativeScrollRef = _instance_getScrollResponder.getNativeScrollRef) === null || _instance_getScrollResponder_getNativeScrollRef === void 0 ? void 0 : _instance_getScrollResponder_getNativeScrollRef.call(_instance_getScrollResponder));
}


}),
24298: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    areCompositeKeysEqual: function() {
        return areCompositeKeysEqual;
    },
    createAnimatedPropsMemoHook: function() {
        return createAnimatedPropsMemoHook;
    },
    createCompositeKeyForProps: function() {
        return createCompositeKeyForProps;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _AnimatedEvent = __webpack_require__(12164);
var _AnimatedNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76188));
var _AnimatedObject = __webpack_require__(50961);
var _flattenStyle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69490));
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var _react = __webpack_require__(4931);
function createAnimatedPropsMemoHook(allowlist) {
    return function useAnimatedPropsMemo(create, props) {
        // NOTE: This feature flag must be evaluated inside the hook because this
        // module factory can be evaluated much sooner, before overrides are set.
        var useAnimatedPropsImpl = _ReactNativeFeatureFlags.avoidStateUpdateInAnimatedPropsMemo() ? useAnimatedPropsMemo_ref : useAnimatedPropsMemo_state;
        return useAnimatedPropsImpl(create, props);
    };
    function useAnimatedPropsMemo_ref(create, props) {
        var compositeKey = (0, _react.useMemo)(()=>createCompositeKeyForProps(props, allowlist), [
            props
        ]);
        var prevRef = (0, _react.useRef)();
        var prev = prevRef.current;
        var next = prev != null && areCompositeKeysEqual(prev.compositeKey, compositeKey, allowlist) ? prev : {
            compositeKey,
            node: create()
        };
        (0, _react.useInsertionEffect)(()=>{
            prevRef.current = next;
        }, [
            next
        ]);
        return next.node;
    }
    function useAnimatedPropsMemo_state(create, props) {
        var compositeKey = (0, _react.useMemo)(()=>createCompositeKeyForProps(props, allowlist), [
            props
        ]);
        var _useState = _sliced_to_array._((0, _react.useState)(()=>({
                allowlist,
                compositeKey,
                value: create()
            })), 2), state = _useState[0], setState = _useState[1];
        if (state.allowlist !== allowlist || !areCompositeKeysEqual(state.compositeKey, compositeKey)) {
            setState({
                allowlist,
                compositeKey,
                value: create()
            });
        }
        return state.value;
    }
}
function createCompositeKeyForProps(props, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(props);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        var value = props[key];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var compositeKeyComponent = void 0;
            if (key === 'style') {
                // $FlowFixMe[incompatible-call] - `style` is a valid argument.
                // $FlowFixMe[incompatible-type] - `flattenStyle` returns an object.
                var flatStyle = (0, _flattenStyle.default)(value);
                if (flatStyle != null) {
                    compositeKeyComponent = createCompositeKeyForObject(flatStyle, allowlist === null || allowlist === void 0 ? void 0 : allowlist.style);
                }
            } else if (value instanceof _AnimatedNode.default || value instanceof _AnimatedEvent.AnimatedEvent) {
                compositeKeyComponent = value;
            } else if (Array.isArray(value)) {
                compositeKeyComponent = allowlist == null ? value : createCompositeKeyForArray(value);
            } else if ((0, _AnimatedObject.isPlainObject)(value)) {
                compositeKeyComponent = allowlist == null ? value : createCompositeKeyForObject(value);
            }
            if (compositeKeyComponent != null) {
                if (compositeKey == null) {
                    compositeKey = {};
                }
                compositeKey[key] = compositeKeyComponent;
            }
        }
    }
    return compositeKey;
}
/**
 * Creates a new composite key for an array that retains all values that are or
 * contain `AnimatedNode` instances, and `null` for the rest.
 *
 * If `array` contains no `AnimatedNode` instances, this returns null.
 */ function createCompositeKeyForArray(array) {
    var compositeKey = null;
    for(var ii = 0, length = array.length; ii < length; ii++){
        var value = array[ii];
        var compositeKeyComponent = void 0;
        if (value instanceof _AnimatedNode.default) {
            compositeKeyComponent = value;
        } else if (Array.isArray(value)) {
            compositeKeyComponent = createCompositeKeyForArray(value);
        } else if ((0, _AnimatedObject.isPlainObject)(value)) {
            compositeKeyComponent = createCompositeKeyForObject(value);
        }
        if (compositeKeyComponent != null) {
            if (compositeKey == null) {
                compositeKey = new Array(array.length).fill(null);
            }
            compositeKey[ii] = compositeKeyComponent;
        }
    }
    return compositeKey;
}
/**
 * Creates a new composite key for an object that retains only properties that
 * are or contain `AnimatedNode` instances.
 *
 * When used to create composite keys for `style` props:
 *
 * - With an allowlist, those properties are searched.
 * - Without an allowlist, every property is searched.
 *
 * If `object` contains no `AnimatedNode` instances, this returns null.
 */ function createCompositeKeyForObject(object, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(object);
    for(var ii = 0, length = keys.length; ii < length; ii++){
        var key = keys[ii];
        if (allowlist == null || hasOwn(allowlist, key)) {
            var value = object[key];
            var compositeKeyComponent = void 0;
            if (value instanceof _AnimatedNode.default) {
                compositeKeyComponent = value;
            } else if (Array.isArray(value)) {
                compositeKeyComponent = createCompositeKeyForArray(value);
            } else if ((0, _AnimatedObject.isPlainObject)(value)) {
                compositeKeyComponent = createCompositeKeyForObject(value);
            }
            if (compositeKeyComponent != null) {
                if (compositeKey == null) {
                    compositeKey = {};
                }
                compositeKey[key] = compositeKeyComponent;
            }
        }
    }
    return compositeKey;
}
function areCompositeKeysEqual(maybePrev, maybeNext, allowlist) {
    if (maybePrev === maybeNext) {
        return true;
    }
    if (maybePrev === null || maybeNext === null) {
        return false;
    }
    // Help Flow retain the type refinements of these.
    var prev = maybePrev;
    var next = maybeNext;
    var keys = Object.keys(prev);
    var length = keys.length;
    if (length !== Object.keys(next).length) {
        return false;
    }
    for(var ii = 0; ii < length; ii++){
        var key = keys[ii];
        if (!hasOwn(next, key)) {
            return false;
        }
        var prevComponent = prev[key];
        var nextComponent = next[key];
        if (key === 'style') {
            // We know style components are objects with non-mixed values.
            if (!areCompositeKeyComponentsEqual(// $FlowIgnore[incompatible-cast]
            prevComponent, // $FlowIgnore[incompatible-cast]
            nextComponent)) {
                return false;
            }
        } else if (prevComponent instanceof _AnimatedNode.default || prevComponent instanceof _AnimatedEvent.AnimatedEvent) {
            if (prevComponent !== nextComponent) {
                return false;
            }
        } else {
            // When `allowlist` is null, the components must be the same. Otherwise,
            // we created the components using deep traversal, so deep compare them.
            if (allowlist == null) {
                if (prevComponent !== nextComponent) {
                    return false;
                }
            } else {
                if (!areCompositeKeyComponentsEqual(// $FlowIgnore[incompatible-cast]
                prevComponent, // $FlowIgnore[incompatible-cast]
                nextComponent)) {
                    return false;
                }
            }
        }
    }
    return true;
}
function areCompositeKeyComponentsEqual(prev, next) {
    if (prev === next) {
        return true;
    }
    if (prev instanceof _AnimatedNode.default) {
        return prev === next;
    }
    if (Array.isArray(prev)) {
        if (!Array.isArray(next)) {
            return false;
        }
        var length = prev.length;
        if (length !== next.length) {
            return false;
        }
        for(var ii = 0; ii < length; ii++){
            if (!areCompositeKeyComponentsEqual(prev[ii], next[ii])) {
                return false;
            }
        }
        return true;
    }
    if ((0, _AnimatedObject.isPlainObject)(prev)) {
        if (!(0, _AnimatedObject.isPlainObject)(next)) {
            return false;
        }
        var keys = Object.keys(prev);
        var length1 = keys.length;
        if (length1 !== Object.keys(next).length) {
            return false;
        }
        for(var ii1 = 0; ii1 < length1; ii1++){
            var key = keys[ii1];
            if (!hasOwn((0, _nullthrows.default)(next), key) || !areCompositeKeyComponentsEqual(prev[key], next[key])) {
                return false;
            }
        }
        return true;
    }
    return false;
}
// Supported versions of JSC do not implement the newer Object.hasOwn. Remove
// this shim when they do.
// $FlowIgnore[method-unbinding]
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = // $FlowIgnore[method-unbinding]
Object.hasOwn ?? ((obj, prop)=>_hasOwnProp.call(obj, prop));


}),
73432: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HScrollContentViewNativeComponent: function() {
        return HScrollContentViewNativeComponent;
    },
    HScrollViewNativeComponent: function() {
        return HScrollViewNativeComponent;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _AndroidHorizontalScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54944));
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89207));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34676));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var _AndroidHorizontalScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7520));
var HScrollViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollViewNativeComponent.default : _ScrollViewNativeComponent.default;
var HScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollContentViewNativeComponent.default : _ScrollContentViewNativeComponent.default;


}),
34413: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VScrollContentViewNativeComponent: function() {
        return VScrollContentViewNativeComponent;
    },
    VScrollViewNativeComponent: function() {
        return VScrollViewNativeComponent;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _ScrollContentViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89207));
var _ScrollViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34676));
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73335));
var VScrollViewNativeComponent = _ScrollViewNativeComponent.default;
var VScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _View.default : _ScrollContentViewNativeComponent.default;


}),
72609: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeDevMenu = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68963));
/**
 * The DevMenu module exposes methods for interacting with the Dev Menu in development.
 */ var DevMenu = {
    show () {
        if (false) { var _NativeDevMenu_show }
    }
};
var _default = DevMenu;


}),
31022: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<5b1d3ba6712de7a927eeeb8602ee2a8f>>
 *       strict
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags --update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    animatedShouldDebounceQueueFlush: function() {
        return animatedShouldDebounceQueueFlush;
    },
    animatedShouldUseSingleOp: function() {
        return animatedShouldUseSingleOp;
    },
    avoidStateUpdateInAnimatedPropsMemo: function() {
        return avoidStateUpdateInAnimatedPropsMemo;
    },
    commonTestFlag: function() {
        return commonTestFlag;
    },
    commonTestFlagWithoutNativeImplementation: function() {
        return commonTestFlagWithoutNativeImplementation;
    },
    disableInteractionManager: function() {
        return disableInteractionManager;
    },
    disableMountItemReorderingAndroid: function() {
        return disableMountItemReorderingAndroid;
    },
    enableAccessToHostTreeInFabric: function() {
        return enableAccessToHostTreeInFabric;
    },
    enableAccumulatedUpdatesInRawPropsAndroid: function() {
        return enableAccumulatedUpdatesInRawPropsAndroid;
    },
    enableAnimatedClearImmediateFix: function() {
        return enableAnimatedClearImmediateFix;
    },
    enableBridgelessArchitecture: function() {
        return enableBridgelessArchitecture;
    },
    enableCppPropsIteratorSetter: function() {
        return enableCppPropsIteratorSetter;
    },
    enableDOMDocumentAPI: function() {
        return enableDOMDocumentAPI;
    },
    enableEagerRootViewAttachment: function() {
        return enableEagerRootViewAttachment;
    },
    enableFabricLogs: function() {
        return enableFabricLogs;
    },
    enableFabricRenderer: function() {
        return enableFabricRenderer;
    },
    enableIOSViewClipToPaddingBox: function() {
        return enableIOSViewClipToPaddingBox;
    },
    enableImagePrefetchingAndroid: function() {
        return enableImagePrefetchingAndroid;
    },
    enableJSRuntimeGCOnMemoryPressureOnIOS: function() {
        return enableJSRuntimeGCOnMemoryPressureOnIOS;
    },
    enableLayoutAnimationsOnAndroid: function() {
        return enableLayoutAnimationsOnAndroid;
    },
    enableLayoutAnimationsOnIOS: function() {
        return enableLayoutAnimationsOnIOS;
    },
    enableLongTaskAPI: function() {
        return enableLongTaskAPI;
    },
    enableNativeCSSParsing: function() {
        return enableNativeCSSParsing;
    },
    enableNewBackgroundAndBorderDrawables: function() {
        return enableNewBackgroundAndBorderDrawables;
    },
    enablePreciseSchedulingForPremountItemsOnAndroid: function() {
        return enablePreciseSchedulingForPremountItemsOnAndroid;
    },
    enablePropsUpdateReconciliationAndroid: function() {
        return enablePropsUpdateReconciliationAndroid;
    },
    enableReportEventPaintTime: function() {
        return enableReportEventPaintTime;
    },
    enableSynchronousStateUpdates: function() {
        return enableSynchronousStateUpdates;
    },
    enableUIConsistency: function() {
        return enableUIConsistency;
    },
    enableViewCulling: function() {
        return enableViewCulling;
    },
    enableViewRecycling: function() {
        return enableViewRecycling;
    },
    enableViewRecyclingForText: function() {
        return enableViewRecyclingForText;
    },
    enableViewRecyclingForView: function() {
        return enableViewRecyclingForView;
    },
    excludeYogaFromRawProps: function() {
        return excludeYogaFromRawProps;
    },
    fixDifferentiatorEmittingUpdatesWithWrongParentTag: function() {
        return fixDifferentiatorEmittingUpdatesWithWrongParentTag;
    },
    fixMappingOfEventPrioritiesBetweenFabricAndReact: function() {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    fixMountingCoordinatorReportedPendingTransactionsOnAndroid: function() {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    fixVirtualizeListCollapseWindowSize: function() {
        return fixVirtualizeListCollapseWindowSize;
    },
    fuseboxEnabledRelease: function() {
        return fuseboxEnabledRelease;
    },
    fuseboxNetworkInspectionEnabled: function() {
        return fuseboxNetworkInspectionEnabled;
    },
    isLayoutAnimationEnabled: function() {
        return isLayoutAnimationEnabled;
    },
    jsOnlyTestFlag: function() {
        return jsOnlyTestFlag;
    },
    lazyAnimationCallbacks: function() {
        return lazyAnimationCallbacks;
    },
    override: function() {
        return override;
    },
    removeTurboModuleManagerDelegateMutex: function() {
        return removeTurboModuleManagerDelegateMutex;
    },
    scheduleAnimatedCleanupInMicrotask: function() {
        return scheduleAnimatedCleanupInMicrotask;
    },
    shouldUseAnimatedObjectForTransform: function() {
        return shouldUseAnimatedObjectForTransform;
    },
    shouldUseRemoveClippedSubviewsAsDefaultOnIOS: function() {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    shouldUseSetNativePropsInFabric: function() {
        return shouldUseSetNativePropsInFabric;
    },
    throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS: function() {
        return throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS;
    },
    traceTurboModulePromiseRejectionsOnAndroid: function() {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    updateRuntimeShadowNodeReferencesOnCommit: function() {
        return updateRuntimeShadowNodeReferencesOnCommit;
    },
    useAlwaysAvailableJSErrorHandling: function() {
        return useAlwaysAvailableJSErrorHandling;
    },
    useEditTextStockAndroidFocusBehavior: function() {
        return useEditTextStockAndroidFocusBehavior;
    },
    useFabricInterop: function() {
        return useFabricInterop;
    },
    useNativeViewConfigsInBridgelessMode: function() {
        return useNativeViewConfigsInBridgelessMode;
    },
    useOptimizedEventBatchingOnAndroid: function() {
        return useOptimizedEventBatchingOnAndroid;
    },
    useRawPropsJsiValue: function() {
        return useRawPropsJsiValue;
    },
    useRefsForTextInputState: function() {
        return useRefsForTextInputState;
    },
    useShadowNodeStateOnClone: function() {
        return useShadowNodeStateOnClone;
    },
    useTurboModuleInterop: function() {
        return useTurboModuleInterop;
    },
    useTurboModules: function() {
        return useTurboModules;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(25282);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var avoidStateUpdateInAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('avoidStateUpdateInAnimatedPropsMemo', false);
var disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableDOMDocumentAPI = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableDOMDocumentAPI', false);
var fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var scheduleAnimatedCleanupInMicrotask = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('scheduleAnimatedCleanupInMicrotask', false);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
var enableJSRuntimeGCOnMemoryPressureOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableJSRuntimeGCOnMemoryPressureOnIOS', false);
var enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNativeCSSParsing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNativeCSSParsing', false);
var enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewCulling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewCulling', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var enableViewRecyclingForText = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForText', true);
var enableViewRecyclingForView = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForView', true);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var fuseboxNetworkInspectionEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxNetworkInspectionEnabled', false);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var removeTurboModuleManagerDelegateMutex = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('removeTurboModuleManagerDelegateMutex', false);
var throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS', false);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var updateRuntimeShadowNodeReferencesOnCommit = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('updateRuntimeShadowNodeReferencesOnCommit', false);
var useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useEditTextStockAndroidFocusBehavior = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useEditTextStockAndroidFocusBehavior', true);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useShadowNodeStateOnClone = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useShadowNodeStateOnClone', false);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
25282: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createJavaScriptFlagGetter: function() {
        return createJavaScriptFlagGetter;
    },
    createNativeFlagGetter: function() {
        return createNativeFlagGetter;
    },
    getOverrides: function() {
        return getOverrides;
    },
    setOverrides: function() {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var accessedFeatureFlags = new Set();
var overrides;
// This defines the types for the overrides object, whose methods also receive
// the default value as a parameter.
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return ()=>{
        if (cachedValue == null) {
            cachedValue = customValueGetter() ?? defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides === null || overrides === void 0 ? void 0 : (_overrides_configName = overrides[configName]) === null || _overrides_configName === void 0 ? void 0 : _overrides_configName.call(overrides, defaultValue);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue, ref) {
    var skipUnavailableNativeModuleError = ref === void 0 ? false : ref;
    return createGetter(configName, ()=>{
        var _NativeReactNativeFeatureFlags_configName;
        maybeLogUnavailableNativeModuleError(configName);
        return _NativeReactNativeFeatureFlags.default === null || _NativeReactNativeFeatureFlags.default === void 0 ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) === null || _NativeReactNativeFeatureFlags_configName === void 0 ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function maybeLogUnavailableNativeModuleError(configName) {
    if (!_NativeReactNativeFeatureFlags.default && !reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
}


}),
21934: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    onCaughtError: function() {
        return onCaughtError;
    },
    onRecoverableError: function() {
        return onRecoverableError;
    },
    onUncaughtError: function() {
        return onUncaughtError;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _ExceptionsManager = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(48065));
function getExtendedError(errorValue, errorInfo) {
    var error;
    // Typically, `errorValue` should be an error. However, other values such as
    // strings (or even null) are sometimes thrown.
    if (errorValue instanceof Error) {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = errorValue;
    } else if (typeof errorValue === 'string') {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }
    try {
        // $FlowFixMe[incompatible-use] this is in try/catch.
        error.componentStack = errorInfo.componentStack;
        error.isComponentError = true;
    } catch  {
    // Ignored.
    }
    return error;
}
function onUncaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Uncaught errors are fatal.
    _ExceptionsManager.default.handleException(error, true);
}
function onCaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Caught errors are not fatal.
    _ExceptionsManager.default.handleException(error, false);
}
function onRecoverableError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Recoverable errors should only be warnings.
    // This will make it a soft error in LogBox.
    // TODO: improve the logging for recoverable errors in prod.
    console.warn(error);
}


}),
38213: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return setUpDOM;
    }
}));
var _PolyfillFunctions = __webpack_require__(23223);
var initialized = false;
function setUpDOM() {
    if (initialized) {
        return;
    }
    initialized = true;
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRect', ()=>(__webpack_require__(49388)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRectReadOnly', ()=>(__webpack_require__(50339)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRectList', ()=>(__webpack_require__(95460)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('HTMLCollection', ()=>(__webpack_require__(13037)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('NodeList', ()=>(__webpack_require__(89648)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('Node', ()=>(__webpack_require__(61525)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('Document', ()=>(__webpack_require__(43554)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('CharacterData', ()=>(__webpack_require__(36853)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('Text', ()=>(__webpack_require__(38523)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('Element', ()=>(__webpack_require__(43170)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('HTMLElement', ()=>(__webpack_require__(8778)/* ["default"] */["default"]));
}


}),
90285: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * Combines two styles such that `style2` will override any styles in `style1`.
 * If either style is null or undefined, the other one is returned without
 * allocating an array, saving allocations and enabling memoization.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return composeStyles;
    }
}));
function composeStyles(style1, style2) {
    if (style1 == null) {
        return style2;
    }
    if (style2 == null) {
        return style1;
    }
    return [
        style1,
        style2
    ];
}


}),
27380: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module implements the `Event` interface from the DOM.
 * See https://dom.spec.whatwg.org/#interface-event.
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Event;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _EventInternals = __webpack_require__(98120);
var Event = /*#__PURE__*/ function() {
    "use strict";
    function Event(type, options) {
        _class_call_check._(this, Event);
        this._defaultPrevented = false;
        this._timeStamp = performance.now();
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.COMPOSED_PATH_KEY] = [];
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.CURRENT_TARGET_KEY] = null;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.EVENT_PHASE_KEY] = Event.NONE;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.IN_PASSIVE_LISTENER_FLAG_KEY] = false;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.IS_TRUSTED_KEY] = false;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.STOP_IMMEDIATE_PROPAGATION_FLAG_KEY] = false;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.STOP_PROPAGATION_FLAG_KEY] = false;
        // $FlowExpectedError[unsupported-syntax]
        this[_EventInternals.TARGET_KEY] = null;
        if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'Event': 1 argument required, but only 0 present.");
        }
        var typeOfOptions = typeof options;
        if (options != null && typeOfOptions !== 'object' && typeOfOptions !== 'function') {
            throw new TypeError("Failed to construct 'Event': The provided value is not of type 'EventInit'.");
        }
        this._type = String(type);
        this._bubbles = Boolean(options === null || options === void 0 ? void 0 : options.bubbles);
        this._cancelable = Boolean(options === null || options === void 0 ? void 0 : options.cancelable);
        this._composed = Boolean(options === null || options === void 0 ? void 0 : options.composed);
    }
    _create_class._(Event, [
        {
            key: "bubbles",
            get: function() {
                return this._bubbles;
            }
        },
        {
            key: "cancelable",
            get: function() {
                return this._cancelable;
            }
        },
        {
            key: "composed",
            get: function() {
                return this._composed;
            }
        },
        {
            key: "currentTarget",
            get: function() {
                return (0, _EventInternals.getCurrentTarget)(this);
            }
        },
        {
            key: "defaultPrevented",
            get: function() {
                return this._defaultPrevented;
            }
        },
        {
            key: "eventPhase",
            get: function() {
                return (0, _EventInternals.getEventPhase)(this);
            }
        },
        {
            key: "isTrusted",
            get: function() {
                return (0, _EventInternals.getIsTrusted)(this);
            }
        },
        {
            key: "target",
            get: function() {
                return (0, _EventInternals.getTarget)(this);
            }
        },
        {
            key: "timeStamp",
            get: function() {
                return this._timeStamp;
            }
        },
        {
            key: "type",
            get: function() {
                return this._type;
            }
        },
        {
            key: "composedPath",
            value: function composedPath() {
                return (0, _EventInternals.getComposedPath)(this).slice();
            }
        },
        {
            key: "preventDefault",
            value: function preventDefault() {
                if (!this._cancelable) {
                    return;
                }
                if ((0, _EventInternals.getInPassiveListenerFlag)(this)) {
                    console.error(new Error('Unable to preventDefault inside passive event listener invocation.'));
                    return;
                }
                this._defaultPrevented = true;
            }
        },
        {
            key: "stopImmediatePropagation",
            value: function stopImmediatePropagation() {
                (0, _EventInternals.setStopPropagationFlag)(this, true);
                (0, _EventInternals.setStopImmediatePropagationFlag)(this, true);
            }
        },
        {
            key: "stopPropagation",
            value: function stopPropagation() {
                (0, _EventInternals.setStopPropagationFlag)(this, true);
            }
        }
    ]);
    return Event;
}();
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event, 'NONE', {
    enumerable: true,
    value: 0
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event.prototype, 'NONE', {
    enumerable: true,
    value: 0
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event, 'CAPTURING_PHASE', {
    enumerable: true,
    value: 1
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event.prototype, 'CAPTURING_PHASE', {
    enumerable: true,
    value: 1
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event, 'AT_TARGET', {
    enumerable: true,
    value: 2
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event.prototype, 'AT_TARGET', {
    enumerable: true,
    value: 2
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event, 'BUBBLING_PHASE', {
    enumerable: true,
    value: 3
});
// $FlowExpectedError[cannot-write]
Object.defineProperty(Event.prototype, 'BUBBLING_PHASE', {
    enumerable: true,
    value: 3
});


}),
85950: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module provides helpers for classes to implement event handler IDL
 * attributes, as defined in https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes.
 *
 * Expected usage:
 * ```
 * import {getEventHandlerAttribute, setEventHandlerAttribute} from '../path/to/EventHandlerAttributes';
 *
 * class EventTargetSubclass extends EventTarget {
 *   get oncustomevent(): EventListener | null {
 *     return getEventHandlerAttribute(this, 'customEvent');
 *   }
 *
 *   set oncustomevent(listener: EventListener | null) {
 *     setEventHandlerAttribute(this, 'customEvent', listener);
 *   }
 * }
 *
 * const eventTargetInstance = new EventTargetSubclass();
 *
 * eventTargetInstance.oncustomevent = (event: Event) => {
 *   console.log('custom event received');
 * };
 * eventTargetInstance.dispatchEvent(new Event('customEvent'));
 * // Logs 'custom event received' to the console.
 *
 * eventTargetInstance.oncustomevent = null;
 * eventTargetInstance.dispatchEvent(new Event('customEvent'));
 * // Does not log anything to the console.
 * ```
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getEventHandlerAttribute: function() {
        return getEventHandlerAttribute;
    },
    setEventHandlerAttribute: function() {
        return setEventHandlerAttribute;
    }
});
var EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY = Symbol('eventHandlerAttributeMap');
function getEventHandlerAttributeMap(target) {
    // $FlowExpectedError[prop-missing]
    return target[EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY];
}
function setEventHandlerAttributeMap(target, map) {
    // $FlowExpectedError[prop-missing]
    target[EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY] = map;
}
function getEventHandlerAttribute(target, type) {
    var _getEventHandlerAttributeMap;
    var listener = (_getEventHandlerAttributeMap = getEventHandlerAttributeMap(target)) === null || _getEventHandlerAttributeMap === void 0 ? void 0 : _getEventHandlerAttributeMap.get(type);
    return listener != null ? listener.handleEvent : null;
}
function setEventHandlerAttribute(target, type, callback) {
    var map = getEventHandlerAttributeMap(target);
    if (map != null) {
        var currentListener = map.get(type);
        if (currentListener) {
            target.removeEventListener(type, currentListener);
            map.delete(type);
        }
    }
    if (callback != null && (typeof callback === 'function' || typeof callback === 'object')) {
        // Register the listener as a different object in the target so it
        // occupies its own slot and cannot be removed via `removeEventListener`.
        var listener = {
            handleEvent: callback
        };
        try {
            target.addEventListener(type, listener);
            // If adding the listener fails, we don't store the value
            if (map == null) {
                map = new Map();
                setEventHandlerAttributeMap(target, map);
            }
            map.set(type, listener);
        } catch (e) {
        // Assigning incorrect listener does not throw in setters.
        }
    }
    if (map != null && map.size === 0) {
        setEventHandlerAttributeMap(target, null);
    }
}


}),
12020: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module implements the `EventTarget` and related interfaces from the DOM.
 * See https://dom.spec.whatwg.org/#interface-eventtarget.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventTarget;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var _EventInternals = __webpack_require__(98120);
var _EventTargetInternals = __webpack_require__(33315);
var EventTarget = /*#__PURE__*/ function() {
    "use strict";
    function EventTarget() {
        _class_call_check._(this, EventTarget);
    }
    _create_class._(EventTarget, [
        {
            key: "addEventListener",
            value: function addEventListener(type, callback, ref) {
                var optionsOrUseCapture = ref === void 0 ? {} : ref;
                if (arguments.length < 2) {
                    throw new TypeError(`Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only ${arguments.length} present.`);
                }
                if (callback == null) {
                    return;
                }
                validateCallback(callback, 'addEventListener');
                var processedType = String(type);
                var capture;
                var passive;
                var once;
                var signal;
                if (optionsOrUseCapture != null && (typeof optionsOrUseCapture === 'object' || typeof optionsOrUseCapture === 'function')) {
                    capture = Boolean(optionsOrUseCapture.capture);
                    passive = optionsOrUseCapture.passive == null ? getDefaultPassiveValue(processedType, this) : Boolean(optionsOrUseCapture.passive);
                    once = Boolean(optionsOrUseCapture.once);
                    signal = optionsOrUseCapture.signal;
                    if (signal !== undefined && !(signal instanceof AbortSignal)) {
                        throw new TypeError("Failed to execute 'addEventListener' on 'EventTarget': Failed to read the 'signal' property from 'AddEventListenerOptions': Failed to convert value to 'AbortSignal'.");
                    }
                } else {
                    capture = Boolean(optionsOrUseCapture);
                    passive = false;
                    once = false;
                    signal = null;
                }
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    return;
                }
                var listenersByType = getListenersForPhase(this, capture);
                var listeners = listenersByType === null || listenersByType === void 0 ? void 0 : listenersByType.get(processedType);
                if (listeners == null) {
                    if (listenersByType == null) {
                        listenersByType = new Map();
                        setListenersMap(this, capture, listenersByType);
                    }
                    listeners = new Map();
                    listenersByType.set(processedType, listeners);
                } else if (listeners.has(callback)) {
                    return;
                }
                var listener = {
                    callback,
                    passive,
                    once,
                    removed: false
                };
                listeners.set(callback, listener);
                var nonNullListeners = listeners;
                if (signal != null) {
                    signal.addEventListener('abort', ()=>{
                        listener.removed = true;
                        if (nonNullListeners.get(callback) === listener) {
                            nonNullListeners.delete(callback);
                        }
                    }, {
                        once: true
                    });
                }
            }
        },
        {
            key: "removeEventListener",
            value: function removeEventListener(type, callback, ref) {
                var optionsOrUseCapture = ref === void 0 ? {} : ref;
                if (arguments.length < 2) {
                    throw new TypeError(`Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only ${arguments.length} present.`);
                }
                if (callback == null) {
                    return;
                }
                validateCallback(callback, 'removeEventListener');
                var processedType = String(type);
                var capture = typeof optionsOrUseCapture === 'boolean' ? optionsOrUseCapture : Boolean(optionsOrUseCapture.capture);
                var listenersByType = getListenersForPhase(this, capture);
                var listeners = listenersByType === null || listenersByType === void 0 ? void 0 : listenersByType.get(processedType);
                if (listeners == null) {
                    return;
                }
                var listener = listeners.get(callback);
                if (listener != null) {
                    listener.removed = true;
                    listeners.delete(callback);
                }
            }
        },
        {
            key: "dispatchEvent",
            value: function dispatchEvent(event) {
                if (!(event instanceof _Event.default)) {
                    throw new TypeError("Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1 is not of type 'Event'.");
                }
                if (getEventDispatchFlag(event)) {
                    throw new Error("Failed to execute 'dispatchEvent' on 'EventTarget': The event is already being dispatched.");
                }
                (0, _EventInternals.setIsTrusted)(event, false);
                dispatch(this, event);
                return !event.defaultPrevented;
            }
        },
        {
            /**
   * This a "protected" method to be overridden by a subclass to allow event
   * propagation.
   *
   * Should implement the "get the parent" algorithm
   * (see https://dom.spec.whatwg.org/#get-the-parent).
   */ // $FlowExpectedError[unsupported-syntax]
            key: _EventTargetInternals.EVENT_TARGET_GET_THE_PARENT_KEY,
            value: function() {
                return null;
            }
        },
        {
            /**
   * This is "protected" method to dispatch trusted events.
   */ // $FlowExpectedError[unsupported-syntax]
            key: _EventTargetInternals.INTERNAL_DISPATCH_METHOD_KEY,
            value: function(event) {
                dispatch(this, event);
            }
        }
    ]);
    return EventTarget;
}();
function validateCallback(callback, methodName) {
    if (typeof callback !== 'function' && typeof callback !== 'object') {
        throw new TypeError(`Failed to execute '${methodName}' on 'EventTarget': parameter 2 is not of type 'Object'.`);
    }
}
function getDefaultPassiveValue(type, eventTarget) {
    return false;
}
/**
 * This internal version of `dispatchEvent` does not validate the input and
 * does not reset the `isTrusted` flag, so it can be used for both trusted
 * and not trusted events.
 *
 * Implements the "event dispatch" concept
 * (see https://dom.spec.whatwg.org/#concept-event-dispatch).
 */ function dispatch(eventTarget, event) {
    setEventDispatchFlag(event, true);
    var eventPath = getEventPath(eventTarget, event);
    (0, _EventInternals.setComposedPath)(event, eventPath);
    (0, _EventInternals.setTarget)(event, eventTarget);
    for(var i = eventPath.length - 1; i >= 0; i--){
        if ((0, _EventInternals.getStopPropagationFlag)(event)) {
            break;
        }
        var target = eventPath[i];
        (0, _EventInternals.setEventPhase)(event, target === eventTarget ? _Event.default.AT_TARGET : _Event.default.CAPTURING_PHASE);
        invoke(target, event, _Event.default.CAPTURING_PHASE);
    }
    for (var target1 of eventPath){
        if ((0, _EventInternals.getStopPropagationFlag)(event)) {
            break;
        }
        // If the event does NOT bubble, we only dispatch the event to the
        // target in the bubbling phase.
        if (!event.bubbles && target1 !== eventTarget) {
            break;
        }
        (0, _EventInternals.setEventPhase)(event, target1 === eventTarget ? _Event.default.AT_TARGET : _Event.default.BUBBLING_PHASE);
        invoke(target1, event, _Event.default.BUBBLING_PHASE);
    }
    (0, _EventInternals.setEventPhase)(event, _Event.default.NONE);
    (0, _EventInternals.setCurrentTarget)(event, null);
    (0, _EventInternals.setComposedPath)(event, []);
    setEventDispatchFlag(event, false);
    (0, _EventInternals.setStopImmediatePropagationFlag)(event, false);
    (0, _EventInternals.setStopPropagationFlag)(event, false);
}
/**
 * Builds the event path for an event about to be dispatched in this target
 * (see https://dom.spec.whatwg.org/#event-path).
 *
 * The return value is also set as `composedPath` for the event.
 */ function getEventPath(eventTarget, event) {
    var path = [];
    var target = eventTarget;
    while(target != null){
        path.push(target);
        // $FlowExpectedError[prop-missing]
        target = target[_EventTargetInternals.EVENT_TARGET_GET_THE_PARENT_KEY]();
    }
    return path;
}
/**
 * Implements the event listener invoke concept
 * (see https://dom.spec.whatwg.org/#concept-event-listener-invoke).
 */ function invoke(eventTarget, event, eventPhase) {
    var listenersByType = getListenersForPhase(eventTarget, eventPhase === _Event.default.CAPTURING_PHASE);
    (0, _EventInternals.setCurrentTarget)(event, eventTarget);
    var maybeListeners = listenersByType === null || listenersByType === void 0 ? void 0 : listenersByType.get(event.type);
    if (maybeListeners == null) {
        return;
    }
    // This is a copy so listeners added during dispatch are NOT executed.
    // Note that `maybeListeners.values()` is a live view of the map instead of an
    // immutable copy.
    var listeners = Array.from(maybeListeners.values());
    (0, _EventInternals.setCurrentTarget)(event, eventTarget);
    for (var listener of listeners){
        if (listener.removed) {
            continue;
        }
        if (listener.once) {
            eventTarget.removeEventListener(event.type, listener.callback, eventPhase === _Event.default.CAPTURING_PHASE);
        }
        if (listener.passive) {
            (0, _EventInternals.setInPassiveListenerFlag)(event, true);
        }
        var currentEvent = __webpack_require__.g.event;
        __webpack_require__.g.event = event;
        var callback = listener.callback;
        try {
            if (typeof callback === 'function') {
                callback.call(eventTarget, event);
            // $FlowExpectedError[method-unbinding]
            } else if (typeof callback.handleEvent === 'function') {
                callback.handleEvent(event);
            }
        } catch (error) {
            // TODO: replace with `reportError` when it's available.
            console.error(error);
        }
        if (listener.passive) {
            (0, _EventInternals.setInPassiveListenerFlag)(event, false);
        }
        __webpack_require__.g.event = currentEvent;
        if ((0, _EventInternals.getStopImmediatePropagationFlag)(event)) {
            break;
        }
    }
}
var CAPTURING_LISTENERS_KEY = Symbol('capturingListeners');
var BUBBLING_LISTENERS_KEY = Symbol('bubblingListeners');
function getListenersForPhase(eventTarget, isCapture) {
    return isCapture ? eventTarget[CAPTURING_LISTENERS_KEY] : eventTarget[BUBBLING_LISTENERS_KEY];
}
function setListenersMap(eventTarget, isCapture, listenersMap) {
    if (isCapture) {
        // $FlowExpectedError[prop-missing]
        eventTarget[CAPTURING_LISTENERS_KEY] = listenersMap;
    } else {
        // $FlowExpectedError[prop-missing]
        eventTarget[BUBBLING_LISTENERS_KEY] = listenersMap;
    }
}
var EVENT_DISPATCH_FLAG = Symbol('Event.dispatch');
function getEventDispatchFlag(event) {
    // $FlowExpectedError[prop-missing]
    return event[EVENT_DISPATCH_FLAG];
}
function setEventDispatchFlag(event, value) {
    // $FlowExpectedError[prop-missing]
    event[EVENT_DISPATCH_FLAG] = value;
}


}),
98120: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This method contains internal implementation details for the `Event` module
 * and it is defined in a separate module to keep the exports in `Event` clean
 * (only with public exports).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    COMPOSED_PATH_KEY: function() {
        return COMPOSED_PATH_KEY;
    },
    CURRENT_TARGET_KEY: function() {
        return CURRENT_TARGET_KEY;
    },
    EVENT_PHASE_KEY: function() {
        return EVENT_PHASE_KEY;
    },
    IN_PASSIVE_LISTENER_FLAG_KEY: function() {
        return IN_PASSIVE_LISTENER_FLAG_KEY;
    },
    IS_TRUSTED_KEY: function() {
        return IS_TRUSTED_KEY;
    },
    STOP_IMMEDIATE_PROPAGATION_FLAG_KEY: function() {
        return STOP_IMMEDIATE_PROPAGATION_FLAG_KEY;
    },
    STOP_PROPAGATION_FLAG_KEY: function() {
        return STOP_PROPAGATION_FLAG_KEY;
    },
    TARGET_KEY: function() {
        return TARGET_KEY;
    },
    getComposedPath: function() {
        return getComposedPath;
    },
    getCurrentTarget: function() {
        return getCurrentTarget;
    },
    getEventPhase: function() {
        return getEventPhase;
    },
    getInPassiveListenerFlag: function() {
        return getInPassiveListenerFlag;
    },
    getIsTrusted: function() {
        return getIsTrusted;
    },
    getStopImmediatePropagationFlag: function() {
        return getStopImmediatePropagationFlag;
    },
    getStopPropagationFlag: function() {
        return getStopPropagationFlag;
    },
    getTarget: function() {
        return getTarget;
    },
    setComposedPath: function() {
        return setComposedPath;
    },
    setCurrentTarget: function() {
        return setCurrentTarget;
    },
    setEventPhase: function() {
        return setEventPhase;
    },
    setInPassiveListenerFlag: function() {
        return setInPassiveListenerFlag;
    },
    setIsTrusted: function() {
        return setIsTrusted;
    },
    setStopImmediatePropagationFlag: function() {
        return setStopImmediatePropagationFlag;
    },
    setStopPropagationFlag: function() {
        return setStopPropagationFlag;
    },
    setTarget: function() {
        return setTarget;
    }
});
var COMPOSED_PATH_KEY = Symbol('composedPath');
var CURRENT_TARGET_KEY = Symbol('currentTarget');
var EVENT_PHASE_KEY = Symbol('eventPhase');
var IN_PASSIVE_LISTENER_FLAG_KEY = Symbol('inPassiveListenerFlag');
var IS_TRUSTED_KEY = Symbol('isTrusted');
var STOP_IMMEDIATE_PROPAGATION_FLAG_KEY = Symbol('stopPropagationFlag');
var STOP_PROPAGATION_FLAG_KEY = Symbol('stopPropagationFlag');
var TARGET_KEY = Symbol('target');
function getCurrentTarget(event) {
    // $FlowExpectedError[prop-missing]
    return event[CURRENT_TARGET_KEY];
}
function setCurrentTarget(event, currentTarget) {
    // $FlowExpectedError[prop-missing]
    event[CURRENT_TARGET_KEY] = currentTarget;
}
function getComposedPath(event) {
    // $FlowExpectedError[prop-missing]
    return event[COMPOSED_PATH_KEY];
}
function setComposedPath(event, composedPath) {
    // $FlowExpectedError[prop-missing]
    event[COMPOSED_PATH_KEY] = composedPath;
}
function getEventPhase(event) {
    // $FlowExpectedError[prop-missing]
    return event[EVENT_PHASE_KEY];
}
function setEventPhase(event, eventPhase) {
    // $FlowExpectedError[prop-missing]
    event[EVENT_PHASE_KEY] = eventPhase;
}
function getInPassiveListenerFlag(event) {
    // $FlowExpectedError[prop-missing]
    return event[IN_PASSIVE_LISTENER_FLAG_KEY];
}
function setInPassiveListenerFlag(event, value) {
    // $FlowExpectedError[prop-missing]
    event[IN_PASSIVE_LISTENER_FLAG_KEY] = value;
}
function getIsTrusted(event) {
    // $FlowExpectedError[prop-missing]
    return event[IS_TRUSTED_KEY];
}
function setIsTrusted(event, isTrusted) {
    // $FlowExpectedError[prop-missing]
    event[IS_TRUSTED_KEY] = isTrusted;
}
function getStopImmediatePropagationFlag(event) {
    // $FlowExpectedError[prop-missing]
    return event[STOP_IMMEDIATE_PROPAGATION_FLAG_KEY];
}
function setStopImmediatePropagationFlag(event, value) {
    // $FlowExpectedError[prop-missing]
    event[STOP_IMMEDIATE_PROPAGATION_FLAG_KEY] = value;
}
function getStopPropagationFlag(event) {
    // $FlowExpectedError[prop-missing]
    return event[STOP_PROPAGATION_FLAG_KEY];
}
function setStopPropagationFlag(event, value) {
    // $FlowExpectedError[prop-missing]
    event[STOP_PROPAGATION_FLAG_KEY] = value;
}
function getTarget(event) {
    // $FlowExpectedError[prop-missing]
    return event[TARGET_KEY];
}
function setTarget(event, target) {
    // $FlowExpectedError[prop-missing]
    event[TARGET_KEY] = target;
}


}),
33315: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This method contains internal implementation details for the `EventTarget`
 * module and it is defined in a separate module to keep the exports in
 * the original module clean (only with public exports).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EVENT_TARGET_GET_THE_PARENT_KEY: function() {
        return EVENT_TARGET_GET_THE_PARENT_KEY;
    },
    INTERNAL_DISPATCH_METHOD_KEY: function() {
        return INTERNAL_DISPATCH_METHOD_KEY;
    },
    dispatchTrustedEvent: function() {
        return dispatchTrustedEvent;
    }
});
var _EventInternals = __webpack_require__(98120);
var EVENT_TARGET_GET_THE_PARENT_KEY = Symbol('EventTarget[get the parent]');
var INTERNAL_DISPATCH_METHOD_KEY = Symbol('EventTarget[dispatch]');
function dispatchTrustedEvent(eventTarget, event) {
    (0, _EventInternals.setIsTrusted)(event, true);
    // $FlowExpectedError[prop-missing]
    return eventTarget[INTERNAL_DISPATCH_METHOD_KEY](event);
}


}),
43554: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createReactNativeDocument: function() {
        return createReactNativeDocument;
    },
    default: function() {
        return ReactNativeDocument;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _HTMLCollection = __webpack_require__(13037);
var _ReactNativeDocumentElementInstanceHandle = __webpack_require__(16661);
var _ReactNativeDocumentInstanceHandle = __webpack_require__(34056);
var _ReactNativeElement = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8778));
var _ReadOnlyNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61525));
var _NativeDOM = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67548));
var ReactNativeDocument = /*#__PURE__*/ function(ReadOnlyNode) {
    "use strict";
    _inherits._(ReactNativeDocument, ReadOnlyNode);
    function ReactNativeDocument(rootTag, instanceHandle) {
        _class_call_check._(this, ReactNativeDocument);
        var _this;
        _this = _call_super._(this, ReactNativeDocument, [
            instanceHandle,
            null
        ]);
        _this._documentElement = createDocumentElement(rootTag, _this);
        return _this;
    }
    _create_class._(ReactNativeDocument, [
        {
            key: "childElementCount",
            get: function() {
                // just `documentElement`.
                return 1;
            }
        },
        {
            key: "children",
            get: function() {
                return (0, _HTMLCollection.createHTMLCollection)([
                    this.documentElement
                ]);
            }
        },
        {
            key: "documentElement",
            get: function() {
                return this._documentElement;
            }
        },
        {
            key: "firstElementChild",
            get: function() {
                return this.documentElement;
            }
        },
        {
            key: "lastElementChild",
            get: function() {
                return this.documentElement;
            }
        },
        {
            key: "nodeName",
            get: function() {
                return '#document';
            }
        },
        {
            key: "nodeType",
            get: function() {
                return _ReadOnlyNode.default.DOCUMENT_NODE;
            }
        },
        {
            key: "nodeValue",
            get: function() {
                return null;
            }
        },
        {
            key: "textContent",
            get: // $FlowExpectedError[incompatible-extend] This is defined as returning string in Node, but it's actually null in Document.
            function() {
                return null;
            }
        }
    ]);
    return ReactNativeDocument;
}(_ReadOnlyNode.default);
function createDocumentElement(rootTag, ownerDocument) {
    // In the case of the document object, React does not create an instance
    // handle for it, so we create a custom one.
    var instanceHandle = (0, _ReactNativeDocumentElementInstanceHandle.createReactNativeDocumentElementInstanceHandle)();
    // $FlowExpectedError[incompatible-type]
    var rootTagIsNumber = rootTag;
    // $FlowExpectedError[incompatible-type]
    var viewConfig = null;
    var documentElement = new _ReactNativeElement.default(rootTagIsNumber, viewConfig, instanceHandle, ownerDocument);
    // The root shadow node was created ahead of time without an instance
    // handle, so we need to link them now.
    var rootShadowNode = _NativeDOM.default.linkRootNode(rootTag, instanceHandle);
    (0, _ReactNativeDocumentElementInstanceHandle.setNativeElementReferenceForReactNativeDocumentElementInstanceHandle)(instanceHandle, rootShadowNode);
    (0, _ReactNativeDocumentElementInstanceHandle.setPublicInstanceForReactNativeDocumentElementInstanceHandle)(instanceHandle, documentElement);
    return documentElement;
}
function createReactNativeDocument(rootTag) {
    var instanceHandle = (0, _ReactNativeDocumentInstanceHandle.createReactNativeDocumentInstanceHandle)(rootTag);
    var document = new ReactNativeDocument(rootTag, instanceHandle);
    return document;
}


}),
8778: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _TextInputState = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7273));
var _FabricUIManager = __webpack_require__(4697);
var _ReactNativeAttributePayload = __webpack_require__(39825);
var _warnForStyleProps = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91360));
var _NodeInternals = __webpack_require__(67166);
var _ReadOnlyElement = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(43170));
var _NativeDOM = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67548));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var noop = ()=>{};
// Ideally, this class would be exported as-is, but this implementation is
// significantly slower than the existing `ReactFabricHostComponent`.
// This is a very hot code path (this class is instantiated once per rendered
// host component in the tree) and we can't regress performance here.
//
// This implementation is slower because this is a subclass and we have to call
// super(), which is a very slow operation the way that Babel transforms it at
// the moment.
//
// The optimization we're doing is using an old-style function constructor,
// where we're not required to use `super()`, and we make that constructor
// extend this class so it inherits all the methods and it sets the class
// hierarchy correctly.
//
// An alternative implementation was to implement the constructor as a function
// returning a manually constructed instance using `Object.create()` but that
// was slower than this method because the engine has to create an object than
// we then discard to create a new one.
var ReactNativeElement = /*#__PURE__*/ function(ReadOnlyElement) {
    "use strict";
    _inherits._(ReactNativeElement, ReadOnlyElement);
    function ReactNativeElement(tag, viewConfig, instanceHandle, ownerDocument) {
        _class_call_check._(this, ReactNativeElement);
        var _this;
        _this = _call_super._(this, ReactNativeElement, [
            instanceHandle,
            ownerDocument
        ]);
        _this.__nativeTag = tag;
        _this.__internalInstanceHandle = instanceHandle;
        _this.__viewConfig = viewConfig;
        return _this;
    }
    _create_class._(ReactNativeElement, [
        {
            key: "offsetHeight",
            get: function() {
                return Math.round((0, _ReadOnlyElement.getBoundingClientRect)(this, {
                    includeTransform: false
                }).height);
            }
        },
        {
            key: "offsetLeft",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var offset = _NativeDOM.default.getOffset(node);
                    return Math.round(offset[2]);
                }
                return 0;
            }
        },
        {
            key: "offsetParent",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var offset = _NativeDOM.default.getOffset(node);
                    // For children of the root node we currently return offset data
                    // but a `null` parent because the root node is not accessible
                    // in JavaScript yet.
                    if (offset[0] != null) {
                        var offsetParentInstanceHandle = offset[0];
                        var offsetParent = (0, _NodeInternals.getPublicInstanceFromInstanceHandle)(offsetParentInstanceHandle);
                        // $FlowExpectedError[incompatible-type] The value returned by `getOffset` is always an instance handle for `ReadOnlyElement`.
                        var offsetParentElement = offsetParent;
                        return offsetParentElement;
                    }
                }
                return null;
            }
        },
        {
            key: "offsetTop",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var offset = _NativeDOM.default.getOffset(node);
                    return Math.round(offset[1]);
                }
                return 0;
            }
        },
        {
            key: "offsetWidth",
            get: function() {
                return Math.round((0, _ReadOnlyElement.getBoundingClientRect)(this, {
                    includeTransform: false
                }).width);
            }
        },
        {
            /**
   * React Native compatibility methods
   */ key: "blur",
            value: function blur() {
                _TextInputState.default.blurTextInput(this);
            }
        },
        {
            key: "focus",
            value: function focus() {
                _TextInputState.default.focusTextInput(this);
            }
        },
        {
            key: "measure",
            value: function measure(callback) {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    // $FlowExpectedError[incompatible-type] This is an element instance so the native node reference is always a shadow node.
                    var shadowNode = node;
                    (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measure(shadowNode, callback);
                }
            }
        },
        {
            key: "measureInWindow",
            value: function measureInWindow(callback) {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    // $FlowExpectedError[incompatible-type] This is an element instance so the native node reference is always a shadow node.
                    var shadowNode = node;
                    (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureInWindow(shadowNode, callback);
                }
            }
        },
        {
            key: "measureLayout",
            value: function measureLayout(relativeToNativeNode, onSuccess, onFail /* currently unused */ ) {
                if (!(relativeToNativeNode instanceof ReactNativeElement)) {
                    if (false) {}
                    return;
                }
                var toStateNode = (0, _NodeInternals.getNativeElementReference)(this);
                var fromStateNode = (0, _NodeInternals.getNativeElementReference)(relativeToNativeNode);
                if (toStateNode != null && fromStateNode != null) {
                    // $FlowExpectedError[incompatible-type] This is an element instance so the native node reference is always a shadow node.
                    var toStateShadowNode = toStateNode;
                    // $FlowExpectedError[incompatible-type] This is an element instance so the native node reference is always a shadow node.
                    var fromStateShadowNode = fromStateNode;
                    (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureLayout(toStateShadowNode, fromStateShadowNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
                }
            }
        },
        {
            key: "setNativeProps",
            value: function setNativeProps(nativeProps) {
                if (false) {}
                var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this.__viewConfig.validAttributes);
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null && updatePayload != null) {
                    // $FlowExpectedError[incompatible-type] This is an element instance so the native node reference is always a shadow node.
                    var shadowNode = node;
                    (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).setNativeProps(shadowNode, updatePayload);
                }
            }
        }
    ]);
    return ReactNativeElement;
}(_ReadOnlyElement.default);
function replaceConstructorWithoutSuper(ReactNativeElementClass) {
    // Alternative constructor just implemented to provide a better performance than
    // calling super() in the original class.
    // eslint-disable-next-line no-shadow
    function ReactNativeElement(tag, viewConfig, internalInstanceHandle, ownerDocument) {
        // Inlined from `ReadOnlyNode`
        (0, _NodeInternals.setOwnerDocument)(this, ownerDocument);
        (0, _NodeInternals.setInstanceHandle)(this, internalInstanceHandle);
        this.__nativeTag = tag;
        this.__internalInstanceHandle = internalInstanceHandle;
        this.__viewConfig = viewConfig;
    }
    ReactNativeElement.prototype = ReactNativeElementClass.prototype;
    // $FlowExpectedError[incompatible-return]
    return ReactNativeElement;
}
var _default = replaceConstructorWithoutSuper(ReactNativeElement);


}),
36853: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReadOnlyCharacterData;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _NodeInternals = __webpack_require__(67166);
var _Traversal = __webpack_require__(22608);
var _ReadOnlyNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61525));
var _NativeDOM = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67548));
var ReadOnlyCharacterData = /*#__PURE__*/ function(ReadOnlyNode) {
    "use strict";
    _inherits._(ReadOnlyCharacterData, ReadOnlyNode);
    function ReadOnlyCharacterData() {
        _class_call_check._(this, ReadOnlyCharacterData);
        return _call_super._(this, ReadOnlyCharacterData, arguments);
    }
    _create_class._(ReadOnlyCharacterData, [
        {
            key: "nextElementSibling",
            get: function() {
                return (0, _Traversal.getElementSibling)(this, 'next');
            }
        },
        {
            key: "previousElementSibling",
            get: function() {
                return (0, _Traversal.getElementSibling)(this, 'previous');
            }
        },
        {
            key: "data",
            get: function() {
                var node = (0, _NodeInternals.getNativeTextReference)(this);
                if (node != null) {
                    return _NativeDOM.default.getTextContent(node);
                }
                return '';
            }
        },
        {
            key: "length",
            get: function() {
                return this.data.length;
            }
        },
        {
            key: "textContent",
            get: /**
   * @override
   */ function() {
                return this.data;
            }
        },
        {
            key: "nodeValue",
            get: /**
   * @override
   */ function() {
                return this.data;
            }
        },
        {
            key: "substringData",
            value: function substringData(offset, count) {
                var data = this.data;
                if (offset < 0) {
                    throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`);
                }
                if (offset > data.length) {
                    throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`);
                }
                var adjustedCount = count < 0 || count > data.length ? data.length : count;
                return data.slice(offset, offset + adjustedCount);
            }
        }
    ]);
    return ReadOnlyCharacterData;
}(_ReadOnlyNode.default);


}),
43170: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return ReadOnlyElement;
    },
    getBoundingClientRect: function() {
        return getBoundingClientRect;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _DOMRect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49388));
var _HTMLCollection = __webpack_require__(13037);
var _NodeInternals = __webpack_require__(67166);
var _Traversal = __webpack_require__(22608);
var _ReadOnlyNode = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(61525));
var _NativeDOM = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67548));
var ReadOnlyElement = /*#__PURE__*/ function(ReadOnlyNode) {
    "use strict";
    _inherits._(ReadOnlyElement, ReadOnlyNode);
    function ReadOnlyElement() {
        _class_call_check._(this, ReadOnlyElement);
        return _call_super._(this, ReadOnlyElement, arguments);
    }
    _create_class._(ReadOnlyElement, [
        {
            key: "childElementCount",
            get: function() {
                return getChildElements(this).length;
            }
        },
        {
            key: "children",
            get: function() {
                return (0, _HTMLCollection.createHTMLCollection)(getChildElements(this));
            }
        },
        {
            key: "clientHeight",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var innerSize = _NativeDOM.default.getInnerSize(node);
                    return innerSize[1];
                }
                return 0;
            }
        },
        {
            key: "clientLeft",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var borderSize = _NativeDOM.default.getBorderWidth(node);
                    return borderSize[3];
                }
                return 0;
            }
        },
        {
            key: "clientTop",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var borderSize = _NativeDOM.default.getBorderWidth(node);
                    return borderSize[0];
                }
                return 0;
            }
        },
        {
            key: "clientWidth",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var innerSize = _NativeDOM.default.getInnerSize(node);
                    return innerSize[0];
                }
                return 0;
            }
        },
        {
            key: "firstElementChild",
            get: function() {
                var childElements = getChildElements(this);
                if (childElements.length === 0) {
                    return null;
                }
                return childElements[0];
            }
        },
        {
            key: "id",
            get: function() {
                var _instanceHandle_stateNode_canonical, _instanceHandle_stateNode;
                var instanceHandle = (0, _NodeInternals.getInstanceHandle)(this);
                // TODO: migrate off this private React API
                // $FlowExpectedError[incompatible-use]
                var props = instanceHandle === null || instanceHandle === void 0 ? void 0 : (_instanceHandle_stateNode = instanceHandle.stateNode) === null || _instanceHandle_stateNode === void 0 ? void 0 : (_instanceHandle_stateNode_canonical = _instanceHandle_stateNode.canonical) === null || _instanceHandle_stateNode_canonical === void 0 ? void 0 : _instanceHandle_stateNode_canonical.currentProps;
                return (props === null || props === void 0 ? void 0 : props.id) ?? (props === null || props === void 0 ? void 0 : props.nativeID) ?? '';
            }
        },
        {
            key: "lastElementChild",
            get: function() {
                var childElements = getChildElements(this);
                if (childElements.length === 0) {
                    return null;
                }
                return childElements[childElements.length - 1];
            }
        },
        {
            key: "nextElementSibling",
            get: function() {
                return (0, _Traversal.getElementSibling)(this, 'next');
            }
        },
        {
            key: "nodeName",
            get: function() {
                return this.tagName;
            }
        },
        {
            key: "nodeType",
            get: function() {
                return _ReadOnlyNode.default.ELEMENT_NODE;
            }
        },
        {
            key: "nodeValue",
            get: function() {
                return null;
            },
            set: function(value) {}
        },
        {
            key: "previousElementSibling",
            get: function() {
                return (0, _Traversal.getElementSibling)(this, 'previous');
            }
        },
        {
            key: "scrollHeight",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var scrollSize = _NativeDOM.default.getScrollSize(node);
                    return scrollSize[1];
                }
                return 0;
            }
        },
        {
            key: "scrollLeft",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var scrollPosition = _NativeDOM.default.getScrollPosition(node);
                    return scrollPosition[0];
                }
                return 0;
            }
        },
        {
            key: "scrollTop",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var scrollPosition = _NativeDOM.default.getScrollPosition(node);
                    return scrollPosition[1];
                }
                return 0;
            }
        },
        {
            key: "scrollWidth",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    var scrollSize = _NativeDOM.default.getScrollSize(node);
                    return scrollSize[0];
                }
                return 0;
            }
        },
        {
            key: "tagName",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    return _NativeDOM.default.getTagName(node);
                }
                return '';
            }
        },
        {
            key: "textContent",
            get: function() {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    return _NativeDOM.default.getTextContent(node);
                }
                return '';
            }
        },
        {
            key: "getBoundingClientRect",
            value: function getBoundingClientRect1() {
                return getBoundingClientRect(this, {
                    includeTransform: true
                });
            }
        },
        {
            /**
   * Pointer Capture APIs
   */ key: "hasPointerCapture",
            value: function hasPointerCapture(pointerId) {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    return _NativeDOM.default.hasPointerCapture(node, pointerId);
                }
                return false;
            }
        },
        {
            key: "setPointerCapture",
            value: function setPointerCapture(pointerId) {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    _NativeDOM.default.setPointerCapture(node, pointerId);
                }
            }
        },
        {
            key: "releasePointerCapture",
            value: function releasePointerCapture(pointerId) {
                var node = (0, _NodeInternals.getNativeElementReference)(this);
                if (node != null) {
                    _NativeDOM.default.releasePointerCapture(node, pointerId);
                }
            }
        }
    ]);
    return ReadOnlyElement;
}(_ReadOnlyNode.default);
function getChildElements(node) {
    // $FlowIssue[incompatible-call]
    return (0, _ReadOnlyNode.getChildNodes)(node).filter((childNode)=>childNode instanceof ReadOnlyElement);
}
function getBoundingClientRect(element, ref) {
    var includeTransform = ref.includeTransform;
    var node = (0, _NodeInternals.getNativeElementReference)(element);
    if (node != null) {
        var rect = _NativeDOM.default.getBoundingClientRect(node, includeTransform);
        return new _DOMRect.default(rect[0], rect[1], rect[2], rect[3]);
    }
    // Empty rect if any of the above failed
    return new _DOMRect.default(0, 0, 0, 0);
}


}),
61525: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return ReadOnlyNode;
    },
    getChildNodes: function() {
        return getChildNodes;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _sliced_to_array = __webpack_require__(78474);
var _ReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31022));
var _NodeList = __webpack_require__(89648);
var _NodeInternals = __webpack_require__(67166);
var _NativeDOM = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67548));
var ReadOnlyNode = /*#__PURE__*/ function() {
    "use strict";
    function ReadOnlyNode(instanceHandle, // This will be null for the document node itself.
    ownerDocument) {
        _class_call_check._(this, ReadOnlyNode);
        // This constructor is inlined in `ReactNativeElement` so if you modify
        // this make sure that their implementation stays in sync.
        (0, _NodeInternals.setOwnerDocument)(this, ownerDocument);
        (0, _NodeInternals.setInstanceHandle)(this, instanceHandle);
    }
    _create_class._(ReadOnlyNode, [
        {
            key: "childNodes",
            get: function() {
                var childNodes = getChildNodes(this);
                return (0, _NodeList.createNodeList)(childNodes);
            }
        },
        {
            key: "firstChild",
            get: function() {
                var childNodes = getChildNodes(this);
                if (childNodes.length === 0) {
                    return null;
                }
                return childNodes[0];
            }
        },
        {
            key: "isConnected",
            get: function() {
                var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
                if (shadowNode == null) {
                    return false;
                }
                return _NativeDOM.default.isConnected(shadowNode);
            }
        },
        {
            key: "lastChild",
            get: function() {
                var childNodes = getChildNodes(this);
                if (childNodes.length === 0) {
                    return null;
                }
                return childNodes[childNodes.length - 1];
            }
        },
        {
            key: "nextSibling",
            get: function() {
                var _getNodeSiblingsAndPosition = _sliced_to_array._(getNodeSiblingsAndPosition(this), 2), siblings = _getNodeSiblingsAndPosition[0], position = _getNodeSiblingsAndPosition[1];
                if (position === siblings.length - 1) {
                    // this node is the last child of its parent, so there is no next sibling.
                    return null;
                }
                return siblings[position + 1];
            }
        },
        {
            key: "nodeName",
            get: /**
   * @abstract
   */ function() {
                throw new TypeError('`nodeName` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
            }
        },
        {
            key: "nodeType",
            get: /**
   * @abstract
   */ function() {
                throw new TypeError('`nodeType` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
            }
        },
        {
            key: "nodeValue",
            get: /**
   * @abstract
   */ function() {
                throw new TypeError('`nodeValue` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
            }
        },
        {
            key: "ownerDocument",
            get: function() {
                return (0, _NodeInternals.getOwnerDocument)(this);
            }
        },
        {
            key: "parentElement",
            get: function() {
                var parentNode = this.parentNode;
                if (parentNode instanceof getReadOnlyElementClass()) {
                    return parentNode;
                }
                return null;
            }
        },
        {
            key: "parentNode",
            get: function() {
                var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
                if (shadowNode == null) {
                    return null;
                }
                var parentInstanceHandle = _NativeDOM.default.getParentNode(shadowNode);
                if (parentInstanceHandle == null) {
                    return null;
                }
                return (0, _NodeInternals.getPublicInstanceFromInstanceHandle)(parentInstanceHandle) ?? null;
            }
        },
        {
            key: "previousSibling",
            get: function() {
                var _getNodeSiblingsAndPosition = _sliced_to_array._(getNodeSiblingsAndPosition(this), 2), siblings = _getNodeSiblingsAndPosition[0], position = _getNodeSiblingsAndPosition[1];
                if (position === 0) {
                    // this node is the first child of its parent, so there is no previous sibling.
                    return null;
                }
                return siblings[position - 1];
            }
        },
        {
            key: "textContent",
            get: /**
   * @abstract
   */ function() {
                throw new TypeError('`textContent` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
            }
        },
        {
            key: "compareDocumentPosition",
            value: function compareDocumentPosition(otherNode) {
                // Quick check to avoid having to call into Fabric if the nodes are the same.
                if (otherNode === this) {
                    return 0;
                }
                var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
                var otherShadowNode = (0, _NodeInternals.getNativeNodeReference)(otherNode);
                if (shadowNode == null || otherShadowNode == null) {
                    return ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED;
                }
                return _NativeDOM.default.compareDocumentPosition(shadowNode, otherShadowNode);
            }
        },
        {
            key: "contains",
            value: function contains(otherNode) {
                if (otherNode === this) {
                    return true;
                }
                var position = this.compareDocumentPosition(otherNode);
                // eslint-disable-next-line no-bitwise
                return (position & ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY) !== 0;
            }
        },
        {
            key: "getRootNode",
            value: function getRootNode() {
                if (_ReactNativeFeatureFlags.enableDOMDocumentAPI()) {
                    if (this.isConnected) {
                        // If this is the document node, then the root node is itself.
                        return this.ownerDocument ?? this;
                    }
                    return this;
                } else {
                    // eslint-disable-next-line consistent-this
                    var lastKnownParent = this;
                    var nextPossibleParent = this.parentNode;
                    while(nextPossibleParent != null){
                        lastKnownParent = nextPossibleParent;
                        nextPossibleParent = nextPossibleParent.parentNode;
                    }
                    return lastKnownParent;
                }
            }
        },
        {
            key: "hasChildNodes",
            value: function hasChildNodes() {
                return getChildNodes(this).length > 0;
            }
        }
    ]);
    return ReadOnlyNode;
}();
/*
   * Node types, as returned by the `nodeType` property.
   */ /**
   * Type of Element, HTMLElement and ReactNativeElement instances.
   */ ReadOnlyNode.ELEMENT_NODE = 1;
/**
   * Currently Unused in React Native.
   */ ReadOnlyNode.ATTRIBUTE_NODE = 2;
/**
   * Text nodes.
   */ ReadOnlyNode.TEXT_NODE = 3;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.CDATA_SECTION_NODE = 4;
/**
   * @deprecated
   */ ReadOnlyNode.ENTITY_REFERENCE_NODE = 5;
/**
   * @deprecated
   */ ReadOnlyNode.ENTITY_NODE = 6;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.PROCESSING_INSTRUCTION_NODE = 7;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.COMMENT_NODE = 8;
/**
   * Document nodes.
   */ ReadOnlyNode.DOCUMENT_NODE = 9;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.DOCUMENT_TYPE_NODE = 10;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.DOCUMENT_FRAGMENT_NODE = 11;
/**
   * @deprecated
   */ ReadOnlyNode.NOTATION_NODE = 12;
/*
   * Document position flags. Used to check the return value of
   * `compareDocumentPosition()`.
   */ /**
   * Both nodes are in different documents.
   */ ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED = 1;
/**
   * `otherNode` precedes the node in either a pre-order depth-first traversal of a tree containing both
   * (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor)
   * or (if they are disconnected) in an arbitrary but consistent ordering.
   */ ReadOnlyNode.DOCUMENT_POSITION_PRECEDING = 2;
/**
   * `otherNode` follows the node in either a pre-order depth-first traversal of a tree containing both
   * (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor)
   * or (if they are disconnected) in an arbitrary but consistent ordering.
   */ ReadOnlyNode.DOCUMENT_POSITION_FOLLOWING = 4;
/**
   * `otherNode` is an ancestor of the node.
   */ ReadOnlyNode.DOCUMENT_POSITION_CONTAINS = 8;
/**
   * `otherNode` is a descendant of the node.
   */ ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY = 16;
/**
   * @deprecated Unused in React Native.
   */ ReadOnlyNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
function getChildNodes(node) {
    var shadowNode = (0, _NodeInternals.getNativeNodeReference)(node);
    if (shadowNode == null) {
        return [];
    }
    var childNodeInstanceHandles = _NativeDOM.default.getChildNodes(shadowNode);
    return childNodeInstanceHandles.map((instanceHandle)=>(0, _NodeInternals.getPublicInstanceFromInstanceHandle)(instanceHandle)).filter(Boolean);
}
function getNodeSiblingsAndPosition(node) {
    var parent = node.parentNode;
    if (parent == null) {
        // This node is the root or it's disconnected.
        return [
            [
                node
            ],
            0
        ];
    }
    var siblings = getChildNodes(parent);
    var position = siblings.indexOf(node);
    if (position === -1) {
        throw new TypeError("Missing node in parent's child node list");
    }
    return [
        siblings,
        position
    ];
}
var ReadOnlyElementClass;
function getReadOnlyElementClass() {
    if (ReadOnlyElementClass == null) {
        // We initialize this lazily to avoid a require cycle.
        ReadOnlyElementClass = (__webpack_require__(43170)/* ["default"] */["default"]);
    }
    return ReadOnlyElementClass;
}


}),
38523: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // flowlint unsafe-getters-setters:off
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReadOnlyText;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _ReadOnlyCharacterData = /*#__PURE__*/ _interop_require_default._(__webpack_require__(36853));
var _ReadOnlyNode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61525));
var ReadOnlyText = /*#__PURE__*/ function(ReadOnlyCharacterData) {
    "use strict";
    _inherits._(ReadOnlyText, ReadOnlyCharacterData);
    function ReadOnlyText() {
        _class_call_check._(this, ReadOnlyText);
        return _call_super._(this, ReadOnlyText, arguments);
    }
    _create_class._(ReadOnlyText, [
        {
            key: "nodeName",
            get: /**
   * @override
   */ function() {
                return '#text';
            }
        },
        {
            key: "nodeType",
            get: /**
   * @override
   */ function() {
                return _ReadOnlyNode.default.TEXT_NODE;
            }
        }
    ]);
    return ReadOnlyText;
}(_ReadOnlyCharacterData.default);


}),
67166: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getInstanceHandle: function() {
        return getInstanceHandle;
    },
    getNativeElementReference: function() {
        return getNativeElementReference;
    },
    getNativeNodeReference: function() {
        return getNativeNodeReference;
    },
    getNativeTextReference: function() {
        return getNativeTextReference;
    },
    getOwnerDocument: function() {
        return getOwnerDocument;
    },
    getPublicInstanceFromInstanceHandle: function() {
        return getPublicInstanceFromInstanceHandle;
    },
    setInstanceHandle: function() {
        return setInstanceHandle;
    },
    setOwnerDocument: function() {
        return setOwnerDocument;
    }
});
var _ReactNativeDocumentElementInstanceHandle = __webpack_require__(16661);
var _ReactNativeDocumentInstanceHandle = __webpack_require__(34056);
// document node managed by React Native
var RendererProxy;
function getRendererProxy() {
    if (RendererProxy == null) {
        // Lazy import Fabric here to avoid DOM Node APIs classes from having side-effects.
        // With a static import we can't use these classes for Paper-only variants.
        RendererProxy = __webpack_require__(46513);
    }
    return RendererProxy;
}
var INSTANCE_HANDLE_KEY = Symbol('internalInstanceHandle');
var OWNER_DOCUMENT_KEY = Symbol('ownerDocument');
function getInstanceHandle(node) {
    // $FlowExpectedError[prop-missing]
    return node[INSTANCE_HANDLE_KEY];
}
function setInstanceHandle(node, instanceHandle) {
    // $FlowExpectedError[prop-missing]
    node[INSTANCE_HANDLE_KEY] = instanceHandle;
}
function getOwnerDocument(node) {
    // $FlowExpectedError[prop-missing]
    return node[OWNER_DOCUMENT_KEY] ?? null;
}
function setOwnerDocument(node, ownerDocument) {
    // $FlowExpectedError[prop-missing]
    node[OWNER_DOCUMENT_KEY] = ownerDocument;
}
function getPublicInstanceFromInstanceHandle(instanceHandle) {
    if ((0, _ReactNativeDocumentInstanceHandle.isReactNativeDocumentInstanceHandle)(instanceHandle)) {
        return (0, _ReactNativeDocumentInstanceHandle.getPublicInstanceFromReactNativeDocumentInstanceHandle)(instanceHandle);
    }
    if ((0, _ReactNativeDocumentElementInstanceHandle.isReactNativeDocumentElementInstanceHandle)(instanceHandle)) {
        return (0, _ReactNativeDocumentElementInstanceHandle.getPublicInstanceFromReactNativeDocumentElementInstanceHandle)(instanceHandle);
    }
    var mixedPublicInstance = getRendererProxy().getPublicInstanceFromInternalInstanceHandle(instanceHandle);
    // $FlowExpectedError[incompatible-return] React defines public instances as "mixed" because it can't access the definition from React Native.
    return mixedPublicInstance;
}
function getNativeNodeReference(node) {
    var instanceHandle = getInstanceHandle(node);
    if ((0, _ReactNativeDocumentInstanceHandle.isReactNativeDocumentInstanceHandle)(instanceHandle)) {
        return (0, _ReactNativeDocumentInstanceHandle.getNativeNodeReferenceFromReactNativeDocumentInstanceHandle)(instanceHandle);
    }
    if ((0, _ReactNativeDocumentElementInstanceHandle.isReactNativeDocumentElementInstanceHandle)(instanceHandle)) {
        return (0, _ReactNativeDocumentElementInstanceHandle.getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle)(instanceHandle);
    }
    // $FlowExpectedError[incompatible-return]
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
}
function getNativeElementReference(node) {
    // $FlowExpectedError[incompatible-cast] We know ReadOnlyElement instances provide InternalInstanceHandle
    var instanceHandle = getInstanceHandle(node);
    // $FlowExpectedError[incompatible-return]
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
}
function getNativeTextReference(node) {
    // $FlowExpectedError[incompatible-cast] We know ReadOnlyText instances provide InternalInstanceHandle
    var instanceHandle = getInstanceHandle(node);
    // $FlowExpectedError[incompatible-return]
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
}


}),
16661: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createReactNativeDocumentElementInstanceHandle: function() {
        return createReactNativeDocumentElementInstanceHandle;
    },
    getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle: function() {
        return getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle;
    },
    getPublicInstanceFromReactNativeDocumentElementInstanceHandle: function() {
        return getPublicInstanceFromReactNativeDocumentElementInstanceHandle;
    },
    isReactNativeDocumentElementInstanceHandle: function() {
        return isReactNativeDocumentElementInstanceHandle;
    },
    setNativeElementReferenceForReactNativeDocumentElementInstanceHandle: function() {
        return setNativeElementReferenceForReactNativeDocumentElementInstanceHandle;
    },
    setPublicInstanceForReactNativeDocumentElementInstanceHandle: function() {
        return setPublicInstanceForReactNativeDocumentElementInstanceHandle;
    }
});
var _class_call_check = __webpack_require__(8864);
var ReactNativeDocumentElementInstanceHandleImpl = function ReactNativeDocumentElementInstanceHandleImpl() {
    "use strict";
    _class_call_check._(this, ReactNativeDocumentElementInstanceHandleImpl);
};
function createReactNativeDocumentElementInstanceHandle() {
    return new ReactNativeDocumentElementInstanceHandleImpl();
}
function getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle.nativeElementReference;
}
function setNativeElementReferenceForReactNativeDocumentElementInstanceHandle(instanceHandle, nativeElementReference) {
    instanceHandle.nativeElementReference = nativeElementReference;
}
function getPublicInstanceFromReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle.publicInstance;
}
function setPublicInstanceForReactNativeDocumentElementInstanceHandle(instanceHandle, publicInstance) {
    instanceHandle.publicInstance = publicInstance;
}
function isReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle instanceof ReactNativeDocumentElementInstanceHandleImpl;
}


}),
34056: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createReactNativeDocumentInstanceHandle: function() {
        return createReactNativeDocumentInstanceHandle;
    },
    getNativeNodeReferenceFromReactNativeDocumentInstanceHandle: function() {
        return getNativeNodeReferenceFromReactNativeDocumentInstanceHandle;
    },
    getPublicInstanceFromReactNativeDocumentInstanceHandle: function() {
        return getPublicInstanceFromReactNativeDocumentInstanceHandle;
    },
    isReactNativeDocumentInstanceHandle: function() {
        return isReactNativeDocumentInstanceHandle;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(46513));
function createReactNativeDocumentInstanceHandle(rootTag) {
    return rootTag;
}
function getNativeNodeReferenceFromReactNativeDocumentInstanceHandle(instanceHandle) {
    return instanceHandle;
}
function getPublicInstanceFromReactNativeDocumentInstanceHandle(instanceHandle) {
    // $FlowExpectedError[incompatible-return] React defines public instances as "mixed" because it can't access the definition from React Native.
    return _RendererProxy.getPublicInstanceFromRootTag(Number(instanceHandle));
}
function isReactNativeDocumentInstanceHandle(instanceHandle) {
    // $FlowFixMe[incompatible-type-guard]
    return typeof instanceHandle === 'number' && instanceHandle % 10 === 1;
}


}),
22608: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getElementSibling", ({
    enumerable: true,
    get: function() {
        return getElementSibling;
    }
}));
var _ReadOnlyNode = __webpack_require__(61525);
// We initialize this lazily to avoid a require cycle
// (`ReadOnlyElement` also depends on `Traversal`).
var ReadOnlyElementClass;
function getElementSibling(node, direction) {
    var parent = node.parentNode;
    if (parent == null) {
        // This node is the root or it's disconnected.
        return null;
    }
    var childNodes = (0, _ReadOnlyNode.getChildNodes)(parent);
    var startPosition = childNodes.indexOf(node);
    if (startPosition === -1) {
        return null;
    }
    var increment = direction === 'next' ? 1 : -1;
    var position = startPosition + increment;
    if (ReadOnlyElementClass == null) {
        // We initialize this lazily to avoid a require cycle.
        ReadOnlyElementClass = (__webpack_require__(43170)/* ["default"] */["default"]);
    }
    while(childNodes[position] != null && !(childNodes[position] instanceof ReadOnlyElementClass)){
        position = position + increment;
    }
    return childNodes[position] ?? null;
}


}),
13037: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createHTMLCollection: function() {
        return createHTMLCollection;
    },
    default: function() {
        return HTMLCollection;
    }
});
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _ArrayLikeUtils = __webpack_require__(43270);
var _length = /*#__PURE__*/ _class_private_field_loose_key._("_length");
var HTMLCollection = /*#__PURE__*/ function() {
    "use strict";
    function HTMLCollection(elements) {
        _class_call_check._(this, HTMLCollection);
        Object.defineProperty(this, _length, {
            writable: true,
            value: void 0
        });
        for(var i = 0; i < elements.length; i++){
            Object.defineProperty(this, i, {
                value: elements[i],
                enumerable: true,
                configurable: false,
                writable: false
            });
        }
        _class_private_field_loose_base._(this, _length)[_length] = elements.length;
    }
    _create_class._(HTMLCollection, [
        {
            key: "length",
            get: function() {
                return _class_private_field_loose_base._(this, _length)[_length];
            }
        },
        {
            key: "item",
            value: function item(index) {
                if (index < 0 || index >= _class_private_field_loose_base._(this, _length)[_length]) {
                    return null;
                }
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                return arrayLike[index];
            }
        },
        {
            /**
   * @deprecated Unused in React Native.
   */ key: "namedItem",
            value: function namedItem(name) {
                return null;
            }
        },
        {
            // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
            key: Symbol.iterator,
            value: function() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        }
    ]);
    return HTMLCollection;
}();
function createHTMLCollection(elements) {
    return new HTMLCollection(elements);
}


}),
89648: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createNodeList: function() {
        return createNodeList;
    },
    default: function() {
        return NodeList;
    }
});
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _ArrayLikeUtils = __webpack_require__(43270);
var _length = /*#__PURE__*/ _class_private_field_loose_key._("_length");
var NodeList = /*#__PURE__*/ function() {
    "use strict";
    function NodeList(elements) {
        _class_call_check._(this, NodeList);
        Object.defineProperty(this, _length, {
            writable: true,
            value: void 0
        });
        for(var i = 0; i < elements.length; i++){
            Object.defineProperty(this, i, {
                value: elements[i],
                writable: false
            });
        }
        _class_private_field_loose_base._(this, _length)[_length] = elements.length;
    }
    _create_class._(NodeList, [
        {
            key: "length",
            get: function() {
                return _class_private_field_loose_base._(this, _length)[_length];
            }
        },
        {
            key: "item",
            value: function item(index) {
                if (index < 0 || index >= _class_private_field_loose_base._(this, _length)[_length]) {
                    return null;
                }
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                return arrayLike[index];
            }
        },
        {
            key: "entries",
            value: function entries() {
                return (0, _ArrayLikeUtils.createEntriesIterator)(this);
            }
        },
        {
            key: "forEach",
            value: function forEach(callbackFn, thisArg) {
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                for(var index = 0; index < _class_private_field_loose_base._(this, _length)[_length]; index++){
                    if (thisArg == null) {
                        callbackFn(arrayLike[index], index, this);
                    } else {
                        callbackFn.call(thisArg, arrayLike[index], index, this);
                    }
                }
            }
        },
        {
            key: "keys",
            value: function keys() {
                return (0, _ArrayLikeUtils.createKeyIterator)(this);
            }
        },
        {
            key: "values",
            value: function values() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        },
        {
            // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
            key: Symbol.iterator,
            value: function() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        }
    ]);
    return NodeList;
}();
function createNodeList(elements) {
    return new NodeList(elements);
}


}),
49388: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRect;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _DOMRectReadOnly = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50339));
var DOMRect = /*#__PURE__*/ function(DOMRectReadOnly) {
    "use strict";
    _inherits._(DOMRect, DOMRectReadOnly);
    function DOMRect() {
        _class_call_check._(this, DOMRect);
        return _call_super._(this, DOMRect, arguments);
    }
    _create_class._(DOMRect, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRect`'s origin.
   */ function() {
                return this.__getInternalX();
            },
            set: function(x) {
                this.__setInternalX(x);
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRect`'s origin.
   */ function() {
                return this.__getInternalY();
            },
            set: function(y) {
                this.__setInternalY(y);
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRect`.
   */ function() {
                return this.__getInternalWidth();
            },
            set: function(width) {
                this.__setInternalWidth(width);
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRect`.
   */ function() {
                return this.__getInternalHeight();
            },
            set: function(height) {
                this.__setInternalHeight(height);
            }
        }
    ], [
        {
            key: "fromRect",
            value: /**
   * Creates a new `DOMRect` object with a given location and dimensions.
   */ function fromRect(rect) {
                if (!rect) {
                    return new DOMRect();
                }
                return new DOMRect(rect.x, rect.y, rect.width, rect.height);
            }
        }
    ]);
    return DOMRect;
}(_wrap_native_super._(_DOMRectReadOnly.default));


}),
95460: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDOMRectList: function() {
        return createDOMRectList;
    },
    default: function() {
        return DOMRectList;
    }
});
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _ArrayLikeUtils = __webpack_require__(43270);
var _length = /*#__PURE__*/ _class_private_field_loose_key._("_length");
var DOMRectList = /*#__PURE__*/ function() {
    "use strict";
    function DOMRectList(elements) {
        _class_call_check._(this, DOMRectList);
        Object.defineProperty(this, _length, {
            writable: true,
            value: void 0
        });
        for(var i = 0; i < elements.length; i++){
            Object.defineProperty(this, i, {
                value: elements[i],
                enumerable: true,
                configurable: false,
                writable: false
            });
        }
        _class_private_field_loose_base._(this, _length)[_length] = elements.length;
    }
    _create_class._(DOMRectList, [
        {
            key: "length",
            get: function() {
                return _class_private_field_loose_base._(this, _length)[_length];
            }
        },
        {
            key: "item",
            value: function item(index) {
                if (index < 0 || index >= _class_private_field_loose_base._(this, _length)[_length]) {
                    return null;
                }
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                return arrayLike[index];
            }
        },
        {
            // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
            key: Symbol.iterator,
            value: function() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        }
    ]);
    return DOMRectList;
}();
function createDOMRectList(elements) {
    return new DOMRectList(elements);
}


}),
50339: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ // flowlint sketchy-null:off, unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRectReadOnly;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
function castToNumber(value) {
    return value ? Number(value) : 0;
}
var _x = /*#__PURE__*/ _class_private_field_loose_key._("_x"), _y = /*#__PURE__*/ _class_private_field_loose_key._("_y"), _width = /*#__PURE__*/ _class_private_field_loose_key._("_width"), _height = /*#__PURE__*/ _class_private_field_loose_key._("_height");
var DOMRectReadOnly = /*#__PURE__*/ function() {
    "use strict";
    function DOMRectReadOnly(x, y, width, height) {
        _class_call_check._(this, DOMRectReadOnly);
        Object.defineProperty(this, _x, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _y, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _width, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _height, {
            writable: true,
            value: void 0
        });
        this.__setInternalX(x);
        this.__setInternalY(y);
        this.__setInternalWidth(width);
        this.__setInternalHeight(height);
    }
    _create_class._(DOMRectReadOnly, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRectReadOnly`'s origin.
   */ function() {
                return _class_private_field_loose_base._(this, _x)[_x];
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRectReadOnly`'s origin.
   */ function() {
                return _class_private_field_loose_base._(this, _y)[_y];
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRectReadOnly`.
   */ function() {
                return _class_private_field_loose_base._(this, _width)[_width];
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRectReadOnly`.
   */ function() {
                return _class_private_field_loose_base._(this, _height)[_height];
            }
        },
        {
            key: "top",
            get: /**
   * Returns the top coordinate value of the `DOMRect` (has the same value as `y`, or `y + height` if `height` is negative).
   */ function() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y + height;
                }
                return y;
            }
        },
        {
            key: "right",
            get: /**
   * Returns the right coordinate value of the `DOMRect` (has the same value as ``x + width`, or `x` if `width` is negative).
   */ function() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x;
                }
                return x + width;
            }
        },
        {
            key: "bottom",
            get: /**
   * Returns the bottom coordinate value of the `DOMRect` (has the same value as `y + height`, or `y` if `height` is negative).
   */ function() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y;
                }
                return y + height;
            }
        },
        {
            key: "left",
            get: /**
   * Returns the left coordinate value of the `DOMRect` (has the same value as `x`, or `x + width` if `width` is negative).
   */ function() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x + width;
                }
                return x;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var _this = this, x = _this.x, y = _this.y, width = _this.width, height = _this.height, top = _this.top, left = _this.left, bottom = _this.bottom, right = _this.right;
                return {
                    x,
                    y,
                    width,
                    height,
                    top,
                    left,
                    bottom,
                    right
                };
            }
        },
        {
            key: "__getInternalX",
            value: function __getInternalX() {
                return _class_private_field_loose_base._(this, _x)[_x];
            }
        },
        {
            key: "__getInternalY",
            value: function __getInternalY() {
                return _class_private_field_loose_base._(this, _y)[_y];
            }
        },
        {
            key: "__getInternalWidth",
            value: function __getInternalWidth() {
                return _class_private_field_loose_base._(this, _width)[_width];
            }
        },
        {
            key: "__getInternalHeight",
            value: function __getInternalHeight() {
                return _class_private_field_loose_base._(this, _height)[_height];
            }
        },
        {
            key: "__setInternalX",
            value: function __setInternalX(x) {
                _class_private_field_loose_base._(this, _x)[_x] = castToNumber(x);
            }
        },
        {
            key: "__setInternalY",
            value: function __setInternalY(y) {
                _class_private_field_loose_base._(this, _y)[_y] = castToNumber(y);
            }
        },
        {
            key: "__setInternalWidth",
            value: function __setInternalWidth(width) {
                _class_private_field_loose_base._(this, _width)[_width] = castToNumber(width);
            }
        },
        {
            key: "__setInternalHeight",
            value: function __setInternalHeight(height) {
                _class_private_field_loose_base._(this, _height)[_height] = castToNumber(height);
            }
        }
    ], [
        {
            key: "fromRect",
            value: /**
   * Creates a new `DOMRectReadOnly` object with a given location and dimensions.
   */ function fromRect(rect) {
                if (!rect) {
                    return new DOMRectReadOnly();
                }
                return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
            }
        }
    ]);
    return DOMRectReadOnly;
}();


}),
84095: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module implements the `MessageEvent` interface from the HTML spec.
 * See https://html.spec.whatwg.org/multipage/comms.html#messageevent.
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MessageEvent;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var MessageEvent = /*#__PURE__*/ function(Event) {
    "use strict";
    _inherits._(MessageEvent, Event);
    function MessageEvent(type, options) {
        _class_call_check._(this, MessageEvent);
        var _this;
        _this = _call_super._(this, MessageEvent, [
            type,
            options
        ]);
        _this._data = options === null || options === void 0 ? void 0 : options.data;
        _this._origin = String((options === null || options === void 0 ? void 0 : options.origin) ?? '');
        _this._lastEventId = String((options === null || options === void 0 ? void 0 : options.lastEventId) ?? '');
        return _this;
    }
    _create_class._(MessageEvent, [
        {
            key: "data",
            get: function() {
                return this._data;
            }
        },
        {
            key: "origin",
            get: function() {
                return this._origin;
            }
        },
        {
            key: "lastEventId",
            get: function() {
                return this._lastEventId;
            }
        }
    ]);
    return MessageEvent;
}(_wrap_native_super._(_Event.default));


}),
45233: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EventCounts: function() {
        return EventCounts;
    },
    PerformanceEventTiming: function() {
        return PerformanceEventTiming;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _wrap_native_super = __webpack_require__(30753);
var _Utilities = __webpack_require__(74561);
var _PerformanceEntry = __webpack_require__(78097);
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
var _processingStart = /*#__PURE__*/ _class_private_field_loose_key._("_processingStart"), _processingEnd = /*#__PURE__*/ _class_private_field_loose_key._("_processingEnd"), _interactionId = /*#__PURE__*/ _class_private_field_loose_key._("_interactionId");
var PerformanceEventTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceEventTiming, PerformanceEntry);
    function PerformanceEventTiming(init) {
        _class_call_check._(this, PerformanceEventTiming);
        var _this;
        _this = _call_super._(this, PerformanceEventTiming, [
            {
                name: init.name,
                entryType: 'event',
                startTime: init.startTime ?? 0,
                duration: init.duration ?? 0
            }
        ]), Object.defineProperty(_this, _processingStart, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _processingEnd, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _interactionId, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _processingStart)[_processingStart] = init.processingStart ?? 0;
        _class_private_field_loose_base._(_this, _processingEnd)[_processingEnd] = init.processingEnd ?? 0;
        _class_private_field_loose_base._(_this, _interactionId)[_interactionId] = init.interactionId ?? 0;
        return _this;
    }
    _create_class._(PerformanceEventTiming, [
        {
            key: "processingStart",
            get: function() {
                return _class_private_field_loose_base._(this, _processingStart)[_processingStart];
            }
        },
        {
            key: "processingEnd",
            get: function() {
                return _class_private_field_loose_base._(this, _processingEnd)[_processingEnd];
            }
        },
        {
            key: "interactionId",
            get: function() {
                return _class_private_field_loose_base._(this, _interactionId)[_interactionId];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return _object_spread_props._(_object_spread._({}, _get._(_get_prototype_of._(PerformanceEventTiming.prototype), "toJSON", this).call(this)), {
                    processingStart: _class_private_field_loose_base._(this, _processingStart)[_processingStart],
                    processingEnd: _class_private_field_loose_base._(this, _processingEnd)[_processingEnd],
                    interactionId: _class_private_field_loose_base._(this, _interactionId)[_interactionId]
                });
            }
        }
    ]);
    return PerformanceEventTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var cachedEventCounts;
function getCachedEventCounts() {
    var _NativePerformance_getEventCounts;
    if (cachedEventCounts) {
        return cachedEventCounts;
    }
    if (!_NativePerformance.default || !(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEventCounts)) {
        (0, _Utilities.warnNoNativePerformance)();
        cachedEventCounts = new Map();
        return cachedEventCounts;
    }
    var eventCounts = new Map(((_NativePerformance_getEventCounts = _NativePerformance.default.getEventCounts) === null || _NativePerformance_getEventCounts === void 0 ? void 0 : _NativePerformance_getEventCounts.call(_NativePerformance.default)) ?? []);
    cachedEventCounts = eventCounts;
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(()=>{
        // To be consistent with the calls to the API from the same task,
        // but also not to refetch the data from native too often,
        // schedule to invalidate the cache later,
        // after the current task is guaranteed to have finished.
        cachedEventCounts = null;
    });
    return eventCounts;
}
var EventCounts = /*#__PURE__*/ function() {
    "use strict";
    function EventCounts() {
        _class_call_check._(this, EventCounts);
    }
    _create_class._(EventCounts, [
        {
            key: "size",
            get: function() {
                return getCachedEventCounts().size;
            }
        },
        {
            key: "entries",
            value: function entries() {
                return getCachedEventCounts().entries();
            }
        },
        {
            key: "forEach",
            value: function forEach(callback) {
                return getCachedEventCounts().forEach(callback);
            }
        },
        {
            key: "get",
            value: function get(key) {
                return getCachedEventCounts().get(key);
            }
        },
        {
            key: "has",
            value: function has(key) {
                return getCachedEventCounts().has(key);
            }
        },
        {
            key: "keys",
            value: function keys() {
                return getCachedEventCounts().keys();
            }
        },
        {
            key: "values",
            value: function values() {
                return getCachedEventCounts().values();
            }
        }
    ]);
    return EventCounts;
}();


}),
49529: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PerformanceLongTaskTiming: function() {
        return PerformanceLongTaskTiming;
    },
    TaskAttributionTiming: function() {
        return TaskAttributionTiming;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _wrap_native_super = __webpack_require__(30753);
var _PerformanceEntry = __webpack_require__(78097);
var TaskAttributionTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(TaskAttributionTiming, PerformanceEntry);
    function TaskAttributionTiming() {
        _class_call_check._(this, TaskAttributionTiming);
        return _call_super._(this, TaskAttributionTiming, arguments);
    }
    return TaskAttributionTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var EMPTY_ATTRIBUTION = Object.preventExtensions([]);
var PerformanceLongTaskTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceLongTaskTiming, PerformanceEntry);
    function PerformanceLongTaskTiming() {
        _class_call_check._(this, PerformanceLongTaskTiming);
        return _call_super._(this, PerformanceLongTaskTiming, arguments);
    }
    _create_class._(PerformanceLongTaskTiming, [
        {
            key: "attribution",
            get: function() {
                return EMPTY_ATTRIBUTION;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return _object_spread_props._(_object_spread._({}, _get._(_get_prototype_of._(PerformanceLongTaskTiming.prototype), "toJSON", this).call(this)), {
                    attribution: this.attribution
                });
            }
        }
    ]);
    return PerformanceLongTaskTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
28991: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with JS memory information. This is returned by the performance.memory API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MemoryInfo;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _jsHeapSizeLimit = /*#__PURE__*/ _class_private_field_loose_key._("_jsHeapSizeLimit"), _totalJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_totalJSHeapSize"), _usedJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_usedJSHeapSize");
var MemoryInfo = /*#__PURE__*/ function() {
    "use strict";
    function MemoryInfo(memoryInfo) {
        _class_call_check._(this, MemoryInfo);
        Object.defineProperty(this, _jsHeapSizeLimit, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _totalJSHeapSize, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _usedJSHeapSize, {
            writable: true,
            value: void 0
        });
        if (memoryInfo != null) {
            _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit] = memoryInfo.jsHeapSizeLimit;
            _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize] = memoryInfo.totalJSHeapSize;
            _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize] = memoryInfo.usedJSHeapSize;
        }
    }
    _create_class._(MemoryInfo, [
        {
            key: "jsHeapSizeLimit",
            get: /**
   * The maximum size of the heap, in bytes, that is available to the context
   */ function() {
                return _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit];
            }
        },
        {
            key: "totalJSHeapSize",
            get: /**
   * The total allocated heap size, in bytes
   */ function() {
                return _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize];
            }
        },
        {
            key: "usedJSHeapSize",
            get: /**
   * The currently active segment of JS heap, in bytes.
   */ function() {
                return _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize];
            }
        }
    ]);
    return MemoryInfo;
}();


}),
2453: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Performance;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _EventTiming = __webpack_require__(45233);
var _RawPerformanceEntry = __webpack_require__(4383);
var _Utilities = __webpack_require__(74561);
var _MemoryInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28991));
var _ReactNativeStartupTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63439));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
var _UserTiming = __webpack_require__(58488);
var getCurrentTimeStamp = (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.now) ?? __webpack_require__.g.nativePerformanceNow ?? (()=>Date.now());
var ENTRY_TYPES_AVAILABLE_FROM_TIMELINE = [
    'mark',
    'measure'
];
var Performance = /*#__PURE__*/ function() {
    "use strict";
    function Performance() {
        _class_call_check._(this, Performance);
        this.eventCounts = new _EventTiming.EventCounts();
    }
    _create_class._(Performance, [
        {
            key: "memory",
            get: // Get the current JS memory information.
            function() {
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getSimpleMemoryInfo) {
                    // JSI API implementations may have different variants of names for the JS
                    // heap information we need here. We will parse the result based on our
                    // guess of the implementation for now.
                    var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
                    if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
                        // We got memory information from Hermes
                        var totalJSHeapSize = memoryInfo.hermes_heapSize, usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
                        return new _MemoryInfo.default({
                            jsHeapSizeLimit: null,
                            totalJSHeapSize,
                            usedJSHeapSize
                        });
                    } else {
                        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation
                        return new _MemoryInfo.default();
                    }
                }
                return new _MemoryInfo.default();
            }
        },
        {
            key: "rnStartupTiming",
            get: // Startup metrics is not used in web, but only in React Native.
            function() {
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getReactNativeStartupTiming) {
                    var _NativePerformance_getReactNativeStartupTiming = _NativePerformance.default.getReactNativeStartupTiming(), startTime = _NativePerformance_getReactNativeStartupTiming.startTime, endTime = _NativePerformance_getReactNativeStartupTiming.endTime, initializeRuntimeStart = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeStart, initializeRuntimeEnd = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeEnd, executeJavaScriptBundleEntryPointStart = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointStart, executeJavaScriptBundleEntryPointEnd = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointEnd;
                    return new _ReactNativeStartupTiming.default({
                        startTime,
                        endTime,
                        initializeRuntimeStart,
                        initializeRuntimeEnd,
                        executeJavaScriptBundleEntryPointStart,
                        executeJavaScriptBundleEntryPointEnd
                    });
                }
                return new _ReactNativeStartupTiming.default();
            }
        },
        {
            key: "mark",
            value: function mark(markName, markOptions) {
                var computedStartTime;
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.markWithResult) {
                    computedStartTime = _NativePerformance.default.markWithResult(markName, markOptions === null || markOptions === void 0 ? void 0 : markOptions.startTime);
                } else {
                    (0, _Utilities.warnNoNativePerformance)();
                    computedStartTime = performance.now();
                }
                return new _UserTiming.PerformanceMark(markName, {
                    startTime: computedStartTime,
                    detail: markOptions === null || markOptions === void 0 ? void 0 : markOptions.detail
                });
            }
        },
        {
            key: "clearMarks",
            value: function clearMarks(markName) {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMarks)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return;
                }
                _NativePerformance.default.clearMarks(markName);
            }
        },
        {
            key: "measure",
            value: function measure(measureName, startMarkOrOptions, endMark) {
                var options;
                var startMarkName, endMarkName = endMark, duration, startTime = 0, endTime = 0;
                if (typeof startMarkOrOptions === 'string') {
                    startMarkName = startMarkOrOptions;
                    options = {};
                } else if (startMarkOrOptions !== undefined) {
                    options = startMarkOrOptions;
                    if (endMark !== undefined) {
                        throw new TypeError("Performance.measure: Can't have both options and endMark");
                    }
                    if (options.start === undefined && options.end === undefined) {
                        throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
                    }
                    if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
                        throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
                    }
                    if (typeof options.start === 'number') {
                        startTime = options.start;
                    } else {
                        startMarkName = options.start;
                    }
                    if (typeof options.end === 'number') {
                        endTime = options.end;
                    } else {
                        endMarkName = options.end;
                    }
                    duration = options.duration ?? duration;
                }
                var computedStartTime = startTime;
                var computedDuration = duration;
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.measureWithResult) {
                    var ref;
                    ref = _sliced_to_array._(_NativePerformance.default.measureWithResult(measureName, startTime, endTime, duration, startMarkName, endMarkName), 2), computedStartTime = ref[0], computedDuration = ref[1], ref;
                } else {
                    (0, _Utilities.warnNoNativePerformance)();
                }
                var measure = new _UserTiming.PerformanceMeasure(measureName, {
                    startTime: computedStartTime,
                    duration: computedDuration ?? 0,
                    detail: options === null || options === void 0 ? void 0 : options.detail
                });
                return measure;
            }
        },
        {
            key: "clearMeasures",
            value: function clearMeasures(measureName) {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMeasures)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return;
                }
                _NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMeasures(measureName);
            }
        },
        {
            /**
   * Returns a double, measured in milliseconds.
   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
   */ key: "now",
            value: function now() {
                return getCurrentTimeStamp();
            }
        },
        {
            /**
   * An extension that allows to get back to JS all currently logged marks/measures
   * (in our case, be it from JS or native), see
   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface
   */ key: "getEntries",
            value: function getEntries() {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntries)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        },
        {
            key: "getEntriesByType",
            value: function getEntriesByType(entryType) {
                if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
                    console.warn('Deprecated API for given entry type.');
                    return [];
                }
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntriesByType)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntriesByType((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        },
        {
            key: "getEntriesByName",
            value: function getEntriesByName(entryName, entryType) {
                if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
                    console.warn('Deprecated API for given entry type.');
                    return [];
                }
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntriesByName)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntriesByName(entryName, entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined).map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        }
    ]);
    return Performance;
}();


}),
78097: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PerformanceEntry", ({
    enumerable: true,
    get: function() {
        return PerformanceEntry;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _name = /*#__PURE__*/ _class_private_field_loose_key._("_name"), _entryType = /*#__PURE__*/ _class_private_field_loose_key._("_entryType"), _startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _duration = /*#__PURE__*/ _class_private_field_loose_key._("_duration");
var PerformanceEntry = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceEntry(init) {
        _class_call_check._(this, PerformanceEntry);
        Object.defineProperty(this, _name, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _entryType, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _duration, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _name)[_name] = init.name;
        _class_private_field_loose_base._(this, _entryType)[_entryType] = init.entryType;
        _class_private_field_loose_base._(this, _startTime)[_startTime] = init.startTime;
        _class_private_field_loose_base._(this, _duration)[_duration] = init.duration;
    }
    _create_class._(PerformanceEntry, [
        {
            key: "name",
            get: function() {
                return _class_private_field_loose_base._(this, _name)[_name];
            }
        },
        {
            key: "entryType",
            get: function() {
                return _class_private_field_loose_base._(this, _entryType)[_entryType];
            }
        },
        {
            key: "startTime",
            get: function() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "duration",
            get: function() {
                return _class_private_field_loose_base._(this, _duration)[_duration];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    name: _class_private_field_loose_base._(this, _name)[_name],
                    entryType: _class_private_field_loose_base._(this, _entryType)[_entryType],
                    startTime: _class_private_field_loose_base._(this, _startTime)[_startTime],
                    duration: _class_private_field_loose_base._(this, _duration)[_duration]
                };
            }
        }
    ]);
    return PerformanceEntry;
}();


}),
63439: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with RN startup timing information.
// This is returned by the performance.reactNativeStartup API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReactNativeStartupTiming;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var // All time information here are in ms. The values may be null if not provided.
// We do NOT match web spect here for two reasons:
// 1. The `ReactNativeStartupTiming` is non-standard API
// 2. The timing information is relative to the time origin, which means `0` has valid meaning
_startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _endTime = /*#__PURE__*/ _class_private_field_loose_key._("_endTime"), _initializeRuntimeStart = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeStart"), _initializeRuntimeEnd = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeEnd"), _executeJavaScriptBundleEntryPointStart = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointStart"), _executeJavaScriptBundleEntryPointEnd = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointEnd");
var ReactNativeStartupTiming = /*#__PURE__*/ function() {
    "use strict";
    function ReactNativeStartupTiming(startUpTiming) {
        _class_call_check._(this, ReactNativeStartupTiming);
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _endTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeEnd, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointEnd, {
            writable: true,
            value: void 0
        });
        if (startUpTiming != null) {
            _class_private_field_loose_base._(this, _startTime)[_startTime] = startUpTiming.startTime;
            _class_private_field_loose_base._(this, _endTime)[_endTime] = startUpTiming.endTime;
            _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart] = startUpTiming.initializeRuntimeStart;
            _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd] = startUpTiming.initializeRuntimeEnd;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart] = startUpTiming.executeJavaScriptBundleEntryPointStart;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd] = startUpTiming.executeJavaScriptBundleEntryPointEnd;
        }
    }
    _create_class._(ReactNativeStartupTiming, [
        {
            key: "startTime",
            get: /**
   * Start time of the RN app startup process. This is provided by the platform by implementing the `ReactMarker.setAppStartTime` API in the native platform code.
   */ function() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "endTime",
            get: /**
   * End time of the RN app startup process. This is equal to `executeJavaScriptBundleEntryPointEnd`.
   */ function() {
                return _class_private_field_loose_base._(this, _endTime)[_endTime];
            }
        },
        {
            key: "initializeRuntimeStart",
            get: /**
   * Start time when RN runtime get initialized. This is when RN infra first kicks in app startup process.
   */ function() {
                return _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart];
            }
        },
        {
            key: "initializeRuntimeEnd",
            get: /**
   * End time when RN runtime get initialized. This is the last marker before ends of the app startup process.
   */ function() {
                return _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointStart",
            get: /**
   * Start time of JS bundle being executed. This indicates the RN JS bundle is loaded and start to be evaluated.
   */ function() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointEnd",
            get: /**
   * End time of JS bundle being executed. This indicates all the synchronous entry point jobs are finished.
   */ function() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd];
            }
        }
    ]);
    return ReactNativeStartupTiming;
}();


}),
58488: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PerformanceMark: function() {
        return PerformanceMark;
    },
    PerformanceMeasure: function() {
        return PerformanceMeasure;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var _PerformanceEntry = __webpack_require__(78097);
var _detail = /*#__PURE__*/ _class_private_field_loose_key._("_detail");
var PerformanceMark = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMark, PerformanceEntry);
    function PerformanceMark(markName, markOptions) {
        _class_call_check._(this, PerformanceMark);
        var _this;
        _this = _call_super._(this, PerformanceMark, [
            {
                name: markName,
                entryType: 'mark',
                startTime: (markOptions === null || markOptions === void 0 ? void 0 : markOptions.startTime) ?? performance.now(),
                duration: 0
            }
        ]), Object.defineProperty(_this, _detail, {
            writable: true,
            value: void 0
        });
        if (markOptions) {
            _class_private_field_loose_base._(_this, _detail)[_detail] = markOptions.detail;
        }
        return _this;
    }
    _create_class._(PerformanceMark, [
        {
            key: "detail",
            get: function() {
                return _class_private_field_loose_base._(this, _detail)[_detail];
            }
        }
    ]);
    return PerformanceMark;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var _detail1 = /*#__PURE__*/ _class_private_field_loose_key._("_detail");
var PerformanceMeasure = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMeasure, PerformanceEntry);
    function PerformanceMeasure(measureName, measureOptions) {
        _class_call_check._(this, PerformanceMeasure);
        var _this;
        _this = _call_super._(this, PerformanceMeasure, [
            {
                name: measureName,
                entryType: 'measure',
                startTime: measureOptions.startTime,
                duration: measureOptions.duration
            }
        ]), Object.defineProperty(_this, _detail1, {
            writable: true,
            value: void 0
        });
        if (measureOptions) {
            _class_private_field_loose_base._(_this, _detail1)[_detail1] = measureOptions.detail;
        }
        return _this;
    }
    _create_class._(PerformanceMeasure, [
        {
            key: "detail",
            get: function() {
                return _class_private_field_loose_base._(this, _detail1)[_detail1];
            }
        }
    ]);
    return PerformanceMeasure;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
4383: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RawPerformanceEntryTypeValues: function() {
        return RawPerformanceEntryTypeValues;
    },
    performanceEntryTypeToRaw: function() {
        return performanceEntryTypeToRaw;
    },
    rawToPerformanceEntry: function() {
        return rawToPerformanceEntry;
    },
    rawToPerformanceEntryType: function() {
        return rawToPerformanceEntryType;
    }
});
var _EventTiming = __webpack_require__(45233);
var _LongTasks = __webpack_require__(49529);
var _PerformanceEntry = __webpack_require__(78097);
var _UserTiming = __webpack_require__(58488);
var RawPerformanceEntryTypeValues = {
    MARK: 1,
    MEASURE: 2,
    EVENT: 3,
    LONGTASK: 4
};
function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
        return new _EventTiming.PerformanceEventTiming({
            name: entry.name,
            startTime: entry.startTime,
            duration: entry.duration,
            processingStart: entry.processingStart,
            processingEnd: entry.processingEnd,
            interactionId: entry.interactionId
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {
        return new _LongTasks.PerformanceLongTaskTiming({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {
        return new _UserTiming.PerformanceMark(entry.name, {
            startTime: entry.startTime
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {
        return new _UserTiming.PerformanceMeasure(entry.name, {
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else {
        return new _PerformanceEntry.PerformanceEntry({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    }
}
function rawToPerformanceEntryType(type) {
    switch(type){
        case RawPerformanceEntryTypeValues.MARK:
            return 'mark';
        case RawPerformanceEntryTypeValues.MEASURE:
            return 'measure';
        case RawPerformanceEntryTypeValues.EVENT:
            return 'event';
        case RawPerformanceEntryTypeValues.LONGTASK:
            return 'longtask';
        default:
            throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
    }
}
function performanceEntryTypeToRaw(type) {
    switch(type){
        case 'mark':
            return RawPerformanceEntryTypeValues.MARK;
        case 'measure':
            return RawPerformanceEntryTypeValues.MEASURE;
        case 'event':
            return RawPerformanceEntryTypeValues.EVENT;
        case 'longtask':
            return RawPerformanceEntryTypeValues.LONGTASK;
        default:
            // Verify exhaustive check with Flow
            type;
            throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
    }
}


}),
74561: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "warnNoNativePerformance", ({
    enumerable: true,
    get: function() {
        return warnNoNativePerformance;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _warnOnce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93473));
function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
}


}),
43270: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * This definition is different from the current built-in type `$ArrayLike`
 * provided by Flow, in that this is an interface and that one is an object.
 *
 * The difference is important because, when using objects, Flow thinks
 * a `length` property would be copied over when using the spread operator,
 * which is incorrect.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createEntriesIterator: function() {
        return createEntriesIterator;
    },
    createKeyIterator: function() {
        return createKeyIterator;
    },
    createValueIterator: function() {
        return createValueIterator;
    }
});
function* createValueIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield arrayLike[i];
    }
}
function* createKeyIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield i;
    }
}
function* createEntriesIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield [
            i,
            arrayLike[i]
        ];
    }
}


}),
7795: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module implements the `CloseEvent` interface from `WebSocket`.
 * See https://websockets.spec.whatwg.org/#the-closeevent-interface.
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return CloseEvent;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var CloseEvent = /*#__PURE__*/ function(Event) {
    "use strict";
    _inherits._(CloseEvent, Event);
    function CloseEvent(type, options) {
        _class_call_check._(this, CloseEvent);
        var _this;
        _this = _call_super._(this, CloseEvent, [
            type,
            options
        ]);
        _this._wasClean = Boolean(options === null || options === void 0 ? void 0 : options.wasClean);
        _this._code = Number(options === null || options === void 0 ? void 0 : options.code) || 0;
        _this._reason = (options === null || options === void 0 ? void 0 : options.reason) != null ? String(options.reason) : '';
        return _this;
    }
    _create_class._(CloseEvent, [
        {
            key: "wasClean",
            get: function() {
                return this._wasClean;
            }
        },
        {
            key: "code",
            get: function() {
                return this._code;
            }
        },
        {
            key: "reason",
            get: function() {
                return this._reason;
            }
        }
    ]);
    return CloseEvent;
}(_wrap_native_super._(_Event.default));


}),
29294: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * This module implements the `ProgressEvent` interface from `XMLHttpRequest`.
 * See https://xhr.spec.whatwg.org/#interface-progressevent.
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ProgressEvent;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _Event = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27380));
var ProgressEvent = /*#__PURE__*/ function(Event) {
    "use strict";
    _inherits._(ProgressEvent, Event);
    function ProgressEvent(type, options) {
        _class_call_check._(this, ProgressEvent);
        var _this;
        _this = _call_super._(this, ProgressEvent, [
            type,
            options
        ]);
        _this._lengthComputable = Boolean(options === null || options === void 0 ? void 0 : options.lengthComputable);
        _this._loaded = Number(options === null || options === void 0 ? void 0 : options.loaded) || 0;
        _this._total = Number(options === null || options === void 0 ? void 0 : options.total) || 0;
        return _this;
    }
    _create_class._(ProgressEvent, [
        {
            key: "lengthComputable",
            get: function() {
                return this._lengthComputable;
            }
        },
        {
            key: "loaded",
            get: function() {
                return this._loaded;
            }
        },
        {
            key: "total",
            get: function() {
                return this._total;
            }
        }
    ]);
    return ProgressEvent;
}(_wrap_native_super._(_Event.default));


}),
2745: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _indexcjscjs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42319));
var _prefetchplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93076));
var _resolverplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92998));
var _coreplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9065));
var __module_federation_runtime_plugins__ = [
    (0, _prefetchplugin.default)(),
    (0, _resolverplugin.default)(),
    (0, _coreplugin.default)()
];
var __module_federation_remote_infos__ = {};
var __module_federation_container_name__ = "HostApp";
var __module_federation_share_strategy__ = "loaded-first";
if ((__webpack_require__.initializeSharingData || __webpack_require__.initializeExposesData) && __webpack_require__.federation) {
    var __webpack_require___remotesLoadingData, __webpack_require___remotesLoadingData1, __webpack_require___initializeSharingData, __webpack_require___consumesLoadingData, __webpack_require___consumesLoadingData1, __webpack_require___initializeExposesData, __webpack_require___consumesLoadingData2;
    var override = (obj, key, value)=>{
        if (!obj) return;
        if (obj[key]) obj[key] = value;
    };
    var merge = (obj, key, fn)=>{
        var value = fn();
        if (Array.isArray(value)) {
            var _obj_key;
            var _obj, _key;
            var _;
            (_ = (_obj = obj)[_key = key]) !== null && _ !== void 0 ? _ : _obj[_key] = [];
            (_obj_key = obj[key]).push.apply(_obj_key, _to_consumable_array._(value));
        } else if (typeof value === "object" && value !== null) {
            var _obj1, _key1;
            var _1;
            (_1 = (_obj1 = obj)[_key1 = key]) !== null && _1 !== void 0 ? _1 : _obj1[_key1] = {};
            Object.assign(obj[key], value);
        }
    };
    var early = (obj, key, initial)=>{
        var _obj, _key;
        var _;
        (_ = (_obj = obj)[_key = key]) !== null && _ !== void 0 ? _ : _obj[_key] = initial();
    };
    var __webpack_require___remotesLoadingData_chunkMapping;
    var remotesLoadingChunkMapping = (__webpack_require___remotesLoadingData_chunkMapping = (__webpack_require___remotesLoadingData = __webpack_require__.remotesLoadingData) === null || __webpack_require___remotesLoadingData === void 0 ? void 0 : __webpack_require___remotesLoadingData.chunkMapping) !== null && __webpack_require___remotesLoadingData_chunkMapping !== void 0 ? __webpack_require___remotesLoadingData_chunkMapping : {};
    var __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping;
    var remotesLoadingModuleIdToRemoteDataMapping = (__webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping = (__webpack_require___remotesLoadingData1 = __webpack_require__.remotesLoadingData) === null || __webpack_require___remotesLoadingData1 === void 0 ? void 0 : __webpack_require___remotesLoadingData1.moduleIdToRemoteDataMapping) !== null && __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping !== void 0 ? __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping : {};
    var __webpack_require___initializeSharingData_scopeToSharingDataMapping;
    var initializeSharingScopeToInitDataMapping = (__webpack_require___initializeSharingData_scopeToSharingDataMapping = (__webpack_require___initializeSharingData = __webpack_require__.initializeSharingData) === null || __webpack_require___initializeSharingData === void 0 ? void 0 : __webpack_require___initializeSharingData.scopeToSharingDataMapping) !== null && __webpack_require___initializeSharingData_scopeToSharingDataMapping !== void 0 ? __webpack_require___initializeSharingData_scopeToSharingDataMapping : {};
    var __webpack_require___consumesLoadingData_chunkMapping;
    var consumesLoadingChunkMapping = (__webpack_require___consumesLoadingData_chunkMapping = (__webpack_require___consumesLoadingData = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData === void 0 ? void 0 : __webpack_require___consumesLoadingData.chunkMapping) !== null && __webpack_require___consumesLoadingData_chunkMapping !== void 0 ? __webpack_require___consumesLoadingData_chunkMapping : {};
    var __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping;
    var consumesLoadingModuleToConsumeDataMapping = (__webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping = (__webpack_require___consumesLoadingData1 = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData1 === void 0 ? void 0 : __webpack_require___consumesLoadingData1.moduleIdToConsumeDataMapping) !== null && __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping !== void 0 ? __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping : {};
    var consumesLoadinginstalledModules = {};
    var initializeSharingInitPromises = [];
    var initializeSharingInitTokens = {};
    var containerShareScope = (__webpack_require___initializeExposesData = __webpack_require__.initializeExposesData) === null || __webpack_require___initializeExposesData === void 0 ? void 0 : __webpack_require___initializeExposesData.shareScope;
    for(var key in _indexcjscjs.default){
        __webpack_require__.federation[key] = _indexcjscjs.default[key];
    }
    early(__webpack_require__.federation, "consumesLoadingModuleToHandlerMapping", ()=>{
        var consumesLoadingModuleToHandlerMapping = {};
        for (var ref of Object.entries(consumesLoadingModuleToConsumeDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), moduleId = _ref[0], data = _ref[1];
            consumesLoadingModuleToHandlerMapping[moduleId] = {
                getter: data.fallback,
                shareInfo: {
                    shareConfig: {
                        fixedDependencies: false,
                        requiredVersion: data.requiredVersion,
                        strictVersion: data.strictVersion,
                        singleton: data.singleton,
                        eager: data.eager
                    },
                    scope: [
                        data.shareScope
                    ]
                },
                shareKey: data.shareKey
            };
        }
        return consumesLoadingModuleToHandlerMapping;
    });
    early(__webpack_require__.federation, "initOptions", ()=>({}));
    early(__webpack_require__.federation.initOptions, "name", ()=>__module_federation_container_name__);
    early(__webpack_require__.federation.initOptions, "shareStrategy", ()=>__module_federation_share_strategy__);
    early(__webpack_require__.federation.initOptions, "shared", ()=>{
        var shared = {};
        for (var ref of Object.entries(initializeSharingScopeToInitDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), scope = _ref[0], stages = _ref[1];
            for (var stage of stages){
                if (typeof stage === "object" && stage !== null) {
                    var name = stage.name, version = stage.version, factory = stage.factory, eager = stage.eager, singleton = stage.singleton, requiredVersion = stage.requiredVersion, strictVersion = stage.strictVersion;
                    var shareConfig = {};
                    var isValidValue = function(val) {
                        return typeof val !== "undefined";
                    };
                    if (isValidValue(singleton)) {
                        shareConfig.singleton = singleton;
                    }
                    if (isValidValue(requiredVersion)) {
                        shareConfig.requiredVersion = requiredVersion;
                    }
                    if (isValidValue(eager)) {
                        shareConfig.eager = eager;
                    }
                    if (isValidValue(strictVersion)) {
                        shareConfig.strictVersion = strictVersion;
                    }
                    var options = {
                        version,
                        scope: [
                            scope
                        ],
                        shareConfig,
                        get: factory
                    };
                    if (shared[name]) {
                        shared[name].push(options);
                    } else {
                        shared[name] = [
                            options
                        ];
                    }
                }
            }
        }
        return shared;
    });
    merge(__webpack_require__.federation.initOptions, "remotes", ()=>Object.values(__module_federation_remote_infos__).flat().filter((remote)=>remote.externalType === "script"));
    merge(__webpack_require__.federation.initOptions, "plugins", ()=>__module_federation_runtime_plugins__);
    early(__webpack_require__.federation, "bundlerRuntimeOptions", ()=>({}));
    early(__webpack_require__.federation.bundlerRuntimeOptions, "remotes", ()=>({}));
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "chunkMapping", ()=>remotesLoadingChunkMapping);
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "idToExternalAndNameMapping", ()=>{
        var remotesLoadingIdToExternalAndNameMappingMapping = {};
        for (var ref of Object.entries(remotesLoadingModuleIdToRemoteDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), moduleId = _ref[0], data = _ref[1];
            remotesLoadingIdToExternalAndNameMappingMapping[moduleId] = [
                data.shareScope,
                data.name,
                data.externalModuleId,
                data.remoteName
            ];
        }
        return remotesLoadingIdToExternalAndNameMappingMapping;
    });
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "webpackRequire", ()=>__webpack_require__);
    merge(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "idToRemoteMap", ()=>{
        var idToRemoteMap = {};
        for (var ref of Object.entries(remotesLoadingModuleIdToRemoteDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), id = _ref[0], remoteData = _ref[1];
            var info = __module_federation_remote_infos__[remoteData.remoteName];
            if (info) idToRemoteMap[id] = info;
        }
        return idToRemoteMap;
    });
    override(__webpack_require__, "S", __webpack_require__.federation.bundlerRuntime.S);
    if (__webpack_require__.federation.attachShareScopeMap) {
        __webpack_require__.federation.attachShareScopeMap(__webpack_require__);
    }
    override(__webpack_require__.f, "remotes", (chunkId, promises)=>__webpack_require__.federation.bundlerRuntime.remotes({
            chunkId,
            promises,
            chunkMapping: remotesLoadingChunkMapping,
            idToExternalAndNameMapping: __webpack_require__.federation.bundlerRuntimeOptions.remotes.idToExternalAndNameMapping,
            idToRemoteMap: __webpack_require__.federation.bundlerRuntimeOptions.remotes.idToRemoteMap,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__.f, "consumes", (chunkId, promises)=>__webpack_require__.federation.bundlerRuntime.consumes({
            chunkId,
            promises,
            chunkMapping: consumesLoadingChunkMapping,
            moduleToHandlerMapping: __webpack_require__.federation.consumesLoadingModuleToHandlerMapping,
            installedModules: consumesLoadinginstalledModules,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "I", (name, initScope)=>__webpack_require__.federation.bundlerRuntime.I({
            shareScopeName: name,
            initScope,
            initPromises: initializeSharingInitPromises,
            initTokens: initializeSharingInitTokens,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "initContainer", (shareScope, initScope, remoteEntryInitOptions)=>__webpack_require__.federation.bundlerRuntime.initContainerEntry({
            shareScope,
            initScope,
            remoteEntryInitOptions,
            shareScopeKey: containerShareScope,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "getContainer", (module1, getScope)=>{
        var moduleMap = __webpack_require__.initializeExposesData.moduleMap;
        __webpack_require__.R = getScope;
        getScope = Object.prototype.hasOwnProperty.call(moduleMap, module1) ? moduleMap[module1]() : Promise.resolve().then(()=>{
            throw new Error('Module "' + module1 + '" does not exist in container.');
        });
        __webpack_require__.R = undefined;
        return getScope;
    });
    __webpack_require__.federation.instance = __webpack_require__.federation.runtime.init(__webpack_require__.federation.initOptions);
    if ((__webpack_require___consumesLoadingData2 = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData2 === void 0 ? void 0 : __webpack_require___consumesLoadingData2.initialConsumes) {
        __webpack_require__.federation.bundlerRuntime.installInitialConsumes({
            webpackRequire: __webpack_require__,
            installedModules: consumesLoadinginstalledModules,
            initialConsumes: __webpack_require__.consumesLoadingData.initialConsumes,
            moduleToHandlerMapping: __webpack_require__.federation.consumesLoadingModuleToHandlerMapping
        });
    }
}


}),
49402: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4931));
var _reactnative = __webpack_require__(22705);
var _runtime = __webpack_require__(44647);
var _NewAppScreen = __webpack_require__(99436);
var _reacterrorboundary = __webpack_require__(72);
var _InitScriptManager = __webpack_require__(18994);
(0, _InitScriptManager.initMiniAppScriptManager)();
var MiniApp = /*#__PURE__*/ _react.default.lazy(/*#__PURE__*/ _async_to_generator._(function*() {
    var Component = yield (0, _runtime.loadRemote)('miniapp/Root', {
        from: 'runtime'
    });
    return Component;
}));
function Section(ref) {
    var children = ref.children, title = ref.title;
    var isDarkMode = (0, _reactnative.useColorScheme)() === 'dark';
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: styles.sectionContainer,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                style: [
                    styles.sectionTitle,
                    {
                        color: isDarkMode ? _NewAppScreen.Colors.white : _NewAppScreen.Colors.black
                    }
                ],
                children: title
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                style: [
                    styles.sectionDescription,
                    {
                        color: isDarkMode ? _NewAppScreen.Colors.light : _NewAppScreen.Colors.dark
                    }
                ],
                children: children
            })
        ]
    });
}
function App() {
    var isDarkMode = (0, _reactnative.useColorScheme)() === 'dark';
    var backgroundStyle = {
        backgroundColor: isDarkMode ? _NewAppScreen.Colors.darker : _NewAppScreen.Colors.lighter
    };
    /*
   * To keep the template simple and small we're adding padding to prevent view
   * from rendering under the System UI.
   * For bigger apps the recommendation is to use `react-native-safe-area-context`:
   * https://github.com/AppAndFlow/react-native-safe-area-context
   *
   * You can read more about it here:
   * https://github.com/react-native-community/discussions-and-proposals/discussions/827
   */ var safePadding = '5%';
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: backgroundStyle,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.StatusBar, {
                barStyle: isDarkMode ? 'light-content' : 'dark-content',
                backgroundColor: backgroundStyle.backgroundColor
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.ScrollView, {
                style: backgroundStyle,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        style: {
                            paddingRight: safePadding
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewAppScreen.Header, {})
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: {
                            backgroundColor: isDarkMode ? _NewAppScreen.Colors.black : _NewAppScreen.Colors.white,
                            paddingHorizontal: safePadding,
                            paddingBottom: safePadding
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacterrorboundary.ErrorBoundary, {
                                fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                                    children: "Something went wrong"
                                }),
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.default.Suspense, {
                                    fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                                        children: "loading..."
                                    }),
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MiniApp, {})
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(Section, {
                                title: "Step One",
                                children: [
                                    "Edit ",
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                                        style: styles.highlight,
                                        children: "App.tsx"
                                    }),
                                    " to change this screen and then come back to see your edits."
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Section, {
                                title: "See Your Changes",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewAppScreen.ReloadInstructions, {})
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Section, {
                                title: "Debug",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewAppScreen.DebugInstructions, {})
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Section, {
                                title: "Learn More",
                                children: "Read the docs to discover what to do next:"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewAppScreen.LearnMoreLinks, {})
                        ]
                    })
                ]
            })
        ]
    });
}
var styles = _reactnative.StyleSheet.create({
    sectionContainer: {
        marginTop: 32,
        paddingHorizontal: 24
    },
    sectionTitle: {
        fontSize: 24,
        fontWeight: '600'
    },
    sectionDescription: {
        marginTop: 8,
        fontSize: 18,
        fontWeight: '400'
    },
    highlight: {
        fontWeight: '700'
    }
});
var _default = App;


}),
18994: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "initMiniAppScriptManager", ({
    enumerable: true,
    get: function() {
        return initMiniAppScriptManager;
    }
}));
var _runtime = __webpack_require__(44647);
var _reactnative = __webpack_require__(22705);
var _retryplugin = __webpack_require__(89802);
var initMiniAppScriptManager = ()=>{
    try {
        (0, _runtime.init)({
            name: 'HostApp',
            remotes: [
                {
                    name: 'miniapp',
                    alias: 'miniapp',
                    entry: `http://10.0.2.2:9000/${_reactnative.Platform.OS}/mf-manifest.json`
                }
            ],
            plugins: [
                (0, _retryplugin.RetryPlugin)({
                    fetch: {
                        retryTimes: 3
                    },
                    script: {}
                })
            ]
        });
    } catch (e) {
        console.log('error init mini app ', e);
    }
};


}),
5632: (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(94639);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "logo",
  type: "png",
  hash: "3cf817075ffdc798cf13c457bf4c3bc5",
  httpServerLocation: "assets/node_modules/react-native/Libraries/NewAppScreen/components",
  
  height: 512,
  width: 512,
});

}),
93359: (function (module) {
"use strict";
module.exports = JSON.parse('{"name":"RNSDK","displayName":"RNSDK"}')

}),

});
/************************************************************************/
// The module cache
var __webpack_module_cache__ = {};

// The require function
function __webpack_require__(moduleId) {

// Check if module is in cache
var cachedModule = __webpack_module_cache__[moduleId];
if (cachedModule !== undefined) {
return cachedModule.exports;
}
// Create a new module (and put it into the cache)
var module = (__webpack_module_cache__[moduleId] = {
exports: {}
});
// Execute the module function
__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);

// Return the exports of the module
return module.exports;

}

// expose the modules object (__webpack_modules__)
__webpack_require__.m = __webpack_modules__;

// expose the module cache
__webpack_require__.c = __webpack_module_cache__;

/************************************************************************/
// module_federation/runtime
!function() {

if(!__webpack_require__.federation){
    __webpack_require__.federation = {
        
chunkMatcher: function(chunkId) {
    return true;
},
rootOutputDir: "",

    };
}

}();
// webpack/runtime/create_fake_namespace_object
!function() {
var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };
var leafPrototypes;
// create a fake namespace object
// mode & 1: value is a module id, require it
// mode & 2: merge all properties of value into the ns
// mode & 4: return value when already ns object
// mode & 16: return value when it's Promise-like
// mode & 8|1: behave like require
__webpack_require__.t = function(value, mode) {
	if(mode & 1) value = this(value);
	if(mode & 8) return value;
	if(typeof value === 'object' && value) {
		if((mode & 4) && value.__esModule) return value;
		if((mode & 16) && typeof value.then === 'function') return value;
	}
	var ns = Object.create(null);
  __webpack_require__.r(ns);
	var def = {};
	leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
	for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
		Object.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; } });
	}
	def['default'] = function() { return value; };
	__webpack_require__.d(ns, def);
	return ns;
};
}();
// webpack/runtime/define_property_getters
!function() {
__webpack_require__.d = function(exports, definition) {
	for(var key in definition) {
        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
    }
};
}();
// webpack/runtime/global
!function() {
__webpack_require__.g = (function() {
	if (typeof globalThis === 'object') return globalThis;
	try {
		return this || new Function('return this')();
	} catch (e) {
		if (typeof window === 'object') return window;
	}
})();
}();
// webpack/runtime/has_own_property
!function() {
__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
}();
// webpack/runtime/make_namespace_object
!function() {
// define __esModule on exports
__webpack_require__.r = function(exports) {
	if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	}
	Object.defineProperty(exports, '__esModule', { value: true });
};
}();
// webpack/runtime/repack/guarded require
!function() {
  var inGuard = false;
  var originalWebpackRequire = __webpack_require__;
  function guardedWebpackRequire(moduleId) {
    if (!inGuard && self.ErrorUtils) {
      inGuard = true;
      let exports;
      try {
        exports = originalWebpackRequire(moduleId);
      } catch (e) {
        self.ErrorUtils.reportFatalError(e);
      }
      inGuard = false;
      return exports;
    } else {
      return originalWebpackRequire(moduleId);
    }
  }
  Object.getOwnPropertyNames(originalWebpackRequire).forEach(key => {
    guardedWebpackRequire[key] = originalWebpackRequire[key];
  });
  __webpack_require__ = guardedWebpackRequire;
}();
// webpack/runtime/repack/init
!function() {
  var repackRuntime = {
    shared: self.__repack__ && self.__repack__.shared || __webpack_require__.repack && __webpack_require__.repack.shared || {
      scriptManager: undefined
    }
  };
  __webpack_require__.repack = self.__repack__ = repackRuntime;
}();
// webpack/runtime/rspack_version
!function() {
__webpack_require__.rv = function() { return "1.3.9"; }
}();
// webpack/runtime/sharing
!function() {

__webpack_require__.S = {};
__webpack_require__.initializeSharingData = { scopeToSharingDataMapping: { "default": [{ name: "@react-native/assets-registry/path-support", version: "0.79.2", factory: function() { return function() { return __webpack_require__(82348); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "@react-native/assets-registry/registry", version: "0.79.2", factory: function() { return function() { return __webpack_require__(58258); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "@react-native/normalize-colors", version: "0.79.2", factory: function() { return function() { return __webpack_require__(35665); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "@react-native/virtualized-lists", version: "0.79.2", factory: function() { return function() { return __webpack_require__(77469); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/Image/AssetRegistry", version: "0.79.2", factory: function() { return function() { return __webpack_require__(84669); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/Image/AssetSourceResolver", version: "0.79.2", factory: function() { return function() { return __webpack_require__(77127); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/NativeComponent/NativeComponentRegistry", version: "0.79.2", factory: function() { return function() { return __webpack_require__(97267); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/NativeComponent/ViewConfigIgnore", version: "0.79.2", factory: function() { return function() { return __webpack_require__(72291); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/NewAppScreen", version: "0.79.2", factory: function() { return function() { return __webpack_require__(73909); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactNative/RendererProxy", version: "0.79.2", factory: function() { return function() { return __webpack_require__(46513); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", version: "0.79.2", factory: function() { return function() { return __webpack_require__(3135); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", version: "0.79.2", factory: function() { return function() { return __webpack_require__(53244); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/StyleSheet/processColor", version: "0.79.2", factory: function() { return function() { return __webpack_require__(23865); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/StyleSheet/processColorArray", version: "0.79.2", factory: function() { return function() { return __webpack_require__(57338); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native/src/private/featureflags/ReactNativeFeatureFlags", version: "0.79.2", factory: function() { return function() { return __webpack_require__(31022); }; }, eager: 1, singleton: 1, requiredVersion: "*" }, { name: "react-native", version: "0.79.2", factory: function() { return function() { return __webpack_require__(40815); }; }, eager: 1, singleton: 1, requiredVersion: "0.79.2" }, { name: "react", version: "19.0.0", factory: function() { return function() { return __webpack_require__(76388); }; }, eager: 1, singleton: 1, requiredVersion: "19.0.0" }] }, uniqueName: "RNSDK" };
__webpack_require__.I = __webpack_require__.I || function() { throw new Error("should have __webpack_require__.I") }

}();
// webpack/runtime/consumes_loading
!function() {

__webpack_require__.consumesLoadingData = { chunkMapping: {"main":["59990","99436","12763","50999","43798","9582","4931","36153","22705","52976","60155","16449","31927","94639","70735","95846","61536"]}, moduleIdToConsumeDataMapping: { "16449": { shareScope: "default", shareKey: "react-native/Libraries/StyleSheet/processColorArray", import: "react-native/Libraries/StyleSheet/processColorArray", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(57338); }; } }, "50999": { shareScope: "default", shareKey: "@react-native/normalize-colors", import: "@react-native/normalize-colors", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(35665); }; } }, "94639": { shareScope: "default", shareKey: "react-native/Libraries/Image/AssetRegistry", import: "react-native/Libraries/Image/AssetRegistry", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(84669); }; } }, "99436": { shareScope: "default", shareKey: "react-native/Libraries/NewAppScreen", import: "react-native/Libraries/NewAppScreen", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(73909); }; } }, "52976": { shareScope: "default", shareKey: "react-native/Libraries/ReactNative/RendererProxy", import: "react-native/Libraries/ReactNative/RendererProxy", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(46513); }; } }, "31927": { shareScope: "default", shareKey: "react-native/Libraries/NativeComponent/ViewConfigIgnore", import: "react-native/Libraries/NativeComponent/ViewConfigIgnore", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(72291); }; } }, "61536": { shareScope: "default", shareKey: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", import: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(89741); }; } }, "95846": { shareScope: "default", shareKey: "@react-native/assets-registry/path-support", import: "@react-native/assets-registry/path-support", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(82348); }; } }, "70735": { shareScope: "default", shareKey: "react-native/Libraries/NativeComponent/NativeComponentRegistry", import: "react-native/Libraries/NativeComponent/NativeComponentRegistry", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(97267); }; } }, "9582": { shareScope: "default", shareKey: "@react-native/assets-registry/registry", import: "@react-native/assets-registry/registry", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(58258); }; } }, "22705": { shareScope: "default", shareKey: "react-native", import: "react-native", requiredVersion: "0.79.2", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(40815); }; } }, "12763": { shareScope: "default", shareKey: "react-native/src/private/featureflags/ReactNativeFeatureFlags", import: "react-native/src/private/featureflags/ReactNativeFeatureFlags", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(31022); }; } }, "4931": { shareScope: "default", shareKey: "react", import: "react", requiredVersion: "19.0.0", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(76388); }; } }, "36153": { shareScope: "default", shareKey: "react-native/Libraries/StyleSheet/processColor", import: "react-native/Libraries/StyleSheet/processColor", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(23865); }; } }, "60155": { shareScope: "default", shareKey: "@react-native/virtualized-lists", import: "@react-native/virtualized-lists", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(77469); }; } }, "43798": { shareScope: "default", shareKey: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", import: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(53244); }; } }, "59990": { shareScope: "default", shareKey: "react-native/Libraries/Image/AssetSourceResolver", import: "react-native/Libraries/Image/AssetSourceResolver", requiredVersion: "*", strictVersion: false, singleton: true, eager: true, fallback: function() { return function() { return __webpack_require__(77127); }; } } }, initialConsumes: ["59990","99436","12763","50999","43798","9582","4931","36153","22705","52976","60155","16449","31927","94639","70735","95846","61536"] };

}();
/************************************************************************/
// module cache are used so entry inlining is disabled
// startup
// Load entry module and return exports
__webpack_require__(2745);
__webpack_require__(15269);
__webpack_require__(97599);
__webpack_require__(61890);
__webpack_require__(89614);
__webpack_require__(8522);
var __webpack_exports__ = __webpack_require__(79909);
})()
;//# sourceMappingURL=index.android.bundle.map